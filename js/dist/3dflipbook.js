/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 74);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
var _$ =  true ? window.jQuery : require('jquery'),
    _html2canvas =  true ? window.html2canvas : require('html2canvas'),
    _THREE =  true ? window.THREE : require('three'),
    _React =  true ? window.React : require('react'),
    _ReactDOM =  true ? window.ReactDOM : require('react-dom'),
    _PDFJS =  true ? window.pdfjsLib : require('pdfjs'),
    _tr = function _tr(s) {
  return (window.iberezansky || {}).tr && window.iberezansky.tr(s) || s;
};

exports.$ = _$;
exports.html2canvas = _html2canvas;
exports.THREE = _THREE;
exports.React = _React;
exports.ReactDOM = _ReactDOM;
exports.PDFJS = _PDFJS;
exports.tr = _tr;

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _$ =  true ? window.jQuery : require('jquery'),
    _html2canvas =  true ? window.html2canvas : require('html2canvas'),
    _THREE =  true ? window.THREE : require('three'),
    _PDFJS =  true ? window.PDFJS : require('pdfjs'),
    _tr = function _tr(s) {
  return (window.iberezansky || {}).tr && window.iberezansky.tr(s) || s;
};

if (window.FB3D_LOCALE) {
  window.iberezansky = _extends({}, window.iberezansky, {
    tr: function tr(s) {
      return (FB3D_LOCALE.dictionary || {})[s] || s;
    }
  });
}

exports.$ = _$;
exports.html2canvas = _html2canvas;
exports.THREE = _THREE;
exports.PDFJS = _PDFJS;
exports.tr = _tr;

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var BaseMathUtils = function () {
  function BaseMathUtils() {
    _classCallCheck(this, BaseMathUtils);
  }

  BaseMathUtils.sum1 = function sum1(ka, a, kb, b) {
    return [ka * a[0] + kb * b[0]];
  };

  BaseMathUtils.sum2 = function sum2(ka, a, kb, b) {
    return [ka * a[0] + kb * b[0], ka * a[1] + kb * b[1]];
  };

  BaseMathUtils.sum3 = function sum3(ka, a, kb, b) {
    return [ka * a[0] + kb * b[0], ka * a[1] + kb * b[1], ka * a[2] + kb * b[2]];
  };

  BaseMathUtils.sum4 = function sum4(ka, a, kb, b) {
    return [ka * a[0] + kb * b[0], ka * a[1] + kb * b[1], ka * a[2] + kb * b[2], ka * a[3] + kb * b[3]];
  };

  BaseMathUtils.rk4 = function rk4(dy, t, dt, y) {
    var sum = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : BaseMathUtils.sum[y.length - 1];

    var k1 = dy(t, y),
        k2 = dy(t + dt / 2, sum(1, y, dt / 2, k1)),
        k3 = dy(t + dt / 2, sum(1, y, dt / 2, k2)),
        k4 = dy(t + dt, sum(1, y, dt, k3));
    return sum(1, y, dt / 6, sum(1, sum(1, k1, 2, k2), 1, sum(2, k3, 1, k4)));
  };

  BaseMathUtils.extrapolateLinear = function extrapolateLinear(x, y, xi) {
    return y[0] + (y[1] - y[0]) / (x[1] - x[0]) * (xi - x[0]);
  };

  BaseMathUtils.interpolateLinear = function interpolateLinear(x, y, xi) {
    var yi = void 0;
    if (x[0] > x[1]) {
      x = x.reverse();
      y = y.reverse();
    }
    if (xi < x[0]) {
      yi = y[0];
    } else if (xi > x[1]) {
      yi = y[1];
    } else {
      yi = BaseMathUtils.extrapolateLinear(x, y, xi);
    }
    return yi;
  };

  BaseMathUtils.calcScale = function calcScale(srcW, srcH, dstW, dstH) {
    return dstW / srcW; // Math.min(dstW/srcW, dstH/srcH)
  };

  BaseMathUtils.mulM = function mulM(a, b) {
    var r = [];
    for (var i = 0; i < a.length; ++i) {
      r.push([]);
      for (var j = 0; j < b[0].length; ++j) {
        r[i][j] = 0;
        for (var k = 0; k < b.length; ++k) {
          r[i][j] += a[i][k] * b[k][j];
        }
      }
    }
    return r;
  };

  BaseMathUtils.transM = function transM(m) {
    var r = [];
    for (var i = 0; i < m.length; ++i) {
      for (var j = 0; j < m[0].length; ++j) {
        if (!r[j]) {
          r[j] = [];
        }
        r[j][i] = m[i][j];
      }
    }
    return r;
  };

  BaseMathUtils.mat = function mat(data) {
    var s = 0;
    for (var _iterator = data, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var x = _ref;

      s += x;
    }
    return s / data.length;
  };

  BaseMathUtils.disp = function disp(data) {
    var M = BaseMathUtils.mat(data);
    var s = 0;
    for (var _iterator2 = data, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
      var _ref2;

      if (_isArray2) {
        if (_i2 >= _iterator2.length) break;
        _ref2 = _iterator2[_i2++];
      } else {
        _i2 = _iterator2.next();
        if (_i2.done) break;
        _ref2 = _i2.value;
      }

      var x = _ref2;

      s += (x - M) * (x - M);
    }
    return s / data.length;
  };

  BaseMathUtils.predict1 = function predict1(data, num) {
    var r = [],
        l = data.length,
        D = BaseMathUtils.disp(data);
    if (D < l && l > 1) {
      var am = [],
          bm = [];
      for (var i = 0; i < l; ++i) {
        am.push([i, 1]);
        bm.push([data[i]]);
      }
      var ta = BaseMathUtils.transM(am),
          a = BaseMathUtils.mulM(ta, am),
          b = BaseMathUtils.mulM(ta, bm),
          d = a[0][0] * a[1][1] - a[1][0] * a[0][1],
          p = [-(a[0][1] * b[1][0] - b[0][0] * a[1][1]) / d, (a[0][0] * b[1][0] - a[1][0] * b[0][0]) / d];
      for (var _i3 = 0; _i3 < num; ++_i3) {
        var v = Math.round(p[0] * (_i3 + l) + p[1]);
        if (r.indexOf(v) === -1) {
          r.push(v);
        }
      }
    }
    return r;
  };

  BaseMathUtils.predict = function predict(data, num) {
    var r = [],
        l = data.length;
    var sgns = 0;
    for (var i = 0; i < l - 1; ++i) {
      sgns += Math.sign(data[i + 1] - data[i]);
    }
    if (Math.abs(sgns) <= (l - 1) % 2) {
      sgns = -1;
    } else {
      sgns = Math.sign(sgns);
    }
    for (var _i4 = 0, cur = data[l - 1]; _i4 < num && cur > 0; ++_i4) {
      cur += sgns;
      r.push(cur);
    }
    return r;
  };

  BaseMathUtils.getUnique = function getUnique() {
    return Math.ceil(1e9 * Math.random());
  };

  BaseMathUtils.setSplinePoints = function setSplinePoints(spline, ps) {
    if (spline.points.length !== ps.x.length) {
      console.warn('setSplinePoints: bad points');
    }
    for (var i = 0; i < spline.points.length; ++i) {
      spline.points[i].set(ps.x[i], ps.y[i], ps.z ? ps.z[i] : 0);
    }
  };

  BaseMathUtils.mapl2L = function mapl2L(ls, len, n, f) {
    var dL = len / (n - 1);
    var L = 0;
    for (var i = 0, d = ls[0]; i < ls.length - 1 && L < len + 0.1 * dL; ++i, d += ls[i]) {
      if (Math.abs(L - d) < Math.abs(L - d - ls[i + 1])) {
        f(i, L);
        L += dL;
      }
    }
    if (L < len + 0.1 * dL) {
      console.warn('mapl2L: ls is not enought');
    }
  };

  BaseMathUtils.det2 = function det2(a, b, c, d) {
    return a * d - b * c;
  };

  BaseMathUtils.solve2Lin = function solve2Lin(a1, b1, a2, b2) {
    var res = void 0;
    var d = BaseMathUtils.det2(a1[0], a1[1], a2[0], a2[1]);
    if (Math.abs(d) > BaseMathUtils.eps) {
      var dx = BaseMathUtils.det2(b1, a1[1], b2, a2[1]),
          dy = BaseMathUtils.det2(a1[0], b1, a2[0], b2);
      res = {
        x: dx / d,
        y: dy / d
      };
    }
    return res;
  };

  BaseMathUtils.isInsidePoly = function isInsidePoly(ps, p) {
    var done = false,
        ct = void 0;
    for (var i = 0; i < ps.length; ++i) {
      if (BaseMathUtils.v2dist(p, ps[i]) < BaseMathUtils.eps) {
        ct = 1;
        done = true;
        break;
      }
    }
    while (!done) {
      done = true;
      ct = 0;
      var np = { x: p.x + Math.random() - 0.5, y: p.y + Math.random() - 0.5 },
          rn = { x: np.x - p.x, y: np.y - p.y },
          a1 = [rn.y, -rn.x],
          b1 = p.x * rn.y - p.y * rn.x;
      for (var _i5 = 0; _i5 < ps.length; ++_i5) {
        var p0 = ps[_i5],
            p1 = ps[(_i5 + 1) % ps.length],
            n = { x: p1.x - p0.x, y: p1.y - p0.y },
            a2 = [n.y, -n.x],
            b2 = p0.x * n.y - p0.y * n.x,
            ip = BaseMathUtils.solve2Lin(a1, b1, a2, b2);
        if (ip) {
          if (BaseMathUtils.v2dist(ip, p0) < BaseMathUtils.eps || BaseMathUtils.v2dist(ip, p1) < BaseMathUtils.eps) {
            done = false;
            break;
          } else if (ip.x > Math.min(p0.x, p1.x) - BaseMathUtils.eps && ip.x < Math.max(p0.x, p1.x) + BaseMathUtils.eps && ip.y > Math.min(p0.y, p1.y) - BaseMathUtils.eps && ip.y < Math.max(p0.y, p1.y) + BaseMathUtils.eps) {
            if (BaseMathUtils.v2dist(ip, p) < BaseMathUtils.eps) {
              ct = 1;
              break;
            } else {
              var tn = { x: ip.x - p.x, y: ip.y - p.y };
              ct += tn.x * rn.x + tn.y * rn.y > 0;
            }
          }
        }
      }
    }
    return ct % 2;
  };

  BaseMathUtils.isInsideConvPoly = function isInsideConvPoly(ps, p) {
    var sg = [0, 0];
    for (var i = 0; i < ps.length; ++i) {
      var p0 = ps[i],
          p1 = ps[(i + 1) % ps.length],
          a = { x: p0.x - p.x, y: p0.y - p.y },
          b = { x: p1.x - p.x, y: p1.y - p.y };
      ++sg[(a.x * b.y - a.y * b.x < 0) + 0];
    }
    return ~sg.indexOf(ps.length);
  };

  BaseMathUtils.v2len = function v2len(v2) {
    return Math.sqrt(v2.x * v2.x + v2.y * v2.y);
  };

  BaseMathUtils.v2dist = function v2dist(v21, v22) {
    return BaseMathUtils.v2len({
      x: v22.x - v21.x,
      y: v22.y - v21.y
    });
  };

  BaseMathUtils.computeSquare = function computeSquare(ps) {
    var a = [];
    var p = 0;
    for (var i = 0; i < ps.length; ++i) {
      a.push(BaseMathUtils.v2dist(ps[i], ps[(i + 1) % ps.length]));
      p += 0.5 * a[i];
    }
    return Math.sqrt(p * (p - a[0]) * (p - a[1]) * (p - a[2]));
  };

  BaseMathUtils.computeInterpCoefs = function computeInterpCoefs(tri, p) {
    var s = BaseMathUtils.computeSquare(tri),
        coefs = [],
        l = tri.length;
    for (var i = 0; i < l; ++i) {
      coefs[i] = BaseMathUtils.computeSquare([p, tri[(i + 1) % l], tri[(i + 2) % l]]) / s;
    }
    return coefs;
  };

  return BaseMathUtils;
}();

BaseMathUtils.sum = [BaseMathUtils.sum1, BaseMathUtils.sum2, BaseMathUtils.sum3, BaseMathUtils.sum4];
BaseMathUtils.eps = 1e-4;
exports.default = BaseMathUtils;

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(0);

var _BaseMathUtils2 = __webpack_require__(2);

var _BaseMathUtils3 = _interopRequireDefault(_BaseMathUtils2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MathUtils = function (_BaseMathUtils) {
  _inherits(MathUtils, _BaseMathUtils);

  function MathUtils() {
    _classCallCheck(this, MathUtils);

    return _possibleConstructorReturn(this, _BaseMathUtils.apply(this, arguments));
  }

  MathUtils.splitSpline = function splitSpline(spline, N) {
    var o = { len: 0, ls: [0] },
        dl = 1 / N;
    for (var i = 0; i <= N; ++i) {
      var p = spline.getPoint(i * dl);
      if (i) {
        var d = MathUtils.v1.distanceTo(p);
        o.len += d;
        o.ls.push(d);
      }
      MathUtils.v1.copy(p);
    }
    return o;
  };

  MathUtils.getLinearIndeces = function getLinearIndeces(spline, n) {
    var del = 5000,
        dDel = 1 / del;
    var ls = [0];
    var l = 0;
    for (var i = 0; i <= del; ++i) {
      var p = spline.getPoint(i * dDel);
      if (i) {
        var d = MathUtils.v1.distanceTo(p);
        l += d;
        ls.push(d);
      }
      MathUtils.v1.copy(p);
    }
    ls.push(1e7);

    var res = [],
        dl = l / (n - 1);
    for (var _i = 0, L = 0, _d = ls[0]; _i < ls.length - 1; ++_i, _d += ls[_i]) {
      if (Math.abs(L - _d) < Math.abs(L - _d - ls[_i + 1])) {
        res.push(_i * dDel);
        L += dl;
      }
    }

    return res;
  };

  MathUtils.refinePoly = function refinePoly(poly, maxDl) {
    var res = [];
    for (var i = 0; i < poly.length; ++i) {
      var p0 = poly[i],
          p1 = poly[(i + 1) % poly.length],
          l = _BaseMathUtils3.default.v2dist(p0, p1),
          n = Math.ceil(l / maxDl),
          dl = l / n;
      res.push(p0);
      for (var j = 1; j < n; ++j) {
        res.push(new _libs.THREE.Vector2(p0.x + j * dl * (p1.x - p0.x) / l, p0.y + j * dl * (p1.y - p0.y) / l));
      }
    }
    return res;
  };

  return MathUtils;
}(_BaseMathUtils3.default);

MathUtils.v1 = new _libs.THREE.Vector3();
exports.default = MathUtils;

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Utils = function () {
  function Utils() {
    _classCallCheck(this, Utils);
  }

  Utils.normalizeUrl = function normalizeUrl(url) {
    function split(s) {
      return s.replace(/\\/g, '/').split('/');
    }
    var base = split(window.location.href);
    url = split(url);
    if (base[2] === url[2]) {
      url[0] = base[0];
    }
    return url.join('/');
  };

  Utils.extends = function _extends(der, base) {
    for (var name in base) {
      if (!der.hasOwnProperty(name)) {
        der[name] = base[name];
      }
    }
  };

  Utils.defaultCmp = function defaultCmp(a, b) {
    return a - b;
  };

  Utils.lowerBound = function lowerBound(a, x, cmp) {
    cmp = cmp || Utils.defaultCmp;
    var l = 0,
        h = a.length - 1;
    while (h - l > 1) {
      var mid = Math.floor((l + h) / 2);
      if (cmp(x, a[mid]) < 0) {
        h = mid;
      } else {
        l = mid;
      }
    }
    return cmp(x, a[h]) >= 0 ? h : l;
  };

  return Utils;
}();

exports.default = Utils;

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(0);

var _GraphUtils = __webpack_require__(7);

var _GraphUtils2 = _interopRequireDefault(_GraphUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ImageBase = function () {
  function ImageBase(context, width, height, color) {
    _classCallCheck(this, ImageBase);

    this.context = context;
    this.wnd = context.wnd;
    this.doc = context.doc;
    this.element = context.element || context.doc.body;
    this.c = context.renderCanvas || ImageBase.renderCanvas;
    this.ctx = context.renderCanvasCtx || ImageBase.renderCanvasCtx;
    this.resW = this.width = width;
    this.resH = this.height = height;
    this.color = color;
  }

  ImageBase.prototype.setRenderCanvas = function setRenderCanvas(c, ctx) {
    this.c = c;
    this.ctx = ctx;
  };

  ImageBase.prototype.setResolution = function setResolution(res) {
    var k = res.width / this.resW;
    this.resW = res.width;
    this.resH = k * this.resH; // res.height;
  };

  ImageBase.prototype.dispose = function dispose() {};

  ImageBase.prototype.renderBlankPage = function renderBlankPage() {
    this.ctx.beginPath();
    this.ctx.fillStyle = _GraphUtils2.default.color2Rgba(this.color, 1);
    this.ctx.rect(0, 0, this.c.width, this.c.height);
    this.ctx.fill();
  };

  ImageBase.prototype.renderImage = function renderImage(image) {
    this.pushCtx();
    this.ctx.drawImage(image, 0, 0);
    this.popCtx();
  };

  ImageBase.prototype.normToConv = function normToConv(p) {
    return {
      x: p.x * this.c.width,
      y: (1 - p.y) * this.c.height
    };
  };

  ImageBase.prototype.renderHit = function renderHit(poly) {
    var ctx = this.ctx;
    ctx.fillStyle = 'rgba(255,255,0,0.4)';
    ctx.beginPath();
    var p = this.normToConv(poly[0]);
    ctx.moveTo(p.x, p.y);
    for (var i = 1; i < poly.length; ++i) {
      p = this.normToConv(poly[i]);
      ctx.lineTo(p.x, p.y);
    }
    ctx.closePath();
    ctx.fill();
  };

  ImageBase.prototype.pushCtx = function pushCtx() {
    if (this.resW != this.c.width) {
      this.c.width = this.resW;
    }
    if (this.resH != this.c.height) {
      this.c.height = this.resH;
    }
    this.ctx.save();
    this.ctx.scale(this.c.width / this.width, this.c.height / this.height);
    return this.ctx;
  };

  ImageBase.prototype.popCtx = function popCtx() {
    this.ctx.restore();
  };

  ImageBase.prototype.renderNotFoundPage = function renderNotFoundPage() {
    this.renderBlankPage();
  };

  ImageBase.prototype.finishRender = function finishRender() {
    if (this.onChange) {
      this.onChange(this.c);
    }
  };

  ImageBase.prototype.finishLoad = function finishLoad() {
    if (this.onLoad) {
      this.onLoad();
    } else {
      this.startRender();
    }
  };

  ImageBase.prototype.getSimulatedDoc = function getSimulatedDoc() {
    return undefined;
  };

  return ImageBase;
}();

ImageBase.renderCanvas = (0, _libs.$)('<canvas>')[0];
ImageBase.renderCanvasCtx = ImageBase.renderCanvas.getContext('2d');
exports.default = ImageBase;

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _libs = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var EventConverter = function () {

  // virtuals
  // getObject(e, data);
  // getCallback(object);
  // test(object1, object1);

  function EventConverter(wnd, doc) {
    _classCallCheck(this, EventConverter);

    this.wnd = wnd;
    this.doc = doc;
    this.enabled = true;
  }

  EventConverter.prototype.setEnable = function setEnable(vl) {
    if (!vl) {
      if (this.mCapObject) {
        this.notify(this.mCapObject, _libs.$.Event('mouseup'), 'mouseup');
        this.mCapObject = undefined;
      }
      if (this.mHovObject) {
        this.notify(this.mHovObject, _libs.$.Event('mouseout'), 'mouseout');
        this.mHovObject = undefined;
      }
    }
    this.enabled = vl;
  };

  EventConverter.prototype.getCallback = function getCallback(object) {
    return undefined;
  };

  EventConverter.prototype.notify = function notify(object, e, type) {
    var callback = this.getCallback(object);
    if (callback) {
      var props = _extends({}, e, {
        type: type,
        view: this.wnd
      });
      var jE = _libs.$.Event(type, props);
      callback(jE, object);
    }
  };

  EventConverter.prototype.convert = function convert(e, data) {
    if (!this.enabled) return;

    if (this.filter) {
      e = this.filter(this.element, e);
    }

    var object = this.getObject(e, data),
        notify = ~e.type.indexOf('touch') ? this.convertTouch(e, data, object) : this.convertMouse(e, data, object);
    if (notify && object) {
      this.notify(object, e, e.type);
    }
  };

  EventConverter.prototype.convertTouch = function convertTouch(e, data, object) {
    var notify = true;
    switch (e.type) {
      case 'touchstart':
        {
          if (this.tCapObject) {
            this.notify(this.tCapObject, e, 'touchend');
          }
          this.tCapObject = object;
          break;
        }
      case 'touchend':
        {
          if (this.tCapObject && !this.test(this.tCapObject, object)) {
            this.notify(this.tCapObject, e, 'touchend');
            notify = false;
          } else if (object && this.test(this.tCapObject, object)) {
            this.notify(object, e, 'touchtap');
          }
          this.tCapObject = undefined;
          break;
        }
      case 'touchtap':
        {
          notify = false;
          break;
        }
    }
    return notify;
  };

  EventConverter.prototype.convertMouse = function convertMouse(e, data, object) {
    var notify = true;
    switch (e.type) {
      case 'mousedown':
        {
          if (this.mCapObject) {
            this.notify(this.mCapObject, e, 'mouseup');
          }
          this.mCapObject = object;
          break;
        }
      case 'mouseup':
        {
          if (this.mCapObject && !this.test(this.mCapObject, object)) {
            this.notify(this.mCapObject, e, 'mouseup');
            notify = false;
          }
          break;
        }
      case 'click':
        {
          notify = this.test(this.mCapObject, object);
          this.mCapObject = undefined;
          break;
        }
      case 'mouseenter':
      case 'mouseover':
      case 'mousemove':
        {
          if (!this.test(this.mHovObject, object) && this.mHovObject) {
            this.notify(this.mHovObject, e, 'mouseout');
            this.mHovObject = undefined;
          }
          if (!this.mHovObject && object) {
            this.notify(object, e, 'mouseover');
            this.mHovObject = object;
          }
          notify = e.type === 'mousemove';
          break;
        }
      case 'mouseleave':
      case 'mouseout':
        {
          if (this.mHovObject) {
            this.notify(this.mHovObject, e, 'mouseout');
            this.mHovObject = undefined;
          }
          notify = false;
          break;
        }
    }
    return notify;
  };

  return EventConverter;
}();

exports.default = EventConverter;

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var GraphUtils = function () {
  function GraphUtils() {
    _classCallCheck(this, GraphUtils);
  }

  GraphUtils.extrapolateLinear = function extrapolateLinear(x, y, xi) {
    return y[0] + (y[1] - y[0]) / (x[1] - x[0]) * (xi - x[0]);
  };

  GraphUtils.interpolate01 = function interpolate01(y1, y2, t) {
    return GraphUtils.extrapolateLinear([0, 1], [y1, y2], t);
  };

  GraphUtils.getColorBytes = function getColorBytes(color) {
    return [color >> 16 & 0xFF, color >> 8 & 0xFF, color & 0xFF];
  };

  GraphUtils.inverseColor = function inverseColor(color) {
    var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

    var bs = GraphUtils.getColorBytes(color),
        ibs = [0xFF - bs[0], 0xFF - bs[1], 0xFF - bs[2]],
        nbs = [Math.round(GraphUtils.interpolate01(bs[0], ibs[0], t)), Math.round(GraphUtils.interpolate01(bs[1], ibs[1], t)), Math.round(GraphUtils.interpolate01(bs[2], ibs[2], t))];
    return GraphUtils.bytes2Color(nbs);
  };

  GraphUtils.color2Rgba = function color2Rgba(color, a) {
    return GraphUtils.bytes2Rgba(GraphUtils.getColorBytes(color), a);
  };

  GraphUtils.bytes2Rgba = function bytes2Rgba(bs, a) {
    return 'rgba(' + bs.join(',') + ',' + a + ')';
  };

  GraphUtils.bytes2Color = function bytes2Color(bs) {
    return bs[2] | bs[1] << 8 | bs[0] << 16;
  };

  return GraphUtils;
}();

exports.default = GraphUtils;

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _Cache = __webpack_require__(14);

var _Cache2 = _interopRequireDefault(_Cache);

var _BlankImage = __webpack_require__(44);

var _BlankImage2 = _interopRequireDefault(_BlankImage);

var _StaticImage = __webpack_require__(60);

var _StaticImage2 = _interopRequireDefault(_StaticImage);

var _PdfImage = __webpack_require__(58);

var _PdfImage2 = _interopRequireDefault(_PdfImage);

var _InteractiveImage = __webpack_require__(52);

var _InteractiveImage2 = _interopRequireDefault(_InteractiveImage);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ImageFactory = function () {
  function ImageFactory(context, cache) {
    _classCallCheck(this, ImageFactory);

    this.context = context;
    this.cache = cache || new _Cache2.default();
  }

  ImageFactory.prototype.build = function build(info) {
    var n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var widthTexels = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 210;
    var heightTexels = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 297;
    var color = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0xFFFFFF;
    var injector = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

    var image = void 0;
    switch (info.type) {
      case 'html':
        {
          image = new _InteractiveImage2.default(this.context, widthTexels, heightTexels, color, info.src, this.cache, injector);
          break;
        }
      case 'image':
        {
          image = new _StaticImage2.default(this.context, widthTexels, heightTexels, color, info.src);
          break;
        }
      case 'pdf':
        {
          image = new _PdfImage2.default(this.context, widthTexels, heightTexels, color, info.src, n);
          break;
        }
      case 'blank':
      default:
        {
          image = new _BlankImage2.default(this.context, widthTexels, heightTexels, color);
          break;
        }
    }
    return image;
  };

  return ImageFactory;
}();

exports.default = ImageFactory;

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _book = __webpack_require__(11);

var _BaseMathUtils = __webpack_require__(2);

var _BaseMathUtils2 = _interopRequireDefault(_BaseMathUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var BookPropsBuilder = function () {
  function BookPropsBuilder(onReady, style) {
    _classCallCheck(this, BookPropsBuilder);

    this.onReady = onReady;
    this.defaults = (0, _book.props)(style);
  }

  BookPropsBuilder.prototype.dispose = function dispose() {};

  BookPropsBuilder.prototype.calcSize = function calcSize(width, height) {
    var scale = _BaseMathUtils2.default.calcScale(width, height, this.defaults.width, this.defaults.height);
    return {
      width: scale * width,
      height: scale * height
    };
  };

  BookPropsBuilder.prototype.calcTexels = function calcTexels(width, height) {
    var sheet = this.defaults.sheet,
        scale = _BaseMathUtils2.default.calcScale(width, height, sheet.widthTexels, sheet.heightTexels);
    return {
      widthTexels: scale * width,
      heightTexels: scale * height
    };
  };

  BookPropsBuilder.prototype.calcProps = function calcProps(width, height) {
    this.props = _extends({}, this.defaults, this.calcSize(width, height), {
      sheet: _extends({}, this.defaults.sheet, this.calcTexels(width, height)),
      cover: _extends({}, this.defaults.cover),
      page: _extends({}, this.defaults.page)
    });
  };

  BookPropsBuilder.prototype.calcSheets = function calcSheets(pages) {
    return this.sheets = Math.ceil(Math.max(0, pages - 4) / 2);
  };

  BookPropsBuilder.prototype.getSheets = function getSheets() {
    return this.sheets;
  };

  BookPropsBuilder.prototype.getProps = function getProps() {
    return this.props;
  };

  BookPropsBuilder.prototype.getPageCallback = function getPageCallback() {
    return this.binds.pageCallback;
  };

  BookPropsBuilder.prototype.ready = function ready() {
    if (this.onReady) {
      this.onReady(this.getProps(), this.getSheets(), this.getPageCallback());
    }
  };

  return BookPropsBuilder;
}();

exports.default = BookPropsBuilder;

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _libs = __webpack_require__(1);

var _sheetBlock = __webpack_require__(42);

var _sheetBlock2 = _interopRequireDefault(_sheetBlock);

var _MathUtils = __webpack_require__(3);

var _MathUtils2 = _interopRequireDefault(_MathUtils);

var _ThreeUtils = __webpack_require__(21);

var _ThreeUtils2 = _interopRequireDefault(_ThreeUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// import ThreeMarkup from './ThreeMarkup';

var SheetBlock = function () {
  function SheetBlock(visual, p, first, last) {
    var angle = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;

    var _this = this;

    var state = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 'closed';
    var height = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;

    _classCallCheck(this, SheetBlock);

    this.visual = visual;
    this.p = _extends({}, p, {
      first: first,
      last: last
    });
    var props = this.getProps();

    var loadedPoints = this.loadPoints();
    Object.keys(loadedPoints).map(function (k) {
      _this[k] = loadedPoints[k][props.shape] || loadedPoints[k][0];
    });

    this.pSpline = new _libs.THREE.CatmullRomCurve3([]);
    for (var i = 0; i < this.interpolationPoints.x[0].length; ++i) {
      this.pSpline.points.push(new _libs.THREE.Vector3());
    }

    this.iSpline = new _libs.THREE.CatmullRomCurve3([]);
    for (var _i = 0; _i < _sheetBlock2.default.resX; ++_i) {
      this.iSpline.points.push(new _libs.THREE.Vector3());
    }

    this.aSplines = [];

    //this.three = new THREE.Object3D();

    this.geometry = _sheetBlock2.default.geometry.clone();

    this.p.sideFaces = [{
      first: 0,
      last: _sheetBlock2.default.faces[0]
    }, {
      first: _sheetBlock2.default.faces[0],
      last: _sheetBlock2.default.faces[1]
    }];

    this.sideTexture = new _libs.THREE.Texture();
    this.sideTexture.wrapT = _libs.THREE.RepeatWrapping;
    this.sideTexture.repeat.set(0, last - first);
    this.sideTexture.image = props.sideTexture;
    this.sideTexture.needsUpdate = true;

    this.materials = [new _libs.THREE.MeshPhongMaterial(), new _libs.THREE.MeshPhongMaterial(), new _libs.THREE.MeshPhongMaterial({ map: this.sideTexture }), new _libs.THREE.MeshPhongMaterial({ map: this.sideTexture }), new _libs.THREE.MeshPhongMaterial({ map: this.sideTexture }), new _libs.THREE.MeshPhongMaterial({ map: this.sideTexture })];

    this.p.setTexture(this.materials[0], 2 * first);
    this.p.setTexture(this.materials[1], 2 * last - 1);

    this.mesh = new _libs.THREE.Mesh(this.geometry, this.materials);
    this.mesh.castShadow = false;
    this.mesh.receiveShadow = false;
    // this.mesh.frustumCulled = true;

    //this.three.add(this.mesh);
    this.three = this.mesh;
    this.three.userData.self = this;

    this.markers = [];
    if (this.p.marker.use) {
      var l = this.geometry.vertices.length;
      var is = void 0;
      // is = [0, sheetBlock.resX-1, (sheetBlock.resZ-1)*sheetBlock.resX, sheetBlock.resZ*sheetBlock.resX-1];
      is = Array.apply(0, Array(l)).map(function (_, i) {
        return i;
      });

      for (var _iterator = is, _isArray = Array.isArray(_iterator), _i2 = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
        var _ref;

        if (_isArray) {
          if (_i2 >= _iterator.length) break;
          _ref = _iterator[_i2++];
        } else {
          _i2 = _iterator.next();
          if (_i2.done) break;
          _ref = _i2.value;
        }

        var _i3 = _ref;

        var marker = _ThreeUtils2.default.createMarker(this.geometry.vertices[_i3], _i3 < l / 2 ? 0xFF0000 : 0x00FF00, this.p.marker.size);
        this.markers.push({
          marker: marker,
          vertex: _i3
        });
        this.three.add(marker);
      }
    }

    this.corner = {
      use: true,
      height: 0,
      maxDistance: 0,
      points: [],
      OZ: new _libs.THREE.Vector3(0, 0, 1),
      axis: new _libs.THREE.Vector3()
    };
    this.set(0, 'closed', height, first, last); // calculate corner points

    this.set(angle, state, height, first, last); // init position

    // if(!SheetBlock.markup) {
    //   SheetBlock.markup=true;
    //   this.markup = new ThreeMarkup(this, 0, [{
    //     x: 0,
    //     y: 0,
    //   }, {
    //     x: 0.5,
    //     y: 1
    //   }, {
    //     x: 1,
    //     y: 0
    //   }].map((p)=>new THREE.Vector2(p.x, p.y)), {});
    // }
  }

  SheetBlock.prototype.dispose = function dispose() {
    for (var _iterator2 = this.materials, _isArray2 = Array.isArray(_iterator2), _i4 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
      var _ref2;

      if (_isArray2) {
        if (_i4 >= _iterator2.length) break;
        _ref2 = _iterator2[_i4++];
      } else {
        _i4 = _iterator2.next();
        if (_i4.done) break;
        _ref2 = _i4.value;
      }

      var m = _ref2;

      if (m.map) {
        m.map = null;
        m.needsUpdate = true;
      }
      m.dispose();
    }
    delete this.materials;
    this.geometry.dispose();
  };

  SheetBlock.prototype.getSize = function getSize() {
    return this.p.last - this.p.first;
  };

  SheetBlock.prototype.getProps = function getProps() {
    return _extends({}, this.p.page, {
      sheets: this.p.sheets
    });
  };

  SheetBlock.prototype.getTopCerners = function getTopCerners() {
    var off = this.angle > Math.PI / 2 ? this.geometry.vertices.length / 2 : 0;
    return [this.geometry.vertices[off], this.geometry.vertices[_sheetBlock2.default.resX - 1 + off], this.geometry.vertices[(_sheetBlock2.default.resZ - 1) * _sheetBlock2.default.resX + off], this.geometry.vertices[_sheetBlock2.default.resZ * _sheetBlock2.default.resX - 1 + off]];
  };

  SheetBlock.prototype.getTopSize = function getTopSize() {
    // const l=this.geometry.vertices.length, off = this.angle>Math.PI/2? l/2: 0,
    //   v0 = this.geometry.vertices[off], v1 = this.geometry.vertices[sheetBlock.resZ*sheetBlock.resX-1+off];
    // // is = [0, sheetBlock.resX-1, (sheetBlock.resZ-1)*sheetBlock.resX, sheetBlock.resZ*sheetBlock.resX-1];
    // return {
    //   width: Math.abs(v1.x-v0.x),
    //   height: Math.abs(v1.z-v0.z)
    // };
    var vs = this.getTopCerners();
    return {
      width: vs[0].distanceTo(vs[1]),
      height: vs[0].distanceTo(vs[2])
    };
  };

  SheetBlock.prototype.getTopWorldRotation = function getTopWorldRotation(q) {
    q.x = -Math.PI / 2;
    return q;
  };

  SheetBlock.prototype.getTopWorldPosition = function getTopWorldPosition(v) {
    var l = this.geometry.vertices.length,
        off = this.angle > Math.PI / 2 ? l / 2 : 0,
        vs = [this.geometry.vertices[off], this.geometry.vertices[_sheetBlock2.default.resX - 1 + off], this.geometry.vertices[(_sheetBlock2.default.resZ - 1) * _sheetBlock2.default.resX + off], this.geometry.vertices[_sheetBlock2.default.resZ * _sheetBlock2.default.resX - 1 + off]];
    v.set(0, 0, 0);
    for (var _iterator3 = vs, _isArray3 = Array.isArray(_iterator3), _i5 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
      var _ref3;

      if (_isArray3) {
        if (_i5 >= _iterator3.length) break;
        _ref3 = _iterator3[_i5++];
      } else {
        _i5 = _iterator3.next();
        if (_i5.done) break;
        _ref3 = _i5.value;
      }

      var vi = _ref3;

      v.x += 0.25 * vi.x;
      v.y += 0.25 * vi.y;
      v.z += 0.25 * vi.z;
    }
    this.three.localToWorld(v);
    return v;
  };

  SheetBlock.prototype.getInterpolationPoints = function getInterpolationPoints(inds, mod) {
    var ps = { x: [], y: [] },
        K = this.getProps().wave;
    for (var _iterator4 = inds, _isArray4 = Array.isArray(_iterator4), _i6 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {
      var _ref4;

      if (_isArray4) {
        if (_i6 >= _iterator4.length) break;
        _ref4 = _iterator4[_i6++];
      } else {
        _i6 = _iterator4.next();
        if (_i6.done) break;
        _ref4 = _i6.value;
      }

      var i = _ref4;

      ps.x.push([].concat(this.interpolationPoints.x[i]));
      ps.y.push(~mod.indexOf(i) ? this.interpolationPoints.y[i].map(function (n) {
        return K * n;
      }) : [].concat(this.interpolationPoints.y[i]));
    }
    return ps;
  };

  SheetBlock.prototype.set = function set(angle) {
    var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;
    var height = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.corner.height;
    var first = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this.p.first;
    var last = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : this.p.last;

    var PI = Math.PI;
    this.state = state;
    var closedAngle = void 0,
        binderTurn = void 0;
    if ((typeof angle === 'undefined' ? 'undefined' : _typeof(angle)) === 'object') {
      this.angle = angle.openedAngle;
      closedAngle = angle.closedAngle;
      binderTurn = angle.binderTurn > PI / 2 ? PI - angle.binderTurn : angle.binderTurn;
    } else {
      this.angle = angle;
    }
    this.corner.height = height;
    if (this.p.first !== first || this.p.last !== last) {
      this.sideTexture.repeat.set(0, last - first);
      this.sideTexture.needsUpdate = true;
      if (this.p.first !== first) {
        this.p.setTexture(this.materials[0], 2 * first);
      }
      if (this.p.last !== last) {
        this.p.setTexture(this.materials[1], 2 * last - 1);
      }
    }
    this.p.first = first;
    this.p.last = last;
    var points = void 0;
    var props = this.getProps();
    if (this.state === 'closed') {
      points = this.getInterpolationPoints(this.closedInterpolationIndeces, this.closedInterpolationIndeces);
    } else if (this.state === 'opened') {
      if (closedAngle !== undefined && Math.abs(closedAngle - PI / 2) > 1e-2) {
        points = this.getInterpolationPoints(this.flatInterpolationIndeces, []);
        var ps = this.getPointsAtAngle(this.getInterpolationPoints(this.closedInterpolationIndeces, this.closedInterpolationIndeces), closedAngle > PI / 2 ? PI - closedAngle : closedAngle);
        points.x = [ps.x].concat(points.x);
        points.y = [ps.y].concat(points.y);
        // console.log(ps);
      } else {
        points = this.getInterpolationPoints(this.openedInterpolationIndeces, this.closedInterpolationIndeces);
      }
    }
    var hl = void 0,
        hr = void 0,
        offset = 0.5 * props.sheets * props.depth;
    if (this.state === 'closed') {
      offset -= 7e-6 * this.p.scale;
    }
    if (this.angle <= PI / 2) {
      hl = (props.sheets - first) * props.depth;
      hr = (props.sheets - last) * props.depth;
    } else {
      hl = first * props.depth;
      hr = last * props.depth;
    }

    var inAngle = this.angle > PI / 2 ? PI - this.angle : this.angle,
        hAngle = this.state === 'closed' ? inAngle : binderTurn === undefined ? PI / 2 : binderTurn;

    var _getPointsAtAngleAndH = this.getPointsAtAngleAndHs(points, inAngle, hAngle, [hl / props.width, hr / props.width]),
        left = _getPointsAtAngleAndH[0],
        right = _getPointsAtAngleAndH[1];

    if (this.angle > PI / 2) {
      this.inverse(left);
      this.inverse(right);
      offset = -offset;
    }
    this.setPoints(left, right, offset);
  };

  SheetBlock.prototype.setPoints = function setPoints(left, right, offset) {
    var _this2 = this;

    var p = this.getProps();
    var i = 0;

    var ys = [right, left];
    for (var y = 0; y < _sheetBlock2.default.resY; ++y) {
      for (var z = 0; z < _sheetBlock2.default.resZ; ++z) {
        for (var x = 0; x < _sheetBlock2.default.resX; ++x) {
          this.geometry.vertices[i++].set(ys[y].x[x] * p.width + offset, ys[y].y[x] * p.width, z * p.height / (_sheetBlock2.default.resZ - 1) - 0.5 * p.height);
        }
      }
    }
    if (i !== this.geometry.vertices.length) {
      console.warn('setPoints: bad mapping!');
    }

    if (this.corner.use && !this.corner.points.length) {
      var plane = new _libs.THREE.Plane(),
          normal = plane.normal,
          planeOffset = (1 - this.getProps().flexibleCorner) * Math.min(p.width, p.height),
          proj = new _libs.THREE.Vector3();
      plane.setFromNormalAndCoplanarPoint(new _libs.THREE.Vector3(-1, 0, -1).normalize(), new _libs.THREE.Vector3(planeOffset + offset, 0, 0.5 * p.height));
      for (var _i7 = 0, l = this.geometry.vertices.length; _i7 < l; ++_i7) {
        plane.projectPoint(this.geometry.vertices[_i7], proj);
        proj.sub(this.geometry.vertices[_i7]);
        if (proj.x * normal.x + proj.y * normal.y + proj.z * normal.z > 0) {
          var d = proj.length() / planeOffset;
          this.corner.maxDistance = Math.max(this.corner.maxDistance, d);
          this.corner.points.push({ vertex: _i7, distance: d });
        }
      }
    }

    if (this.corner.use && Math.abs(this.corner.height) > 1e-3) {
      var d2Angle = function d2Angle(d) {
        return p.cornerDeviation * _this2.corner.height / (1 + Math.exp(-p.bending * (d - 0.5 * _this2.corner.maxDistance)));
      };
      this.corner.axis.set(-1, 0, 1).normalize();
      this.corner.axis.applyAxisAngle(this.corner.OZ, this.angle);
      for (var _iterator5 = this.corner.points, _isArray5 = Array.isArray(_iterator5), _i8 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {
        var _ref5;

        if (_isArray5) {
          if (_i8 >= _iterator5.length) break;
          _ref5 = _iterator5[_i8++];
        } else {
          _i8 = _iterator5.next();
          if (_i8.done) break;
          _ref5 = _i8.value;
        }

        var point = _ref5;

        this.geometry.vertices[point.vertex].applyAxisAngle(this.corner.axis, d2Angle(point.distance));
      }
    }

    for (var _iterator6 = this.markers, _isArray6 = Array.isArray(_iterator6), _i9 = 0, _iterator6 = _isArray6 ? _iterator6 : _iterator6[Symbol.iterator]();;) {
      var _ref6;

      if (_isArray6) {
        if (_i9 >= _iterator6.length) break;
        _ref6 = _iterator6[_i9++];
      } else {
        _i9 = _iterator6.next();
        if (_i9.done) break;
        _ref6 = _i9.value;
      }

      var m = _ref6;

      m.marker.position.copy(this.geometry.vertices[m.vertex]);
    }

    this.geometry.computeVertexNormals();
    //this.geometry.computeFaceNormals();
    this.geometry.computeBoundingSphere();
    //this.geometry.computeBoundingBox();
    this.geometry.verticesNeedUpdate = true;

    if (this.markup) {
      this.markup.computeVertices();
    }
  };

  SheetBlock.prototype.inverse = function inverse(ps) {
    for (var i = 0; i < ps.x.length; ++i) {
      ps.x[i] = -ps.x[i];
    }
    return ps;
  };

  SheetBlock.prototype.getPointsAtHs = function getPointsAtHs(ps, angle, hs) {
    var _this3 = this;

    var N = 1000;
    _MathUtils2.default.setSplinePoints(this.pSpline, ps);
    var bl = _MathUtils2.default.splitSpline(this.pSpline, N),
        r = [];
    {
      var p1 = _extends({}, this.pSpline.getPoint((N - 1) / N)),
          p2 = _extends({}, this.pSpline.getPoint(1)),
          dp = { x: p2.x - p1.x, y: p2.y - p1.y },
          ln = Math.sqrt(dp.x * dp.x + dp.y * dp.y),
          sp = this.pSpline.points[this.pSpline.points.length - 1];
      sp.set(sp.x + 0.1 * dp.x / ln, sp.y + 0.1 * dp.y / ln, 0);
      bl = _MathUtils2.default.splitSpline(this.pSpline, N);
    }
    bl.ls.push(1e7);
    _MathUtils2.default.mapl2L(bl.ls, bl.len, _sheetBlock2.default.resX, function (i) {
      for (var j = 0; j < hs.length; ++j) {
        if (!i) {
          r[j] = { x: [-hs[j] * Math.sin(angle)], y: [hs[j] * Math.cos(angle)] };
        } else {
          var p0 = _extends({}, _this3.pSpline.getPoint((i - 1) / N)),
              _p = _this3.pSpline.getPoint(i / N),
              x = -(_p.y - p0.y),
              y = _p.x - p0.x,
              l = Math.sqrt(x * x + y * y);
          r[j].x.push(_p.x + x / l * hs[j]);
          r[j].y.push(_p.y + y / l * hs[j]);
        }
      }
    });

    var nps = [];

    var _loop = function _loop(j) {
      nps[j] = { x: [], y: [] };
      _MathUtils2.default.setSplinePoints(_this3.iSpline, r[j]);
      var l = _MathUtils2.default.splitSpline(_this3.iSpline, N);
      l.ls.push(1e7);
      _MathUtils2.default.mapl2L(l.ls, 1, _sheetBlock2.default.resX, function (i) {
        var p = _this3.iSpline.getPoint(i / N);
        nps[j].x.push(p.x);
        nps[j].y.push(p.y);
      });
    };

    for (var j = 0; j < hs.length; ++j) {
      _loop(j);
    }
    return nps;
  };

  SheetBlock.prototype.getPointsAtAngleAndHs = function getPointsAtAngleAndHs(points, angle, hAngle, hs) {
    var ps = this.getPointsAtAngle(points, angle);
    return this.getPointsAtHs(ps, hAngle, hs);
  };

  SheetBlock.prototype.getPointsAtAngle = function getPointsAtAngle(points, angle) {
    var ps = { x: [], y: [] },
        angles = [];
    angle /= Math.PI / 2;
    for (var j = 0; j < points.x.length; ++j) {
      angles.push(j / (points.x.length - 1));
    }
    for (var i = 0; i < points.x[0].length; ++i) {
      var xps = [],
          yps = [];
      for (var _j = 0; _j < points.x.length; ++_j) {
        xps.push(points.x[_j][i]);
        yps.push(points.y[_j][i]);
      }
      ps.x.push(this.interpolate(angles, xps, angle));
      ps.y.push(this.interpolate(angles, yps, angle));
    }
    return ps;
  };

  SheetBlock.prototype.interpolate = function interpolate(x, y, xi) {
    if (!this.aSplines[x.length]) {
      this.aSplines[x.length] = new _libs.THREE.CatmullRomCurve3([]);
      var ps = this.aSplines[x.length].points;
      for (var i = 0; i < x.length; ++i) {
        ps.push(new _libs.THREE.Vector3());
      }
    }
    var spline = this.aSplines[x.length];
    for (var _i10 = 0; _i10 < x.length; ++_i10) {
      spline.points[_i10].set(x[_i10], y[_i10], 0);
    }
    return spline.getPoint(Math.min(1, Math.max(xi, 0))).y;
  };

  SheetBlock.prototype.loadPoints = function loadPoints() {
    var x = [],
        y = [];
    var _arr = [0, 0.2877, 0.6347, 0.8174, 1.0000];
    for (var _i11 = 0; _i11 < _arr.length; _i11++) {
      var r = _arr[_i11];
      x.push(r * Math.cos(0.9 * Math.PI / 4));
      y.push(r * Math.sin(0.9 * Math.PI / 4));
    }

    var openedInterpolationIndeces = [[2, 3, 4], [2, 3, 4, 5, 6]],
        closedInterpolationIndeces = [[0, 1, 2], [0, 1, 2]],
        flatInterpolationIndeces = [[5, 4], [7, 6]],
        interpolationPoints = [{
      x: [[0, 0.2877, 0.6347, 0.8174, 1.0000], [0.000, 0.286, 0.632, 0.815, 0.997], [0.000, 0.279, 0.623, 0.806, 0.988], [0.000, 0.126, 0.411, 0.593, 0.774], [0, 0, 0, 0, 0], x],
      y: [[0, 0, 0, 0, 0], [0.000, 0.030, 0.010, 0.002, 0.000], [0.000, 0.060, 0.017, 0.004, 0.000], [0.000, 0.259, 0.440, 0.446, 0.429], [0, 0.2877, 0.6347, 0.8174, 1.0000], y]
    }, {
      x: [[0, 0.2877, 0.6347, 0.8174, 1.0000], [0.000, 0.286, 0.632, 0.815, 0.997], [0.000, 0.279, 0.623, 0.806, 0.988], [0.000, 0.233, 0.563, 0.746, 0.927], [0.000, 0.144, 0.433, 0.613, 0.796], [0.000, 0.070, 0.288, 0.455, 0.626], [0, 0, 0, 0, 0], x],
      y: [[0, 0, 0, 0, 0], [0.000, 0.030, 0.010, 0.002, 0.000], [0.000, 0.060, 0.017, 0.004, 0.000], [0.000, 0.168, 0.269, 0.270, 0.255], [0.000, 0.245, 0.435, 0.458, 0.460], [0.000, 0.278, 0.544, 0.614, 0.673], [0, 0.2877, 0.6347, 0.8174, 1.0000], y]
    }];

    return {
      interpolationPoints: interpolationPoints,
      openedInterpolationIndeces: openedInterpolationIndeces,
      closedInterpolationIndeces: closedInterpolationIndeces,
      flatInterpolationIndeces: flatInterpolationIndeces
    };
  };

  return SheetBlock;
}();

exports.default = SheetBlock;

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.props = props;
function props() {
  var style = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'volume';

  // const props = {
  //   height,
  //   width,
  //   gravity,
  //   injector,
  //   cachedPages,
  //   renderInactivePages,
  //   renderWhileFlipping,
  //   pagesForPredicting,
  //   preloadPages,
  //   sheet: {
  //     startVelocity,
  //     cornerDeviation,
  //     flexibility,
  //     flexibleCorner,
  //     bending,
  //     wave,
  //     shape,
  //     widthTexels,
  //     heightTexels,
  //     color,
  //     sideTexture
  //   },
  //   cover: {
  //     ...sheet,
  //     padding,
  //     binderTexture,
  //     depth,
  //     mass
  //   },
  //   page: {
  //     ...sheet,
  //     depth,
  //     mass
  //   }
  // };

  var def = {
    height: 0.297,
    width: 0.21,
    gravity: 1,
    cachedPages: 50,
    renderInactivePages: true,
    renderInactivePagesOnMobile: true,
    renderWhileFlipping: false,
    pagesForPredicting: 5,
    preloadPages: 5,
    rtl: false,
    sheet: {
      startVelocity: 1.1,
      cornerDeviation: 0.25,
      flexibility: 10,
      flexibleCorner: 0.5,
      bending: 11,
      wave: 0.5,
      shape: 0,
      widthTexels: 5 * 210,
      heightTexels: 5 * 297,
      color: 0xFFFFFF,
      side: 'color'
    },
    cover: {
      binderTexture: '',
      depth: 0.0003,
      padding: 0,
      mass: 0.001
    },
    page: {
      depth: 0.0001,
      mass: 0.001
    },
    cssLayerProps: {
      width: 1024
    }
  },
      styles = {
    volume: def,
    flat: _extends({}, def, {
      sheet: _extends({}, def.sheet, {
        wave: 0.05,
        side: 'transparent'
      }),
      cover: _extends({}, def.cover, {
        depth: 0.00002
      }),
      page: _extends({}, def.page, {
        depth: 0.00001
      })
    }),
    'volume-paddings': _extends({}, def, {
      cover: _extends({}, def.cover, {
        padding: 0.0025
      })
    })
  };
  return styles[style] || def;
};

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.CSS3DSprite = exports.CSS3DObject = undefined;

var _libs = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

_libs.THREE.CSS3DObject = function (_THREE$Object3D) {
  _inherits(CSS3DObject, _THREE$Object3D);

  function CSS3DObject() {
    var element = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;

    _classCallCheck(this, CSS3DObject);

    var _this = _possibleConstructorReturn(this, _THREE$Object3D.call(this));

    if (element) {
      _this.set(element);
    }
    return _this;
  }

  CSS3DObject.prototype.set = function set(element) {
    this.element = element;
    this.element.style.position = 'absolute';

    this.addEventListener('removed', function () {
      if (this.element.parentNode !== null) {
        this.element.parentNode.removeChild(this.element);
      }
    });
  };

  return CSS3DObject;
}(_libs.THREE.Object3D);

_libs.THREE.CSS3DSprite = function (_THREE$CSS3DObject) {
  _inherits(CSS3DSprite, _THREE$CSS3DObject);

  function CSS3DSprite(element) {
    _classCallCheck(this, CSS3DSprite);

    return _possibleConstructorReturn(this, _THREE$CSS3DObject.call(this, element));
  }

  return CSS3DSprite;
}(_libs.THREE.CSS3DObject);

_libs.THREE.CSS3DRenderer = function CSS3DRenderer() {
  _classCallCheck(this, CSS3DRenderer);

  var _width, _height;
  var _widthHalf, _heightHalf;

  var matrix = new _libs.THREE.Matrix4();

  var cache = {
    camera: { fov: 0, style: '' },
    objects: {}
  };

  var domElement = document.createElement('div');
  domElement.style.overflow = 'hidden';

  this.domElement = domElement;

  var cameraElement = document.createElement('div');

  cameraElement.style.WebkitTransformStyle = 'preserve-3d';
  cameraElement.style.MozTransformStyle = 'preserve-3d';
  cameraElement.style.transformStyle = 'preserve-3d';

  domElement.appendChild(cameraElement);

  var isIE = /Trident/i.test(navigator.userAgent);

  this.setClearColor = function () {};

  this.getSize = function () {

    return {
      width: _width,
      height: _height
    };
  };

  this.setSize = function (width, height) {

    _width = width;
    _height = height;
    _widthHalf = _width / 2;
    _heightHalf = _height / 2;

    domElement.style.width = width + 'px';
    domElement.style.height = height + 'px';

    cameraElement.style.width = width + 'px';
    cameraElement.style.height = height + 'px';
  };

  function epsilon(value) {
    return Math.abs(value) < 1e-6 ? 0 : value;
  }

  function getCameraCSSMatrix(matrix) {

    var elements = matrix.elements;

    return 'matrix3d(' + epsilon(elements[0]) + ',' + epsilon(-elements[1]) + ',' + epsilon(elements[2]) + ',' + epsilon(elements[3]) + ',' + epsilon(elements[4]) + ',' + epsilon(-elements[5]) + ',' + epsilon(elements[6]) + ',' + epsilon(elements[7]) + ',' + epsilon(elements[8]) + ',' + epsilon(-elements[9]) + ',' + epsilon(elements[10]) + ',' + epsilon(elements[11]) + ',' + epsilon(elements[12]) + ',' + epsilon(-elements[13]) + ',' + epsilon(elements[14]) + ',' + epsilon(elements[15]) + ')';
  }

  function getObjectCSSMatrix(matrix, cameraCSSMatrix) {

    var elements = matrix.elements;
    var matrix3d = 'matrix3d(' + epsilon(elements[0]) + ',' + epsilon(elements[1]) + ',' + epsilon(elements[2]) + ',' + epsilon(elements[3]) + ',' + epsilon(-elements[4]) + ',' + epsilon(-elements[5]) + ',' + epsilon(-elements[6]) + ',' + epsilon(-elements[7]) + ',' + epsilon(elements[8]) + ',' + epsilon(elements[9]) + ',' + epsilon(elements[10]) + ',' + epsilon(elements[11]) + ',' + epsilon(elements[12]) + ',' + epsilon(elements[13]) + ',' + epsilon(elements[14]) + ',' + epsilon(elements[15]) + ')';

    if (isIE) {

      return 'translate(-50%,-50%)' + 'translate(' + _widthHalf + 'px,' + _heightHalf + 'px)' + cameraCSSMatrix + matrix3d;
    }

    return 'translate(-50%,-50%)' + matrix3d;
  }

  function renderObject(object, camera, cameraCSSMatrix) {

    if (object instanceof _libs.THREE.CSS3DObject) {

      var style;

      if (object instanceof _libs.THREE.CSS3DSprite) {
        matrix.copy(camera.matrixWorldInverse);
        matrix.transpose();
        matrix.copyPosition(object.matrixWorld);
        matrix.scale(object.scale);

        matrix.elements[3] = 0;
        matrix.elements[7] = 0;
        matrix.elements[11] = 0;
        matrix.elements[15] = 1;

        style = getObjectCSSMatrix(matrix, cameraCSSMatrix);
      } else {

        style = getObjectCSSMatrix(object.matrixWorld, cameraCSSMatrix);
      }

      var element = object.element;
      var cachedStyle = cache.objects[object.id] && cache.objects[object.id].style;

      if (cachedStyle === undefined || cachedStyle !== style) {
        element.style.WebkitTransform = style;
        element.style.MozTransform = style;
        element.style.transform = style;

        cache.objects[object.id] = { style: style };
        if (isIE) {
          cache.objects[object.id].distanceToCameraSquared = getDistanceToSquared(camera, object);
        }
      }

      if (element.parentNode !== cameraElement) {
        cameraElement.appendChild(element);
      }
    }

    for (var i = 0, l = object.children.length; i < l; i++) {

      renderObject(object.children[i], camera, cameraCSSMatrix);
    }
  }

  var getDistanceToSquared = function () {

    var a = new _libs.THREE.Vector3();
    var b = new _libs.THREE.Vector3();

    return function (object1, object2) {

      a.setFromMatrixPosition(object1.matrixWorld);
      b.setFromMatrixPosition(object2.matrixWorld);

      return a.distanceToSquared(b);
    };
  }();

  function zOrder(scene) {

    var order = Object.keys(cache.objects).sort(function (a, b) {

      return cache.objects[a].distanceToCameraSquared - cache.objects[b].distanceToCameraSquared;
    });
    var zMax = order.length;

    scene.traverse(function (object) {

      var index = order.indexOf(object.id + '');

      if (index !== -1) {

        object.element.style.zIndex = zMax - index;
      }
    });
  }

  this.render = function (scene, camera) {

    var fov = camera.projectionMatrix.elements[5] * _heightHalf;

    if (cache.camera.fov !== fov) {

      domElement.style.WebkitPerspective = fov + 'px';
      domElement.style.MozPerspective = fov + 'px';
      domElement.style.perspective = fov + 'px';

      cache.camera.fov = fov;
    }

    scene.updateMatrixWorld();

    if (camera.parent === null) camera.updateMatrixWorld();

    var cameraCSSMatrix = 'translateZ(' + fov + 'px)' + getCameraCSSMatrix(camera.matrixWorldInverse);

    var style = cameraCSSMatrix + 'translate(' + _widthHalf + 'px,' + _heightHalf + 'px)';

    if (cache.camera.style !== style && !isIE) {

      cameraElement.style.WebkitTransform = style;
      cameraElement.style.MozTransform = style;
      cameraElement.style.transform = style;

      cache.camera.style = style;
    }

    renderObject(scene, camera, cameraCSSMatrix);

    if (isIE) {

      // IE10 and 11 does not support 'preserve-3d'.
      // Thus, z-order in 3D will not work.
      // We have to calc z-order manually and set CSS z-index for IE.
      // FYI: z-index can't handle object intersection
      zOrder(scene);
    }
  };
};

exports.default = _libs.THREE.CSS3DRenderer;


var _CSS3DObject = _libs.THREE.CSS3DObject,
    _CSS3DSprite = _libs.THREE.CSS3DSprite;
exports.CSS3DObject = _CSS3DObject;
exports.CSS3DSprite = _CSS3DSprite;

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(0);

var _CSS3DRenderer = __webpack_require__(12);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var CSSLayer = function (_CSS3DObject) {
  _inherits(CSSLayer, _CSS3DObject);

  CSSLayer.init = function init(doc) {
    var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 150;

    CSSLayer.delay = delay;
    CSSLayer.style = (0, _libs.$)(('<style type=text/css>\n      .css-layer {\n    \t\topacity: 1;\n    \t\ttransition: opacity ' + delay + 'ms ease-out;\n        visibility: visible;\n        overflow: hidden;\n    \t}\n    \t.css-layer.hidden {\n    \t\ttransition: opacity ' + delay + 'ms ease-in, visibility ' + delay + 'ms step-end;\n    \t\topacity: 0;\n        visibility: hidden;\n      }\n    </style>').fb3dQFilter()).appendTo(doc.head);
  };

  CSSLayer.dispose = function dispose() {
    CSSLayer.style.remove();
  };

  function CSSLayer(width, height, props) {
    _classCallCheck(this, CSSLayer);

    var _this = _possibleConstructorReturn(this, _CSS3DObject.call(this));

    _this.props = props;
    _this.jContainer = (0, _libs.$)('<div class="hidden css-layer"></div>');
    var widthPxs = props.width,
        heightPxs = height / width * widthPxs;
    _this.jContainer.width(widthPxs).height(heightPxs);
    _this.scale.x /= widthPxs / width;
    _this.scale.y /= widthPxs / width;

    _this.setData();
    _this.set(_this.jContainer[0]);
    return _this;
  }

  CSSLayer.prototype.callInternal = function callInternal(name) {
    if (this.object && this.object[name]) {
      try {
        this.object[name]();
      } catch (e) {
        console.error(e);
      }
    }
  };

  CSSLayer.prototype.dispose = function dispose() {
    this.clearInternals();
  };

  CSSLayer.prototype.clearInternals = function clearInternals() {
    this.callInternal('dispose');
    !this.css || this.css.remove();
    !this.html || this.html.remove();
  };

  CSSLayer.prototype.setData = function setData() {
    var css = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    var html = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    var js = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';

    this.clearInternals();

    this.css = (0, _libs.$)('<style type="text/css">' + css + '</style>').appendTo(this.jContainer);
    this.html = (0, _libs.$)(html).appendTo(this.jContainer);
    var init = eval(js);
    if (init) {
      this.object = init(this.jContainer, this.props) || {};
    }
  };

  CSSLayer.prototype.pendedCall = function pendedCall(clb) {
    var _this2 = this;

    var timestamp = this.timestamp = Date.now();
    setTimeout(function () {
      if (timestamp === _this2.timestamp) {
        clb();
      }
    }, CSSLayer.delay);
  };

  CSSLayer.prototype.isHidden = function isHidden() {
    return this.jContainer.hasClass('hidden');
  };

  CSSLayer.prototype.hide = function hide() {
    var _this3 = this;

    var res = void 0;
    if (!this.isHidden()) {
      this.jContainer.addClass('hidden');
      this.callInternal('hide');
      res = new Promise(function (resolve) {
        _this3.pendedCall(function () {
          _this3.callInternal('hidden');
          resolve();
        });
      });
    } else {
      res = Promise.resolve();
    }
    return res;
  };

  CSSLayer.prototype.show = function show() {
    var _this4 = this;

    var res = void 0;
    if (this.isHidden()) {
      this.jContainer.removeClass('hidden');
      this.callInternal('show');
      res = new Promise(function (resolve) {
        _this4.pendedCall(function () {
          _this4.callInternal('shown');
          resolve();
        });
      });
    } else {
      res = Promise.resolve();
    }
    return res;
  };

  return CSSLayer;
}(_CSS3DRenderer.CSS3DObject);

exports.default = CSSLayer;

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Cache = function () {
  function Cache() {
    var maxSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Infinity;
    var sizeof = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Cache.countSizeof;

    _classCallCheck(this, Cache);

    this.os = new Map();
    this.sizeof = sizeof;
    this.maxSize = maxSize;
    this.size = 0;
  }

  Cache.prototype.forEach = function forEach(clb) {
    this.os.forEach(function (v, k) {
      return clb([k, v]);
    });
  };

  Cache.countSizeof = function countSizeof(value) {
    return 1;
  };

  Cache.prototype.remove = function remove(k) {
    var res = false;
    var v = this.os.get(k);
    if (!v.locked || !v.locked(k)) {
      this.size -= this.sizeof(v);
      if (v.dispose) {
        v.dispose();
      }
      this.os.delete(k);
      res = true;
    }
    return res;
  };

  Cache.prototype.freeSpace = function freeSpace() {
    var arr = [];
    for (var _iterator = this.os, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var p = _ref;

      arr.push({ timestamp: p[1].timestamp, key: p[0] });
    }
    arr.sort(function (a, b) {
      return a.timestamp - b.timestamp;
    });
    for (var i = 0; i < arr.length && this.size > 3 * this.maxSize / 4; ++i) {
      this.remove(arr[i].key);
    }
  };

  Cache.prototype.dispose = function dispose() {
    var arr = [];
    for (var _iterator2 = this.os, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
      var _ref2;

      if (_isArray2) {
        if (_i2 >= _iterator2.length) break;
        _ref2 = _iterator2[_i2++];
      } else {
        _i2 = _iterator2.next();
        if (_i2.done) break;
        _ref2 = _i2.value;
      }

      var p = _ref2;

      arr.push({ v: p[1], k: p[0] });
    }
    for (var _iterator3 = arr, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
      var _ref3;

      if (_isArray3) {
        if (_i3 >= _iterator3.length) break;
        _ref3 = _iterator3[_i3++];
      } else {
        _i3 = _iterator3.next();
        if (_i3.done) break;
        _ref3 = _i3.value;
      }

      var o = _ref3;

      if (o.v.dispose) {
        o.v.dispose();
      }
      this.os.delete(o.k);
    }
  };

  Cache.recursionSizeof = function recursionSizeof(value) {
    var size = 0;
    if (value) {
      ++size;
      var len = value.length;
      if (len === undefined) {
        for (var p in value) {
          if (value.hasOwnProperty(p)) {
            size += Cache.recursionSizeof(value[p]);
          }
        }
      } else {
        size += len;
      }
    }
    return size;
  };

  Cache.prototype.getTimestamp = function getTimestamp() {
    return Date.now();
  };

  Cache.prototype.get = function get(key) {
    var value = this.os.get(key);
    if (value) {
      value.timestamp = this.getTimestamp();
    }
    return value;
  };

  Cache.prototype.put = function put(key, value) {
    value.timestamp = this.getTimestamp();
    this.os.set(key, value);
    this.size += this.sizeof(value);
    if (this.size > this.maxSize) {
      this.freeSpace();
    }
    return value;
  };

  return Cache;
}();

exports.default = Cache;

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Controller = function (_THREE$EventDispatche) {
  _inherits(Controller, _THREE$EventDispatche);

  function Controller() {
    _classCallCheck(this, Controller);

    return _possibleConstructorReturn(this, _THREE$EventDispatche.apply(this, arguments));
  }

  Controller.prototype.handleDefault = function handleDefault(id, e, data) {
    //console.log(id+'-'+e.type+'-'+data);
  };

  Controller.prototype.dispatchAsync = function dispatchAsync(e) {
    var _this2 = this;

    Promise.resolve().then(function () {
      return _this2.dispatchEvent(e);
    });
  };

  Controller.prototype.dispose = function dispose() {};

  return Controller;
}(_libs.THREE.EventDispatcher);

exports.default = Controller;

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _EventConverter2 = __webpack_require__(6);

var _EventConverter3 = _interopRequireDefault(_EventConverter2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var CustomEventConverter = function (_EventConverter) {
  _inherits(CustomEventConverter, _EventConverter);

  // custom
  // testIntersection(e, data);
  // custom.object
  // test(object);

  function CustomEventConverter(wnd, doc) {
    var customTest = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {
      return false;
    };
    var eDoc = arguments[3];

    _classCallCheck(this, CustomEventConverter);

    var _this = _possibleConstructorReturn(this, _EventConverter.call(this, wnd, doc));

    _this.eDoc = eDoc;
    _this.customTest = customTest;
    _this.customs = [];
    return _this;
  }

  CustomEventConverter.prototype.test = function test(object1, object2) {
    return object1 && object2 ? this.customTest(object1, object2) : false;
  };

  CustomEventConverter.prototype.getCallback = function getCallback(object) {
    return object.target.callback;
  };

  CustomEventConverter.prototype.addCustom = function addCustom(custom) {
    this.customs.push(custom);
  };

  CustomEventConverter.prototype.getObject = function getObject(e, data) {
    var object = void 0;
    if (data.doc === this.eDoc) {
      for (var _iterator = this.customs, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
        var _ref;

        if (_isArray) {
          if (_i >= _iterator.length) break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done) break;
          _ref = _i.value;
        }

        var custom = _ref;

        object = custom.testIntersection(e, data);
        if (object) {
          break;
        }
      }
    }
    return object;
  };

  return CustomEventConverter;
}(_EventConverter3.default);

exports.default = CustomEventConverter;

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _Utils = __webpack_require__(4);

var _Utils2 = _interopRequireDefault(_Utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Finder = function () {
  Finder.isDelimetr = function isDelimetr(s) {
    return s === Finder.DELIMITER;
  };

  Finder.prototype.merge = function merge() {
    var as = [],
        map = [],
        strs = this.strs;
    var p = 0;
    for (var i = 0; i < strs.length; ++i) {
      if (strs[i].length) {
        map.push({
          base: i,
          offset: p
        });
        as.push(strs[i]);
        p += strs[i].length;
        if (i < strs.length - 1 && !Finder.isDelimetr(strs[i].charAt(strs[i].length - 1)) && !Finder.isDelimetr(strs[i + 1].charAt(0))) {
          as.push(Finder.DELIMITER);
          ++p;
        }
      }
    }
    this.map = map;
    this.str = as.join('');
  };

  Finder.prototype.addHits = function addHits(p) {
    var info = this.map[_Utils2.default.lowerBound(this.map, { offset: p }, function (a, b) {
      return a.offset - b.offset;
    })];
    var chars = this.pattern.length,
        i = info.base;
    p -= info.offset;
    while (chars) {
      if (this.strs[i].length) {
        var delimeter = i < this.strs.length - 1 && !Finder.isDelimetr(this.strs[i].charAt(this.strs[i].length - 1)) && !Finder.isDelimetr(this.strs[i + 1].charAt(0)),
            length = Math.min(this.strs[i].length + (delimeter ? 1 : 0) - p, chars);
        if (p < this.strs[i].length) {
          this.hits.push({
            index: i,
            offset: p,
            length: Math.min(length, this.strs[i].length - p)
          });
        }
        chars -= length;
        ++i;
        p = 0;
      }
    }
  };

  Finder.prototype.addContext = function addContext(p) {
    var f = p,
        l = p + this.pattern.length - 1,
        dels = this.props.contextLength,
        prevDels = dels + 1;
    while (dels && prevDels - dels) {
      prevDels = dels;
      if (dels % 2) {
        for (var i = f - 2; i >= 0; --i) {
          if (Finder.isDelimetr(this.str[i]) || i === 0) {
            f = i === 0 ? 0 : i + 1;
            --dels;
            break;
          }
        }
      } else {
        for (var _i = l + 2; _i < this.str.length; ++_i) {
          if (Finder.isDelimetr(this.str[_i]) || _i === this.str.length - 1) {
            l = _i === this.str.length - 1 ? _i === this.str.length - 1 : _i - 1;
            --dels;
            break;
          }
        }
      }
    }
    this.contexts.push(this.str.substr(f, l - f + 1));
  };

  Finder.prototype.getHits = function getHits() {
    return this.hits;
  };

  Finder.prototype.getContexts = function getContexts() {
    return this.contexts;
  };

  function Finder(strs, pattern, props) {
    _classCallCheck(this, Finder);

    this.props = _extends({}, Finder.defaults, props);
    this.strs = strs;
    var data = this.merge(strs);
    this.hits = [];
    this.contexts = [];
    this.pattern = pattern.toLowerCase();
    this.lstr = this.str.toLowerCase();
    var p = 0;
    while (true) {
      p = this.lstr.indexOf(this.pattern, p);
      if (p === -1) {
        break;
      } else {
        this.addHits(p);
        this.addContext(p);
        p += this.pattern.length;
      }
    }
  }

  return Finder;
}();

Finder.DELIMITER = ' ';
Finder.defaults = {
  contextLength: 7,
  hits: true,
  contexts: true
};
exports.default = Finder;

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(0);

var _FullScreen2 = __webpack_require__(51);

var _FullScreen3 = _interopRequireDefault(_FullScreen2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var FullScreenX = function (_FullScreen) {
	_inherits(FullScreenX, _FullScreen);

	function FullScreenX() {
		_classCallCheck(this, FullScreenX);

		return _possibleConstructorReturn(this, _FullScreen.apply(this, arguments));
	}

	FullScreenX.available = function available() {
		return true;
	};

	FullScreenX.activated = function activated() {
		return _FullScreen.available.call(this) ? _FullScreen.activated.call(this) : FullScreenX.node.hasClass(FullScreenX.classX);
	};

	FullScreenX.addEventListener = function addEventListener(element, handler) {
		if (_FullScreen.available.call(this)) {
			_FullScreen.addEventListener.call(this, element, handler);
		} else {
			FullScreenX.handler = handler;
		}
	};

	FullScreenX.removeEventListener = function removeEventListener(element, handler) {
		if (_FullScreen.available.call(this)) {
			_FullScreen.removeEventListener.call(this, element, handler);
		} else {
			FullScreenX.handler = FullScreenX.defHandler;
		}
	};

	FullScreenX.request = function request(element) {
		if (_FullScreen.available.call(this)) {
			_FullScreen.request.call(this, element);
		} else {
			if (!FullScreenX.node.hasClass(FullScreenX.classX)) {
				FullScreenX.node = (0, _libs.$)(element || document.body);
				FullScreenX.node.addClass(FullScreenX.classX);
				Promise.resolve().then(FullScreenX.handler);
			}
		}
	};

	FullScreenX.cancel = function cancel() {
		if (_FullScreen.available.call(this)) {
			_FullScreen.cancel.call(this);
		} else {
			if (FullScreenX.node.hasClass(FullScreenX.classX)) {
				FullScreenX.node.removeClass(FullScreenX.classX);
				FullScreenX.node = FullScreenX.defNode;
				Promise.resolve().then(FullScreenX.handler);
			}
		}
	};

	return FullScreenX;
}(_FullScreen3.default);

FullScreenX.defNode = (0, _libs.$)();
FullScreenX.node = FullScreenX.defNode;

FullScreenX.defHandler = function () {
	return undefined;
};

FullScreenX.handler = FullScreenX.defHandler;
FullScreenX.classX = 'fb3d-fullscreenx';
FullScreenX.style = (0, _libs.$)(('\n\t\t<style type="text/css">\n      .' + FullScreenX.classX + ' {\n        position: fixed !important;\n\t\t\t\tleft: 0 !important;\n        top: 0 !important;\n        width: 100% !important;\n        height: 100% !important;\n\t\t\t\tz-index: 2147483647 !important;\n\t\t\t\tmargin: 0 !important;\n\t\t\t\tbox-sizing: border-box !important;\n        background-color: #333;\n      }\n    </style>\n\t').fb3dQFilter()).appendTo('head');
exports.default = FullScreenX;

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(0);

var _Utils = __webpack_require__(4);

var _Utils2 = _interopRequireDefault(_Utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

_libs.PDFJS.GlobalWorkerOptions.workerSrc = (window.PDFJS_LOCALE ? PDFJS_LOCALE : __webpack_require__.i({"pdfJsWorker":"js/pdf.worker.js","pdfJsCMapUrl":"cmaps/"})).pdfJsWorker;
_libs.PDFJS.cMapUrl = (window.PDFJS_LOCALE ? PDFJS_LOCALE : __webpack_require__.i({"pdfJsWorker":"js/pdf.worker.js","pdfJsCMapUrl":"cmaps/"})).pdfJsCMapUrl;
_libs.PDFJS.cMapPacked = true;
_libs.PDFJS.disableAutoFetch = true;
_libs.PDFJS.disableStream = true;
_libs.PDFJS.imageResourcesPath = 'images/pdfjs/';
_libs.PDFJS.externalLinkTarget = _libs.PDFJS.LinkTarget.BLANK;
// PDFJS.disableFontFace = true;

var Pdf = function () {
  function Pdf(src, loadingProgress) {
    var _this = this;

    _classCallCheck(this, Pdf);

    this.src = _Utils2.default.normalizeUrl(src);
    this.handlerQueue = [];
    this.progresData = { loaded: -1, total: 1 };
    this.loadingProgress = loadingProgress;

    this.task = _libs.PDFJS.getDocument({
      url: this.src,
      rangeChunkSize: 512 * 1024,
      cMapUrl: _libs.PDFJS.cMapUrl,
      cMapPacked: _libs.PDFJS.cMapPacked,
      disableAutoFetch: _libs.PDFJS.disableAutoFetch,
      disableStream: _libs.PDFJS.disableStream,
      imageResourcesPath: _libs.PDFJS.imageResourcesPath,
      externalLinkTarget: _libs.PDFJS.externalLinkTarget
      // disableFontFace: PDFJS.disableFontFace
    });
    this.task.onProgress = function (data) {
      if (_this.loadingProgress) {
        var cur = Math.floor(100 * data.loaded / data.total),
            old = Math.floor(100 * _this.progresData.loaded / _this.progresData.total);
        if (cur !== old) {
          cur = isNaN(cur) ? 0 : cur;
          cur = cur > 100 ? 100 : cur;
          Promise.resolve().then(function () {
            _this.loadingProgress(cur);
          });
        }
      }
      _this.progresData = data;
    };
    this.task.promise.then(function (handler) {
      if (handler.numPages > 1) {
        Promise.all([handler.getPage(1), handler.getPage(2)]).then(function (pages) {
          _this.init(handler, pages);
        });
      } else {
        _this.init(handler);
      }
    }).catch(function (e) {
      console.error(e);
      if (_this.errorHandler) {
        _this.errorHandler(e);
      }
    });
  }

  Pdf.prototype.init = function init(handler, pages) {
    this.handler = handler;
    this.doubledPages = pages ? Math.abs(2 * Pdf.getPageSize(pages[0]).width - Pdf.getPageSize(pages[1]).width) / Pdf.getPageSize(pages[0]).width < 0.01 : false;
    var done = Promise.resolve(handler);

    var _loop = function _loop() {
      if (_isArray) {
        if (_i >= _iterator.length) return 'break';
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) return 'break';
        _ref = _i.value;
      }

      var clb = _ref;

      done = done.then(function (handler) {
        clb(handler);
        return handler;
      });
    };

    for (var _iterator = this.handlerQueue.reverse(), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      var _ret = _loop();

      if (_ret === 'break') break;
    }
  };

  Pdf.prototype.getPageType = function getPageType(n) {
    return !this.doubledPages || n === 0 || n === this.getPagesNum() - 1 ? 'full' : n & 1 ? 'left' : 'right';
  };

  Pdf.prototype.getPage = function getPage(n) {
    return this.handler.getPage(this.doubledPages ? Math.ceil(n / 2) + 1 : n + 1);
  };

  Pdf.prototype.getDestination = function getDestination(dest) {
    var _this2 = this;

    var destPromise = void 0;
    if (typeof dest === 'string') {
      destPromise = this.handler.getDestination(dest);
    } else {
      destPromise = Promise.resolve(dest);
    }
    destPromise = destPromise.then(function (dest) {
      return _this2.handler.getPageIndex(dest[0]);
    }).then(function (number) {
      return _this2.doubledPages ? number < 1 ? number : 1 + 2 * (number - 1) : number;
    }).catch(function () {
      return console.error('Bad bookmark');
    });
    return destPromise;
  };

  Pdf.prototype.dispose = function dispose() {
    this.handlerQueue.splice(0, this.handlerQueue.length);
    delete this.handler;
  };

  Pdf.prototype.setLoadingProgressClb = function setLoadingProgressClb(clb) {
    this.loadingProgress = clb;
  };

  Pdf.prototype.setErrorHandler = function setErrorHandler(eh) {
    this.errorHandler = eh;
  };

  Pdf.prototype.getPagesNum = function getPagesNum() {
    return this.handler ? this.doubledPages ? 2 * (this.handler.numPages - 1) : this.handler.numPages : undefined;
  };

  Pdf.getPageSize = function getPageSize(page) {
    return {
      width: page.view[2] - page.view[0],
      height: page.view[3] - page.view[1]
    };
  };

  //   if(pages>1) {
  //   handler.getPage(2).
  //   then((page)=> {
  //     const size1 = Pdf.getPageSize(page);
  //     this.props.doubledPages = 2*size0.width===size1.width;
  //     this.ready();
  //   }).
  //   catch(()=> this.ready());
  // }
  // else {

  Pdf.prototype.getHandler = function getHandler(clb) {
    if (this.handler) {
      clb(this.handler);
    } else {
      this.handlerQueue.push(clb);
    }
  };

  return Pdf;
}();

exports.default = Pdf;

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ThreeEventConverterFs = function () {
  ThreeEventConverterFs.objectsTest = function objectsTest(object1, object2) {
    return object1 && object2 ? object1.object === object2.object : false;
  };

  ThreeEventConverterFs.objectsAndFacesTest = function objectsAndFacesTest(object1, object2) {
    return object1 && object2 ? object1.object === object2.object && object1.face.materialIndex === object2.face.materialIndex : false;
  };

  function ThreeEventConverterFs(visualWorld) {
    var test = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ThreeEventConverterFs.objectsAndFacesTest;

    _classCallCheck(this, ThreeEventConverterFs);

    this.visual = visualWorld;
    this.coords = new _libs.THREE.Vector2();
    this.raycaster = this.visual.raycaster;
    this.camera = this.visual.camera;
    this.threes = [];
    this.test = test;
  }

  ThreeEventConverterFs.prototype.addThree = function addThree(three) {
    this.threes.push(three);
  };

  ThreeEventConverterFs.prototype.removeThree = function removeThree(three) {
    var i = this.threes.indexOf(three);
    if (~i) {
      this.threes.splice(i, 1);
    }
  };

  ThreeEventConverterFs.prototype.getObject = function getObject(e) {
    this.setCoordsFromEvent(e);
    this.raycaster.setFromCamera(this.coords, this.camera);
    var intersects = this.raycaster.intersectObjects(this.threes);
    return intersects[0];
  };

  return ThreeEventConverterFs;
}();

exports.default = ThreeEventConverterFs;

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _BaseMathUtils = __webpack_require__(2);

var _BaseMathUtils2 = _interopRequireDefault(_BaseMathUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ThreeUtils = function () {
  function ThreeUtils() {
    _classCallCheck(this, ThreeUtils);
  }

  ThreeUtils.vertices2UVs = function vertices2UVs(vertices, indeces, first, last, converClb) {
    var r = [];
    for (var i = first; i < last; ++i) {
      var vis = [indeces[i].a, indeces[i].b, indeces[i].c];
      for (var j = 0; j < vis.length; ++j) {
        if (!r[vis[j]]) {
          r[vis[j]] = converClb(vertices[vis[j]]);
        }
      }
    }
    return r;
  };

  ThreeUtils.computeFaceVertexUvs = function computeFaceVertexUvs(geometry, faces) {
    var uvs = [ThreeUtils.vertices2UVs(geometry.vertices, geometry.faces, 0, faces[0], function (p) {
      return new THREE.Vector2(p.x, 1 - p.z);
    }), ThreeUtils.vertices2UVs(geometry.vertices, geometry.faces, faces[0], faces[1], function (p) {
      return new THREE.Vector2(1 - p.x, 1 - p.z);
    }), ThreeUtils.vertices2UVs(geometry.vertices, geometry.faces, faces[1], faces[2], function (p) {
      return new THREE.Vector2(p.x, p.y);
    }), ThreeUtils.vertices2UVs(geometry.vertices, geometry.faces, faces[2], faces[3], function (p) {
      return new THREE.Vector2(1 - p.x, p.y);
    }), ThreeUtils.vertices2UVs(geometry.vertices, geometry.faces, faces[3], faces[4], function (p) {
      return new THREE.Vector2(p.z, p.y);
    }), ThreeUtils.vertices2UVs(geometry.vertices, geometry.faces, faces[4], geometry.faces.length, function (p) {
      return new THREE.Vector2(1 - p.z, p.y);
    })];

    var uvsi = 0;
    for (var i = 0; i < geometry.faces.length; ++i) {
      uvsi += faces[uvsi] === i;
      var f = geometry.faces[i];
      f.materialIndex = uvsi;
      geometry.faceVertexUvs[0][i] = [uvs[uvsi][f.a], uvs[uvsi][f.b], uvs[uvsi][f.c]];
    }
  };

  ThreeUtils.createMarker = function createMarker(p, c, size) {
    var marker = new THREE.Mesh(new THREE.SphereGeometry(size), new THREE.MeshPhongMaterial({ color: c }));
    marker.position.set(p.x, p.y, p.z);
    return marker;
  };

  ThreeUtils.findUvTris = function findUvTris(geometry, ps, first, last) {
    var res = [];
    for (var _iterator = ps, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var p = _ref;

      var found = false;
      for (var i = first; i < last && !found; ++i) {
        var tri = geometry.faceVertexUvs[0][i];
        if (_BaseMathUtils2.default.isInsideConvPoly(tri, p)) {
          res.push({
            coefs: _BaseMathUtils2.default.computeInterpCoefs(tri, p),
            i: i
          });
          found = true;
        }
      }
      if (!found) {
        console.error('Bad point');
        res.push(undefined);
      }
    }
    return res;
  };

  ThreeUtils.findInternalVertices = function findInternalVertices(geometry, ps, first, last) {
    var res = {};
    for (var i = first; i < last; ++i) {
      var tri = geometry.faceVertexUvs[0][i],
          f = geometry.faces[i],
          vs = [f.a, f.b, f.c];
      for (var j = 0; j < tri.length; ++j) {
        if (res[vs[j]] === undefined && _BaseMathUtils2.default.isInsidePoly(ps, tri[j])) {
          res[vs[j]] = {
            p: tri[j],
            i: vs[j],
            n: f.vertexNormals[j]
          };
        }
      }
    }
    return Object.values(res);
  };

  return ThreeUtils;
}();

exports.default = ThreeUtils;

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Target = function () {
  function Target() {
    _classCallCheck(this, Target);
  }

  Target.test = function test(object1, object2) {
    return object1.target === object2.target;
  };

  return Target;
}();

exports.default = Target;

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _libs = __webpack_require__(1);

var _Detector = __webpack_require__(46);

var _Detector2 = _interopRequireDefault(_Detector);

var _VisualWorld = __webpack_require__(67);

var _VisualWorld2 = _interopRequireDefault(_VisualWorld);

var _PdfLinksHandler = __webpack_require__(36);

var _PdfLinksHandler2 = _interopRequireDefault(_PdfLinksHandler);

var _Book = __webpack_require__(27);

var _Book2 = _interopRequireDefault(_Book);

var _BookView = __webpack_require__(30);

var _BookView2 = _interopRequireDefault(_BookView);

var _BookController = __webpack_require__(28);

var _BookController2 = _interopRequireDefault(_BookController);

var _PdfBookPropsBuilder = __webpack_require__(35);

var _PdfBookPropsBuilder2 = _interopRequireDefault(_PdfBookPropsBuilder);

var _ClbBookPropsBuilder = __webpack_require__(31);

var _ClbBookPropsBuilder2 = _interopRequireDefault(_ClbBookPropsBuilder);

var _LoadingController = __webpack_require__(54);

var _LoadingController2 = _interopRequireDefault(_LoadingController);

var _Search = __webpack_require__(59);

var _Search2 = _interopRequireDefault(_Search);

var _Bookmarks = __webpack_require__(45);

var _Bookmarks2 = _interopRequireDefault(_Bookmarks);

var _Thumbnails = __webpack_require__(64);

var _Thumbnails2 = _interopRequireDefault(_Thumbnails);

var _TocController = __webpack_require__(41);

var _TocController2 = _interopRequireDefault(_TocController);

var _BookPrinter = __webpack_require__(29);

var _BookPrinter2 = _interopRequireDefault(_BookPrinter);

var _AutoNavigator = __webpack_require__(25);

var _AutoNavigator2 = _interopRequireDefault(_AutoNavigator);

var _SoundsEnviroment = __webpack_require__(40);

var _SoundsEnviroment2 = _interopRequireDefault(_SoundsEnviroment);

var _FullScreenX = __webpack_require__(18);

var _FullScreenX2 = _interopRequireDefault(_FullScreenX);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_libs.$.fn.FlipBook = function (options) {
  var scene = {
    dispose: function dispose() {
      if (this.ready) {
        !scene.pdfLinksHandler || scene.pdfLinksHandler.dispose();
        delete scene.pdfLinksHandler;
        scene.sounds.dispose();
        delete scene.sounds;
        scene.tocCtrl.dispose();
        delete scene.tocCtrl;
        scene.thumbnails.dispose();
        delete scene.thumbnails;
        !scene.bookmarks || scene.bookmarks.dispose();
        delete scene.bookmarks;
        scene.ctrl.dispose();
        delete scene.ctrl;
        scene.bookPrinter.dispose();
        delete scene.bookPrinter;
        scene.book.dispose();
        delete scene.book;
        scene.propsBuilder.dispose();
        delete scene.propsBuilder;
        delete scene.bookBuilder;
        scene.visual.dispose();
        delete scene.visual;
        scene.view.dispose();
        delete scene.view;
        delete scene.dispose;
      } else {
        this.pendingDispose = true;
      }
    }
  };
  options = _extends({}, options);
  var parentContainer = this.length ? this[0] : (0, _libs.$)('<div>').appendTo('body');
  if (options.activateFullScreen) {
    _FullScreenX2.default.request(parentContainer);
  }
  scene.view = new _BookView2.default(parentContainer, function () {
    if (!_Detector2.default.webgl) {
      _Detector2.default.addGetWebGLMessage({ parent: scene.view.getView() });
    } else {
      scene.loadingCtrl = new _LoadingController2.default(scene.view, true, function (progress) {
        return progress === 0 ? (0, _libs.tr)('Please wait... the Application is Loading') : (0, _libs.tr)('PDF is Loading:') + ' ' + progress + '%';
      });
      scene.visual = new _VisualWorld2.default(scene.view.getContainer().ownerDocument.defaultView, scene.view.getContainer().ownerDocument, scene.view.getView());
      scene.bookBuilder = function (props, sheets, pageCallback) {
        props.cssLayerProps = _extends({}, props.cssLayerProps, {
          scene: scene
        });
        if (options.propertiesCallback) {
          props = options.propertiesCallback(props);
        }
        scene.book = new _Book2.default(scene.visual, sheets, pageCallback, props);
        scene.bookPrinter = new _BookPrinter2.default(scene.visual, scene.book, (options.template || {}).printStyle);
        scene.loadingCtrl.dispose();
        delete scene.loadingCtrl;
        scene.ctrl = new _BookController2.default(scene.book, scene.view, options.controlsProps);
        scene.book.setInjector(function (w) {
          w.jQuery = w.$ = _libs.$;
          w.book = scene.book;
          w.bookCtrl = scene.ctrl;
          if (props.injector) {
            props.injector(w);
          }
        });
        scene.view.addHandler(scene.ctrl);
        scene.ctrl.setPrinter(scene.bookPrinter);
        var test = pageCallback(0);

        scene.search = new _Search2.default(scene.view.getSearchView(), scene.book.getPages());
        scene.search.onQuery = scene.book.setQuery.bind(scene.book);
        scene.book.addEventListener('searchResults', function (e) {
          scene.search.setResults(e.results, e.lastPage);
        });

        scene.thumbnails = new _Thumbnails2.default(scene.visual, scene.view.getThumbnailsView(), pageCallback, 2 * (sheets + 2), { kWtoH: props.width / props.height });
        scene.tocCtrl = new _TocController2.default(scene.view, scene.ctrl);
        scene.tocCtrl.setThumbnails(scene.thumbnails);
        scene.tocCtrl.setSearch(scene.search);
        scene.ctrl.setTocCtrl(scene.tocCtrl);
        scene.view.addHandler(scene.tocCtrl);

        if (test.type === 'pdf') {
          scene.pdfLinksHandler = new _PdfLinksHandler2.default(test.src, scene.ctrl, scene.visual.element);
          scene.book.addEventListener('pdfAnnotation', scene.pdfLinksHandler.handleEvent.bind(scene.pdfLinksHandler));
          test.src.getHandler(function (handler) {
            handler.getOutline().then(function (outline) {
              scene.bookmarks = new _Bookmarks2.default(scene.view.getBookmarksView(), outline);
              scene.tocCtrl.setBookmarks(scene.bookmarks, test.src);
            });
          });
          if (options.pdfLinks && options.pdfLinks.handler) {
            scene.pdfLinksHandler.setHandler(options.pdfLinks.handler);
          }
        }

        scene.sounds = new _SoundsEnviroment2.default(options.template);
        scene.ctrl.setSounds(scene.sounds);
        scene.sounds.subscribeFlips(scene.ctrl);

        scene.ready = true;
        new _AutoNavigator2.default(scene.visual, scene.ctrl, options.autoNavigation).dispose();
        if (options.ready) {
          options.ready(scene);
        }
        if (scene.pendingDispose) {
          scene.dispose();
        }
      };
      if (options.pdf) {
        scene.propsBuilder = new _PdfBookPropsBuilder2.default(options.pdf, scene.bookBuilder, options.bookStyle);
        scene.propsBuilder.pdf.setLoadingProgressClb(scene.loadingCtrl.setProgress.bind(scene.loadingCtrl));
        if (options.error) {
          scene.propsBuilder.pdf.setErrorHandler(options.error);
        }
      } else if (options.pageCallback) {
        scene.propsBuilder = new _ClbBookPropsBuilder2.default(scene.visual, options.pageCallback, options.pages, scene.bookBuilder, options.bookStyle);
      } else {
        scene.propsBuilder = new _ClbBookPropsBuilder2.default(scene.visual, _Book2.default.pageCallback, 6, scene.bookBuilder, options.bookStyle);
      }
    }
  }, options.template);
  return scene;
};

(0, _libs.$)(function () {
  var containers = (0, _libs.$)('.flip-book-container');
  for (var i = 0; i < containers.length; ++i) {
    var jContainer = (0, _libs.$)(containers[i]),
        src = jContainer.attr('src');
    if (!!src) {
      jContainer.FlipBook({ pdf: src });
    }
  }
});

window.jQuery = window.$ = _libs.$;

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


if (!Array.prototype.fill) {
  Array.prototype.fill = function (value) {

    // Шаги 1-2.
    if (this == null) {
      throw new TypeError('this is null or not defined');
    }

    var O = Object(this);

    // Шаги 3-5.
    var len = O.length >>> 0;

    // Шаги 6-7.
    var start = arguments[1];
    var relativeStart = start >> 0;

    // Шаг 8.
    var k = relativeStart < 0 ? Math.max(len + relativeStart, 0) : Math.min(relativeStart, len);

    // Шаги 9-10.
    var end = arguments[2];
    var relativeEnd = end === undefined ? len : end >> 0;

    // Шаг 11.
    var final = relativeEnd < 0 ? Math.max(len + relativeEnd, 0) : Math.min(relativeEnd, len);

    // Шаг 12.
    while (k < final) {
      O[k] = value;
      k++;
    }

    // Шаг 13.
    return O;
  };
}

if (!Array.prototype.find) {
  Object.defineProperty(Array.prototype, 'find', {
    value: function value(predicate) {
      'use strict';

      if (this == null) {
        throw new TypeError('Array.prototype.find called on null or undefined');
      }
      if (typeof predicate !== 'function') {
        throw new TypeError('predicate must be a function');
      }
      var list = Object(this);
      var length = list.length >>> 0;
      var thisArg = arguments[1];
      var value;

      for (var i = 0; i < length; i++) {
        value = list[i];
        if (predicate.call(thisArg, value, i, list)) {
          return value;
        }
      }
      return undefined;
    }
  });
}

if (!Array.prototype.findIndex) {
  Array.prototype.findIndex = function (predicate) {
    if (this == null) {
      throw new TypeError('Array.prototype.findIndex called on null or undefined');
    }
    if (typeof predicate !== 'function') {
      throw new TypeError('predicate must be a function');
    }
    var list = Object(this);
    var length = list.length >>> 0;
    var thisArg = arguments[1];
    var value;

    for (var i = 0; i < length; i++) {
      value = list[i];
      if (predicate.call(thisArg, value, i, list)) {
        return i;
      }
    }
    return -1;
  };
}

if (!Object.values) {
  Object.values = function values(O) {
    return Object.keys(O).map(function (name) {
      return O[name];
    }) || [];
  };
}

if (!RegExp.escape) {
  RegExp.escape = function (s) {
    return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
  };
}

if (!String.prototype.replaceAll) {
  String.prototype.replaceAll = function (search, replace) {
    return this.replace(new RegExp(RegExp.escape(search), 'g'), replace);
  };
}

if (!String.prototype.fb3dQFilter) {
  String.prototype.fb3dQFilter = function () {
    return this.replace(/(\n|\t|  )/g, '');
  };
}

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var AutoNavigator = function () {
  function AutoNavigator(context, bookCtrl) {
    var props = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    _classCallCheck(this, AutoNavigator);

    props = _extends({}, props, {
      urlParam: props.urlParam || 'fb3d-page',
      navigates: props.navigates === undefined ? 1 : props.navigates,
      pageN: props.pageN || 0
    });
    this.props = props;
    this.context = context;
    this.bookCtrl = bookCtrl;
    this.urlParam = props.urlParam;
    this.pageN = props.pageN;
    this.wnd = context.wnd;

    this.wnd.fb3d = _extends({}, this.wnd.fb3d);
    this.wnd.fb3d.navigator = _extends({}, this.wnd.fb3d.navigator);
    this.navigator = this.wnd.fb3d.navigator[this.urlParam] = _extends({}, this.wnd.fb3d.navigator[this.urlParam]);
    this.navigator.instances = (this.navigator.instances || 0) + 1;

    if (this.navigator.instances <= this.props.navigates) {
      this.bookCtrl.goToPage(this.getPageNumber());
    }
  }

  AutoNavigator.prototype.dispose = function dispose() {};

  AutoNavigator.prototype.getParameterByName = function getParameterByName(name, url) {
    if (!url) {
      url = window.location.href;
    }
    name = name.replace(/[\[\]]/g, '\\$&');
    var regex = new RegExp('[?&]' + name + '(=([^]*)|&|#|$)'),
        results = regex.exec(url);
    if (!results) return null;
    if (!results[2]) return '';
    return decodeURIComponent(results[2].replace(/\+/g, ' '));
  };

  AutoNavigator.prototype.getPageNumber = function getPageNumber() {
    var number = parseInt(this.pageN);
    if (isNaN(number) || number === 0) {
      number = this.getParameterByName(this.urlParam);
      number = parseInt(number);
      if (isNaN(number)) {
        number = 1;
      }
    }
    return number - 1;
  };

  return AutoNavigator;
}();

exports.default = AutoNavigator;

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _libs = __webpack_require__(1);

var _MathUtils = __webpack_require__(3);

var _MathUtils2 = _interopRequireDefault(_MathUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Binder = function () {
  function Binder(visual, p) {
    var _this = this;

    _classCallCheck(this, Binder);

    this.visual = visual;
    this.p = _extends({}, p, {
      backSize: 2 * p.cover.depth + p.sheets * p.page.depth
    });
    this.OZ = new _libs.THREE.Vector3(0, 0, 1);

    this.backG = new _libs.THREE.BoxGeometry(p.cover.depth, this.p.backSize, p.cover.height);

    var color = this.p.cover.side === 'color' ? { color: p.cover.color } : {
      color: p.cover.color,
      opacity: 0,
      transparent: true
    };

    this.materials = [new _libs.THREE.MeshPhongMaterial(color), new _libs.THREE.MeshPhongMaterial(color), new _libs.THREE.MeshPhongMaterial(color), new _libs.THREE.MeshPhongMaterial(color), new _libs.THREE.MeshPhongMaterial(color), new _libs.THREE.MeshPhongMaterial(color)];

    var backM = new _libs.THREE.Mesh(this.backG, this.materials);

    if (p.cover.binderTexture !== '') {
      this.visual.textureLoader.load(p.cover.binderTexture, function (texture) {
        _this.materials[1].color.setHex(0xFFFFFF);
        _this.materials[1].map = texture;
        texture.minFilter = _libs.THREE.LinearFilter;
        texture.needsUpdate = true;
        _this.materials[1].needsUpdate = true;
      });
    }

    this.three = new _libs.THREE.Object3D();
    this.back = new _libs.THREE.Object3D();
    this.backRT = new _libs.THREE.Object3D();
    this.backRR = new _libs.THREE.Object3D();
    this.backLT = new _libs.THREE.Object3D();
    this.backLR = new _libs.THREE.Object3D();
    this.leftPivot = new _libs.THREE.Object3D();
    this.rightPivot = new _libs.THREE.Object3D();

    this.back.add(backM);
    this.back.add(this.leftPivot);
    this.back.add(this.rightPivot);
    this.backRT.add(this.back);
    this.backRR.add(this.backRT);
    this.backLT.add(this.backRR);
    this.backLR.add(this.backLT);
    this.three.add(this.backLR);
  }

  Binder.prototype.dispose = function dispose() {
    for (var _iterator = this.materials, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var m = _ref;

      if (m.map) {
        m.map = null;
        m.needsUpdate = true;
      }
      m.dispose();
    }
    delete this.materials;
    this.backG.dispose();
  };

  Binder.prototype.set = function set(angle) {
    var right = void 0,
        left = void 0;
    if (angle > Math.PI / 2) {
      right = Math.PI / 2;
      left = angle - Math.PI / 2;
    } else {
      right = angle;
      left = 0;
    }
    var p = this.p,
        tr1 = { x: -0.5 * p.cover.depth, y: 0.5 * p.backSize - p.cover.depth };
    this.backRT.position.set(tr1.x, tr1.y, 0);
    this.backRR.position.set(-tr1.x, -tr1.y, 0);
    this.backRR.quaternion.setFromAxisAngle(this.OZ, right);

    var tr2 = { x: p.backSize - 2 * p.cover.depth - 0.5 * p.cover.depth, y: 0.5 * p.backSize - p.cover.depth };
    this.backLT.position.set(tr2.x, tr2.y, 0);
    this.backLR.position.set(-tr2.x, -tr2.y, 0);
    this.backLR.quaternion.setFromAxisAngle(this.OZ, left);
  };

  Binder.prototype.setLeft = function setLeft(angle) {
    var PI = Math.PI;
    this.leftPivot.position.set(_MathUtils2.default.interpolateLinear([-PI, -PI / 2], [0, this.p.cover.depth], angle), 0.5 * this.p.backSize - 0.5 * this.p.cover.depth, 0);
    this.leftPivot.quaternion.setFromAxisAngle(this.OZ, angle);
  };

  Binder.prototype.setRight = function setRight(angle) {
    var PI = Math.PI;
    this.rightPivot.position.set(_MathUtils2.default.interpolateLinear([-PI / 2, 0], [this.p.cover.depth, 0], angle), -0.5 * this.p.backSize + 0.5 * this.p.cover.depth, 0);
    this.rightPivot.quaternion.setFromAxisAngle(this.OZ, angle);
  };

  Binder.prototype.joinLeftCover = function joinLeftCover(cover) {
    cover.three.position.set(0, -0.5 * this.p.cover.depth, 0);
    this.leftPivot.add(cover.three);
  };

  Binder.prototype.disconnectLeftCover = function disconnectLeftCover(cover) {
    this.leftPivot.remove(cover.three);
  };

  Binder.prototype.joinRightCover = function joinRightCover(cover) {
    cover.three.position.set(0, -0.5 * this.p.cover.depth, 0);
    this.rightPivot.add(cover.three);
  };

  Binder.prototype.disconnectRightCover = function disconnectRightCover(cover) {
    this.rightPivot.remove(cover.three);
  };

  return Binder;
}();

exports.default = Binder;

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _libs = __webpack_require__(1);

var _book = __webpack_require__(11);

var _GraphUtils = __webpack_require__(7);

var _GraphUtils2 = _interopRequireDefault(_GraphUtils);

var _Binder = __webpack_require__(26);

var _Binder2 = _interopRequireDefault(_Binder);

var _Cover = __webpack_require__(32);

var _Cover2 = _interopRequireDefault(_Cover);

var _SheetBlock = __webpack_require__(10);

var _SheetBlock2 = _interopRequireDefault(_SheetBlock);

var _SheetPhysics = __webpack_require__(39);

var _SheetPhysics2 = _interopRequireDefault(_SheetPhysics);

var _PageManager = __webpack_require__(34);

var _PageManager2 = _interopRequireDefault(_PageManager);

var _CSSLayer = __webpack_require__(13);

var _CSSLayer2 = _interopRequireDefault(_CSSLayer);

var _CssLayersManager = __webpack_require__(33);

var _CssLayersManager2 = _interopRequireDefault(_CssLayersManager);

var _SearchEngine = __webpack_require__(37);

var _SearchEngine2 = _interopRequireDefault(_SearchEngine);

var _CustomEventConverter = __webpack_require__(16);

var _CustomEventConverter2 = _interopRequireDefault(_CustomEventConverter);

var _CircleTarget = __webpack_require__(70);

var _CircleTarget2 = _interopRequireDefault(_CircleTarget);

var _YouTubeApi = __webpack_require__(69);

var _YouTubeApi2 = _interopRequireDefault(_YouTubeApi);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Book = function (_THREE$EventDispatche) {
  _inherits(Book, _THREE$EventDispatche);

  // pageCallback samples

  // (n)=> ({
  //   type: 'image',
  //   src: 'sample.png',
  //   interactive: false
  // });
  //
  // (n)=> ({
  //   type: 'html',
  //   src: 'sample.html',
  //   interactive: true
  // });
  //
  // const pdf = new Pdf('sample.pdf');
  // (n)=> ({
  //   type: 'pdf',
  //   src: pdf,
  //   interactive: false
  // });

  function Book(visual, sheets, pageCallback, props) {
    _classCallCheck(this, Book);

    var _this = _possibleConstructorReturn(this, _THREE$EventDispatche.call(this));

    _this.cssFs = {
      play: function play(player) {
        if (player.play) {
          player.fb3dNoPlay = false;
          (player.play() || { catch: function _catch() {
              return undefined;
            } }).catch(function (e) {
            if (!player.fb3dNoPlay && e.name === 'NotAllowedError') {
              _this.pendingPlayers.push(player);
              _this.dispatchEvent({
                type: 'pendingPlayers'
              });
            }
          });
        } else if ((0, _libs.$)(player).hasClass('youtube')) {
          var p = player.player;
          player.fb3dNoPlay = false;
          if (p && p.playVideo) {
            p.playVideo();
          } else {
            setTimeout(function () {
              if (!player.fb3dNoPlay) {
                _this.cssFs.play(player);
              }
            }, 200);
          }
        }
      },
      pause: function pause(player) {
        if (player.pause) {
          player.fb3dNoPlay = true;
          player.pause();
        } else if ((0, _libs.$)(player).hasClass('youtube')) {
          var p = player.player;
          player.fb3dNoPlay = true;
          if (p && p.pauseVideo) {
            p.pauseVideo();
          }
        }
      }
    };

    _this.visual = visual;
    _this.mouseController = true;
    _this.p = _extends({}, _this.prepareProps(props), {
      sheets: sheets,
      pageCallback: pageCallback,
      zoom: 1,
      singlePage: false,
      autoResolution: {
        enable: false,
        k: 1.5
      }
    });
    _this.userDirection = {
      lastTopPage: 0,
      direction: 1
    };
    _this.pageManager = new _PageManager2.default(visual, _this, _this.p);
    _CSSLayer2.default.init(visual.doc);
    _this.layerManager = new _CssLayersManager2.default(_this);
    _this.searchEngine = new _SearchEngine2.default(pageCallback, 2 * (sheets + 2));
    _this.searchEngine.onPageHitsChanged = function (page, query) {
      _this.pageManager.refreshPageQuery(page, query);
      _this.dispatchEvent({
        type: 'searchResults',
        results: _this.searchEngine.results,
        lastPage: page,
        query: query
      });
    };

    _this.three = new _libs.THREE.Object3D();

    _this.binder = new _Binder2.default(visual, _this.p);
    _this.three.add(_this.binder.three);

    _this.leftCover = new _Cover2.default(visual, _extends({}, _this.p, { setTexture: _this.setLeftCoverTexture.bind(_this) }), Math.PI / 2, 'opened');
    _this.binder.joinLeftCover(_this.leftCover);
    _this.subscribeSheetBlock(_this.leftCover, 0);
    _this.rightCover = new _Cover2.default(visual, _extends({}, _this.p, { setTexture: _this.setRightCoverTexture.bind(_this) }), 0, 'closed');
    _this.binder.joinRightCover(_this.rightCover);
    _this.subscribeSheetBlock(_this.rightCover, 2 * (_this.p.sheets + 1));

    _this.threeSheetBlocks = new _libs.THREE.Object3D();
    _this.three.add(_this.threeSheetBlocks);
    _this.threeSheetBlocks.position.set(0.5 * _this.p.cover.depth - 0.5 * sheets * _this.p.page.depth, -0.5 * sheets * _this.p.page.depth, 0);

    _this.sheetBlocks = [];
    if (sheets > 0) {
      _this.addSheetBlock(0, new _SheetBlock2.default(visual, _extends({}, _this.p, { setTexture: _this.setPageTexture.bind(_this) }), 0, sheets, 0, 'closed'));
    }

    _this.angle = _this.p.rtl ? Math.PI : 0;
    _this.closedAngle = 0;
    _this.set(_this.angle, 0);
    _this.lastMousePos = {
      t: 0
    };

    _this.pendingPlayers = [];

    _this.three.position.set(-0.5 * _this.p.cover.depth + 0.5 * sheets * _this.p.page.depth, 0, 0);
    _this.sheetPhysics = new _SheetPhysics2.default(_this.p.page.width / _this.p.scale, _this.p.gravity, _this.p.page.cornerDeviation);

    _this.binds = {
      update: _this.update.bind(_this),
      lastMousePos: function lastMousePos(e) {
        _this.lastMousePos = _extends({}, _this.lastMousePos, {
          pageX: e.pageX,
          pageY: e.pageY
        });
      }
    };
    _this.visual.addRenderCallback(_this.binds.update);
    (0, _libs.$)(_this.visual.element).on('mousemove', _this.binds.lastMousePos);

    _this.binds.onPickCallback = _this.onPickCallback.bind(_this);
    _this.visual.drag.onPickCallback = _this.binds.onPickCallback;
    _this.binds.onDragCallback = _this.onDragCallback.bind(_this);
    _this.visual.drag.onDragCallback = _this.binds.onDragCallback;
    _this.binds.onReleaseCallback = _this.onReleaseCallback.bind(_this);
    _this.visual.drag.onReleaseCallback = _this.binds.onReleaseCallback;

    _this.dragAngle = 0.05;
    _this.tmp = {
      boxs: [new _libs.THREE.Box3(), new _libs.THREE.Box3()]
    };

    _this.visual.addObject(_this.three);
    _this.visual.addEventListener('resize', _this.pageManager.refreshZoom.bind(_this.pageManager));

    setTimeout(function () {
      if (!_this.isProcessing()) {
        _this.notifyBeforeAnimation();
        _this.notifyAfterAnimation();
      }
    }, 100);

    _this.updateThree();
    return _this;
  }

  Book.prototype.dispose = function dispose() {
    this.visual.removeObject(this.three);
    this.sheetPhysics.dispose();
    delete this.visual.drag.onPickCallback;
    delete this.visual.drag.onDragCallback;
    delete this.visual.drag.onReleaseCallback;
    (0, _libs.$)(this.visual.element).off('mousemove', this.binds.lastMousePos);
    this.visual.removeRenderCallback(this.binds.update);
    this.removeSheetBlocks(0, this.sheetBlocks.length);
    this.binder.disconnectLeftCover(this.leftCover);
    this.removeSheetBlock(this.leftCover);
    this.binder.disconnectRightCover(this.rightCover);
    this.removeSheetBlock(this.rightCover);
    this.binder.dispose();
    this.layerManager.dispose();
    _CSSLayer2.default.dispose();
    this.pageManager.dispose();
  };

  // publics {

  Book.prototype.hasPendingPlayers = function hasPendingPlayers() {
    return this.pendingPlayers.length > 0;
  };

  Book.prototype.resolvePendingPlayers = function resolvePendingPlayers() {
    for (var _iterator = this.pendingPlayers, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var p = _ref;

      p.play();
    }
    this.pendingPlayers = [];
    this.dispatchEvent({
      type: 'pendingPlayers'
    });
  };

  Book.prototype.updateThree = function updateThree() {
    this.three.userData.needsUpdate = true;
  };

  Book.prototype.setAutoResolution = function setAutoResolution(enable) {
    var k = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1.5;

    this.p.autoResolution = _extends({}, this.p.autoResolution, {
      enable: enable,
      k: k
    });
  };

  Book.prototype.setZoom = function setZoom(zoom, singlePage) {
    if (Math.abs(this.p.zoom - zoom) > 1e-3 || singlePage !== this.p.singlePage) {
      this.p.zoom = zoom;
      this.p.singlePage = singlePage;
      this.pageManager.refreshZoom();
    }
  };

  Book.prototype.getPageCallback = function getPageCallback() {
    return this.p.pageCallback;
  };

  Book.prototype.setQuery = function setQuery(query) {
    this.searchEngine.setQuery(query);
  };

  Book.prototype.isProcessing = function isProcessing() {
    return this.sheetPhysics.getSize() !== 0;
  };

  Book.prototype.getPages = function getPages() {
    return 4 + 2 * this.p.sheets;
  };

  Book.prototype.setFlipProgressClb = function setFlipProgressClb(clb) {
    this.p.flipProgressClb = clb;
  };

  Book.prototype.setInjector = function setInjector(injector) {
    this.p.injector = injector;
  };

  Book.prototype.isActivePage = function isActivePage(n) {
    var res = true;
    if (n > 1 && n < this.getPages() - 2) {
      for (var _iterator2 = this.sheetBlocks, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
        var _ref2;

        if (_isArray2) {
          if (_i2 >= _iterator2.length) break;
          _ref2 = _iterator2[_i2++];
        } else {
          _i2 = _iterator2.next();
          if (_i2.done) break;
          _ref2 = _i2.value;
        }

        var b = _ref2;

        if (n - 2 > 2 * b.p.first && n - 2 < 2 * b.p.last - 1) {
          res = false;
          break;
        }
      }
    }
    return res;
  };

  Book.prototype.getBlockByPage = function getBlockByPage(n) {
    var block = void 0;
    if (n < 2) {
      block = this.leftCover;
    } else if (n < 2 * (this.p.sheets + 1)) {
      for (var _iterator3 = this.sheetBlocks, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
        var _ref3;

        if (_isArray3) {
          if (_i3 >= _iterator3.length) break;
          _ref3 = _iterator3[_i3++];
        } else {
          _i3 = _iterator3.next();
          if (_i3.done) break;
          _ref3 = _i3.value;
        }

        var b = _ref3;

        if (n - 2 >= 2 * b.p.first && n - 2 < 2 * b.p.last) {
          block = b;
          break;
        }
      }
    } else {
      block = this.rightCover;
    }
    return block;
  };

  Book.prototype.getBlockPages = function getBlockPages(block) {
    var range = void 0;
    switch (block) {
      case this.leftCover:
        {
          range = [0, 1];
          break;
        }
      case this.rightCover:
        {
          range = [2 * (this.p.sheets + 1), 2 * (this.p.sheets + 1) + 1];
          break;
        }
      default:
        {
          range = block ? [2 * (block.p.first + 1), 2 * (block.p.last + 1) - 1] : undefined;
        }
    }
    return range;
  };

  Book.prototype.getPage = function getPage() {
    var PI = Math.PI;
    var p = void 0;
    if (this.angle === PI / 2 || this.angle === 3 * PI / 2) {
      for (var _iterator4 = this.sheetBlocks, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {
        var _ref4;

        if (_isArray4) {
          if (_i4 >= _iterator4.length) break;
          _ref4 = _iterator4[_i4++];
        } else {
          _i4 = _iterator4.next();
          if (_i4.done) break;
          _ref4 = _i4.value;
        }

        var block = _ref4;

        if (block.angle <= PI / 2) {
          p = this.getBlockPages(block)[0] - 1;
          break;
        }
      }
      if (!p) {
        p = this.getPages() - 3;
      }
    } else if (this.angle < PI / 2) {
      p = 0;
    } else if (this.angle > 3 * PI / 2) {
      p = 1;
    } else if (this.angle < PI) {
      p = this.getPages() - 3;
    } else if (this.angle >= PI) {
      p = this.getPages() - 1;
    }
    return p;
  };

  Book.prototype.getTopPages = function getTopPages() {
    var p = this.getPage();
    return p === 0 || p === this.getPages() - 1 ? [p] : [p, p + 1];
  };

  Book.prototype.getPageState = function getPageState(n) {
    return this.pageManager.getPageState(n);
  };

  Book.prototype.enableLoadingAnimation = function enableLoadingAnimation(enable) {
    this.pageManager.enableLoadingAnimation(enable);
  };

  Book.prototype.getLeftFlipping = function getLeftFlipping() {
    var block = void 0;
    var left = this.sheetBlocks[0],
        PI = Math.PI;
    if (this.angle === PI) {
      block = this.rightCover;
    } else {
      if (left && left.state === 'closed' && left.angle > PI / 2) {
        block = left;
      } else if (this.angle === PI / 2 || this.angle === 3 * PI / 2) {
        block = this.leftCover;
      }
    }
    return block;
  };

  Book.prototype.getRightFlipping = function getRightFlipping() {
    var block = void 0;
    var right = this.sheetBlocks[this.sheetBlocks.length - 1],
        PI = Math.PI;
    if (this.angle === 0) {
      block = this.leftCover;
    } else {
      if (right && right.state === 'closed' && right.angle <= PI / 2) {
        block = right;
      } else if (this.angle === PI / 2 || this.angle === 3 * PI / 2) {
        block = this.rightCover;
      }
    }
    return block;
  };

  Book.prototype.getClosedBlockAngle = function getClosedBlockAngle(angle) {
    var closedAngle = void 0,
        PI = Math.PI;

    if (this.leftCover.physicId) {
      var test = void 0;
      try {
        test = Math.abs(this.sheetPhysics.getParametr(this.leftCover.physicId, 'angle') - angle);
      } catch (e) {
        test = 0;
      }
      closedAngle = angle > PI / 2 || test > PI / 6 ? PI / 2 : this.closedAngle;
    } else if (this.rightCover.physicId) {
      var _test = void 0;
      try {
        _test = Math.abs(this.sheetPhysics.getParametr(this.rightCover.physicId, 'angle') - angle);
      } catch (e) {
        _test = 0;
      }
      closedAngle = angle < PI / 2 || _test > PI / 6 ? PI / 2 + 1e-7 : this.closedAngle;
    } else {
      closedAngle = PI / 2 + (angle !== 0) * 1e-7;
    }

    return {
      openedAngle: angle,
      closedAngle: closedAngle,
      binderTurn: this.closedAngle
    };
  };

  Book.prototype.flipLeft = function flipLeft() {
    var _this2 = this;

    var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
    var progressClb = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.p.flipProgressClb;

    var block = void 0,
        res = void 0;
    if (this.sheetPhysics.getSize() < 25) {
      var left = this.sheetBlocks[0],
          PI = Math.PI;
      if (this.angle === PI) {
        res = this.connectPhysics(block = this.rightCover, this.p.cover.mass, PI, -this.p.cover.startVelocity, this.p.cover.flexibility, 0, function (angle, height) {
          return _this2.set(3 * PI / 2 - angle / 2, height);
        }, function (angle, height) {
          _this2.set(3 * PI / 2 - angle / 2, 0);
          _this2.setSheetBlocks(angle ? PI : PI / 2 + 1e-7, 'closed');
        }, progressClb);
      } else {
        if (left && left.state === 'closed' && left.angle > PI / 2) {
          block = size < left.getSize() ? this.splitSheetBlock(0, left.getSize() - size)[1] : left;
          res = this.connectPhysics(block, this.p.page.mass * block.getSize(), PI, -this.p.page.startVelocity, this.p.page.flexibility, 0, function (angle, height) {
            return block.set(_this2.getClosedBlockAngle(angle), 'opened', height);
          }, Book.finishAnimationClb.bind({ book: this, block: block }), progressClb);
        } else if (this.angle === PI / 2 || this.angle === 3 * PI / 2) {
          res = this.connectPhysics(block = this.leftCover, this.p.cover.mass, PI, -this.p.cover.startVelocity, this.p.cover.flexibility, 0, function (angle, height) {
            _this2.set(2 * PI - angle / 2, height);
            if (angle > PI / 2) {
              _this2.setSheetBlocks(angle ? PI / 2 : 0, 'closed');
            }
          }, function (angle, height) {
            return _this2.set(angle === 0 ? 0 : 2 * PI - angle / 2, 0);
          }, progressClb);
        }
      }
    }
    return res;
  };

  Book.prototype.flipRight = function flipRight() {
    var _this3 = this;

    var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
    var progressClb = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.p.flipProgressClb;

    var block = void 0,
        res = void 0;
    if (this.sheetPhysics.getSize() < 25) {
      var right = this.sheetBlocks[this.sheetBlocks.length - 1],
          PI = Math.PI;
      if (this.angle === 0) {
        res = this.connectPhysics(block = this.leftCover, this.p.cover.mass, 0, this.p.cover.startVelocity, this.p.cover.flexibility, 0, function (angle, height) {
          return _this3.set(angle / 2, height);
        }, function (angle, height) {
          _this3.set(angle / 2, 0);
          _this3.setSheetBlocks(angle ? PI / 2 : 0, 'closed');
        }, progressClb);
      } else {
        if (right && right.state === 'closed' && right.angle <= PI / 2) {
          block = size < right.getSize() ? this.splitSheetBlock(this.sheetBlocks.length - 1, size)[0] : right;
          res = this.connectPhysics(block, this.p.page.mass * block.getSize(), 0, this.p.page.startVelocity, this.p.page.flexibility, 0, function (angle, height) {
            return block.set(_this3.getClosedBlockAngle(angle), 'opened', height);
          }, Book.finishAnimationClb.bind({ book: this, block: block }), progressClb);
        } else if (this.angle === PI / 2 || this.angle === 3 * PI / 2) {
          res = this.connectPhysics(block = this.rightCover, this.p.cover.mass, 0, this.p.cover.startVelocity, this.p.cover.flexibility, 0, function (angle, height) {
            _this3.set(PI / 2 + angle / 2, height);
            if (angle < PI / 2) {
              _this3.setSheetBlocks(PI / 2 + 1e-7, 'closed');
            }
          }, function (angle, height) {
            return _this3.set(PI / 2 + angle / 2, 0);
          }, progressClb);
        }
      }
    }
    return res;
  };

  // }

  Book.prototype.clearHoverInfo = function clearHoverInfo() {
    this.pageManager.turnOnEvents();
    delete this.hoverInfo.block.force;
    delete this.hoverInfo.block.cornerForce;
    delete this.hoverInfo;
  };

  Book.prototype.xSegment = function xSegment() {
    var boxs = this.tmp.boxs,
        res = {};
    if (this.leftCover.physicId) {
      boxs[0].setFromObject(this.rightCover.three);
      res.min = -(res.max = boxs[0].max.x);
    } else if (this.rightCover.physicId) {
      boxs[0].setFromObject(this.leftCover.three);
      res.max = -(res.min = boxs[0].min.x);
    } else {
      boxs[0].setFromObject(this.leftCover.three);
      boxs[1].setFromObject(this.rightCover.three);
      boxs[0].union(boxs[1]);
      res.min = boxs[0].min.x;
      res.max = boxs[0].max.x;
    }
    return res;
  };

  Book.prototype.computeTarget = function computeTarget(point) {
    var x = point.x,
        y = point.y,
        seg = this.xSegment(),
        angle = void 0;

    angle = (seg.max - x) / (seg.max - seg.min) * Math.PI;
    // angle = Math.acos(x/Math.sqrt(x*x+y*y));
    return Math.max(this.dragAngle, Math.min(Math.PI - this.dragAngle, angle));
  };

  Book.prototype.onPickCallback = function onPickCallback(object) {
    var res = false;
    var block = object.object.userData.self,
        p = _extends({}, object.uv),
        i = object.face.materialIndex;
    if (i < 2) {
      p.x = i === 0 ? p.x : 1 - p.x;
      if (block.cornerTarget.testIntersection(null, p) && block.physicId) {
        if (this.hoverInfo) {
          this.clearHoverInfo();
        }
        block.force = _SheetPhysics2.default.dragForceClb;
        block.cornerForce = _SheetPhysics2.default.getDragCornerForceClb(this.computeTarget(object.point));
        this.dragInfo = {
          object: object,
          block: block
        };
        res = true;
        this.pageManager.turnOffEvents();
      }
    }
    return res;
  };

  Book.prototype.onDragCallback = function onDragCallback(point) {
    var block = this.dragInfo.block,
        p = block.getProps();
    block.force = _SheetPhysics2.default.dragForceClb;
    block.cornerForce = _SheetPhysics2.default.getDragCornerForceClb(this.computeTarget(point));
    return true;
  };

  Book.prototype.onReleaseCallback = function onReleaseCallback() {
    delete this.dragInfo.block.force;
    delete this.dragInfo.block.cornerForce;
    delete this.dragInfo;
    this.pageManager.turnOnEvents();
  };

  Book.prototype.getFlipping = function getFlipping(i) {
    return i ? this.getLeftFlipping() : this.getRightFlipping();
  };

  Book.prototype.flip = function flip(i) {
    var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

    return i ? this.flipLeft(size) : this.flipRight(size);
  };

  Book.prototype.enableMouse = function enableMouse(enable) {
    this.mouseController = enable;
  };

  Book.prototype.cornerCallback = function cornerCallback(e, data) {
    var _this4 = this;

    if (this.mouseController) {
      var _data$data = data.data,
          i = _data$data.i,
          n = _data$data.n;

      if (e.type === 'mouseover') {
        if (this.hoverInfo && this.hoverInfo.pendings !== undefined) {
          ++this.hoverInfo.pendings;
        } else {
          if (this.hoverInfo) {
            console.warn('Wrong state: element is already hover');
            if (this.hoverInfo.n !== n) {
              this.clearHoverInfo();
            }
          }
          if (!this.hoverInfo && !this.dragInfo) {
            var res = Promise.resolve(undefined);
            var hoverAngle = 0.02,
                hover = this.getBlockByPage(n),
                possible = this.getFlipping(i);
            if (n > 1 && n < 2 * (this.p.sheets + 1) && hover.physicId && (hover.angle < hoverAngle || hover.angle > Math.PI - hoverAngle)) {
              res = Promise.resolve(hover);
            } else if (hover === possible) {
              var sheetBlocks = [this.leftCover].concat(this.sheetBlocks, [this.rightCover]);
              var j = sheetBlocks.indexOf(hover),
                  nextBlock = ~j ? sheetBlocks[j + 2 * i - 1] : undefined;
              if (!nextBlock || !nextBlock.physicId || nextBlock.angle > hoverAngle && nextBlock.angle < Math.PI - hoverAngle) {
                res = this.flip(i, 1).then(function (block) {
                  if (!block) {
                    delete _this4.hoverInfo;
                  } else {
                    _this4.sheetPhysics.setParametr(block.physicId, 'velocity', 0);
                  }
                  return block;
                });
                this.hoverInfo = {
                  pendings: 1
                };
              }
            }
            res.then(function (block) {
              if (_this4.hoverInfo && _this4.hoverInfo.pendings < 1) {
                block = undefined;
                delete _this4.hoverInfo;
              }
              if (block) {
                _this4.pageManager.turnOffEvents();
                var p = block.getProps();
                block.force = _this4.sheetPhysics.getTargetForceClb(p.mass * block.getSize(), i ? Math.PI - hoverAngle : hoverAngle);
                block.cornerForce = function () {
                  return (i ? -1 : 1) * _SheetPhysics2.default.hoverCornerForceClb();
                };
                _this4.sheetPhysics.setParametr(block.physicId, 'angle', i ? Math.PI - 0.5 * hoverAngle : 0.5 * hoverAngle);
                _this4.hoverInfo = {
                  n: n,
                  block: block
                };
                _this4.update(1 / 30);
              }
            });
          }
        }
      } else if (this.hoverInfo && e.type === 'mouseout') {
        if (this.hoverInfo.pendings !== undefined) {
          --this.hoverInfo.pendings;
        } else if (n === this.hoverInfo.n) {
          this.clearHoverInfo();
        }
      } else if (e.type === 'mousedown') {
        this.cornerClickData = {
          x: e.pageX,
          y: e.pageY
        };
      } else if (e.type === 'click') {
        if (Math.sqrt(Math.pow(this.cornerClickData.x - e.pageX, 2) + Math.pow(this.cornerClickData.y - e.pageY, 2)) < 5) {
          var _hover = this.getBlockByPage(n);
          if (_hover.physicId) {
            var id = _hover.physicId,
                props = _hover.getProps();
            this.sheetPhysics.setParametr(id, 'velocity', (i ? -1 : 1) * props.startVelocity);
          }
        }
        delete this.cornerClickData;
      }
    }
  };

  Book.prototype.addSheetBlock = function addSheetBlock(p, block) {
    this.sheetBlocks.splice(p, 0, block);
    this.subscribeSheetBlock(block, 2);
    this.threeSheetBlocks.add(block.three);
  };

  Book.prototype.subscribeSheetBlock = function subscribeSheetBlock(block, offset) {
    var _this5 = this;

    var eventConverter = new _CustomEventConverter2.default(this.visual.wnd, this.visual.doc, _CircleTarget2.default.test),
        r = 0.15,
        target = new _CircleTarget2.default(1 - 0.5 * r, 0.5 * r, r);
    target.block = block;
    target.callback = this.cornerCallback.bind(this);
    eventConverter.addCustom(target);
    block.cornerTarget = target;
    block.three.userData.mouseCallback = function (e, data) {
      var i = data.face.materialIndex;
      if (i < 2) {
        var n = i === 0 ? offset + 2 * block.p.first : offset + 2 * block.p.last - 1;
        eventConverter.convert(e, { x: i === 0 ? data.uv.x : 1 - data.uv.x, y: data.uv.y, i: i, n: n });
        _this5.pageManager.transferEventToTexture(n, e, data);
      }
    };
    block.three.userData.touchCallback = function (e, data) {
      var i = data.face.materialIndex;
      if (i < 2) {
        var n = i === 0 ? offset + 2 * block.p.first : offset + 2 * block.p.last - 1;
        _this5.pageManager.transferEventToTexture(n, e, data);
      }
    };
    this.visual.drag.addThree(block.three);
    this.visual.mouseEvents.addThree(block.three);
    this.visual.touchEvents.addThree(block.three);
  };

  Book.prototype.removeSheetBlock = function removeSheetBlock(block) {
    this.visual.mouseEvents.removeThree(block.three);
    this.visual.touchEvents.removeThree(block.three);
    this.visual.drag.removeThree(block.three);
    this.threeSheetBlocks.remove(block.three);
    block.dispose();
  };

  Book.prototype.removeSheetBlocks = function removeSheetBlocks(first, size) {
    var blocks = this.sheetBlocks.splice(first, size);
    for (var _iterator5 = blocks, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {
      var _ref5;

      if (_isArray5) {
        if (_i5 >= _iterator5.length) break;
        _ref5 = _iterator5[_i5++];
      } else {
        _i5 = _iterator5.next();
        if (_i5.done) break;
        _ref5 = _i5.value;
      }

      var block = _ref5;

      this.removeSheetBlock(block);
    }
  };

  Book.prototype.setTexture = function setTexture(material, n) {
    this.pageManager.setTexture(material, n);
  };

  Book.prototype.setPageTexture = function setPageTexture(material, n) {
    this.setTexture(material, n + 2);
  };

  Book.prototype.setLeftCoverTexture = function setLeftCoverTexture(material, n) {
    this.setTexture(material, n);
  };

  Book.prototype.setRightCoverTexture = function setRightCoverTexture(material, n) {
    this.setTexture(material, n + 2 * (this.p.sheets + 1));
  };

  Book.finishAnimationClb = function finishAnimationClb(angle) {
    this.block.set(this.book.getClosedBlockAngle(angle).closedAngle, 'closed', 0);
    var i = this.book.sheetBlocks.indexOf(this.block);
    if (~i) {
      if (angle === 0) {
        this.book.mergeSheetBlocks(i, this.book.sheetBlocks.length - i);
      } else {
        this.book.mergeSheetBlocks(0, i + 1);
      }
    }
  };

  Book.prototype.calcBlockForce = function calcBlockForce(block, object, angle, velocity, cornerHeight) {
    return block.force ? block.force(object, angle, velocity, cornerHeight) : 0;
  };

  Book.prototype.calcBlockCornerForce = function calcBlockCornerForce(block, object, angle, velocity, cornerHeight) {
    return block.cornerForce ? block.cornerForce(object, angle, velocity, cornerHeight) : 0;
  };

  Book.prototype.notifyBeforeAnimation = function notifyBeforeAnimation() {
    var res = void 0;
    if (this.animationNotification) {
      res = Promise.reject();
    } else {
      this.animationNotification = true;
      this.dispatchEvent({
        type: 'beforeAnimation'
      });
      res = this.layerManager.hide();
    }
    return res;
  };

  Book.prototype.notifyAfterAnimation = function notifyAfterAnimation() {
    if (this.animationNotification) {
      var p = this.getPage();
      if (this.userDirection.lastTopPage !== p) {
        this.userDirection.direction = Math.sign(p - this.userDirection.lastTopPage);
        this.userDirection.lastTopPage = p;
      }
      delete this.animationNotification;
      this.layerManager.show();
      this.dispatchEvent({
        type: 'afterAnimation'
      });
    }
  };

  Book.prototype.getUserDirection = function getUserDirection() {
    return this.userDirection;
  };

  Book.prototype.connectPhysics = function connectPhysics(block, mass, angle, velocity, flexibility, coverHeight, simulateClb, removeClb, progressClb) {
    var _this6 = this;

    var type = function type() {
      return _this6.hoverInfo ? 'hover' : _this6.dragInfo ? 'drag' : 'free';
    },
        res = this.sheetPhysics.getSize() ? Promise.resolve() : this.notifyBeforeAnimation();
    return res.then(function () {
      block.physicId = _this6.sheetPhysics.addObject(mass, angle, velocity, flexibility, coverHeight, function (angl, ch) {
        simulateClb(angl, ch);
        progressClb(block, Math.abs(angle - angl) / Math.PI, 'process', type());
        _this6.updateThree();
      }, function (angl, ch) {
        removeClb(angl, ch);
        delete block.physicId;
        progressClb(block, Math.abs(angle - angl) / Math.PI, 'finish', type());
        Promise.resolve().then(function () {
          if (!_this6.sheetPhysics.getSize()) {
            _this6.notifyAfterAnimation();
          }
        });
        _this6.updateThree();
      }, function (object, angle, velocity, cornerHeight) {
        return _this6.calcBlockForce(block, object, angle, velocity, cornerHeight);
      }, function (object, angle, velocity, cornerHeight) {
        return _this6.calcBlockCornerForce(block, object, angle, velocity, cornerHeight);
      });
      progressClb(block, 0, 'init', type());
      return block;
    }).catch(function () {
      return undefined;
    });
  };

  Book.prototype.update = function update(dt) {
    var _this7 = this;

    this.lastMousePos.t += dt;
    if (this.isProcessing() && this.lastMousePos.pageX !== undefined && this.lastMousePos.t - (this.lastMousePos.lastT || 0) > 0.25 && !this.hoverInfo && !this.dragInfo) {
      this.lastMousePos.lastT = this.lastMousePos.t;
      Promise.resolve().then(function () {
        (0, _libs.$)(_this7.visual.element).trigger(_libs.$.Event('mousemove', _this7.lastMousePos));
      });
    }
    this.sheetPhysics.simulate(dt);
  };

  Book.prototype.splitSheetBlock = function splitSheetBlock(i, leftSize) {
    var block = this.sheetBlocks[i];
    if (block && leftSize < block.getSize()) {
      var newBlock = new _SheetBlock2.default(this.visual, _extends({}, this.p, { setTexture: this.setPageTexture.bind(this) }), block.p.first, block.p.first + leftSize, block.angle, block.state);
      block.set(block.angle, block.state, block.corner.height, block.p.first + leftSize, block.p.last);
      this.addSheetBlock(i, newBlock);
      return [newBlock, block];
    }
  };

  Book.prototype.mergeSheetBlocks = function mergeSheetBlocks(first, size) {
    if (first < this.sheetBlocks.length) {
      size = Math.min(this.sheetBlocks.length - first, size);
      var firstBlock = this.sheetBlocks[first],
          lastBlock = this.sheetBlocks[first + size - 1];
      firstBlock.set(firstBlock.angle, firstBlock.state, firstBlock.corner.height, firstBlock.p.first, lastBlock.p.last);
      this.removeSheetBlocks(first + 1, size - 1);
    }
  };

  Book.prototype.setSheetBlocks = function setSheetBlocks(angle, state) {
    if (state === 'closed') {
      this.closedAngle = angle;
    }
    this.sheetBlocks.forEach(function (s) {
      if (!s.physicId) {
        s.set(angle, state);
      }
    });
  };

  Book.prototype.set = function set(angle) {
    var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

    this.angle = angle;
    var PI = Math.PI;
    if (angle < PI / 4) {
      this.binder.set(0);

      this.binder.setLeft(-PI / 2 + 2 * angle);
      this.leftCover.set(PI / 2, 'opened', height);

      this.setSheetBlocks(0, 'closed');

      this.binder.setRight(0);
      this.rightCover.set(0, 'closed', 0);
    } else if (angle < 2 * PI / 4) {
      var a = 2 * (angle - PI / 4);
      this.binder.set(a);

      this.binder.setLeft(-a);
      this.leftCover.set(PI / 2 + a, 'opened', height);

      this.setSheetBlocks(a, 'closed');

      this.binder.setRight(-a);
      this.rightCover.set(a, 'closed', 0);
    } else if (angle < 3 * PI / 4) {
      var _a = 2 * (angle - PI / 2);
      this.binder.set(PI / 2);

      this.binder.setLeft(-PI / 2);
      this.leftCover.set(PI, 'opened', 0);

      this.binder.setRight(-PI / 2);
      this.rightCover.set(_a, 'opened', height);
    } else if (angle < 4 * PI / 4) {
      var _a2 = 2 * (angle - 3 * PI / 4) + PI / 2;
      this.binder.set(_a2);

      this.binder.setLeft(-_a2);
      this.leftCover.set(_a2, 'closed', 0);

      this.setSheetBlocks(_a2, 'closed');

      this.binder.setRight(-PI / 2);
      this.rightCover.set(PI / 2, 'opened', height);
    } else if (angle < 5 * PI / 4) {
      this.binder.set(PI);

      this.binder.setLeft(-PI);
      this.leftCover.set(PI, 'closed', 0);

      this.setSheetBlocks(PI, 'closed');

      this.binder.setRight(-PI / 2 - 2 * (angle - PI));
      this.rightCover.set(PI / 2, 'opened', height);
    } else if (angle < 6 * PI / 4) {
      var _a3 = 2 * (angle - 5 * PI / 4);
      this.binder.set(PI - _a3);

      this.binder.setLeft(-PI + _a3);
      this.leftCover.set(PI - _a3, 'closed', 0);

      this.setSheetBlocks(PI - _a3, 'closed');

      this.binder.setRight(-PI + _a3);
      this.rightCover.set(PI / 2 - _a3, 'opened', height);
    } else if (angle < 7 * PI / 4) {
      var _a4 = 2 * (angle - 6 * PI / 4);
      this.binder.set(PI / 2);

      this.binder.setLeft(-PI / 2);
      this.leftCover.set(PI - _a4, 'opened', height);

      this.binder.setRight(-PI / 2);
      this.rightCover.set(0, 'opened', 0);
    } else if (angle < 8 * PI / 4) {
      var _a5 = 2 * (angle - 7 * PI / 4);
      this.binder.set(PI / 2 - _a5);

      this.binder.setLeft(-PI / 2);
      this.leftCover.set(PI / 2, 'opened', height);

      this.setSheetBlocks(PI / 2 - _a5, 'closed');

      this.binder.setRight(-PI / 2 + _a5);
      this.rightCover.set(PI / 2 - _a5, 'closed', 0);
    }
  };

  Book.createSideTexture = function createSideTexture(color, type) {
    var jC = (0, _libs.$)('<canvas width="8" height="8"></canvas>');
    if (type === 'color') {
      var ctx = jC[0].getContext('2d');
      ctx.beginPath();
      ctx.fillStyle = _GraphUtils2.default.color2Rgba(color, 1);
      ctx.rect(0, 0, 8, 7);
      ctx.fill();
      ctx.beginPath();
      ctx.fillStyle = _GraphUtils2.default.color2Rgba(_GraphUtils2.default.inverseColor(color, 0.5), 1);
      ctx.rect(0, 7, 8, 1);
      ctx.fill();
    }
    return jC[0];
  };

  Book.prototype.prepareProps = function prepareProps(props) {
    return this.calcProps(Book.mergeProps((0, _book.props)(), props));
  };

  Book.mergeProps = function mergeProps(first, second) {
    second = second || {};
    return _extends({}, first, second, {
      sheet: _extends({}, first.sheet, second.sheet),
      cover: _extends({}, first.cover, second.cover),
      page: _extends({}, first.page, second.page),
      cssLayerProps: _extends({}, first.cssLayerProps, second.cssLayerProps)
    });
  };

  Book.prototype.calcProps = function calcProps(props) {
    var p = _extends({}, props, {
      sheet: _extends({}, props.sheet),
      cover: _extends({}, props.sheet, props.cover),
      page: _extends({}, props.sheet, props.page),
      cssLayerProps: _extends({}, props.cssLayerProps, {
        $: _libs.$
      })
    }),
        scale = 10,
        height = scale * p.height,
        width = scale * p.width,
        flipProgressClb = function flipProgressClb() {
      return undefined;
    },
        sheet = {
      sideTexture: p.sheet.sideTexture || Book.createSideTexture(p.sheet.color, p.sheet.side)
    },
        cover = _extends({}, sheet, p.cover, {
      depth: scale * p.cover.depth,
      width: width,
      height: height,
      padding: scale * p.cover.padding
    }),
        page = _extends({}, sheet, p.page, {
      depth: scale * p.page.depth,
      width: cover.width - cover.padding,
      height: cover.height - 2 * cover.padding
    }),
        marker = {
      use: false,
      color: 0XFF0000,
      size: scale * 0.001
    };
    if (cover.color !== sheet.color && !p.cover.sideTexture) {
      cover.sideTexture = Book.createSideTexture(cover.color, cover.side);
    }
    if (page.color !== sheet.color && !p.page.sideTexture) {
      page.sideTexture = Book.createSideTexture(page.color, page.side);
    }
    if (p.cssLayersLoader) {
      p.cssLayersLoader = this.cssLayersLoader(p.cssLayersLoader);
    }
    return _extends({}, p, { scale: scale, height: height, width: width, flipProgressClb: flipProgressClb, cover: cover, page: page, marker: marker });
  };

  Book.prototype.cssLayersLoader = function cssLayersLoader(loader) {
    var _this8 = this;

    return function (n, clb) {
      return loader(n, function (ls) {
        var nls = [];
        for (var _iterator6 = ls, _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : _iterator6[Symbol.iterator]();;) {
          var _ref6;

          if (_isArray6) {
            if (_i6 >= _iterator6.length) break;
            _ref6 = _iterator6[_i6++];
          } else {
            _i6 = _iterator6.next();
            if (_i6.done) break;
            _ref6 = _i6.value;
          }

          var l = _ref6;

          nls.push(_extends({}, l, {
            js: _this8.cssLayerJsObject(l)
          }));
        }
        return clb(nls);
      });
    };
  };

  Book.prototype.cssLayerJsObject = function cssLayerJsObject(l) {
    var _this9 = this;

    var clIfEx = function clIfEx(f) {
      var r = void 0;
      if (f) {
        try {
          r = f();
        } catch (e) {
          console.error(e);
        }
      }
      return r;
    };
    return function (c, p) {
      var o = {};
      try {
        var init = eval(l.js);
        o = init ? init(c, p) || {} : {};
      } catch (e) {
        console.error(e);
      }
      var no = _this9.cssLayerJsObjectInit(c, p),
          ro = {};
      var _arr = ['hide', 'hidden', 'show', 'shown', 'dispose'];

      var _loop = function _loop() {
        var n = _arr[_i7];
        ro[n] = function () {
          clIfEx(no[n]);
          clIfEx(o[n]);
        };
      };

      for (var _i7 = 0; _i7 < _arr.length; _i7++) {
        _loop();
      }
      return ro;
    };
  };

  Book.prototype.cssLayerJsObjectInit = function cssLayerJsObjectInit(c, p) {
    var _this10 = this;

    c.find('.go-to-page').on('click', function (e) {
      var n = (0, _libs.$)(e.target);
      while (n.length && !n.hasClass('go-to-page')) {
        n = (0, _libs.$)(n[0].parentNode);
      }
      n = parseInt(n.attr('data-number'));
      if (!isNaN(n)) {
        e.preventDefault();
        p.scene.ctrl.goToPage(n - 1);
      }
    });
    var ys = c.find('.youtube');
    if (ys.length) {
      ys.html('<div style="width:100%;height:100%;"></div>');
      _YouTubeApi2.default.init().then(function () {
        for (var i = 0; i < ys.length; ++i) {
          var y = ys[i];
          var _n = (0, _libs.$)(y),
              player = new YT.Player(_n.find('div')[0], { videoId: _n.attr('data-id') });
          _n[0].player = player;
        }
      });
    }
    return {
      hide: function hide() {
        if (_this10.pendingPlayers.length) {
          _this10.pendingPlayers = [];
          _this10.dispatchEvent({
            type: 'pendingPlayers'
          });
        }
        c.find('.pause-on-hide').each(function (_, p) {
          return _this10.cssFs.pause(p);
        });
      },
      shown: function shown() {
        return c.find('.play-on-shown').each(function (_, p) {
          return _this10.cssFs.play(p);
        });
      },
      dispose: function dispose() {
        return c.find('.pause-on-hide').each(function (_, p) {
          return _this10.cssFs.pause(p);
        });
      }
    };
  };

  return Book;
}(_libs.THREE.EventDispatcher);

exports.default = Book;

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _libs = __webpack_require__(1);

var _Controller2 = __webpack_require__(15);

var _Controller3 = _interopRequireDefault(_Controller2);

var _bookController = __webpack_require__(43);

var _EventsToActions = __webpack_require__(50);

var _EventsToActions2 = _interopRequireDefault(_EventsToActions);

var _stats = __webpack_require__(73);

var _stats2 = _interopRequireDefault(_stats);

var _Object3DWatcher = __webpack_require__(56);

var _Object3DWatcher2 = _interopRequireDefault(_Object3DWatcher);

var _FullScreenX = __webpack_require__(18);

var _FullScreenX2 = _interopRequireDefault(_FullScreenX);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BookController = function (_Controller) {
  _inherits(BookController, _Controller);

  function BookController(book, view, props) {
    _classCallCheck(this, BookController);

    var _this = _possibleConstructorReturn(this, _Controller.call(this));

    _this.navigationControls = true;
    _this.book = book;
    _this.visual = book.visual;
    _this.p = BookController.prepareProps(props);
    _this.p.rtl = book.p.rtl;

    _this.orbit = book.visual.getOrbit();
    book.setFlipProgressClb(_this.updateViewIfState.bind(_this));
    _this.view = view;
    _this.bindActions();

    _this.state = {
      smartPan: !_this.actions['cmdSmartPan'].active,
      singlePage: _this.actions['cmdSinglePage'].active || _this.actions['cmdSinglePage'].activeForMobile && _this.visual.isMobile(),
      stats: _this.actions['cmdStats'].active,
      lighting: _this.p.lighting.default,
      activeSide: 1
    };

    _this.boxs = [new _libs.THREE.Box3(), new _libs.THREE.Box3()];
    _this.bookWatcher = new _Object3DWatcher2.default(_this.visual, function () {
      if (_this.state.singlePage) {
        if (_this.state.activeSide) {
          _this.boxs[0].setFromObject(book.rightCover.three);
        } else {
          _this.boxs[0].setFromObject(book.leftCover.three);
        }
      } else {
        _this.boxs[0].setFromObject(book.leftCover.three);
        _this.boxs[1].setFromObject(book.rightCover.three);
        _this.boxs[0].union(_this.boxs[1]);
      }
      return _this.boxs[0];
    });
    _this.bookWatcher.scale = _this.p.scale.default;
    _this.book.setZoom(_this.bookWatcher.scale, _this.state.singlePage);

    _this.Stats = new _stats2.default();
    _this.Stats.domElement.style.position = 'absolute';
    _this.Stats.domElement.style.top = '0px';

    _this.visual.setExtraLighting(_this.state.lighting);
    _this.binds = {
      onScreenModeChanged: _this.onScreenModeChanged.bind(_this),
      stats: _this.Stats.update.bind(_this.Stats),
      onUpdateView: _this.updateView.bind(_this)
    };
    _FullScreenX2.default.addEventListener(_this.view.getParentContainer().ownerDocument, _this.binds.onScreenModeChanged);

    _this.cmdSmartPan();

    if (_this.view.templateObject.appLoaded) {
      Promise.resolve().then(_this.view.templateObject.appLoaded);
    }

    _this.book.enableLoadingAnimation(_this.p.loadingAnimation.book);
    if (_this.p.loadingAnimation.skin) {
      _this.initLoadingAnimation();
    }

    _this.book.enableLoadingAnimation(_this.p.loadingAnimation.book);
    _this.book.setAutoResolution(_this.p.autoResolution.enabled, _this.p.autoResolution.coefficient);

    _this.visual.addEventListener('resize', _this.updateView.bind(_this));
    _this.book.addEventListener('pendingPlayers', _this.updateView.bind(_this));
    return _this;
  }

  BookController.prototype.dispose = function dispose() {
    _FullScreenX2.default.removeEventListener(this.view.getParentContainer().ownerDocument, this.binds.onScreenModeChanged);
    delete this.book;
    delete this.view;
    delete this.visual;
  };

  BookController.prototype.initLoadingAnimation = function initLoadingAnimation() {
    var _this2 = this;

    var handler = function handler() {
      var pages = _this2.book.getTopPages();
      var visible = false;
      for (var _iterator = pages, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
        var _ref;

        if (_isArray) {
          if (_i >= _iterator.length) break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done) break;
          _ref = _i.value;
        }

        var n = _ref;

        var state = _this2.book.getPageState(n);
        visible = state === undefined || state === 'loading';
        if (visible) {
          break;
        }
      }
      _this2.view.setState('widLoading', {
        visible: visible
      });
    };
    this.book.addEventListener('beforeAnimation', handler);
    this.book.addEventListener('afterAnimation', handler);
    this.book.addEventListener('loadPage', handler);
    this.book.addEventListener('loadedPage', handler);
  };

  BookController.prototype.enableNavigation = function enableNavigation(enable) {
    this.navigationControls = enable;
  };

  BookController.prototype.setTocCtrl = function setTocCtrl(tocCtrl) {
    this.tocCtrl = tocCtrl;
    this.tocCtrl.onChange = this.updateView.bind(this);
    this.updateView();
  };

  BookController.prototype.setPrinter = function setPrinter(printer) {
    this.printer = printer;
    this.updateView();
  };

  BookController.prototype.setSounds = function setSounds(sounds) {
    this.sounds = sounds;
    sounds.setEnabled(this.actions['cmdSounds'].active);
    this.updateView();
  };

  BookController.prototype.onScreenModeChanged = function onScreenModeChanged(e) {
    this.updateView();
  };

  BookController.prototype.canZoomIn = function canZoomIn() {
    return !this.state.smartPan || Math.abs(this.bookWatcher.scale - this.p.scale.max) > this.p.eps;
  };

  BookController.prototype.canZoomOut = function canZoomOut() {
    return !this.state.smartPan || Math.abs(this.bookWatcher.scale - this.p.scale.min) > this.p.eps;
  };

  BookController.prototype.canDefaultZoom = function canDefaultZoom() {
    return this.state.smartPan;
  };

  BookController.prototype.setBookZoom = function setBookZoom(scale) {
    // setTimeout(()=> {
    //   if(Math.abs(this.bookWatcher.scale-scale)<1e-3) {
    this.book.setZoom(scale, this.state.singlePage);
    //   }
    // }, 1000);
  };

  BookController.prototype.cmdZoomIn = function cmdZoomIn() {
    if (this.state.smartPan) {
      this.bookWatcher.scale = Math.min(this.p.scale.max, this.bookWatcher.scale + this.p.scale.delta);
      this.setBookZoom(this.bookWatcher.scale);
    } else {
      this.orbit.zoomIn(6.6 * this.p.scale.delta / 0.32);
    }
    this.updateView();
  };

  BookController.prototype.cmdZoomOut = function cmdZoomOut() {
    if (this.state.smartPan) {
      this.bookWatcher.scale = Math.max(this.p.scale.min, this.bookWatcher.scale - this.p.scale.delta);
      this.setBookZoom(this.bookWatcher.scale);
    } else {
      this.orbit.zoomOut(6.6 * this.p.scale.delta / 0.32);
    }
    this.updateView();
  };

  BookController.prototype.setScale = function setScale(scale) {
    this.bookWatcher.scale = Math.min(this.p.scale.max, Math.max(this.p.scale.min, scale));
    this.setBookZoom(this.bookWatcher.scale);
    this.updateView();
  };

  BookController.prototype.cmdDefaultZoom = function cmdDefaultZoom() {
    if (this.state.smartPan) {
      this.bookWatcher.scale = this.p.scale.default;
      this.setBookZoom(this.bookWatcher.scale);
      this.updateView();
    }
  };

  BookController.prototype.cmdToc = function cmdToc() {
    if (this.tocCtrl) {
      this.tocCtrl.togle();
    }
  };

  BookController.prototype.cmdFastBackward = function cmdFastBackward() {
    this.startFlip(this.book.flipLeft(5));
  };

  BookController.prototype.cmdBackward = function cmdBackward() {
    var _this3 = this;

    if (this.state.singlePage) {
      this.state.activeSide = (this.getPage() + 1) % 2;
      if (this.state.activeSide) {
        this.state.activeSide = 0;
        this.updateView();
      } else {
        this.startFlip(this.book.flipLeft(1)).then(function (block) {
          if (block) {
            _this3.state.activeSide = 1;
          }
        });
      }
    } else {
      this.startFlip(this.book.flipLeft(1));
    }
  };

  BookController.prototype.cmdBigBackward = function cmdBigBackward() {
    this.cmdBackward();
  };

  BookController.prototype.cmdForward = function cmdForward() {
    var _this4 = this;

    if (this.state.singlePage) {
      this.state.activeSide = (this.getPage() + 1) % 2;
      if (!this.state.activeSide) {
        this.state.activeSide = 1;
        this.updateView();
      } else {
        this.startFlip(this.book.flipRight(1)).then(function (block) {
          if (block) {
            _this4.state.activeSide = 0;
          }
        });
      }
    } else {
      this.startFlip(this.book.flipRight(1));
    }
  };

  BookController.prototype.cmdBigForward = function cmdBigForward() {
    this.cmdForward();
  };

  BookController.prototype.cmdFastForward = function cmdFastForward() {
    this.startFlip(this.book.flipRight(5));
  };

  BookController.prototype.cmdSave = function cmdSave() {
    window.open(this.p.downloadURL, '_blank');
  };

  BookController.prototype.cmdPrint = function cmdPrint() {
    this.printer.print();
  };

  BookController.prototype.cmdFullScreen = function cmdFullScreen() {
    if (!_FullScreenX2.default.activated()) {
      _FullScreenX2.default.request(this.view.getParentContainer());
    } else {
      _FullScreenX2.default.cancel();
    }
  };

  BookController.prototype.cmdSmartPan = function cmdSmartPan() {
    this.state.smartPan = !this.state.smartPan;
    if (this.state.smartPan) {
      this.orbit.minAzimuthAngle = 0;
      this.orbit.maxAzimuthAngle = 0;
      this.orbit.minPolarAngle = 0;
      this.orbit.maxPolarAngle = Math.PI / 4;
      this.bookWatcher.enabled = true;
    } else {
      this.orbit.minAzimuthAngle = -Infinity;
      this.orbit.maxAzimuthAngle = Infinity;
      this.orbit.minPolarAngle = 0;
      this.orbit.maxPolarAngle = Math.PI;
      this.bookWatcher.enabled = false;
    }
    this.updateView();
  };

  BookController.prototype.cmdSinglePage = function cmdSinglePage() {
    this.state.singlePage = !this.state.singlePage;
    this.setBookZoom(this.bookWatcher.scale);
    this.updateView();
  };

  BookController.prototype.cmdSounds = function cmdSounds() {
    if (this.sounds) {
      this.sounds.togle();
    }
    this.updateView();
  };

  BookController.prototype.cmdStats = function cmdStats() {
    this.state.stats = !this.state.stats;
    if (this.state.stats) {
      (0, _libs.$)(this.view.getContainer()).append(this.Stats.domElement);
      this.visual.addRenderCallback(this.binds.stats);
    } else {
      (0, _libs.$)(this.view.getContainer()).find(this.Stats.domElement).remove();
      this.visual.removeRenderCallback(this.binds.stats);
    }
    this.updateView();
  };

  BookController.prototype.cmdLightingUp = function cmdLightingUp() {
    this.state.lighting = Math.min(this.state.lighting + this.p.lighting.delta, this.p.lighting.max);
    this.visual.setExtraLighting(this.state.lighting);
    this.book.updateThree();
    this.updateView();
  };

  BookController.prototype.cmdLightingDown = function cmdLightingDown() {
    this.state.lighting = Math.max(this.state.lighting - this.p.lighting.delta, this.p.lighting.min);
    this.visual.setExtraLighting(this.state.lighting);
    this.book.updateThree();
    this.updateView();
  };

  BookController.prototype.cmdPendingPlay = function cmdPendingPlay() {
    this.book.resolvePendingPlayers();
  };

  BookController.prototype.goToPage = function goToPage(page) {
    var _this5 = this;

    if (this.p.rtl) {
      page = this.book.getPages() - 1 - page;
    }
    var pageNum = Math.max(Math.min(page, this.book.getPages() - 1), 0);
    this.state.activeSide = (pageNum + 1) % 2;
    var target = Math.max(Math.min(page - 1 + page % 2, this.book.getPages() - 1), 0),
        current = this.book.getPage(),
        flips = [],
        covs = 0;;
    if (target != current) {
      if (current === 0) {
        flips.push(1);
        current += 1;
        ++covs;
      } else if (current === this.book.getPages() - 1) {
        flips.push(-1);
        current -= 2;
        ++covs;
      }
      var cv = 0;
      if (target === 0) {
        cv = -1;
        target += 1;
        ++covs;
      } else if (target === this.book.getPages() - 1) {
        cv = 1;
        target -= 2;
        ++covs;
      }
      if (target - current) {
        flips.push(Math.ceil((target - current) / 2));
      }
      if (cv) {
        flips.push(cv);
      }
    }

    var setClb = function setClb(fl, time, clb) {
      return new Promise(function (resolve) {
        setTimeout(function () {
          if (fl < 0) {
            _this5.startFlip(_this5.book.flipLeft(-fl, clb));
          } else {
            _this5.startFlip(_this5.book.flipRight(fl, clb));
          }
          resolve();
        }, time);
      });
    };

    if (covs === 2) {
      setClb(flips[0], 0, function (block, progress, state) {
        if (state == 'finish' && progress == 1) {
          setClb(flips[flips.length - 1], 0);
        }
      }).then(function () {
        return setClb(flips[1], 400);
      });
    } else {
      (function () {
        var next = Promise.resolve(),
            time = 0;

        var _loop = function _loop() {
          if (_isArray2) {
            if (_i2 >= _iterator2.length) return 'break';
            _ref2 = _iterator2[_i2++];
          } else {
            _i2 = _iterator2.next();
            if (_i2.done) return 'break';
            _ref2 = _i2.value;
          }

          var fl = _ref2;

          next = next.then(function () {
            return setClb(fl, time);
          });
          time = 400;
        };

        for (var _iterator2 = flips, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
          var _ref2;

          var _ret2 = _loop();

          if (_ret2 === 'break') break;
        }
      })();
    }
  };

  BookController.prototype.startFlip = function startFlip(flipRes) {
    var _this6 = this;

    return flipRes ? flipRes.then(function (block) {
      if (block) {
        _this6.dispatchAsync({
          type: 'startFlip'
        });
      }
      return block;
    }) : Promise.resolve(undefined);
  };

  BookController.prototype.endFlip = function endFlip(block) {
    this.dispatchAsync({
      type: 'endFlip'
    });
    return block;
  };

  BookController.prototype.getPage = function getPage() {
    var page = this.book.getPage();
    return page ? Math.min(this.book.getPage() + this.state.activeSide, this.book.getPages() - 1) : 0;
  };

  BookController.prototype.getPageForGUI = function getPageForGUI() {
    var n = (this.state.singlePage ? this.getPage() : this.book.getPage()) + 1;
    if (this.p.rtl) {
      n = this.book.getPages() - n + 1;
    }
    return n;
  };

  BookController.prototype.inpPage = function inpPage(e, data) {
    this.goToPage(data - 1);
  };

  BookController.prototype.updateViewIfState = function updateViewIfState(block, progress, state, type) {
    if (state === 'init' || state === 'finish') {
      setTimeout(this.updateView.bind(this), 100);
    }
    if (state === 'finish') {
      this.endFlip(block);
    }
  };

  BookController.prototype.isCmdVisible = function isCmdVisible(name) {
    return (0, _libs.$)(this.visual.element).width() < this.p.narrowView.width ? this.actions[name].enabledInNarrow === undefined ? this.actions[name].enabled : this.actions[name].enabledInNarrow : this.actions[name].enabled;
  };

  BookController.prototype.updateViewState = function updateViewState() {
    this.viewState = {
      'cmdZoomIn': {
        enable: this.canZoomIn(),
        visible: this.isCmdVisible('cmdZoomIn'),
        active: false
      },
      'cmdZoomOut': {
        enable: this.canZoomOut(),
        visible: this.isCmdVisible('cmdZoomOut'),
        active: false
      },
      'cmdDefaultZoom': {
        enable: this.canDefaultZoom(),
        visible: this.isCmdVisible('cmdDefaultZoom'),
        active: this.canDefaultZoom() && Math.abs(this.bookWatcher.scale - this.p.scale.default) < this.p.eps
      },
      'cmdToc': {
        enable: !!this.tocCtrl,
        visible: this.isCmdVisible('cmdToc') && this.tocCtrl,
        active: this.tocCtrl && this.tocCtrl.visible
      },
      'inpPages': {
        visible: true,
        value: this.book.getPages()
      },
      'inpPage': {
        visible: true,
        enable: !this.book.isProcessing() && this.navigationControls,
        value: this.getPageForGUI()
      },
      'cmdSave': {
        enable: true,
        visible: this.isCmdVisible('cmdSave') && !!this.p.downloadURL,
        active: false
      },
      'cmdPrint': {
        enable: true,
        visible: this.isCmdVisible('cmdPrint') && !!this.printer,
        active: false
      },
      'cmdFullScreen': {
        enable: _FullScreenX2.default.available(),
        visible: this.isCmdVisible('cmdFullScreen'),
        active: _FullScreenX2.default.available() && _FullScreenX2.default.activated()
      },
      'widSettings': {
        enable: true,
        visible: this.isCmdVisible('widSettings'),
        active: false
      },
      'cmdSmartPan': {
        enable: true,
        visible: this.isCmdVisible('cmdSmartPan'),
        active: this.state.smartPan
      },
      'cmdSinglePage': {
        enable: true,
        visible: this.isCmdVisible('cmdSinglePage'),
        active: this.state.singlePage
      },
      'cmdSounds': {
        enable: true,
        visible: this.isCmdVisible('cmdSounds') && !!this.sounds,
        active: !!this.sounds && this.sounds.enabled
      },
      'cmdStats': {
        enable: true,
        visible: this.isCmdVisible('cmdStats'),
        active: this.state.stats
      },
      'cmdLightingUp': {
        enable: Math.abs(this.state.lighting - this.p.lighting.max) > this.p.eps,
        visible: this.isCmdVisible('cmdLightingUp'),
        active: false
      },
      'cmdLightingDown': {
        enable: Math.abs(this.state.lighting - this.p.lighting.min) > this.p.eps,
        visible: this.isCmdVisible('cmdLightingDown'),
        active: false
      },
      'cmdPendingPlay': {
        enable: true,
        visible: true,
        active: false
      },
      'widPendingPlay': {
        enable: true,
        visible: this.book.hasPendingPlayers(),
        active: false
      }
    };

    var left = this.book.getLeftFlipping(),
        right = this.book.getRightFlipping();
    var flippersEnable = {
      cmdFastBackward: !!left && this.navigationControls,
      cmdBackward: !!left && this.navigationControls,
      cmdBigBackward: !!left && this.navigationControls,
      cmdForward: !!right && this.navigationControls,
      cmdBigForward: !!right && this.navigationControls,
      cmdFastForward: !!right && this.navigationControls
    };
    for (var _iterator3 = Object.keys(flippersEnable), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
      var _ref3;

      if (_isArray3) {
        if (_i3 >= _iterator3.length) break;
        _ref3 = _iterator3[_i3++];
      } else {
        _i3 = _iterator3.next();
        if (_i3.done) break;
        _ref3 = _i3.value;
      }

      var name = _ref3;

      this.viewState[name] = {
        enable: flippersEnable[name],
        visible: this.isCmdVisible(name),
        active: false
      };
    };
  };

  BookController.prototype.updateView = function updateView() {
    if (this.view) {
      this.updateViewState();
      for (var _iterator4 = Object.keys(this.viewState), _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {
        var _ref4;

        if (_isArray4) {
          if (_i4 >= _iterator4.length) break;
          _ref4 = _iterator4[_i4++];
        } else {
          _i4 = _iterator4.next();
          if (_i4.done) break;
          _ref4 = _i4.value;
        }

        var name = _ref4;

        this.view.setState(name, this.viewState[name]);
      }
    }
  };

  BookController.prototype.getActions = function getActions() {
    var _this7 = this;

    var isSwipping = function isSwipping(name) {
      return _this7.actions.touchCmdSwipe.enabled && _this7.actions.touchCmdSwipe.code === _this7.actions[name].code && _this7.state.smartPan && _this7.bookWatcher.scale <= 1;
    },
        cmds = {};

    var _loop2 = function _loop2(name) {
      if (name.indexOf('cmd') === 0) {
        cmds[name] = {
          activate: function activate() {
            if (_this7.viewState && _this7.viewState[name].enable) {
              _this7[name].apply(_this7, arguments);
            }
          }
        };
      }
    };

    for (var name in this) {
      _loop2(name);
    }

    return _extends({}, cmds, {
      cmdPanLeft: {
        activate: function activate(e) {
          return _this7.orbit.actions.pan(e, {
            state: 'move',
            dx: -_this7.p.pan.speed,
            dy: 0
          });
        }
      },
      cmdPanRight: {
        activate: function activate(e) {
          return _this7.orbit.actions.pan(e, {
            state: 'move',
            dx: _this7.p.pan.speed,
            dy: 0
          });
        }
      },
      cmdPanUp: {
        activate: function activate(e) {
          return _this7.orbit.actions.pan(e, {
            state: 'move',
            dx: 0,
            dy: -_this7.p.pan.speed
          });
        }
      },
      cmdPanDown: {
        activate: function activate(e) {
          return _this7.orbit.actions.pan(e, {
            state: 'move',
            dx: 0,
            dy: _this7.p.pan.speed
          });
        }
      },
      mouseCmdRotate: {
        activate: this.orbit.actions.rotate
      },
      mouseCmdDragZoom: {
        activate: function activate(e, data) {
          if (data.dy > 0) {
            _this7.cmdZoomOut();
          } else if (data.dy < 0) {
            _this7.cmdZoomIn();
          }
        }
      },
      mouseCmdPan: {
        activate: this.orbit.actions.pan
      },
      mouseCmdWheelZoom: {
        activate: function activate(e) {
          e.preventDefault();
          if (e.deltaY < 0) {
            _this7.cmdZoomOut();
          } else if (e.deltaY > 0) {
            _this7.cmdZoomIn();
          }
        }
      },
      touchCmdRotate: {
        activate: function activate(e, data) {
          if (!isSwipping('touchCmdRotate')) {
            if (data.state === 'move') {
              e.preventDefault();
            }
            _this7.orbit.actions.rotate(e, data);
          }
        }
      },
      touchCmdZoom: {
        activate: function activate(e, data) {
          if (!isSwipping('touchCmdZoom')) {
            var l = function l(v) {
              return Math.sqrt(v.x * v.x + v.y * v.y);
            };
            if (data.state === 'start') {
              _this7.touchZoomData = {
                l: l(data),
                scale: _this7.bookWatcher.scale
              };
            } else if (data.state === 'move') {
              e.preventDefault();
              _this7.setScale(l(data) / _this7.touchZoomData.l * _this7.touchZoomData.scale);
            }
          }
        }
      },
      touchCmdPan: {
        activate: function activate(e, data) {
          if (!isSwipping('touchCmdPan')) {
            if (data.state === 'move' && (!_this7.state.smartPan || _this7.bookWatcher.scale > 1)) {
              e.preventDefault();
              _this7.orbit.actions.pan(e, data);
            }
          }
        }
      },
      touchCmdSwipe: {
        activate: function activate(e, data) {
          if (isSwipping('touchCmdSwipe')) {
            if (data.state === 'start') {
              var touch = (e.touches || e.originalEvent.touches)[_this7.actions.touchCmdSwipe.code - 1];
              _this7.swipeData = {
                handled: false,
                x0: touch.pageX,
                y0: touch.pageY,
                x: touch.pageX,
                y: touch.pageY
              };
            } else if (data.state === 'move') {
              e.preventDefault();
              if (!_this7.swipeData.handled) {
                _this7.swipeData = _extends({}, _this7.swipeData, {
                  x: _this7.swipeData.x + data.dx,
                  y: _this7.swipeData.y + data.dy
                });
                if (Math.abs(_this7.swipeData.x0 - _this7.swipeData.x) > 100) {
                  _this7.swipeData.x0 > _this7.swipeData.x ? _this7.cmdForward() : _this7.cmdBackward();
                  _this7.swipeData.handled = true;
                }
              }
            } else {
              delete _this7.swipeData;
            }
          }
        }
      },
      widSettings: {
        activate: function activate() {
          return undefined;
        }
      }
    });
  };

  BookController.prototype.bindActions = function bindActions() {
    this.eToA = new _EventsToActions2.default((0, _libs.$)(this.visual.element));
    this.eToA.addAction(function (e) {
      return e.preventDefault();
    }, 'contextmenu', _EventsToActions2.default.mouseButtons.Right, 0);

    this.actions = this.getActions();
    for (var _iterator5 = Object.keys(this.actions), _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {
      var _ref5;

      if (_isArray5) {
        if (_i5 >= _iterator5.length) break;
        _ref5 = _iterator5[_i5++];
      } else {
        _i5 = _iterator5.next();
        if (_i5.done) break;
        _ref5 = _i5.value;
      }

      var name = _ref5;

      var action = _extends({}, this.actions[name], this.p.actions[name]);
      this.actions[name] = action;
      if (action.enabled) {
        var flags = action.flags || 0;
        if (action.type) {
          this.eToA.addAction(action.activate, action.type, action.code, flags);
        } else if (action.code !== undefined) {
          this.eToA.addAction(action.activate, 'keydown', action.code, flags);
        }
      }
    }
  };

  BookController.prepareProps = function prepareProps(props) {
    return BookController.calcProps(BookController.mergeProps((0, _bookController.props)(), props));
  };

  BookController.setActions = function setActions(props, actions) {
    for (var _iterator6 = Object.keys(actions || {}), _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : _iterator6[Symbol.iterator]();;) {
      var _ref6;

      if (_isArray6) {
        if (_i6 >= _iterator6.length) break;
        _ref6 = _iterator6[_i6++];
      } else {
        _i6 = _iterator6.next();
        if (_i6.done) break;
        _ref6 = _i6.value;
      }

      var name = _ref6;

      props.actions[name] = _extends({}, props.actions[name], actions[name]);
    }
  };

  BookController.mergeProps = function mergeProps(first, second) {
    second = second || {};
    function merge(first, second) {
      second = second || {};
      var props = _extends({}, first, second);
      for (var _iterator7 = Object.keys(first), _isArray7 = Array.isArray(_iterator7), _i7 = 0, _iterator7 = _isArray7 ? _iterator7 : _iterator7[Symbol.iterator]();;) {
        var _ref7;

        if (_isArray7) {
          if (_i7 >= _iterator7.length) break;
          _ref7 = _iterator7[_i7++];
        } else {
          _i7 = _iterator7.next();
          if (_i7.done) break;
          _ref7 = _i7.value;
        }

        var name = _ref7;

        if (_typeof(first[name]) === 'object') {
          props[name] = merge(first[name], second[name]);
        }
      }
      return props;
    }
    var props = merge(first, second);
    BookController.setActions(props, first.actions);
    BookController.setActions(props, second.actions);
    return props;
  };

  BookController.calcProps = function calcProps(props) {
    props.scale.delta = (props.scale.max - props.scale.min) / props.scale.levels;
    props.lighting.delta = (props.lighting.max - props.lighting.min) / props.lighting.levels;
    return props;
  };

  return BookController;
}(_Controller3.default);

exports.default = BookController;

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(1);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var BookPrinter = function () {
  function BookPrinter(context, book, styleSheet) {
    _classCallCheck(this, BookPrinter);

    this.book = book;
    this.styleSheet = styleSheet;
    this.wnd = context.wnd;
    this.doc = context.doc;
    this.pageCallback = book.getPageCallback();
    var test = this.pageCallback(0);
    this.type = test.type;
    if (this.type === 'pdf') {
      this.pdfSrc = test.src.src;
    }
  }

  BookPrinter.prototype.cancel = function cancel() {
    this.canceled = true;
  };

  BookPrinter.prototype.dispose = function dispose() {
    if (this.frame) {
      this.frame.remove();
      delete this.frame;
    }
  };

  BookPrinter.prototype.print = function print() {
    var _this = this;

    delete this.canceled;
    if (this.type === 'pdf') {
      var printWnd = void 0,
          callManually = false;
      if (this.useIFrame()) {
        callManually = !!this.frame;
        if (!this.frame) {
          this.frame = (0, _libs.$)('<iframe src="' + this.pdfSrc + '" style="display: none;"></iframe>').appendTo(this.doc.body);
        }
        printWnd = this.frame[0].contentWindow;
      } else {
        printWnd = this.wnd.open(this.pdfSrc);
      }
      if (callManually) {
        printWnd.print();
      } else {
        (0, _libs.$)(printWnd).on('load', function () {
          try {
            printWnd.print();
          } catch (e) {
            console.error(e);
          }
        });
      }
    } else {
      this.renderContent().then(function (content) {
        var printWnd = _this.wnd.open(),
            printDoc = printWnd.document,
            html = ('\n            <!DOCTYPE html>\n            <html>\n              <head>\n                <meta charset="utf-8">\n                <title>3D FlipBook - Printing</title>\n                ' + content.head + '\n                <script type="text/javascript">\n                  function printDocument() {\n                    window.print();\n                    window.close();\n                  }\n                  function init() {\n                    setTimeout(printDocument, 100);\n                  }\n                </script>\n              </head>\n              <body onload="init()">\n                ' + content.body + '\n              </body>\n            </html>\n          ').fb3dQFilter();
        printDoc.open();
        printDoc.write(html);
        printDoc.close();
      }).catch(function (e) {
        return console.warn('3D FlipBook - Printing was canceled');
      });
    }
  };

  BookPrinter.prototype.progress = function progress(v) {
    if (this.canceled) {
      throw 'Cancel Printing';
    }
    if (this.onProgress) {
      this.onProgress(Math.floor(v * 100));
    }
  };

  BookPrinter.prototype.renderContent = function renderContent() {
    var _this2 = this;

    var pages = this.book.getPages(),
        head = new Set(),
        body = [];
    var done = Promise.resolve();

    var _loop = function _loop(page) {
      var info = _this2.pageCallback(page);
      if (info.type === 'image') {
        done = done.then(function () {
          _this2.progress(page / pages);
          return _this2.renderImage(head, body, info.src);
        });
      } else if (info.type === 'html') {
        done = done.then(function () {
          _this2.progress(page / pages);
          return _this2.renderHtml(head, body, info.src);
        });
      }
    };

    for (var page = 0; page < pages; ++page) {
      _loop(page);
    }
    return done.then(function () {
      _this2.progress(1);
      return { head: _this2.renderHead(head), body: body.join('\n') };
    });
  };

  BookPrinter.wrap = function wrap(content) {
    return '<div class="fb3d-printer-page">' + content + '</div>';
  };

  BookPrinter.prototype.renderImage = function renderImage(head, body, src) {
    body.push(BookPrinter.wrap('<img src="' + src + '" />'));
  };

  BookPrinter.prototype.renderHtml = function renderHtml(head, body, src) {
    return new Promise(function (resolve, reject) {
      _libs.$.get(src, function (html) {
        var links = html.match(/<link.*?>/ig) || [];
        for (var _iterator = links, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
          var _ref;

          if (_isArray) {
            if (_i >= _iterator.length) break;
            _ref = _iterator[_i++];
          } else {
            _i = _iterator.next();
            if (_i.done) break;
            _ref = _i.value;
          }

          var link = _ref;

          if (link.match(/stylesheet/i)) {
            var href = link.match(/href\s*=\s*['"](.*)['"]/i);
            if (href) {
              head.add(href[1]);
            }
          }
        }
        var content = html.match(/<body.*?>([\S\s]*)<\/body>/i);
        if (content) {
          body.push(BookPrinter.wrap(content[1]));
        }
        resolve();
      }).fail(function (e) {
        console.error(e.responseText);
        reject();
      });
    });
  };

  BookPrinter.prototype.renderHead = function renderHead(head) {
    var content = [];
    head.forEach(function (k) {
      return content.push('<link rel="stylesheet" href="' + k + '">');
    });
    content.push(this.styleSheet ? '<link rel="stylesheet" href="' + this.styleSheet + '">' : BookPrinter.defaultStyleSheet());
    return content.join('\n');
  };

  BookPrinter.prototype.useIFrame = function useIFrame() {
    var isChromium = this.wnd.chrome,
        winNav = this.wnd.navigator,
        vendorName = winNav.vendor,
        isIEedge = winNav.userAgent.indexOf("Edge") > -1,
        isIOSChrome = winNav.userAgent.match("CriOS");
    var use = void 0;
    if (isIOSChrome) {
      use = true;
    } else if (isChromium && vendorName === 'Google Inc.' && !isIEedge) {
      use = true;
    } else {
      use = false;
    }
    return use;
  };

  BookPrinter.defaultStyleSheet = function defaultStyleSheet() {
    return '\n      <style type="text/css">\n        body {\n          margin: 0;\n          padding: 0;\n        }\n        .fb3d-printer-page {\n          page-break-after: always;\n        }\n      </style>\n    '.fb3dQFilter();
  };

  return BookPrinter;
}();

exports.default = BookPrinter;

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(1);

var _View2 = __webpack_require__(66);

var _View3 = _interopRequireDefault(_View2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BookView = function (_View) {
  _inherits(BookView, _View);

  function BookView(container, onLoad, template, handler) {
    _classCallCheck(this, BookView);

    return _possibleConstructorReturn(this, _View.call(this, container, onLoad, template, handler));
  }

  BookView.prototype.initView = function initView() {
    this.view = this.container.find('.view');
    this.bookmarksView = this.container.find('.widBookmarks');
    this.thumbnailsView = this.container.find('.widThumbnails');
    this.searchView = this.container.find('.widSearch');
  };

  BookView.prototype.getHandlers = function getHandlers(id) {
    var _this2 = this;

    var handlers = void 0;
    if (id === 'inpPage') {
      handlers = [{
        inpPage: function inpPage(e, data) {
          return _this2.callLater(_View.prototype.getHandlers.call(_this2, id), id, e, data, BookView.PAGE_HANDLER_DELAY);
        }
      }];
    } else {
      handlers = _View.prototype.getHandlers.call(this, id);
    }
    return handlers;
  };

  BookView.prototype.onItemStateChanged = function onItemStateChanged(id, state) {
    if (id === 'cmdFullScreen') {
      if (state.active) {
        this.parentContainer.addClass('fullscreen');
      } else {
        this.parentContainer.removeClass('fullscreen');
      }
    }
  };

  BookView.prototype.getView = function getView() {
    return this.view;
  };

  BookView.prototype.getBookmarksView = function getBookmarksView() {
    return this.bookmarksView;
  };

  BookView.prototype.getThumbnailsView = function getThumbnailsView() {
    return this.thumbnailsView;
  };

  BookView.prototype.getSearchView = function getSearchView() {
    return this.searchView;
  };

  BookView.prototype.getForms = function getForms() {
    return [];
  };

  BookView.prototype.getLinks = function getLinks() {
    return ['cmdZoomIn', 'cmdZoomOut', 'cmdDefaultZoom', 'cmdToc', 'cmdFastBackward', 'cmdBackward', 'cmdBigBackward', 'cmdForward', 'cmdBigForward', 'cmdFastForward', 'cmdSave', 'cmdPrint', 'cmdFullScreen', 'cmdSmartPan', 'cmdSinglePage', 'cmdSounds', 'cmdStats', 'cmdLightingUp', 'cmdLightingDown', 'cmdCloseToc', 'cmdBookmarks', 'cmdSearch', 'cmdThumbnails', 'cmdPendingPlay'];
  };

  BookView.prototype.getWidgets = function getWidgets() {
    return ['widLoadingProgress', 'widFloatWnd', 'widTocMenu', 'widBookmarks', 'widThumbnails', 'widSearch', 'widSettings', 'widLoading', 'widPendingPlay'];
  };

  BookView.prototype.getInputs = function getInputs() {
    return ['inpPage', 'inpPages'];
  };

  BookView.prototype.getTexts = function getTexts() {
    return ['txtLoadingProgress'];
  };

  BookView.prototype.getTemplate = function getTemplate() {
    return {
      html: 'templates/default-book-view.html',
      styles: ['css/black-book-view.css'],
      links: [{
        rel: 'stylesheet',
        href: 'css/font-awesome.min.css'
      }],
      script: 'js/default-book-view.js'
    };
  };

  return BookView;
}(_View3.default);

BookView.PAGE_HANDLER_DELAY = 1000;
exports.default = BookView;

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _BookPropsBuilder2 = __webpack_require__(9);

var _BookPropsBuilder3 = _interopRequireDefault(_BookPropsBuilder2);

var _ImageFactory = __webpack_require__(8);

var _ImageFactory2 = _interopRequireDefault(_ImageFactory);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ClbBookPropsBuilder = function (_BookPropsBuilder) {
  _inherits(ClbBookPropsBuilder, _BookPropsBuilder);

  function ClbBookPropsBuilder(context, pageCallback, pages, onReady, style) {
    _classCallCheck(this, ClbBookPropsBuilder);

    var _this = _possibleConstructorReturn(this, _BookPropsBuilder.call(this, onReady, style));

    _this.calcSheets(pages);
    _this.pageCallback = pageCallback;
    _this.binds = {
      pageCallback: pageCallback.bind(_this)
    };
    _this.imageFactory = new _ImageFactory2.default(context);

    if (pages > 0) {
      var test = _this.imageFactory.build(pageCallback(0), 0, _this.defaults.sheet.widthTexels, _this.defaults.sheet.heightTexels, _this.defaults.sheet.color);
      test.onLoad = function () {
        _this.calcProps(test.width, test.height);
        test.dispose();
        _this.ready();
      };
    } else {
      _this.props = _this.defaults;
      _this.ready();
    }
    return _this;
  }

  return ClbBookPropsBuilder;
}(_BookPropsBuilder3.default);

exports.default = ClbBookPropsBuilder;

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _SheetBlock2 = __webpack_require__(10);

var _SheetBlock3 = _interopRequireDefault(_SheetBlock2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Cover = function (_SheetBlock) {
  _inherits(Cover, _SheetBlock);

  function Cover(visual, p, angle, state) {
    _classCallCheck(this, Cover);

    return _possibleConstructorReturn(this, _SheetBlock.call(this, visual, p, 0, 1, angle, state));
  }

  Cover.prototype.getProps = function getProps() {
    return _extends({}, this.p.cover, {
      sheets: 1
    });
  };

  Cover.prototype.loadPoints = function loadPoints() {
    var openedInterpolationIndeces = [[2, 3, 4], [2, 3, 4, 5, 6]],
        closedInterpolationIndeces = [[0, 1, 2], [0, 1, 2]],
        interpolationPoints = [{
      x: [[0, 0.2877, 0.6347, 0.8174, 1.0000], [0, 0.2831, 0.6256, 0.8082, 0.9909], [0, 0.2603, 0.5936, 0.7763, 0.9589], [0, 0.1370, 0.3881, 0.5342, 0.6758], [0, 0, 0, 0, 0]],
      y: [[0, 0, 0, 0, 0], [0, 0.02, 0.005, -0.001, -0.0025], [0, 0.04, 0.01, -0.002, -0.005], [0, 0.2466, 0.4795, 0.5708, 0.6758], [0, 0.2877, 0.6347, 0.8174, 1.0000]]
    }, {
      x: [[0, 0.2877, 0.6347, 0.8174, 1.0000], [0, 0.2831, 0.6256, 0.8082, 0.9909], [0, 0.2603, 0.5936, 0.7763, 0.9589], [0.000, 0.233, 0.563, 0.746, 0.927], [0.000, 0.144, 0.433, 0.613, 0.796], [0.000, 0.070, 0.288, 0.455, 0.626], [0, 0, 0, 0, 0]],
      y: [[0, 0, 0, 0, 0], [0, 0.02, 0.005, -0.001, -0.0025], [0, 0.04, 0.01, -0.002, -0.005], [0.000, 0.168, 0.269, 0.270, 0.255], [0.000, 0.245, 0.435, 0.458, 0.460], [0.000, 0.278, 0.544, 0.614, 0.673], [0, 0.2877, 0.6347, 0.8174, 1.0000]]
    }];
    return {
      interpolationPoints: interpolationPoints,
      openedInterpolationIndeces: openedInterpolationIndeces,
      closedInterpolationIndeces: closedInterpolationIndeces
    };
  };

  return Cover;
}(_SheetBlock3.default);

exports.default = Cover;

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _SheetCssLayer = __webpack_require__(38);

var _SheetCssLayer2 = _interopRequireDefault(_SheetCssLayer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var CssLayersManager = function () {
  function CssLayersManager(book) {
    _classCallCheck(this, CssLayersManager);

    this.book = book;
    this.props = book.p.cssLayerProps;
    this.visual = book.visual;
    this.pageManager = book.pageManager;
    this.wrappers = {};
    this.pendings = [];
  }

  CssLayersManager.prototype.getActives = function getActives() {
    var page = this.book.getPage(),
        pages = this.book.getPages(),
        acs = page === 0 || page === pages - 1 ? [page] : [page, page + 1];
    if (!this.wrappers[0] && page !== 0) {
      acs = [0].concat(acs);
    }
    return acs;
  };

  CssLayersManager.prototype.dispose = function dispose() {
    for (var _iterator = Object.values(this.wrappers), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var w = _ref;

      w.layers.forEach(function (l) {
        return l.dispose();
      });
    }
    delete this.wrappers;
  };

  CssLayersManager.prototype.show = function show() {
    var _this = this;

    this.hidden = false;

    var _loop = function _loop() {
      if (_isArray2) {
        if (_i2 >= _iterator2.length) return 'break';
        _ref2 = _iterator2[_i2++];
      } else {
        _i2 = _iterator2.next();
        if (_i2.done) return 'break';
        _ref2 = _i2.value;
      }

      var n = _ref2;

      var w = _this.wrappers[n];
      if (w) {
        if (w.state === 'ready' && w.layers.length) {
          var block = _this.book.getBlockByPage(n);
          w.layers.forEach(function (l) {
            if (l.isHidden()) {
              l.update(block);
              l.show();
            }
          });
        }
      } else {
        var _w = _this.wrappers[n] = {
          state: 'loading',
          layers: []
        };
        Promise.resolve().then(function () {
          _this.pageManager.getLayers(n, function (layers) {
            var finish = function finish() {
              if (layers.length && _this.wrappers) {
                var _block = _this.book.getBlockByPage(n);
                for (var _iterator3 = layers, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
                  var _ref3;

                  if (_isArray3) {
                    if (_i3 >= _iterator3.length) break;
                    _ref3 = _iterator3[_i3++];
                  } else {
                    _i3 = _iterator3.next();
                    if (_i3.done) break;
                    _ref3 = _i3.value;
                  }

                  var l = _ref3;

                  var sl = new _SheetCssLayer2.default(_this.visual, _block, _extends({}, _this.props, { pageNumber: n }));
                  _w.layers.push(sl);
                  sl.set(l.css, l.html, l.js);
                }
                setTimeout(function () {
                  if (!_this.hidden && ~_this.getActives().indexOf(n)) {
                    _w.layers.forEach(function (l) {
                      return l.show();
                    });
                  }
                }, 10);
              }
              _w.state = 'ready';
            };
            if (_this.wrappers && (n === 0 || _this.wrappers[0].state !== 'loading')) {
              finish();
              if (n === 0) {
                for (var _iterator4 = _this.pendings, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {
                  var _ref4;

                  if (_isArray4) {
                    if (_i4 >= _iterator4.length) break;
                    _ref4 = _iterator4[_i4++];
                  } else {
                    _i4 = _iterator4.next();
                    if (_i4.done) break;
                    _ref4 = _i4.value;
                  }

                  var f = _ref4;

                  f();
                }
                _this.pendings = [];
              }
            } else {
              _this.pendings.push(finish);
            }
          });
        });
      }
    };

    for (var _iterator2 = this.getActives(), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
      var _ref2;

      var _ret = _loop();

      if (_ret === 'break') break;
    }
  };

  CssLayersManager.prototype.hide = function hide() {
    this.hidden = true;
    var wait = [];
    for (var _iterator5 = Object.values(this.wrappers), _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {
      var _ref5;

      if (_isArray5) {
        if (_i5 >= _iterator5.length) break;
        _ref5 = _iterator5[_i5++];
      } else {
        _i5 = _iterator5.next();
        if (_i5.done) break;
        _ref5 = _i5.value;
      }

      var _w2 = _ref5;

      _w2.layers.forEach(function (l) {
        return wait.push(l.hide());
      });
    }
    return Promise.all(wait);
  };

  return CssLayersManager;
}();

exports.default = CssLayersManager;

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _libs = __webpack_require__(1);

var _Cache = __webpack_require__(14);

var _Cache2 = _interopRequireDefault(_Cache);

var _LoadingAnimation = __webpack_require__(53);

var _LoadingAnimation2 = _interopRequireDefault(_LoadingAnimation);

var _ImageFactory = __webpack_require__(8);

var _ImageFactory2 = _interopRequireDefault(_ImageFactory);

var _TextureAnimator = __webpack_require__(61);

var _TextureAnimator2 = _interopRequireDefault(_TextureAnimator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PageManager = function () {
  function PageManager(visual, book, p) {
    _classCallCheck(this, PageManager);

    this.visual = visual;
    this.book = book;
    this.pageQuery = '';
    this.p = p;
    this.pageCache = new _Cache2.default(p.cachedPages);
    this.resourcesCache = new _Cache2.default();

    this.canvases = [];
    for (var i = 0; i < 10; ++i) {
      var c = (0, _libs.$)('<canvas>')[0];
      this.canvases.push({ c: c, ctx: c.getContext('2d') });
    }
    this.nextCanvas = 0;

    this.imageFactory = new _ImageFactory2.default(_extends({}, visual, { dispatchEvent: book.dispatchEvent.bind(book), renderCanvas: this.canvases[0].c, renderCanvasCtx: this.canvases[0].ctx }), this.resourcesCache);

    this.loadings = [];
    this.renderQueue = [];
    this.predictedRequests = [];

    this.tmpMaterial = new _libs.THREE.MeshBasicMaterial();
    visual.addObject(new _libs.THREE.Mesh(new _libs.THREE.PlaneGeometry(1e-3, 1e-3), this.tmpMaterial));

    this.loadingAnimation = true;
    this.loading = {};
    this.loading[p.cover.color] = this.createLoadingTexture(p.cover);
    if (p.page.color !== p.cover.color) {
      this.loading[p.page.color] = this.createLoadingTexture(p.page);
    }

    this.book.addEventListener('afterAnimation', this.loadPredictedPages.bind(this));

    this.turnOnEvents();

    visual.addRenderCallback(this.update.bind(this));

    Promise.resolve().then(this.updateRenderQueue.bind(this));
  }

  PageManager.prototype.createLoadingTexture = function createLoadingTexture(p) {
    var spriteTiles = 6,
        heightTexels = p.height / p.width * p.widthTexels,
        scale = Math.sqrt(4.5 * 210 * 4.5 * 297 / (p.widthTexels * heightTexels)),
        animation = new _LoadingAnimation2.default(scale * p.widthTexels, scale * heightTexels, p.color),
        animator = new _TextureAnimator2.default(animation.createSprite(spriteTiles), spriteTiles, 1, spriteTiles, 0.2);
    animation.dispose();
    return animator;
  };

  PageManager.prototype.dispose = function dispose() {
    this.turnOffEvents();
    for (var _iterator = Object.keys(this.loading), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var color = _ref;

      this.loading[color].dispose();
    }
    delete this.loading;
    this.resourcesCache.dispose();
    this.pageCache.dispose();
    for (var _iterator2 = this.canvases, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
      var _ref2;

      if (_isArray2) {
        if (_i2 >= _iterator2.length) break;
        _ref2 = _iterator2[_i2++];
      } else {
        _i2 = _iterator2.next();
        if (_i2.done) break;
        _ref2 = _i2.value;
      }

      var o = _ref2;

      o.c.height = o.c.width = 0;
    }
    delete this.canvases;
  };

  PageManager.prototype.isCover = function isCover(n) {
    return n < 2 || n >= 2 * (this.p.sheets + 1);
  };

  PageManager.prototype.isMobile = function isMobile() {
    return this.visual.isMobile();
  };

  PageManager.prototype.getPageState = function getPageState(n) {
    var object = this.pageCache.get(n);
    return object ? object.state : undefined;
  };

  PageManager.prototype.enableLoadingAnimation = function enableLoadingAnimation(enable) {
    this.loadingAnimation = enable;
    for (var _iterator3 = this.loadings, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
      var _ref3;

      if (_isArray3) {
        if (_i3 >= _iterator3.length) break;
        _ref3 = _iterator3[_i3++];
      } else {
        _i3 = _iterator3.next();
        if (_i3.done) break;
        _ref3 = _i3.value;
      }

      var o = _ref3;

      this.setupMaterial(o);
    }
  };

  PageManager.prototype.update = function update(dt) {
    if (this.loadingAnimation) {
      var loading = {};
      for (var _iterator4 = this.loadings, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {
        var _ref4;

        if (_isArray4) {
          if (_i4 >= _iterator4.length) break;
          _ref4 = _iterator4[_i4++];
        } else {
          _i4 = _iterator4.next();
          if (_i4.done) break;
          _ref4 = _i4.value;
        }

        var o = _ref4;

        if (o.isActive()) {
          loading[o.color] = true;;
        }
      }
      for (var _iterator5 = Object.keys(loading), _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {
        var _ref5;

        if (_isArray5) {
          if (_i5 >= _iterator5.length) break;
          _ref5 = _iterator5[_i5++];
        } else {
          _i5 = _iterator5.next();
          if (_i5.done) break;
          _ref5 = _i5.value;
        }

        var color = _ref5;

        this.loading[color].update(dt);
        this.book.updateThree();
      }
    }
  };

  PageManager.prototype.removeFromLoadings = function removeFromLoadings(o) {
    var i = this.loadings.indexOf(o);
    if (~i) {
      this.loadings.splice(i, 1);
    }
  };

  PageManager.prototype.removeFromRenderQueue = function removeFromRenderQueue(o) {
    var i = this.renderQueue.indexOf(o);
    if (~i) {
      this.renderQueue.splice(i, 1);
    }
  };

  PageManager.prototype.refreshPageQuery = function refreshPageQuery(n) {
    var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

    this.pageQuery = query;
    var object = this.pageCache.get(n);
    if (object && object.wrapper && object.wrapper.setQuery) {
      if (!this.pageCache.remove(n)) {
        object.wrapper.setQuery(query);
        this.pushInRenderQueue(object);
      }
    }
  };

  PageManager.prototype.refreshZoom = function refreshZoom() {
    var _this = this;

    if (this.p.autoResolution.enable) {
      var es = [];
      this.pageCache.forEach(function (e) {
        es.push(e);
      });
      es.forEach(function (e) {
        var object = e[1];
        if (object && object.wrapper) {
          if (!_this.pageCache.remove(e[0])) {
            _this.pushInRenderQueue(object);
          }
        }
      });
    }
  };

  PageManager.prototype.getLayers = function getLayers(n, clb) {
    var _this2 = this;

    if (this.p.cssLayersLoader) {
      this.p.cssLayersLoader(n, function () {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        var object = _this2.pageCache.get(n);
        if (object) {
          if (object.state !== 'active') {
            object.pendings.push({ clb: clb, args: args });
          } else {
            clb.apply(undefined, args);
          }
        }
      });
    } else {
      clb([]);
    }
  };

  PageManager.prototype.resolvePendings = function resolvePendings(pendings) {
    for (var _iterator6 = pendings, _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : _iterator6[Symbol.iterator]();;) {
      var _ref6;

      if (_isArray6) {
        if (_i6 >= _iterator6.length) break;
        _ref6 = _iterator6[_i6++];
      } else {
        _i6 = _iterator6.next();
        if (_i6.done) break;
        _ref6 = _i6.value;
      }

      var p = _ref6;

      try {
        p.clb.apply(p, p.args);
      } catch (e) {
        console.error(e);
      }
    }
    pendings.splice(0, pendings.length);
  };

  PageManager.prototype.rtlPageN = function rtlPageN(n) {
    return this.p.rtl ? 2 * (this.p.sheets + 2) - 1 - n : n;
  };

  PageManager.prototype.load = function load(material, n) {
    var _this3 = this;

    var pi = this.p.pageCallback(this.rtlPageN(n)),
        p = this.isCover(n) ? this.p.cover : this.p.page;
    var o = {
      n: n,
      texture: new _libs.THREE.Texture(),
      wrapper: null,
      state: 'loading',
      locked: function locked(n) {
        return o.state === 'loading' || o.state === 'rendering' || _this3.book.isActivePage(n);
      },
      color: p.color,
      isActive: function isActive() {
        return _this3.book.isActivePage(n);
      },
      isTop: function isTop() {
        return ~_this3.book.getTopPages().indexOf(n);
      },
      dispose: function dispose() {
        _this3.removeFromLoadings(o);
        _this3.removeFromRenderQueue(o);
        if (o.wrapper && o.wrapper.dispose) {
          o.wrapper.dispose();
        }
        o.texture.dispose();
        delete o.texture;
        delete o.wrapper;
      },
      pendings: []
    };
    o.texture.minFilter = _libs.THREE.LinearFilter;
    this.loadings.push(o);
    this.setMaterial(o, material);

    Promise.resolve().then(function () {
      if (o.texture) {
        o.widthTexels = pi.widthTexels || p.widthTexels;
        o.heightTexels = p.height / p.width * p.widthTexels;
        var res = _this3.calcResolution(o);
        o.wrapper = _this3.imageFactory.build(pi, pi.number === undefined ? _this3.rtlPageN(n) : pi.number, res.width, res.height, p.color, _this3.p.injector);
        if (o.wrapper.setQuery) {
          o.wrapper.setQuery(_this3.pageQuery);
        }
        o.simulate = pi.interactive ? (o.wrapper.simulate || function () {
          return undefined;
        }).bind(o.wrapper) : undefined;
        o.wrapper.onLoad = function () {
          o.state = 'loaded';
          _this3.pushInRenderQueue(o);
          _this3.book.dispatchEvent({
            type: 'loadedPage',
            page: n
          });
        };
        o.wrapper.onChange = function (image) {
          if (o.texture) {
            _this3.removeFromLoadings(o);
            if (o.material) {
              o.material.map = o.texture;
              o.material.color = new _libs.THREE.Color(0xFFFFFF);
              o.material.needsUpdate = true;
            }
            o.texture.image = image;
            o.texture.needsUpdate = true;
            o.texture.onUpdate = function () {
              setTimeout(function () {
                if (o.state !== 'queuedForRender') {
                  o.state = 'active';
                  _this3.resolvePendings(o.pendings);
                }
                delete _this3.rendering;
                //this.updateRenderQueue();
              }, 100);
            };
            _this3.tmpMaterial.map = o.texture;
            _this3.tmpMaterial.needsUpdate = true;
          }
        };
      }
    });
    this.book.dispatchEvent({
      type: 'loadPage',
      page: n
    });
    return this.pageCache.put(n, o);
  };

  PageManager.prototype.isSinglePage = function isSinglePage(o) {
    return this.p.singlePage || !o.n || o.n === this.book.getPages() - 1;
  };

  PageManager.prototype.calcResolution = function calcResolution(o) {
    var res = void 0;
    if (this.p.autoResolution.enable) {
      var k = Math.min((this.isSinglePage(o) ? 1 : 0.5) * this.visual.width() / o.widthTexels, this.visual.height() / o.heightTexels);
      res = {
        width: this.p.autoResolution.k * this.p.zoom * k * o.widthTexels,
        height: this.p.autoResolution.k * this.p.zoom * k * o.heightTexels
      };
    } else {
      res = {
        width: o.widthTexels,
        height: o.heightTexels
      };
    }
    return res;
  };

  PageManager.prototype.pushInRenderQueue = function pushInRenderQueue(o) {
    if (o.state !== 'queuedForRender' && o.state !== 'loading') {
      o.state = 'queuedForRender';
      this.renderQueue.push(o);
      // this.updateRenderQueue();
    }
  };

  PageManager.prototype.updateRenderQueue = function updateRenderQueue() {
    if (this.canvases) {
      var p = this.p;
      if (!this.rendering) {
        if (p.renderWhileFlipping || !this.book.isProcessing()) {
          var active = void 0,
              top = void 0;
          for (var _iterator7 = this.renderQueue, _isArray7 = Array.isArray(_iterator7), _i7 = 0, _iterator7 = _isArray7 ? _iterator7 : _iterator7[Symbol.iterator]();;) {
            var _ref7;

            if (_isArray7) {
              if (_i7 >= _iterator7.length) break;
              _ref7 = _iterator7[_i7++];
            } else {
              _i7 = _iterator7.next();
              if (_i7.done) break;
              _ref7 = _i7.value;
            }

            var _o2 = _ref7;

            if (!active && _o2.isActive()) {
              active = _o2;
            }
            if (_o2.isTop()) {
              top = _o2;
              break;
            }
          }
          this.rendering = top || active;

          if (this.isMobile() && p.renderInactivePagesOnMobile || !this.isMobile() && p.renderInactivePages) {
            if (!this.rendering) {
              var ud = this.book.getUserDirection(),
                  near = {};
              for (var _iterator8 = this.renderQueue, _isArray8 = Array.isArray(_iterator8), _i8 = 0, _iterator8 = _isArray8 ? _iterator8 : _iterator8[Symbol.iterator]();;) {
                var _ref8;

                if (_isArray8) {
                  if (_i8 >= _iterator8.length) break;
                  _ref8 = _iterator8[_i8++];
                } else {
                  _i8 = _iterator8.next();
                  if (_i8.done) break;
                  _ref8 = _i8.value;
                }

                var o = _ref8;

                var id = ud.lastTopPage < o.n;
                if (!near[id] || Math.abs(near[id].n - ud.lastTopPage) > Math.abs(o.n - ud.lastTopPage)) {
                  near[id] = o;
                }
                this.rendering = near[ud.direction === 1] || near[ud.direction !== 1];
              }
            }
          }
          if (this.rendering) {
            if (this.rendering.wrapper.startRender) {
              this.removeFromRenderQueue(this.rendering);
              this.rendering.state = 'rendering';
              var _o = this.canvases[this.nextCanvas];
              this.nextCanvas = (this.nextCanvas + 1) % this.canvases.length;
              this.rendering.wrapper.setRenderCanvas(_o.c, _o.ctx);
              this.rendering.wrapper.setResolution(this.calcResolution(this.rendering));
              this.rendering.wrapper.startRender();
            } else {
              delete this.rendering;
            }
          }
        }
      } else {
        this.book.updateThree();
      }
      setTimeout(this.updateRenderQueue.bind(this), 100);
    }
  };

  PageManager.prototype.turnOnEvents = function turnOnEvents() {
    this.transferEvents = true;
  };

  PageManager.prototype.turnOffEvents = function turnOffEvents() {
    var mouseup = _libs.$.Event('mouseup'),
        mouseout = _libs.$.Event('mouseout');
    this.pageCache.forEach(function (ent) {
      var object = ent[1];
      if (object.simulate) {
        object.simulate(mouseup, undefined, 0, 0);
        object.simulate(mouseout, undefined, 0, 0);
      }
    });
    this.transferEvents = false;
  };

  PageManager.prototype.transferEventToTexture = function transferEventToTexture(n, e, data) {
    if (this.transferEvents) {
      var toObject = this.getOrLoadTextureObject(undefined, n);
      if (toObject.wrapper) {
        var uv = data.uv,
            toDoc = toObject.wrapper.getSimulatedDoc();
        this.pageCache.forEach(function (ent) {
          var object = ent[1];
          if (object.simulate) {
            object.simulate(e, toDoc, uv.x, uv.y);
          }
        });
      }
    }
  };

  PageManager.prototype.loadPredictedPages = function loadPredictedPages() {
    var _this4 = this;

    Promise.resolve().then(function () {
      var ud = _this4.book.getUserDirection();
      _this4.predictedRequests = [];
      for (var i = 0, p = ud.lastTopPage + ud.direction; i < _this4.p.preloadPages; ++i, p += ud.direction) {
        _this4.predictedRequests.push(p);
      }
      for (var _iterator9 = _this4.predictedRequests, _isArray9 = Array.isArray(_iterator9), _i9 = 0, _iterator9 = _isArray9 ? _iterator9 : _iterator9[Symbol.iterator]();;) {
        var _ref9;

        if (_isArray9) {
          if (_i9 >= _iterator9.length) break;
          _ref9 = _iterator9[_i9++];
        } else {
          _i9 = _iterator9.next();
          if (_i9.done) break;
          _ref9 = _i9.value;
        }

        var _p = _ref9;

        if (_p >= 0 && _p < _this4.book.getPages() && !_this4.pageCache.get(_p)) {
          _this4.load(undefined, _p);
        }
      }
    });
  };

  PageManager.prototype.setMaterial = function setMaterial(o, material) {
    this.pageCache.forEach(function (e) {
      var ob = e[1];
      if (o !== ob && ob.material === material) {
        delete ob.material;
      }
    });
    if (material && material !== o.material) {
      o.material = material;
      this.setupMaterial(o);
    }
  };

  PageManager.prototype.setupMaterial = function setupMaterial(o) {
    o.material.map = o.texture.image ? o.texture : this.loadingAnimation ? this.loading[o.color].texture : null;
    if (!o.material.map) {
      o.material.color = new _libs.THREE.Color(o.color);
    }
    o.material.needsUpdate = true;
  };

  PageManager.prototype.getOrLoadTextureObject = function getOrLoadTextureObject(material, n) {
    var object = this.pageCache.get(n);
    if (!object) {
      object = this.load(material, n);
    } else {
      this.setMaterial(object, material);
    }

    return object;
  };

  PageManager.prototype.setTexture = function setTexture(material, n) {
    this.getOrLoadTextureObject(material, n);
  };

  return PageManager;
}();

exports.default = PageManager;

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _BookPropsBuilder2 = __webpack_require__(9);

var _BookPropsBuilder3 = _interopRequireDefault(_BookPropsBuilder2);

var _Pdf = __webpack_require__(19);

var _Pdf2 = _interopRequireDefault(_Pdf);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var PdfBookPropsBuilder = function (_BookPropsBuilder) {
  _inherits(PdfBookPropsBuilder, _BookPropsBuilder);

  function PdfBookPropsBuilder(src, onReady, style) {
    _classCallCheck(this, PdfBookPropsBuilder);

    var _this = _possibleConstructorReturn(this, _BookPropsBuilder.call(this, onReady, style));

    _this.pdf = new _Pdf2.default(src);
    _this.pageDescription = {
      type: 'pdf',
      src: _this.pdf,
      interactive: true
    };
    _this.binds = {
      pageCallback: _this.pageCallback.bind(_this)
    };
    _this.pdf.getHandler(_this.init.bind(_this));
    return _this;
  }

  PdfBookPropsBuilder.prototype.dispose = function dispose() {
    this.pdf.dispose();
    _BookPropsBuilder.prototype.dispose.call(this);
  };

  PdfBookPropsBuilder.prototype.init = function init(handler) {
    var _this2 = this;

    var pages = this.pdf.getPagesNum();
    this.calcSheets(pages);
    if (pages > 0) {
      handler.getPage(1).then(function (page) {
        var viewport = page.getViewport({ scale: 1 }),
            size = { width: viewport.width, height: viewport.height };
        _this2.calcProps(size.width, size.height);
        _this2.ready();
      }).catch(function (e) {
        console.error(e);
      });
    } else {
      this.props = this.defaults;
      this.ready();
    }
  };

  PdfBookPropsBuilder.prototype.pageCallback = function pageCallback(n) {
    return this.pageDescription;
  };

  return PdfBookPropsBuilder;
}(_BookPropsBuilder3.default);

exports.default = PdfBookPropsBuilder;

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(1);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PdfLinksHandler = function () {
  function PdfLinksHandler(pdf, ctrl, element) {
    _classCallCheck(this, PdfLinksHandler);

    this.pdf = pdf;
    this.ctrl = ctrl;
    this.element = (0, _libs.$)(element);
    this.cursors = [];
  }

  PdfLinksHandler.prototype.dispose = function dispose() {};

  PdfLinksHandler.prototype.setHandler = function setHandler(handler) {
    this.handler = handler;
  };

  PdfLinksHandler.prototype.defaultHandler = function defaultHandler(type, destination) {
    if (type === 'internal') {
      this.ctrl.goToPage(destination);
    } else if (type === 'external') {
      window.open(destination, '_blank');
    }
  };

  PdfLinksHandler.prototype.callHandlers = function callHandlers(type, destination) {
    if (!this.handler || !this.handler(type, destination)) {
      this.defaultHandler(type, destination);
    }
  };

  PdfLinksHandler.prototype.handleEvent = function handleEvent(data) {
    var _this = this;

    var e = data.event,
        anno = data.annotation;
    switch (e.type) {
      case 'mouseover':
        {
          this.cursors.push(this.element.css('cursor'));
          this.element.css('cursor', 'pointer');
          break;
        }
      case 'mouseout':
        {
          this.element.css('cursor', this.cursors.pop() || '');
          break;
        }
      case 'touchtap':
      case 'click':
        {
          if (anno.url) {
            this.callHandlers('external', anno.url);
          } else if (anno.dest) {
            this.pdf.getDestination(anno.dest).then(function (number) {
              return _this.callHandlers('internal', number);
            });
          }
          break;
        }
    }
  };

  return PdfLinksHandler;
}();

exports.default = PdfLinksHandler;

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _Finder = __webpack_require__(17);

var _Finder2 = _interopRequireDefault(_Finder);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SearchEngine = function () {
  function SearchEngine(pageCallback, pages) {
    _classCallCheck(this, SearchEngine);

    this.pageCallback = pageCallback;
    this.pages = pages;
    this.results = [];
  }

  SearchEngine.prototype.setQuery = function setQuery(query) {
    this.query = query;
    this.update = true;
    this.process();
  };

  SearchEngine.prototype.process = function process() {
    var _this = this;

    if (this.update) {
      var results = this.results;
      this.results = [];
      if (this.onPageHitsChanged) {
        for (var _iterator = results, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
          var _ref;

          if (_isArray) {
            if (_i >= _iterator.length) break;
            _ref = _iterator[_i++];
          } else {
            _i = _iterator.next();
            if (_i.done) break;
            _ref = _i.value;
          }

          var res = _ref;

          this.onPageHitsChanged(undefined, '');
        }
      }
      this.update = false;
      this.page = 0;
      this.stamp = Date.now();
      if (this.query.length > 1) {
        this.process();
      }
    } else {
      if (this.page < this.pages) {
        var stamp = this.stamp;
        this.find(this.pageCallback(this.page)).then(function (contexts) {
          if (stamp === _this.stamp) {
            if (contexts.length) {
              _this.results.push({
                page: _this.page,
                contexts: contexts
              });
            }
            if (_this.onPageHitsChanged) {
              _this.onPageHitsChanged(_this.page, _this.query);
            }
            ++_this.page;
            _this.process();
          }
        });
      }
    }
  };

  SearchEngine.prototype.find = function find(pi) {
    var _this2 = this;

    var next = void 0;
    if (pi.type === 'pdf') {
      next = new Promise(function (resolve) {
        pi.src.getHandler(function () {
          var n = pi.number === undefined ? _this2.page : pi.number;
          if (pi.src.getPageType(n) === 'right') {
            resolve([]);
          } else {
            pi.src.getPage(n).then(function (page) {
              page.getTextContent().then(function (textContent) {
                resolve(new _Finder2.default(textContent.items.map(function (item) {
                  return item.str;
                }), _this2.query, { hits: false }).getContexts());
              });
            }).catch(function () {
              return resolve([]);
            });
          }
        });
      });
    } else {
      next = Promise.resolve([]);
    }
    return next;
  };

  return SearchEngine;
}();

exports.default = SearchEngine;

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _CSSLayer = __webpack_require__(13);

var _CSSLayer2 = _interopRequireDefault(_CSSLayer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SheetCssLayer = function () {
  function SheetCssLayer(visual, block, props) {
    _classCallCheck(this, SheetCssLayer);

    this.visual = visual;
    var size = block.getTopSize();
    this.layer = new _CSSLayer2.default(size.width, size.height, props);

    this.update(block);
    this.visual.addCssObject(this.layer);
  }

  SheetCssLayer.prototype.dispose = function dispose() {
    this.layer.dispose();
    this.visual.removeCssObject(this.layer);
  };

  SheetCssLayer.prototype.isHidden = function isHidden() {
    return this.layer.isHidden();
  };

  SheetCssLayer.prototype.hide = function hide() {
    return this.layer.hide();
  };

  SheetCssLayer.prototype.show = function show() {
    return this.layer.show();
  };

  SheetCssLayer.prototype.set = function set(css, html, js) {
    this.layer.setData(css, html, js);
  };

  SheetCssLayer.prototype.update = function update(block) {
    this.block = block;
    this.block.getTopWorldRotation(this.layer.rotation);
    this.block.getTopWorldPosition(this.layer.position);
  };

  return SheetCssLayer;
}();

exports.default = SheetCssLayer;

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _MathUtils = __webpack_require__(3);

var _MathUtils2 = _interopRequireDefault(_MathUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SheetPhysics = function () {
  SheetPhysics.targetForceClb = function targetForceClb(o, a, v, ch) {
    var l = a * this.r;
    return 100 * this.m * this.g * (2 / (1 + Math.exp(10 * (l - this.tl))) - 1) - this.m * 40 * v;
  };

  SheetPhysics.hoverCornerForceClb = function hoverCornerForceClb(o, v, l, ch) {
    return 5;
  };

  SheetPhysics.prototype.getTargetForceClb = function getTargetForceClb(mass, targetAngle) {
    return SheetPhysics.targetForceClb.bind({
      g: this.p.gravity,
      m: mass,
      tl: targetAngle * this.p.r,
      r: this.p.r
    });
  };

  SheetPhysics.dragForceClb = function dragForceClb(o, a, v, ch) {
    return o.flbt * o.m * (10 * o.g * ch - 50 * v / (1 + Math.exp(3.5 * Math.abs(ch))));
  };

  SheetPhysics.dragCornerForceClb = function dragCornerForceClb(o, a, v, ch) {
    return 15 * (2 / (1 + Math.exp(10 * (a - this.ta) * o.r)) - 1);
  };

  SheetPhysics.getDragCornerForceClb = function getDragCornerForceClb(targetAngle) {
    return SheetPhysics.dragCornerForceClb.bind({
      ta: targetAngle
    });
  };

  function SheetPhysics() {
    var r = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
    var gravity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
    var cornerDeviation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.15;
    var fps = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 240;

    _classCallCheck(this, SheetPhysics);

    this.p = {
      r: r,
      cornerDeviation: cornerDeviation,
      l: Math.PI * r,
      startDt: 1 / fps,
      gravity: gravity,
      margin: 0.002 * r,
      infM: 1e4,
      attempts: 16,
      maxIterations: 100
    };
    this.os = [];
  }

  SheetPhysics.prototype.dispose = function dispose() {
    this.os = [];
  };

  SheetPhysics.prototype.getSize = function getSize() {
    return this.os.length;
  };

  SheetPhysics.prototype.addObject = function addObject(mass, angle, velocity, flexibility, cornerHeight, simulateClb, removeClb) {
    var forceClb = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : function () {
      return 0;
    };
    var cornerForceClb = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : function () {
      return 0;
    };

    var no = {
      id: _MathUtils2.default.getUnique(),
      m: mass,
      v: velocity,
      l: angle * this.p.r,
      f: forceClb,
      cf: cornerForceClb,
      ch: cornerHeight,
      flbt: flexibility,
      simulateClb: simulateClb,
      removeClb: removeClb
    };
    var i = this.os.findIndex(function (o) {
      return no.l <= o.l;
    });
    i = ~i ? i : this.os.length;
    this.os.splice(i, 0, no);
    return no.id;
  };

  SheetPhysics.prototype.getParametrMap = function getParametrMap(name) {
    var map = {
      mass: 'm',
      velocity: 'v',
      flexibility: 'flbt',
      cornerHeight: 'ch',
      simulateClb: 'simulateClb',
      removeClb: 'removeClb',
      forceClb: 'f',
      cornerForceClb: 'cf'
    };
    return map[name];
  };

  SheetPhysics.prototype.setParametr = function setParametr(id, name, value) {
    var o = this.os.find(function (o) {
      return o.id === id;
    });
    if (name === 'angle') {
      o.l = value * this.p.r;
    } else {
      o[this.getParametrMap(name)] = value;
    }
  };

  SheetPhysics.prototype.getParametr = function getParametr(id, name) {
    var o = this.os.find(function (o) {
      return o.id === id;
    });
    var value = void 0;
    if (name === 'angle') {
      value = o.l / this.p.r;
    } else {
      value = o[this.getParametrMap(name)];
    }
    return value;
  };

  SheetPhysics.prototype.simulate = function simulate(T) {
    var t = 0,
        dt = this.p.startDt,
        attempt = 0,
        it = 0;

    while (t < T && it < this.p.maxIterations) {
      if (dt > T - t) {
        dt = T - t;
      }
      var nos = this.integrate(this.os, dt),
          ci = this.findCollisions(nos);
      if (ci.num > 1 && attempt < this.p.attempts) {
        dt /= 2;
        ++attempt;
      } else {
        if (ci.num === 1) {
          var scos = this.solveCollision(nos[ci.last - 1], nos[ci.last]);
          nos[ci.last - 1] = scos[0];
          nos[ci.last] = scos[1];
        } else if (ci.num > 1) {
          var gs = [];
          var last = -2;
          for (var _iterator = ci.all, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
            var _ref;

            if (_isArray) {
              if (_i >= _iterator.length) break;
              _ref = _iterator[_i++];
            } else {
              _i = _iterator.next();
              if (_i.done) break;
              _ref = _i.value;
            }

            var i = _ref;

            if (i - last > 1) {
              gs.push([]);
            }
            gs[gs.length - 1].push(i);
            last = i;
          }
          for (var _iterator2 = gs, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
            var _ref2;

            if (_isArray2) {
              if (_i2 >= _iterator2.length) break;
              _ref2 = _iterator2[_i2++];
            } else {
              _i2 = _iterator2.next();
              if (_i2.done) break;
              _ref2 = _i2.value;
            }

            var g = _ref2;

            var sg = void 0,
                i0 = void 0;
            if (nos[g[0]].l > Math.PI / 2 * this.p.r) {
              sg = -1;
              i0 = g[g.length - 1];
            } else {
              sg = 1;
              i0 = g[0];
            }
            for (var _i3 = i0; _i3 < nos.length && _i3 > -1; _i3 += sg) {
              var o = nos[_i3 + sg];
              if (o && sg * (o.l - nos[_i3].l) <= this.p.margin) {
                o.l = nos[_i3].l + sg * 2 * this.p.margin;
                if (o.l > this.p.l || o.l < 0) {
                  o.l = o.l > this.p.l ? this.p.l : 0;
                  o.ch = 0;
                  o.v = 0;
                  console.error('Bad collision');
                }
              } else {
                break;
              }
            }
          }
        }
        this.os = nos;
        this.findAndSolveCornerCollisions();
        t += dt;
        dt = this.p.startDt;
        attempt = 0;
      }
      ++it;
    }

    this.removeStatics();
  };

  SheetPhysics.prototype.removeStatics = function removeStatics() {
    var nos = [],
        notify = [[], []];
    for (var _iterator3 = this.os, _isArray3 = Array.isArray(_iterator3), _i4 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
      var _ref3;

      if (_isArray3) {
        if (_i4 >= _iterator3.length) break;
        _ref3 = _iterator3[_i4++];
      } else {
        _i4 = _iterator3.next();
        if (_i4.done) break;
        _ref3 = _i4.value;
      }

      var o = _ref3;

      if (o.simulateClb) {
        o.simulateClb(o.l / this.p.r, o.ch);
      }
      if ((o.l === this.p.l || o.l === 0) && o.v === 0) {
        if (o.removeClb !== undefined) {
          notify[(o.l !== this.p.l) + 0].push(o);
        }
      } else {
        nos.push(o);
      }
    }
    this.os = nos;
    for (var _iterator4 = notify[0].reverse(), _isArray4 = Array.isArray(_iterator4), _i5 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {
      var _ref4;

      if (_isArray4) {
        if (_i5 >= _iterator4.length) break;
        _ref4 = _iterator4[_i5++];
      } else {
        _i5 = _iterator4.next();
        if (_i5.done) break;
        _ref4 = _i5.value;
      }

      var _o = _ref4;

      _o.removeClb(Math.PI, _o.ch);
    }
    for (var _iterator5 = notify[1], _isArray5 = Array.isArray(_iterator5), _i6 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {
      var _ref5;

      if (_isArray5) {
        if (_i6 >= _iterator5.length) break;
        _ref5 = _iterator5[_i6++];
      } else {
        _i6 = _iterator5.next();
        if (_i6.done) break;
        _ref5 = _i6.value;
      }

      var _o2 = _ref5;

      _o2.removeClb(0, _o2.ch);
    }
  };

  SheetPhysics.prototype.findAndSolveCornerCollisions = function findAndSolveCornerCollisions() {
    if (this.os.length) {
      var os = [_extends({}, this.os[0], {
        l: 0,
        m: this.p.infM,
        ch: 0
      })].concat(this.os, [_extends({}, this.os[0], {
        l: 1.05 * this.p.l,
        m: this.p.infM,
        ch: 0
      })]);

      for (var i = 1; i < os.length; ++i) {
        var a = os[i - 1],
            b = os[i],
            al = a.l + this.p.cornerDeviation * a.ch * this.p.r,
            bl = b.l + this.p.cornerDeviation * b.ch * this.p.r;
        if (1.05 * al > bl && a.ch > b.ch) {
          var dCh = a.ch - b.ch,
              dv = a.m / a.flbt + b.m / b.flbt,
              ka = a.m / a.flbt / dv,
              kb = b.m / b.flbt / dv;
          a.ch = a.ch - kb * dCh;
          b.ch = b.ch + ka * dCh;
        }
      }
    }
  };

  SheetPhysics.prototype.solveCollision = function solveCollision(a, b) {
    var mm = b.m + a.m,
        av = (-a.v * b.m + a.m * a.v + 2 * b.m * b.v) / mm,
        bv = (b.m * b.v - b.v * a.m + 2 * a.m * a.v) / mm;
    return [_extends({}, a, { v: av }), _extends({}, b, { v: bv })];
  };

  SheetPhysics.prototype.findCollisions = function findCollisions(os) {
    var ci = {
      num: 0,
      last: 0,
      all: []
    };
    for (var i = 1; i < os.length && ci.num < 2; ++i) {
      if (os[i - 1].l > os[i].l || this.isCollision(os[i - 1], os[i])) {
        if (os[i - 1].l > os[i].l) {
          ++ci.num;
        }
        ++ci.num;
        ci.last = i;
        if (ci.all.indexOf(i - 1) === -1) {
          ci.all.push(i - 1);
        }
        if (ci.all.indexOf(i) === -1) {
          ci.all.push(i);
        }
      }
    }
    return ci;
  };

  SheetPhysics.prototype.isCollision = function isCollision(a, b) {
    return Math.abs(a.l - b.l) < this.p.margin && a.v > b.v;
  };

  SheetPhysics.prototype.integrate = function integrate(os, dt) {
    var nos = [];
    for (var _iterator6 = os, _isArray6 = Array.isArray(_iterator6), _i7 = 0, _iterator6 = _isArray6 ? _iterator6 : _iterator6[Symbol.iterator]();;) {
      var _ref6;

      if (_isArray6) {
        if (_i7 >= _iterator6.length) break;
        _ref6 = _iterator6[_i7++];
      } else {
        _i7 = _iterator6.next();
        if (_i7.done) break;
        _ref6 = _i7.value;
      }

      var o = _ref6;

      var vl = _MathUtils2.default.rk4(this.dy.bind({
        g: this.p.gravity,
        r: this.p.r,
        m: o.m,
        f: o.f,
        cf: o.cf,
        ch: o.ch,
        flbt: o.flbt
      }), 0, dt, [o.v, o.l, o.ch]);
      var no = _extends({}, o, {
        v: vl[0],
        l: vl[1],
        ch: vl[2]
      });
      if (no.l <= 0 || no.l >= this.p.l) {
        no.l = no.l <= 0 ? 0 : this.p.l;
        no.v = 0;
        no.ch = 0;
      }
      nos.push(no);
    }
    return nos;
  };

  SheetPhysics.prototype.dy = function dy(t, y) {
    var v = y[0],
        l = y[1],
        ch = y[2],
        alf = l / this.r,
        f = this.f(this, alf, v, ch),
        cf = this.cf(this, alf, v, ch),
        cosAlf = Math.cos(alf),
        brf = 0.006 * Math.abs((Math.sign(cosAlf) - Math.sign(v)) * v) * Math.pow(cosAlf, 5);
    return [(-this.g * cosAlf * this.m + brf + f) / this.m, v + 0.01 * (Math.random() - 0.5), this.flbt * ((2 / (1 + Math.exp(-0.2 * cf)) - 1) * (1 - 2 / (1 + Math.exp(-5 * (Math.abs(ch) - 2)))) - ch)];
  };

  return SheetPhysics;
}();

exports.default = SheetPhysics;

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SoundsEnviroment = function () {
  function SoundsEnviroment() {
    var template = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, SoundsEnviroment);

    template = typeof template === 'function' ? template() : template;
    this.sounds = template.sounds || {};
    this.audio = {};
    if (this.sounds.startFlip) {
      this.audio.startFlip = new Audio(this.sounds.startFlip);
      this.audio.startFlip.volume = 0.5;
    }
    if (this.sounds.endFlip) {
      this.audio.endFlip = new Audio(this.sounds.endFlip);
      this.audio.endFlip.volume = 0.5;
    }
  }

  SoundsEnviroment.prototype.setEnabled = function setEnabled(enabled) {
    this.enabled = enabled;
  };

  SoundsEnviroment.prototype.togle = function togle() {
    this.enabled = !this.enabled;
  };

  SoundsEnviroment.prototype.dispose = function dispose() {
    delete this.audio.startFlip;
    delete this.audio.endFlip;
  };

  SoundsEnviroment.prototype.startFlip = function startFlip() {
    if (this.enabled && this.audio.startFlip) {
      this.audio.startFlip.play();
    }
  };

  SoundsEnviroment.prototype.endFlip = function endFlip() {
    if (this.enabled && this.audio.startFlip) {
      this.audio.startFlip.pause();
      this.audio.startFlip.currentTime = 0;
    }
    if (this.enabled && this.audio.endFlip) {
      this.audio.endFlip.play();
    }
  };

  SoundsEnviroment.prototype.subscribeFlips = function subscribeFlips(emitter) {
    emitter.addEventListener('startFlip', this.startFlip.bind(this));
    emitter.addEventListener('endFlip', this.endFlip.bind(this));
  };

  return SoundsEnviroment;
}();

exports.default = SoundsEnviroment;

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _WidgetController2 = __webpack_require__(68);

var _WidgetController3 = _interopRequireDefault(_WidgetController2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TocController = function (_WidgetController) {
  _inherits(TocController, _WidgetController);

  function TocController(view, bookCtrl) {
    _classCallCheck(this, TocController);

    var _this = _possibleConstructorReturn(this, _WidgetController.call(this, view));

    _this.bookCtrl = bookCtrl;
    _this.tab = 'none';
    return _this;
  }

  TocController.prototype.setThumbnails = function setThumbnails(thumbnails) {
    this.thumbnails = thumbnails;
    thumbnails.onNavigate = this.navigateThumbnails.bind(this);
    if (this.tab === 'none') {
      this.tab = 'thumbnails';
    }
    this.fireChange();
  };

  TocController.prototype.setSearch = function setSearch(search) {
    this.search = search;
    search.onNavigate = this.navigateSearch.bind(this);
    this.fireChange();
  };

  TocController.prototype.setBookmarks = function setBookmarks(bookmarks, pdf) {
    this.bookmarks = bookmarks;
    this.pdf = pdf;
    bookmarks.onNavigate = this.navigateBookmarks.bind(this);
    if (bookmarks.getSize()) {
      this.tab = 'bookmarks';
      this.isBookmarks = true;
    }
    this.fireChange();
  };

  TocController.prototype.cmdBookmarks = function cmdBookmarks() {
    this.tab = 'bookmarks';
    this.fireChange();
  };

  TocController.prototype.cmdThumbnails = function cmdThumbnails() {
    this.tab = 'thumbnails';
    this.fireChange();
  };

  TocController.prototype.cmdSearch = function cmdSearch() {
    this.tab = 'search';
    this.fireChange();
  };

  TocController.prototype.cmdCloseToc = function cmdCloseToc() {
    this.hide();
  };

  TocController.prototype.navigateThumbnails = function navigateThumbnails(number) {
    this.bookCtrl.goToPage(number);
  };

  TocController.prototype.navigateSearch = function navigateSearch(number) {
    this.bookCtrl.goToPage(number);
  };

  TocController.prototype.navigateBookmarks = function navigateBookmarks(item) {
    var _this2 = this;

    if (item.url) {
      window.open(item.url, '_blank');
    } else if (item.dest) {
      this.pdf.getDestination(item.dest).then(function (number) {
        return _this2.bookCtrl.goToPage(number);
      });
    }
  };

  TocController.prototype.updateView = function updateView() {
    var _this3 = this;

    if (this.view) {
      this.view.setState('widTocMenu', {
        enable: true,
        visible: true,
        active: false
      });
      this.view.setState('widThumbnails', {
        enable: true,
        visible: this.tab === 'thumbnails',
        active: false
      });
      this.view.setState('widSearch', {
        enable: true,
        visible: this.tab === 'search',
        active: false
      });
      this.view.setState('widBookmarks', {
        enable: true,
        visible: this.tab === 'bookmarks',
        active: false
      });
      this.view.setState('cmdBookmarks', {
        enable: true,
        visible: true,
        active: this.tab === 'bookmarks'
      });
      this.view.setState('cmdCloseToc', {
        enable: true,
        visible: true,
        active: false
      });
      this.view.setState('cmdThumbnails', {
        enable: true,
        visible: true,
        active: this.tab === 'thumbnails'
      });
      this.view.setState('cmdSearch', {
        enable: true,
        visible: true,
        active: this.tab === 'search'
      });
      Promise.resolve().then(function () {
        return _this3.thumbnails.setEnable(_this3.visible && _this3.tab === 'thumbnails');
      });
      _WidgetController.prototype.updateView.call(this);
    }
  };

  return TocController;
}(_WidgetController3.default);

exports.default = TocController;

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(1);

var _ThreeUtils = __webpack_require__(21);

var _ThreeUtils2 = _interopRequireDefault(_ThreeUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var resX = 11,
    resY = 2,
    resZ = 15,
    scale = 1,
    faces = [];

var frontGeometry = new _libs.THREE.PlaneGeometry(scale, scale, resX - 1, resY - 1);
frontGeometry.translate(0.5 * scale, 0.5 * scale, scale);
var backGeometry = new _libs.THREE.PlaneGeometry(scale, scale, resX - 1, resY - 1);
backGeometry.rotateY(Math.PI);
backGeometry.translate(0.5 * scale, 0.5 * scale, 0);
var leftGeometry = new _libs.THREE.PlaneGeometry(scale, scale, resZ - 1, resY - 1);
leftGeometry.rotateY(-Math.PI / 2);
leftGeometry.translate(0, 0.5 * scale, 0.5 * scale);
var rightGeometry = new _libs.THREE.PlaneGeometry(scale, scale, resZ - 1, resY - 1);
rightGeometry.rotateY(Math.PI / 2);
rightGeometry.translate(scale, 0.5 * scale, 0.5 * scale);
var topGeometry = new _libs.THREE.PlaneGeometry(scale, scale, resX - 1, resZ - 1);
topGeometry.rotateX(-Math.PI / 2);
topGeometry.translate(0.5 * scale, scale, 0.5 * scale);
var bottomGeometry = topGeometry.clone();
bottomGeometry.translate(0, -scale, 0);
for (var _iterator = bottomGeometry.faces, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
  var _ref;

  if (_isArray) {
    if (_i >= _iterator.length) break;
    _ref = _iterator[_i++];
  } else {
    _i = _iterator.next();
    if (_i.done) break;
    _ref = _i.value;
  }

  var f = _ref;
  var _ref3 = [f.b, f.a];
  f.a = _ref3[0];
  f.b = _ref3[1];
}

var geometry = new _libs.THREE.Geometry();
geometry.vertices = [].concat(bottomGeometry.vertices, topGeometry.vertices);

var addFaces = function addFaces(fs, map) {
  for (var _iterator2 = fs, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
    var _ref2;

    if (_isArray2) {
      if (_i2 >= _iterator2.length) break;
      _ref2 = _iterator2[_i2++];
    } else {
      _i2 = _iterator2.next();
      if (_i2.done) break;
      _ref2 = _i2.value;
    }

    var f = _ref2;

    geometry.faces.push(new _libs.THREE.Face3(map(f.a), map(f.b), map(f.c)));
  }
  faces.push(geometry.faces.length);
};

var mapVertices = function mapVertices(src, dst) {
  var map = [];
  var eq = function eq(a, b) {
    return Math.abs(a.x - b.x) + Math.abs(a.y - b.y) + Math.abs(a.z - b.z) < 1e-4;
  };
  for (var i = 0; i < src.length; ++i) {
    for (var j = 0; j < dst.length; ++j) {
      if (eq(src[i], dst[j])) {
        map[i] = j;
        break;
      }
    }
  }
  return map;
};

var frontMap = mapVertices(frontGeometry.vertices, geometry.vertices);
var backMap = mapVertices(backGeometry.vertices, geometry.vertices);
var leftMap = mapVertices(leftGeometry.vertices, geometry.vertices);
var rightMap = mapVertices(rightGeometry.vertices, geometry.vertices);

addFaces(topGeometry.faces, function (i) {
  return i + bottomGeometry.vertices.length;
});
addFaces(bottomGeometry.faces, function (i) {
  return i;
});
addFaces(frontGeometry.faces, function (i) {
  return frontMap[i];
});
addFaces(backGeometry.faces, function (i) {
  return backMap[i];
});
addFaces(leftGeometry.faces, function (i) {
  return leftMap[i];
});
addFaces(rightGeometry.faces, function (i) {
  return rightMap[i];
});
faces.pop();

_ThreeUtils2.default.computeFaceVertexUvs(geometry, faces);

geometry.computeVertexNormals();
//geometry.computeFaceNormals();
geometry.computeBoundingSphere();
//geometry.computeBoundingBox();
geometry.verticesNeedUpdate = true;

exports.default = {
  resX: resX,
  resY: resY,
  resZ: resZ,
  faces: faces,
  geometry: geometry
};

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.props = props;
var mouseButtons = {
  Left: 0,
  Middle: 1,
  Right: 2
};

function props() {
  return {
    eps: 1e-4,
    scale: {
      default: 0.9,
      min: 0.9,
      max: 2.5,
      levels: 7
    },
    lighting: {
      default: 0.7,
      min: 0,
      max: 1,
      levels: 7
    },
    pan: {
      speed: 50
    },
    loadingAnimation: {
      skin: false,
      book: true
    },
    autoResolution: {
      enabled: true,
      coefficient: 1.5
    },
    narrowView: {
      width: 500
    },
    actions: {
      cmdZoomIn: {
        enabled: true,
        enabledInNarrow: true
      },
      cmdZoomOut: {
        enabled: true,
        enabledInNarrow: true
      },
      cmdDefaultZoom: {
        enabled: true,
        enabledInNarrow: false,
        type: 'dblclick',
        code: 0
      },
      cmdToc: {
        enabled: true,
        enabledInNarrow: true
      },
      cmdFastBackward: {
        enabled: false,
        enabledInNarrow: false
      },
      cmdBackward: {
        enabled: true,
        enabledInNarrow: false
      },
      cmdBigBackward: {
        enabled: true,
        enabledInNarrow: true
      },
      cmdForward: {
        enabled: true,
        enabledInNarrow: false
      },
      cmdBigForward: {
        enabled: true,
        enabledInNarrow: true
      },
      cmdFastForward: {
        enabled: false,
        enabledInNarrow: false
      },
      cmdSave: {
        enabled: true,
        enabledInNarrow: true
      },
      cmdPrint: {
        enabled: true,
        enabledInNarrow: false
      },
      cmdFullScreen: {
        enabled: true,
        enabledInNarrow: true
      },
      widSettings: {
        enabled: true,
        enabledInNarrow: true
      },
      cmdSmartPan: {
        enabled: true,
        enabledInNarrow: true,
        active: true
      },
      cmdSinglePage: {
        enabled: true,
        enabledInNarrow: true,
        active: false,
        activeForMobile: false
      },
      cmdSounds: {
        enabled: true,
        enabledInNarrow: true,
        active: true
      },
      cmdStats: {
        enabled: true,
        enabledInNarrow: true,
        active: false
      },
      cmdLightingUp: {
        enabled: true,
        enabledInNarrow: true
      },
      cmdLightingDown: {
        enabled: true,
        enabledInNarrow: true
      },
      cmdPanLeft: {
        enabled: false
      },
      cmdPanRight: {
        enabled: false
      },
      cmdPanUp: {
        enabled: false
      },
      cmdPanDown: {
        enabled: false
      },
      mouseCmdRotate: {
        enabled: true,
        type: 'mousedrag',
        code: mouseButtons.Right
      },
      mouseCmdDragZoom: {
        enabled: true,
        type: 'mousedrag',
        code: mouseButtons.Middle
      },
      mouseCmdPan: {
        enabled: true,
        type: 'mousedrag',
        code: mouseButtons.Left
      },
      mouseCmdWheelZoom: {
        enabled: true,
        type: 'mousewheel',
        code: 0
      },
      touchCmdRotate: {
        enabled: true,
        type: 'touchdrag',
        code: 3
      },
      touchCmdZoom: {
        enabled: true,
        type: 'touchdrag',
        code: 2
      },
      touchCmdPan: {
        enabled: true,
        type: 'touchdrag',
        code: 1
      },
      touchCmdSwipe: {
        enabled: true,
        type: 'touchdrag',
        code: 1
      }
    }
  };
};

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(0);

var _ImageBase2 = __webpack_require__(5);

var _ImageBase3 = _interopRequireDefault(_ImageBase2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BlankImage = function (_ImageBase) {
  _inherits(BlankImage, _ImageBase);

  function BlankImage(context, width, height, color) {
    _classCallCheck(this, BlankImage);

    var _this = _possibleConstructorReturn(this, _ImageBase.call(this, context, width, height, color));

    Promise.resolve().then(function () {
      _this.startRender = function () {
        _this.renderBlankPage();
        _this.finishRender();
      };
      _this.finishLoad();
    });
    return _this;
  }

  return BlankImage;
}(_ImageBase3.default);

exports.default = BlankImage;

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Bookmarks = function () {
  function Bookmarks(container, items) {
    var _this = this;

    var getTitle = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function (i) {
      return i.title;
    };
    var getItems = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function (i) {
      return i.items;
    };

    _classCallCheck(this, Bookmarks);

    this.container = container;
    this.map = [];
    this.getTitle = getTitle;
    this.getItems = getItems;
    this.nodes = this.mapNodes(items, this.map);

    this.binds = {
      togle: function togle(e) {
        e.preventDefault();
        var li = (0, _libs.$)(e.target);
        while (li[0] && li[0] !== container[0] && !li.hasClass('item')) {
          li = (0, _libs.$)(li[0].parentNode);
        }
        if (li.hasClass('item')) {
          var cmd = (0, _libs.$)(e.target);
          while (cmd[0] && cmd[0] !== li[0] && !cmd.hasClass('cmd')) {
            cmd = (0, _libs.$)(cmd[0].parentNode);
          }
          if (cmd.hasClass('cmd')) {
            var node = _this.map[li.attr('data-id')];
            if (cmd.hasClass('togle')) {
              node.minimized = !node.minimized;
              if (node.minimized) {
                li.find('ul').remove();
                li.find('.togle').addClass('minimized');
              } else {
                li.find('.togle').removeClass('minimized');
                li.append((_this.renderNode(node).match(/<ul(.|\n)*<\/ul>/g) || [''])[0]);
              }
            } else {
              if (_this.onNavigate) {
                _this.onNavigate(node.item);
              }
            }
          }
        }
      }
    };

    container.on('click', this.binds.togle);
    this.update();
  }

  Bookmarks.prototype.getSize = function getSize() {
    return this.map.length;
  };

  Bookmarks.prototype.dispose = function dispose() {
    this.container.off('click', this.binds.togle);
    this.container.html('');
  };

  Bookmarks.prototype.update = function update() {
    this.container.html(this.renderNodes(this.nodes));
  };

  Bookmarks.prototype.forEach = function forEach(f) {
    var nodes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nodes;

    for (var _iterator = nodes || [], _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var node = _ref;

      f(node);
      this.forEach(f, node.children);
    }
  };

  Bookmarks.prototype.expand = function expand() {
    this.forEach(function (n) {
      return n.minimized = false;
    });
    this.update();
  };

  Bookmarks.prototype.minimize = function minimize() {
    this.forEach(function (n) {
      return n.minimized = true;
    });
    this.update();
  };

  Bookmarks.prototype.renderNode = function renderNode(node) {
    return ['<div class="area">', node.children ? '<a href="#" class="cmd togle' + (node.minimized ? ' minimized' : '') + '"><i class="fa fa-angle-right"></i></a> ' : '<i class="white-space"></i> ', '<a class="cmd" title="', node.title, '" href="#">', node.title, '</a></div>', node.minimized ? '' : this.renderNodes(node.children)].join('');
  };

  Bookmarks.prototype.renderNodes = function renderNodes(nodes) {
    var res = ['<div class="bookmarks">'];
    if (nodes && nodes.length) {
      res.push('<ul class="level-', nodes[0].level, '">');
      for (var _iterator2 = nodes, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
        var _ref2;

        if (_isArray2) {
          if (_i2 >= _iterator2.length) break;
          _ref2 = _iterator2[_i2++];
        } else {
          _i2 = _iterator2.next();
          if (_i2.done) break;
          _ref2 = _i2.value;
        }

        var node = _ref2;

        res.push(['<li class="item" data-id="', node.id, '">', this.renderNode(node), '</li>'].join(''));
      }
      res.push('</ul>');
    }
    res.push('</div>');
    return res.join('');
  };

  Bookmarks.prototype.mapNodes = function mapNodes(items) {
    var map = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

    var nodes = null;
    if (items && items.length) {
      nodes = [];
      for (var _iterator3 = items, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
        var _ref3;

        if (_isArray3) {
          if (_i3 >= _iterator3.length) break;
          _ref3 = _iterator3[_i3++];
        } else {
          _i3 = _iterator3.next();
          if (_i3.done) break;
          _ref3 = _i3.value;
        }

        var item = _ref3;

        var id = map.length;
        map.push(undefined);
        var node = {
          id: id,
          title: this.getTitle(item),
          level: level,
          item: item,
          minimized: true,
          children: this.mapNodes(this.getItems(item), map, level + 1)
        };
        nodes.push(node);
        map[id] = node;
      }
    }
    return nodes;
  };

  return Bookmarks;
}();

exports.default = Bookmarks;

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Detector = function () {
	function Detector() {
		_classCallCheck(this, Detector);
	}

	Detector.getWebGLErrorMessage = function getWebGLErrorMessage() {
		var element = document.createElement('div');
		element.id = 'webgl-error-message';
		element.style.fontFamily = 'monospace';
		element.style.fontSize = '13px';
		element.style.fontWeight = 'normal';
		element.style.textAlign = 'center';
		element.style.background = '#fff';
		element.style.color = '#000';
		element.style.padding = '1.5em';
		element.style.width = '400px';
		element.style.margin = '5em auto 0';

		if (!Detector.webgl) {
			element.innerHTML = window.WebGLRenderingContext ? ['Your graphics card does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation" style="color:#000">WebGL</a>.<br />', 'Find out how to get it <a href="http://get.webgl.org/" style="color:#000">here</a>.'].join('\n') : ['Your browser does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation" style="color:#000">WebGL</a>.<br/>', 'Find out how to get it <a href="http://get.webgl.org/" style="color:#000">here</a>.'].join('\n');
		}
		return element;
	};

	Detector.addGetWebGLMessage = function addGetWebGLMessage(parameters) {
		var parent = void 0,
		    id = void 0,
		    element = void 0;
		parameters = parameters || {};

		parent = parameters.parent || (0, _libs.$)(document.body);
		id = parameters.id || 'oldie';

		element = Detector.getWebGLErrorMessage();
		//element.id = id;

		parent.append(element);
	};

	return Detector;
}();

Detector.canvas = !!window.CanvasRenderingContext2D;

Detector.webgl = function () {
	try {
		var canvas = document.createElement('canvas');
		return !!(window.WebGLRenderingContext && (canvas.getContext('webgl') || canvas.getContext('experimental-webgl')));
	} catch (e) {
		return false;
	}
}();

Detector.workers = !!window.Worker;
Detector.fileapi = window.File && window.FileReader && window.FileList && window.Blob;
exports.default = Detector;

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var DocMouseSimulator = function () {
  function DocMouseSimulator(jFrame, element) {
    var bElement = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : document.body;

    _classCallCheck(this, DocMouseSimulator);

    this.jFrame = jFrame;
    this.wnd = jFrame[0].contentWindow;
    this.doc = jFrame[0].contentDocument;
    this.element = element || doc.body;
    this.bElement = bElement;
    this.resendProperties = this.getDefaultResendProperties();
    this.undefinedProperties = this.getDefaultUndefinedProperties();
    this.cursors = [];
    this.onDocChangeClbs = [];
    var terms = [{
      find: ':hover',
      replace: '.' + DocMouseSimulator.HOVER
    }, {
      find: ':active',
      replace: '.' + DocMouseSimulator.ACTIVE
    }];
    var style = ['<style type="text/css">'];
    for (var i = 0; i < this.doc.styleSheets.length; ++i) {
      var ss = this.doc.styleSheets[i];
      for (var j = 0; j < ss.cssRules.length; ++j) {
        var r = ss.cssRules[j],
            cssText = void 0;
        for (var _iterator = terms, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
          var _ref;

          if (_isArray) {
            if (_i >= _iterator.length) break;
            _ref = _iterator[_i++];
          } else {
            _i = _iterator.next();
            if (_i.done) break;
            _ref = _i.value;
          }

          var term = _ref;

          if (~r.selectorText.indexOf(term.find)) {
            cssText = (cssText || r.cssText).replace(new RegExp(term.find, 'g'), term.replace);
          }
        }
        if (cssText) {
          style.push(cssText);
        }
      }
    }
    style.push('</style>');
    (0, _libs.$)(this.doc.head).append((0, _libs.$)(style.join('')));
  }

  DocMouseSimulator.prototype.convertCoords = function convertCoords(x, y) {
    var jElement = (0, _libs.$)(this.element);
    var offset = jElement.offset();
    return {
      x: offset.left + jElement.width() * x,
      y: offset.top + jElement.height() * (1 - y)
    };
  };

  DocMouseSimulator.prototype.triggerEvent = function triggerEvent(element, e, p, type, advancedProps) {
    var props = {};
    for (var _iterator2 = this.resendProperties, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
      var _ref2;

      if (_isArray2) {
        if (_i2 >= _iterator2.length) break;
        _ref2 = _iterator2[_i2++];
      } else {
        _i2 = _iterator2.next();
        if (_i2.done) break;
        _ref2 = _i2.value;
      }

      var _n = _ref2;

      props[_n] = e[_n];
    }
    for (var _iterator3 = this.undefinedProperties, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
      var _ref3;

      if (_isArray3) {
        if (_i3 >= _iterator3.length) break;
        _ref3 = _iterator3[_i3++];
      } else {
        _i3 = _iterator3.next();
        if (_i3.done) break;
        _ref3 = _i3.value;
      }

      var _n2 = _ref3;

      props[_n2] = undefined;
    }
    for (var n in advancedProps) {
      if (advancedProps.hasOwnProperty(n)) {
        props[n] = advancedProps[n];
      }
    }
    props.view = this.wnd;
    props.pageX = p.x;
    props.pageY = p.y;
    var jE = _libs.$.Event(type, props);
    jE.timeStamp = e.timeStamp;
    (0, _libs.$)(element).trigger(jE);
  };

  DocMouseSimulator.prototype.addClass = function addClass(element, name) {
    (0, _libs.$)(element).addClass(name);
    var style = this.wnd.getComputedStyle(element);
    this.cursors.push((0, _libs.$)(this.bElement).css('cursor'));
    (0, _libs.$)(this.bElement).css('cursor', style.getPropertyValue('cursor'));
  };

  DocMouseSimulator.prototype.removeClass = function removeClass(element, name) {
    (0, _libs.$)(element).removeClass(name);
    (0, _libs.$)(this.bElement).css('cursor', this.cursors.pop());
  };

  DocMouseSimulator.prototype.enterElement = function enterElement(element) {
    this.addClass(element, DocMouseSimulator.HOVER);
  };

  DocMouseSimulator.prototype.leaveElement = function leaveElement(element) {
    this.removeClass(element, DocMouseSimulator.HOVER);
  };

  DocMouseSimulator.prototype.activateElement = function activateElement(element) {
    this.addClass(element, DocMouseSimulator.ACTIVE);
  };

  DocMouseSimulator.prototype.deactivateElement = function deactivateElement(element) {
    this.removeClass(element, DocMouseSimulator.ACTIVE);
  };

  DocMouseSimulator.prototype.addDocChangeClb = function addDocChangeClb(clb) {
    this.onDocChangeClbs.push(clb);
  };

  DocMouseSimulator.prototype.notify = function notify() {
    for (var _iterator4 = this.onDocChangeClbs, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {
      var _ref4;

      if (_isArray4) {
        if (_i4 >= _iterator4.length) break;
        _ref4 = _iterator4[_i4++];
      } else {
        _i4 = _iterator4.next();
        if (_i4.done) break;
        _ref4 = _i4.value;
      }

      var clb = _ref4;

      clb(this.wnd, this.doc);
    }
  };

  DocMouseSimulator.prototype.elementFromPoint = function elementFromPoint(p) {
    var node = this.doc.body,
        next = true;
    while (next) {
      next = false;
      for (var i = 0; i < node.childNodes.length; ++i) {
        var child = node.childNodes[i];
        if (child instanceof this.wnd.Element) {
          var jC = (0, _libs.$)(child),
              offset = jC.offset(),
              height = jC.height(),
              width = jC.width();
          if (p.x > offset.left && p.x < offset.left + width && p.y > offset.top && p.y < offset.top + height) {
            node = child;
            next = true;
            break;
          }
        }
      }
    }
    return node;
  };

  DocMouseSimulator.prototype.getElement = function getElement(p) {
    var off0 = this.jFrame.offset();
    this.jFrame.offset({ left: 0.5 * window.innerWidth - p.x, top: 0.5 * window.innerHeight - p.y });
    var element = this.doc.elementFromPoint(p.x, p.y);
    if (!element) {
      // it isn't a joke it's IE
      element = this.doc.elementFromPoint(p.x, p.y);
    }
    this.jFrame.offset(off0);
    return element ? element : this.elementFromPoint(p);
  };

  DocMouseSimulator.prototype.simulate = function simulate(e, doc, x, y) {
    var p = this.convertCoords(x, y),
        element = doc === this.doc ? this.getElement(p) : undefined;
    var trigger = element !== undefined,
        notify = false;

    switch (e.type) {
      case 'mousedown':
        {
          if (this.capElement) {
            this.deactivateElement(this.capElement);
            notify = true;
          }
          this.capElement = element;
          if (this.capElement) {
            this.activateElement(this.capElement);
            notify = true;
          }
          break;
        }
      case 'mouseup':
        {
          if (this.capElement) {
            this.deactivateElement(this.capElement);
            notify = true;
          }
          this.timeStamp = e.timeStamp;
          break;
        }
      case 'click':
        {
          trigger = element && this.capElement === element; // && e.timeStamp === this.timeStamp;
          this.capElement = undefined;
          break;
        }
      case 'mouseenter':
      case 'mouseover':
      case 'mousemove':
        {
          var leaved = null;
          if (this.hovElement !== element && this.hovElement) {
            this.triggerEvent(this.hovElement, e, p, 'mouseout', { relatedTarget: element ? element : null });
            this.leaveElement(this.hovElement);
            leaved = this.hovElement;
            this.hovElement = undefined;
            notify = true;
          }
          if (!this.hovElement && element) {
            this.triggerEvent(element, e, p, 'mouseover', { relatedTarget: leaved });
            this.enterElement(element);
            this.hovElement = element;
            notify = true;
          }
          trigger = element && e.type === 'mousemove';
          break;
        }
      case 'mouseleave':
      case 'mouseout':
        {
          if (this.hovElement) {
            this.triggerEvent(this.hovElement, e, p, 'mouseout', { relatedTarget: e.relatedTarget });
            this.leaveElement(this.hovElement);
            this.hovElement = undefined;
            notify = true;
          }
          trigger = false;
          break;
        }
    }
    if (trigger) {
      this.triggerEvent(element, e, p, e.type);
    }
    if (notify) {
      this.notify();
    }
  };

  DocMouseSimulator.prototype.getDefaultUndefinedProperties = function getDefaultUndefinedProperties() {
    return ['clientX', 'clientY', 'offsetX', 'offsetY', 'screenX', 'screenY'];
  };

  DocMouseSimulator.prototype.getDefaultResendProperties = function getDefaultResendProperties() {
    return ['altKey', 'bubbles', 'button', 'buttons', 'cancelable', 'changedTouches', 'char', 'charCode', 'ctrlKey', 'data', 'detail', 'eventPhase', 'isDefaultPrevented', 'key', 'keyCode', 'metaKey', 'pointerId', 'pointerType', 'shiftKey', 'targetTouches', 'touches', 'which'];
  };

  return DocMouseSimulator;
}();

/*
altKey,
bubbles,
button,
buttons,
cancelable,
changedTouches,
char,
charCode,
clientX,
clientY,
ctrlKey,
currentTarget,
data,
delegateTarget,
detail,
eventPhase,
handleObj,
isDefaultPrevented,
key,
keyCode,
metaKey,
offsetX,
offsetY,
originalEvent,
pageX,
pageY,
pointerId,
pointerType,
relatedTarget,
screenX,
screenY,
shiftKey,
target,
targetTouches,
timeStamp,
toElement,
touches,
type,
view,
which
*/


DocMouseSimulator.HOVER = 'SIMULATED-HOVER';
DocMouseSimulator.ACTIVE = 'SIMULATED-ACTIVE';
exports.default = DocMouseSimulator;

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Dom2Image = function Dom2Image(wnd, doc, cache) {
    _classCallCheck(this, Dom2Image);

    var self = this;
    this.window = wnd;
    this.document = doc;
    this.cache = cache;

    var util = newUtil();
    var inliner = newInliner();
    var fontFaces = newFontFaces();
    var images = newImages();

    this.toSvg = toSvg;
    this.toPng = toPng;
    this.toJpeg = toJpeg;
    this.toBlob = toBlob;
    this.toPixelData = toPixelData;
    this.impl = {
        fontFaces: fontFaces,
        images: images,
        util: util,
        inliner: inliner
    };

    /**
     * @param {Node} node - The DOM Node object to render
     * @param {Object} options - Rendering options
     * @param {Function} options.filter - Should return true if passed node should be included in the output
     *          (excluding node means excluding it's children as well). Not called on the root node.
     * @param {String} options.bgcolor - color for the background, any valid CSS color value.
     * @param {Number} options.width - width to be applied to node before rendering.
     * @param {Number} options.height - height to be applied to node before rendering.
     * @param {Object} options.style - an object whose properties to be copied to node's style before rendering.
     * @param {Number} options.quality - a Number between 0 and 1 indicating image quality (applicable to JPEG only),
                defaults to 1.0.
     * @return {Promise} - A promise that is fulfilled with a SVG image data URL
     * */

    function toSvg(node, options) {
        options = options || {};
        return Promise.resolve(node).then(function (node) {
            return cloneNode(node, options.filter, true);
        }).then(embedFonts).then(inlineImages).then(applyOptions).then(function (clone) {
            return makeSvgDataUri(clone, options.width || util.width(node), options.height || util.height(node));
        });

        function applyOptions(clone) {
            if (options.bgcolor) clone.style.backgroundColor = options.bgcolor;

            if (options.width) clone.style.width = options.width + 'px';
            if (options.height) clone.style.height = options.height + 'px';

            if (options.style) self.window.Object.keys(options.style).forEach(function (property) {
                clone.style[property] = options.style[property];
            });

            return clone;
        }
    }

    /**
     * @param {Node} node - The DOM Node object to render
     * @param {Object} options - Rendering options, @see {@link toSvg}
     * @return {Promise} - A promise that is fulfilled with a Uint8Array containing RGBA pixel data.
     * */
    function toPixelData(node, options) {
        return draw(node, options || {}).then(function (canvas) {
            return canvas.getContext('2d').getImageData(0, 0, util.width(node), util.height(node)).data;
        });
    }

    /**
     * @param {Node} node - The DOM Node object to render
     * @param {Object} options - Rendering options, @see {@link toSvg}
     * @return {Promise} - A promise that is fulfilled with a PNG image data URL
     * */
    function toPng(node, options) {
        return draw(node, options || {}).then(function (canvas) {
            return canvas.toDataURL();
        });
    }

    /**
     * @param {Node} node - The DOM Node object to render
     * @param {Object} options - Rendering options, @see {@link toSvg}
     * @return {Promise} - A promise that is fulfilled with a JPEG image data URL
     * */
    function toJpeg(node, options) {
        options = options || {};
        return draw(node, options).then(function (canvas) {
            return canvas.toDataURL('image/jpeg', options.quality || 1.0);
        });
    }

    /**
     * @param {Node} node - The DOM Node object to render
     * @param {Object} options - Rendering options, @see {@link toSvg}
     * @return {Promise} - A promise that is fulfilled with a PNG image blob
     * */
    function toBlob(node, options) {
        return draw(node, options || {}).then(util.canvasToBlob);
    }

    function draw(domNode, options) {
        return toSvg(domNode, options).then(util.makeImage).then(util.delay(100)).then(function (image) {
            var canvas = newCanvas(domNode);
            canvas.getContext('2d').drawImage(image, 0, 0);
            return canvas;
        });

        function newCanvas(domNode) {
            var canvas = self.document.createElement('canvas');
            canvas.width = options.width || util.width(domNode);
            canvas.height = options.height || util.height(domNode);

            if (options.bgcolor) {
                var ctx = canvas.getContext('2d');
                ctx.fillStyle = options.bgcolor;
                ctx.fillRect(0, 0, canvas.width, canvas.height);
            }

            return canvas;
        }
    }

    function cloneNode(node, filter, root) {
        if (!root && filter && !filter(node)) return Promise.resolve();

        return Promise.resolve(node).then(makeNodeCopy).then(function (clone) {
            return cloneChildren(node, clone, filter);
        }).then(function (clone) {
            return processClone(node, clone);
        });

        function makeNodeCopy(node) {
            if (util.isCanvas(node)) return util.makeImage(node.toDataURL());
            return node.cloneNode(false);
        }

        function cloneChildren(original, clone, filter) {
            var children = original.childNodes;
            if (children.length === 0) return Promise.resolve(clone);

            return cloneChildrenInOrder(clone, util.asArray(children), filter).then(function () {
                return clone;
            });

            function cloneChildrenInOrder(parent, children, filter) {
                var done = Promise.resolve();
                children.forEach(function (child) {
                    done = done.then(function () {
                        return cloneNode(child, filter);
                    }).then(function (childClone) {
                        if (childClone) parent.appendChild(childClone);
                    });
                });
                return done;
            }
        }

        function processClone(original, clone) {
            if (!util.isElement(clone)) return clone;

            return Promise.resolve().then(cloneStyle).then(clonePseudoElements).then(copyUserInput).then(fixSvg).then(function () {
                return clone;
            });

            function cloneStyle() {
                copyStyle(self.window.getComputedStyle(original), clone.style);

                function copyStyle(source, target) {
                    if (source.cssText) target.cssText = source.cssText;else copyProperties(source, target);

                    function copyProperties(source, target) {
                        util.asArray(source).forEach(function (name) {
                            target.setProperty(name, source.getPropertyValue(name), source.getPropertyPriority(name));
                        });
                    }
                }
            }

            function clonePseudoElements() {
                [':before', ':after'].forEach(function (element) {
                    clonePseudoElement(element);
                });

                function clonePseudoElement(element) {
                    var style = self.window.getComputedStyle(original, element);
                    var content = style.getPropertyValue('content');

                    if (content === '' || content === 'none') return;

                    var className = util.uid();
                    clone.className = clone.className + ' ' + className;
                    var styleElement = self.document.createElement('style');
                    styleElement.appendChild(formatPseudoElementStyle(className, element, style));
                    clone.appendChild(styleElement);

                    function formatPseudoElementStyle(className, element, style) {
                        var selector = '.' + className + ':' + element;
                        var cssText = style.cssText ? formatCssText(style) : formatCssProperties(style);
                        return self.document.createTextNode(selector + '{' + cssText + '}');

                        function formatCssText(style) {
                            var content = style.getPropertyValue('content');
                            return style.cssText + ' content: ' + content + ';';
                        }

                        function formatCssProperties(style) {

                            return util.asArray(style).map(formatProperty).join('; ') + ';';

                            function formatProperty(name) {
                                return name + ': ' + style.getPropertyValue(name) + (style.getPropertyPriority(name) ? ' !important' : '');
                            }
                        }
                    }
                }
            }

            function copyUserInput() {
                if (util.isTextArea(original)) clone.innerHTML = original.value;
                if (util.isInput(original)) clone.setAttribute("value", original.value);
            }

            function fixSvg() {
                if (!util.isSVG(clone)) return;
                clone.setAttribute('xmlns', 'http://www.w3.org/2000/svg');

                if (!util.isSVGRect(clone)) return;
                ['width', 'height'].forEach(function (attribute) {
                    var value = clone.getAttribute(attribute);
                    if (!value) return;

                    clone.style.setProperty(attribute, value);
                });
            }
        }
    }

    function embedFonts(node) {
        return fontFaces.resolveAll().then(function (cssText) {
            var styleNode = self.document.createElement('style');
            node.appendChild(styleNode);
            styleNode.appendChild(self.document.createTextNode(cssText));
            return node;
        });
    }

    function inlineImages(node) {
        return images.inlineAll(node).then(function () {
            return node;
        });
    }

    function makeSvgDataUri(node, width, height) {
        return Promise.resolve(node).then(function (node) {
            node.setAttribute('xmlns', 'http://www.w3.org/1999/xhtml');
            return new self.window.XMLSerializer().serializeToString(node);
        }).then(util.escapeXhtml).then(function (xhtml) {
            return ['data:image/svg+xml;charset=utf-8,', '<svg xmlns="http://www.w3.org/2000/svg" width="', width, '" height="', height, '">', '<foreignObject x="0" y="0" width="100%" height="100%">', xhtml, '</foreignObject>', '</svg>'].join('');
        });
    }

    function newUtil() {
        return {
            escape: escape,
            parseExtension: parseExtension,
            mimeType: mimeType,
            dataAsUrl: dataAsUrl,
            isDataUrl: isDataUrl,
            canvasToBlob: canvasToBlob,
            resolveUrl: resolveUrl,
            getAndEncode: getAndEncode,
            uid: uid(),
            delay: delay,
            asArray: asArray,
            escapeXhtml: escapeXhtml,
            makeImage: makeImage,
            width: width,
            height: height,

            isElement: isElement,
            isCanvas: isCanvas,
            isTextArea: isTextArea,
            isInput: isInput,
            isSVG: isSVG,
            isSVGRect: isSVGRect,
            isImage: isImage
        };

        function mimes() {
            /*
             * Only WOFF and EOT mime types for fonts are 'real'
             * see http://www.iana.org/assignments/media-types/media-types.xhtml
             */
            var WOFF = 'application/font-woff';
            var JPEG = 'image/jpeg';

            return {
                'woff': WOFF,
                'woff2': WOFF,
                'ttf': 'application/font-truetype',
                'eot': 'application/vnd.ms-fontobject',
                'png': 'image/png',
                'jpg': JPEG,
                'jpeg': JPEG,
                'gif': 'image/gif',
                'tiff': 'image/tiff',
                'svg': 'image/svg+xml'
            };
        }

        function parseExtension(url) {
            var match = /\.([^\.\/]*?)$/g.exec(url);
            if (match) return match[1];else return '';
        }

        function mimeType(url) {
            var extension = parseExtension(url).toLowerCase();
            return mimes()[extension] || '';
        }

        function isDataUrl(url) {
            return url.search(/^(data:)/) !== -1;
        }

        function toBlob(canvas) {
            return new Promise(function (resolve) {
                var binaryString = self.window.atob(canvas.toDataURL().split(',')[1]);
                var length = binaryString.length;
                var binaryArray = new self.window.Uint8Array(length);

                for (var i = 0; i < length; i++) {
                    binaryArray[i] = binaryString.charCodeAt(i);
                }resolve(new self.window.Blob([binaryArray], {
                    type: 'image/png'
                }));
            });
        }

        function canvasToBlob(canvas) {
            if (canvas.toBlob) return new Promise(function (resolve) {
                canvas.toBlob(resolve);
            });

            return toBlob(canvas);
        }

        function resolveUrl(url, baseUrl) {
            var doc = self.document.implementation.createHTMLDocument();
            var base = doc.createElement('base');
            doc.head.appendChild(base);
            var a = doc.createElement('a');
            doc.body.appendChild(a);
            base.href = baseUrl;
            a.href = url;
            return a.href;
        }

        function uid() {
            var index = 0;

            return function () {
                return 'u' + fourRandomChars() + index++;

                function fourRandomChars() {
                    /* see http://stackoverflow.com/a/6248722/2519373 */
                    return ('0000' + (self.window.Math.random() * self.window.Math.pow(36, 4) << 0).toString(36)).slice(-4);
                }
            };
        }

        function makeImage(uri) {
            return new Promise(function (resolve, reject) {
                var image = new self.window.Image();
                image.onload = function () {
                    resolve(image);
                };
                image.onerror = reject;
                image.src = uri;
            });
        }

        function getAndEncode(url) {
            var data = self.cache.get(url);
            if (data) {
                if (data.content) {
                    return data.content;
                } else {
                    return new Promise(function (resolve) {
                        if (data.content) {
                            resolve(data.content);
                        } else {
                            data.pendings.push(resolve);
                        }
                    });
                }
            } else {
                data = self.cache.put(url, { pendings: [] });

                var TIMEOUT = 30000;

                return new Promise(function (resolve) {
                    var request = new self.window.XMLHttpRequest();

                    request.onreadystatechange = done;
                    request.ontimeout = timeout;
                    request.responseType = 'blob';
                    request.timeout = TIMEOUT;
                    request.open('GET', url, true);
                    request.send();

                    function done() {
                        if (request.readyState !== 4) return;

                        if (request.status !== 200) {
                            fail('cannot fetch resource: ' + url + ', status: ' + request.status);
                            return;
                        }

                        var encoder = new self.window.FileReader();
                        encoder.onloadend = function () {
                            data.content = encoder.result.split(/,/)[1];
                            for (var _iterator = data.pendings, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
                                var _ref;

                                if (_isArray) {
                                    if (_i >= _iterator.length) break;
                                    _ref = _iterator[_i++];
                                } else {
                                    _i = _iterator.next();
                                    if (_i.done) break;
                                    _ref = _i.value;
                                }

                                var _resolve = _ref;

                                _resolve(data.content);
                            }
                            data.pendings = [];
                            resolve(data.content);
                        };
                        encoder.readAsDataURL(request.response);
                    }

                    function timeout() {
                        fail('timeout of ' + TIMEOUT + 'ms occured while fetching resource: ' + url);
                    }

                    function fail(message) {
                        console.error(message);
                        resolve('');
                    }
                });
            }
        }

        function dataAsUrl(content, type) {
            return ['data:', type, ';base64,', content].join('');
        }

        function escape(string) {
            return string.replace(/([.*+?^${}()|\[\]\/\\])/g, '\\$1');
        }

        function delay(ms) {
            return function (arg) {
                return new Promise(function (resolve) {
                    setTimeout(function () {
                        resolve(arg);
                    }, ms);
                });
            };
        }

        function asArray(arrayLike) {
            var array = [];
            var length = arrayLike.length;
            for (var i = 0; i < length; i++) {
                array.push(arrayLike[i]);
            }return array;
        }

        function escapeXhtml(string) {
            return string.replace(/(#|\n)/g, function (c) {
                return c === '#' ? '%23' : '%0A';
            });
        }

        function width(node) {
            var leftBorder = px(node, 'border-left-width');
            var rightBorder = px(node, 'border-right-width');
            return node.scrollWidth + leftBorder + rightBorder;
        }

        function height(node) {
            var topBorder = px(node, 'border-top-width');
            var bottomBorder = px(node, 'border-bottom-width');
            return node.scrollHeight + topBorder + bottomBorder;
        }

        function px(node, styleProperty) {
            var value = self.window.getComputedStyle(node).getPropertyValue(styleProperty);
            return parseFloat(value.replace('px', ''));
        }

        function isElement(node) {
            return node instanceof self.window.Element;
        }

        function isCanvas(node) {
            return node instanceof self.window.HTMLCanvasElement;
        }

        function isTextArea(node) {
            return node instanceof self.window.HTMLTextAreaElement;
        }

        function isInput(node) {
            return node instanceof self.window.HTMLInputElement;
        }

        function isSVG(node) {
            return node instanceof self.window.SVGElement;
        }

        function isSVGRect(node) {
            return node instanceof self.window.SVGRectElement;
        }

        function isImage(node) {
            return node instanceof self.window.HTMLImageElement;
        }
    }

    function newInliner() {
        var URL_REGEX = /url\(['"]?([^'"]+?)['"]?\)/g;

        return {
            inlineAll: inlineAll,
            shouldProcess: shouldProcess,
            impl: {
                readUrls: readUrls,
                inline: inline
            }
        };

        function shouldProcess(string) {
            return string.search(URL_REGEX) !== -1;
        }

        function readUrls(string) {
            var result = [];
            var match = void 0;
            while ((match = URL_REGEX.exec(string)) !== null) {
                result.push(match[1]);
            }
            return result.filter(function (url) {
                return !util.isDataUrl(url);
            });
        }

        function inline(string, url, baseUrl, get) {
            return Promise.resolve(url).then(function (url) {
                return baseUrl ? util.resolveUrl(url, baseUrl) : url;
            }).then(get || util.getAndEncode).then(function (data) {
                return util.dataAsUrl(data, util.mimeType(url));
            }).then(function (dataUrl) {
                return string.replace(urlAsRegex(url), ['$1', dataUrl, '$3'].join(''));
            });

            function urlAsRegex(url) {
                return new self.window.RegExp(['(url\\([\'"]?)(', util.escape(url), ')([\'"]?\\))'].join(''), 'g');
            }
        }

        function inlineAll(string, baseUrl, get) {
            if (nothingToInline()) return Promise.resolve(string);

            return Promise.resolve(string).then(readUrls).then(function (urls) {
                var done = Promise.resolve(string);
                urls.forEach(function (url) {
                    done = done.then(function (string) {
                        return inline(string, url, baseUrl, get);
                    });
                });
                return done;
            });

            function nothingToInline() {
                return !shouldProcess(string);
            }
        }
    }

    function newFontFaces() {
        return {
            resolveAll: resolveAll,
            impl: {
                readAll: readAll
            }
        };

        function resolveAll() {
            return readAll(self.document).then(function (webFonts) {
                return Promise.all(webFonts.map(function (webFont) {
                    return webFont.resolve();
                }));
            }).then(function (cssStrings) {
                return cssStrings.join('\n');
            });
        }

        function readAll() {
            return Promise.resolve(util.asArray(self.document.styleSheets)).then(getCssRules).then(selectWebFontRules).then(function (rules) {
                return rules.map(newWebFont);
            });

            function selectWebFontRules(cssRules) {
                return cssRules.filter(function (rule) {
                    return rule.type === CSSRule.FONT_FACE_RULE;
                }).filter(function (rule) {
                    return inliner.shouldProcess(rule.style.getPropertyValue('src'));
                });
            }

            function getCssRules(styleSheets) {
                var cssRules = [];
                styleSheets.forEach(function (sheet) {
                    try {
                        util.asArray(sheet.cssRules || []).forEach(cssRules.push.bind(cssRules));
                    } catch (e) {
                        console.log('Error while reading CSS rules from ' + sheet.href, e.toString());
                    }
                });
                return cssRules;
            }

            function newWebFont(webFontRule) {
                return {
                    resolve: function resolve() {
                        var baseUrl = (webFontRule.parentStyleSheet || {}).href;
                        return inliner.inlineAll(webFontRule.cssText, baseUrl);
                    },
                    src: function src() {
                        return webFontRule.style.getPropertyValue('src');
                    }
                };
            }
        }
    }

    function newImages() {
        return {
            inlineAll: inlineAll,
            impl: {
                newImage: newImage
            }
        };

        function newImage(element) {
            return {
                inline: inline
            };

            function inline(get) {
                if (util.isDataUrl(element.src)) return Promise.resolve();

                return Promise.resolve(element.src).then(get || util.getAndEncode).then(function (data) {
                    return util.dataAsUrl(data, util.mimeType(element.src));
                }).then(function (dataUrl) {
                    return new Promise(function (resolve, reject) {
                        element.onload = resolve;
                        element.onerror = reject;
                        element.src = dataUrl;
                    });
                });
            }
        }

        function inlineAll(node) {
            if (!util.isElement(node)) return Promise.resolve(node);

            return inlineBackground(node).then(function () {
                if (util.isImage(node)) return newImage(node).inline();else return Promise.all(util.asArray(node.childNodes).map(function (child) {
                    return inlineAll(child);
                }));
            });

            function inlineBackground(node) {
                var background = node.style.getPropertyValue('background');

                if (!background) return Promise.resolve(node);

                return inliner.inlineAll(background).then(function (inlined) {
                    node.style.setProperty('background', inlined, node.style.getPropertyPriority('background'));
                }).then(function () {
                    return node;
                });
            }
        }
    }
};

exports.default = Dom2Image;

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Drag = function () {
  function Drag(wnd, doc, visualWorld) {
    _classCallCheck(this, Drag);

    this.wnd = wnd;
    this.doc = doc;
    this.visual = visualWorld;
    this.coords = new _libs.THREE.Vector2();
    this.intersection = new _libs.THREE.Vector3();
    this.raycaster = this.visual.raycaster;
    this.camera = this.visual.camera;
    this.plane = new _libs.THREE.Plane();
    this.threes = [];
    this.selected = null;
    this.enabled = true;
    this.controlsState = this.visual.getControlsState();

    this.element = this.visual.element;
    this.binds = {
      onMouseMove: this.onMouseMove.bind(this),
      onMouseDown: this.onMouseDown.bind(this),
      onMouseUp: this.onMouseUp.bind(this)
    };
    (0, _libs.$)(this.element).on('mousemove', this.binds.onMouseMove);
    (0, _libs.$)(this.element).on('mousedown', this.binds.onMouseDown);
    (0, _libs.$)(this.doc).on('mouseup', this.binds.onMouseUp);
  }

  Drag.prototype.addThree = function addThree(three) {
    this.threes.push(three);
  };

  Drag.prototype.removeThree = function removeThree(three) {
    var i = this.threes.indexOf(three);
    if (~i) {
      this.threes.splice(i, 1);
    }
  };

  Drag.prototype.onPickCallback = function onPickCallback() {
    return true;
  };

  Drag.prototype.onDragCallback = function onDragCallback() {
    return true;
  };

  Drag.prototype.onReleaseCallback = function onReleaseCallback() {};

  Drag.prototype.dispose = function dispose() {
    (0, _libs.$)(this.element).off('mousemove', this.binds.onMouseMove);
    (0, _libs.$)(this.element).off('mousedown', this.binds.onMouseDown);
    (0, _libs.$)(this.doc).off('mouseup', this.binds.onMouseUp);
  };

  Drag.prototype.setCoordsFromEvent = function setCoordsFromEvent(e) {
    var jElement = (0, _libs.$)(this.element);
    var offset = jElement.offset();
    this.coords.x = (e.pageX - offset.left) / jElement.width() * 2 - 1;
    this.coords.y = -((e.pageY - offset.top) / jElement.height()) * 2 + 1;
    return this.coords;
  };

  Drag.prototype.onMouseDown = function onMouseDown(e) {
    if (!this.enabled) return;

    if (this.selected) this.onMouseUp(e);

    this.setCoordsFromEvent(e);
    this.raycaster.setFromCamera(this.coords, this.camera);

    var intersects = this.raycaster.intersectObjects(this.threes);
    if (intersects.length > 0) {
      var selected = intersects[0].object;
      if (!this.onPickCallback(intersects[0])) return;
      var v = intersects[0].point.clone();
      this.distance = v.sub(this.raycaster.ray.origin).length();;
      this.controlsState = this.visual.getControlsState();
      this.visual.setControlsState(false);
      this.plane.setFromNormalAndCoplanarPoint(this.visual.camera.getWorldDirection(this.plane.normal), intersects[0].point);
      //this.plane.setFromNormalAndCoplanarPoint(this.plane.normal.set(0,0,1), new THREE.Vector3(0,0,0));
      this.selected = selected;
    }
  };

  Drag.prototype.onMouseMove = function onMouseMove(e) {
    if (!this.enabled) return;
    e.preventDefault();

    if (this.selected) {
      this.setCoordsFromEvent(e);
      this.raycaster.setFromCamera(this.coords, this.camera);
      if (this.raycaster.ray.intersectPlane(this.plane, this.intersection)) {
        if (!this.onDragCallback(this.intersection)) this.onMouseUp(e);
      } /**/
      //this.intersection.copy(this.raycaster.ray.direction).normalize().multiplyScalar(this.distance).add(this.raycaster.ray.origin);/**/
      //if(!this.onDragCallback(this.selected, this.intersection)) this.onMouseUp(e);
    }
  };

  Drag.prototype.onMouseUp = function onMouseUp(e) {
    if (this.selected) {
      this.onReleaseCallback();
      this.selected = null;
      this.visual.setControlsState(this.controlsState);
    }
    if (!this.enabled) return;
    e.preventDefault();
  };

  return Drag;
}();

exports.default = Drag;

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _libs = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

__webpack_require__(72)(_libs.$);

var EventsToActions = function () {
  EventsToActions.getEventFlags = function getEventFlags(e) {
    return e.ctrlKey << 0 | e.shiftKey << 1 | e.altKey << 2;
  };

  EventsToActions.getPosition = function getPosition(touches) {
    var x = void 0,
        y = void 0;
    if (touches.length === 2) {
      x = touches[1].pageX - touches[0].pageX;
      y = touches[1].pageY - touches[0].pageY;
    } else {
      x = touches[0].pageX;
      y = touches[0].pageY;
    }
    return {
      x: x,
      y: y
    };
  };

  function EventsToActions(element, actions) {
    _classCallCheck(this, EventsToActions);

    this.actions = actions || {};
    this.element = element;
    this.doc = element[0].ownerDocument;
    this.wnd = this.doc.defaultView;
    this.enabled = true;

    this.binds = {
      contextMenu: this.contextMenu.bind(this),

      mouseDown: this.mouseDown.bind(this),
      mouseMove: this.mouseMove.bind(this),
      mouseUp: this.mouseUp.bind(this),
      mouseWheel: this.mouseWheel.bind(this),

      mouseMoveDoc: this.mouseMoveDoc.bind(this),
      mouseUpDoc: this.mouseUpDoc.bind(this),

      click: this.click.bind(this),
      dblclick: this.dblclick.bind(this),

      touchStart: this.touchStart.bind(this),
      touchMove: this.touchMove.bind(this),
      touchEnd: this.touchEnd.bind(this),

      keyDown: this.keyDown.bind(this),
      keyPress: this.keyPress.bind(this),
      keyUp: this.keyUp.bind(this)
    };

    this.element.on('contextmenu', this.binds.contextMenu);

    this.element.on('mousedown', this.binds.mouseDown);
    this.element.on('mousemove', this.binds.mouseMove);
    this.element.on('mouseup', this.binds.mouseUp);
    this.element.on('mousewheel', this.binds.mouseWheel);

    (0, _libs.$)(this.doc).on('mousemove', this.binds.mouseMoveDoc);
    (0, _libs.$)(this.doc).on('mouseup', this.binds.mouseUpDoc);

    this.element.on('click', this.binds.click);
    this.element.on('dblclick', this.binds.dblclick);

    this.element.on('touchstart', this.binds.touchStart);
    this.element.on('touchmove', this.binds.touchMove);
    this.element.on('touchend', this.binds.touchEnd);

    (0, _libs.$)(this.wnd).on('keydown', this.binds.keyDown);
    (0, _libs.$)(this.wnd).on('keypress', this.binds.keyPress);
    (0, _libs.$)(this.wnd).on('keyup', this.binds.keyUp);
  }

  EventsToActions.prototype.addAction = function addAction(action, type, code, flags) {
    type = type.toLowerCase();
    if (!this.actions[type]) {
      this.actions[type] = {};
    }
    if (!this.actions[type][code]) {
      this.actions[type][code] = {};
    }
    if (!this.actions[type][code][flags]) {
      this.actions[type][code][flags] = [];
    }
    this.actions[type][code][flags].push(action);
  };

  EventsToActions.prototype.getActions = function getActions(type, code, flags) {
    return ((this.actions[type] || {})[code] || {})[flags] || [];
  };

  EventsToActions.prototype.fireActions = function fireActions(actions, e, data) {
    for (var _iterator = actions, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var action = _ref;

      action(e, data);
    }
  };

  EventsToActions.prototype.contextMenu = function contextMenu(e) {
    if (this.enabled) {
      var flags = EventsToActions.getEventFlags(e);
      this.fireActions(this.getActions('contextmenu', e.button, flags), e);
    }
  };

  EventsToActions.prototype.mouseDown = function mouseDown(e) {
    if (this.picked) {
      this.mouseUpDoc();
    }
    if (this.enabled) {
      var flags = EventsToActions.getEventFlags(e);
      this.fireActions(this.getActions('mousedown', e.button, flags), e);
      this.picked = {
        x: e.pageX,
        y: e.pageY,
        actions: this.getActions('mousedrag', e.button, flags)
      };
      this.fireActions(this.picked.actions, e, {
        state: 'start'
      });
    }
  };

  EventsToActions.prototype.mouseMove = function mouseMove(e) {
    if (this.enabled) {
      var flags = EventsToActions.getEventFlags(e);
      this.fireActions(this.getActions('mousemove', e.button, flags), e);
    }
  };

  EventsToActions.prototype.mouseMoveDoc = function mouseMoveDoc(e) {
    if (this.enabled && this.picked) {
      this.fireActions(this.picked.actions, e, {
        state: 'move',
        dx: e.pageX - this.picked.x,
        dy: e.pageY - this.picked.y
      });
      this.picked = {
        x: e.pageX,
        y: e.pageY,
        actions: this.picked.actions
      };
    }
  };

  EventsToActions.prototype.mouseUp = function mouseUp(e) {
    if (this.enabled) {
      var flags = EventsToActions.getEventFlags(e);
      this.fireActions(this.getActions('mouseup', e.button, flags), e);
    }
  };

  EventsToActions.prototype.mouseUpDoc = function mouseUpDoc(e) {
    if (this.picked) {
      this.fireActions(this.picked.actions, e, {
        state: 'end'
      });
      delete this.picked;
    }
  };

  EventsToActions.prototype.mouseWheel = function mouseWheel(e) {
    if (this.enabled) {
      var flags = EventsToActions.getEventFlags(e);
      this.fireActions(this.getActions('mousewheel', 0, flags), e);
    }
  };

  EventsToActions.prototype.clicks = function clicks(e, type) {
    if (this.enabled) {
      var flags = EventsToActions.getEventFlags(e);
      this.fireActions(this.getActions(type, e.button, flags), e);
    }
  };

  EventsToActions.prototype.click = function click(e) {
    this.clicks(e, 'click');
  };

  EventsToActions.prototype.dblclick = function dblclick(e) {
    this.clicks(e, 'dblclick');
  };

  EventsToActions.prototype.touchPick = function touchPick(e, flags, touches) {
    var pos = EventsToActions.getPosition(touches);
    this.touchPicked = _extends({}, pos, {
      actions: this.getActions('touchdrag', touches.length, flags),
      code: touches.length,
      flags: flags
    });
    this.fireActions(this.touchPicked.actions, e, _extends({
      state: 'start'
    }, pos));
  };

  EventsToActions.prototype.touchStart = function touchStart(e) {
    if (this.touchPicked) {
      this.touchEnd(e);
    }
    if (this.enabled) {
      var flags = EventsToActions.getEventFlags(e),
          touches = e.touches || e.originalEvent.touches;
      this.fireActions(this.getActions('touchstart', touches.length, flags), e);
      this.touchPick(e, flags, touches);
    }
  };

  EventsToActions.prototype.touchMove = function touchMove(e) {
    if (this.enabled) {
      var flags = EventsToActions.getEventFlags(e),
          touches = e.touches || e.originalEvent.touches;
      this.fireActions(this.getActions('touchmove', touches.length, flags), e);
      if (this.touchPicked) {
        if (this.touchPicked.code === touches.length && this.touchPicked.flags === flags) {
          var pos = EventsToActions.getPosition(touches);
          this.fireActions(this.touchPicked.actions, e, _extends({
            state: 'move',
            dx: pos.x - this.touchPicked.x,
            dy: pos.y - this.touchPicked.y
          }, pos));
          this.touchPicked = _extends({}, this.touchPicked, pos);
        } else {
          this.touchEnd(e);
          this.touchPick(e, flags, touches);
        }
      }
    }
  };

  EventsToActions.prototype.touchEnd = function touchEnd(e) {
    if (this.touchPicked) {
      this.fireActions(this.touchPicked.actions, e, {
        state: 'end'
      });
      delete this.touchPicked;
    }
  };

  EventsToActions.prototype.key = function key(e, type) {
    if (this.enabled) {
      var flags = EventsToActions.getEventFlags(e);
      this.fireActions(this.getActions(type, e.keyCode, flags), e);
    }
  };

  EventsToActions.prototype.keyDown = function keyDown(e) {
    this.key(e, 'keydown');
  };

  EventsToActions.prototype.keyPress = function keyPress(e) {
    this.key(e, 'keypress');
  };

  EventsToActions.prototype.keyUp = function keyUp(e) {
    this.key(e, 'keyup');
  };

  EventsToActions.prototype.dispose = function dispose() {
    this.element.off('contextmenu', this.binds.contextMenu);

    this.element.off('mousedown', this.binds.mouseDown);
    this.element.off('mousemove', this.binds.mouseMove);
    this.element.off('mouseup', this.binds.mouseUp);
    this.element.off('mousewheel', this.binds.mouseWheel);

    (0, _libs.$)(this.doc).off('mousemove', this.binds.mouseMoveDoc);
    (0, _libs.$)(this.doc).off('mouseup', this.binds.mouseUpDoc);

    this.element.off('click', this.binds.click);
    this.element.off('dblclick', this.binds.dblclick);

    this.element.off('touchstart', this.binds.touchStart);
    this.element.off('touchmove', this.binds.touchMove);
    this.element.off('touchend', this.binds.touchEnd);

    (0, _libs.$)(this.wnd).off('keydown', this.binds.keyDown);
    (0, _libs.$)(this.wnd).off('keypress', this.binds.keyPress);
    (0, _libs.$)(this.wnd).off('keyup', this.binds.keyUp);
  };

  return EventsToActions;
}();

EventsToActions.modKeys = {
  Ctrl: 1,
  Shift: 2,
  Alt: 4
};
EventsToActions.mouseButtons = {
  Left: 0,
  Middle: 1,
  Right: 2
};
exports.default = EventsToActions;

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var FullScreen = function () {
	function FullScreen() {
		_classCallCheck(this, FullScreen);
	}

	FullScreen.available = function available() {
		return FullScreen._hasWebkitFullScreen || FullScreen._hasMozFullScreen || FullScreen._hasMsFullscreen;
	};

	FullScreen.activated = function activated() {
		if (FullScreen._hasWebkitFullScreen) {
			return document.webkitIsFullScreen;
		} else if (FullScreen._hasMozFullScreen) {
			return document.mozFullScreen;
		} else if (FullScreen._hasMsFullscreen) {
			return !!document.msFullscreenElement;
		} else {
			console.assert(false);
		}
	};

	FullScreen.addEventListener = function addEventListener(element, handler) {
		if (element.addEventListener) {
			element.addEventListener('webkitfullscreenchange', handler, false);
			element.addEventListener('mozfullscreenchange', handler, false);
			element.addEventListener('fullscreenchange', handler, false);
			element.addEventListener('MSFullscreenChange', handler, false);
		}
	};

	FullScreen.removeEventListener = function removeEventListener(element, handler) {
		if (element.removeEventListener) {
			element.removeEventListener('webkitfullscreenchange', handler, false);
			element.removeEventListener('mozfullscreenchange', handler, false);
			element.removeEventListener('fullscreenchange', handler, false);
			element.removeEventListener('MSFullscreenChange', handler, false);
		}
	};

	FullScreen.request = function request(element) {
		element = element || document.body;
		if (FullScreen._hasWebkitFullScreen) {
			element.webkitRequestFullScreen();
		} else if (FullScreen._hasMozFullScreen) {
			element.mozRequestFullScreen();
		} else if (FullScreen._hasMsFullscreen) {
			element.msRequestFullscreen();
		} else {
			console.assert(false);
		}
	};

	FullScreen.cancel = function cancel() {
		if (FullScreen._hasWebkitFullScreen) {
			document.webkitCancelFullScreen();
		} else if (FullScreen._hasMozFullScreen) {
			document.mozCancelFullScreen();
		} else if (FullScreen._hasMsFullscreen) {
			document.msExitFullscreen();
		} else {
			console.assert(false);
		}
	};

	return FullScreen;
}();

FullScreen._hasWebkitFullScreen = !!document.webkitCancelFullScreen;
FullScreen._hasMozFullScreen = !!document.mozCancelFullScreen;
FullScreen._hasMsFullscreen = !!document.documentElement.msRequestFullscreen;
exports.default = FullScreen;

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(0);

var _ImageBase2 = __webpack_require__(5);

var _ImageBase3 = _interopRequireDefault(_ImageBase2);

var _BaseMathUtils = __webpack_require__(2);

var _BaseMathUtils2 = _interopRequireDefault(_BaseMathUtils);

var _Dom2Image = __webpack_require__(48);

var _Dom2Image2 = _interopRequireDefault(_Dom2Image);

var _DocMouseSimulator = __webpack_require__(47);

var _DocMouseSimulator2 = _interopRequireDefault(_DocMouseSimulator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var InteractiveImage = function (_ImageBase) {
  _inherits(InteractiveImage, _ImageBase);

  function InteractiveImage(context, width, height, color, src, cache, injector) {
    _classCallCheck(this, InteractiveImage);

    var _this = _possibleConstructorReturn(this, _ImageBase.call(this, context, width, height, color));

    _this.iId = 'i' + _BaseMathUtils2.default.getUnique();
    var jFrame = (0, _libs.$)('<iframe id="' + _this.iId + '" src="' + src + '" style="position: fixed; left: -1000px;"></iframe>');
    (0, _libs.$)(_this.doc.body).append(jFrame);
    _this.frame = jFrame[0];

    _this.binds = {};

    if (injector) {
      injector(_this.frame.contentWindow);
    }

    if (_this.doc.implementation.hasFeature('www.http://w3.org/TR/SVG11/feature#Extensibility', '1.1')) {
      // svg foreignObject renderer
      _this.image = new Image();
      _this.binds.imageLoad = function () {
        _this.renderImage(_this.image);
        _this.finishRender();
      };
      (0, _libs.$)(_this.image).on('load', _this.binds.imageLoad);
      _this.svgRender = new _Dom2Image2.default(_this.frame.contentWindow, _this.frame.contentDocument, cache);
    } // otherwise - html2canvas

    _this.binds.frameLoad = function () {
      if (~_this.frame.contentDocument.title.indexOf('404')) {
        _this.startRender = function () {
          _this.renderNotFoundPage();
          _this.finishRender();
        };
        _this.finishLoad();
      } else {
        setTimeout(function () {
          if (_this.frame) {
            _this.width = (0, _libs.$)(_this.frame.contentDocument.body).width();
            _this.height = (0, _libs.$)(_this.frame.contentDocument.body).height();
            _this.resH = _this.height / _this.width * _this.resW;
            jFrame.css('width', _this.width + 'px').css('height', _this.height + 'px');
            jFrame.offset({ left: -_this.width - 100, top: 0 });
            if (_this.svgRender) {
              _this.simulator = new _DocMouseSimulator2.default(jFrame, _this.frame.contentDocument.body, _this.element);
              _this.simulator.addDocChangeClb(_this.finishLoad.bind(_this));
            }
            _this.startRender = function () {
              _this.render();
            };
            _this.finishLoad();
          }
        }, 500);
      }
    };
    (0, _libs.$)(_this.frame.contentWindow).on('load', _this.binds.frameLoad);
    return _this;
  }

  InteractiveImage.prototype.getSimulatedDoc = function getSimulatedDoc() {
    return this.frame.contentDocument;
  };

  InteractiveImage.prototype.render = function render() {
    var _this2 = this;

    if (this.svgRender) {
      this.svgRender.toSvg(this.simulator.element, { height: this.height + 'px', width: this.width + 'px' }).then(function (dataUrl) {
        _this2.image.src = dataUrl;
      }).catch(function (error) {
        console.error('Dom2Image: ', error);
        _this2.renderBlankPage();
        _this2.finishRender();
      });
    } else {
      (0, _libs.html2canvas)(this.frame.contentDocument.body, { timeout: 30000 }).then(function (canvas) {
        _this2.renderImage(canvas);
        _this2.finishRender();
      });
    }
  };

  InteractiveImage.prototype.dispose = function dispose() {
    (0, _libs.$)(this.image).off('load', this.binds.imageLoad);
    (0, _libs.$)(this.frame.contentWindow).off('load', this.binds.frameLoad);
    (0, _libs.$)(this.doc.body).find('#' + this.iId).remove();
    if (this.image) {
      this.image.src = '';
      delete this.image;
    }
    this.frame.src = '';
    delete this.frame;
    _ImageBase.prototype.dispose.call(this);
  };

  InteractiveImage.prototype.simulate = function simulate(e, doc, x, y) {
    if (this.simulator) {
      this.simulator.simulate(e, doc, x, y);
    }
  };

  return InteractiveImage;
}(_ImageBase3.default);

exports.default = InteractiveImage;

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(0);

var _GraphUtils = __webpack_require__(7);

var _GraphUtils2 = _interopRequireDefault(_GraphUtils);

var _MathUtils = __webpack_require__(3);

var _MathUtils2 = _interopRequireDefault(_MathUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var LoadingAnimation = function () {
  LoadingAnimation.prototype.dy = function dy(t, y) {
    var w = y[0],
        a = y[1];
    return [-this.g * Math.cos(a), w];
  };

  LoadingAnimation.prototype.integrate = function integrate(T) {
    var t = 0,
        dt = this.p.dt,
        os = this.os;
    while (t < T) {
      if (t + dt > T) {
        dt = T - t;
      }
      os = _MathUtils2.default.rk4(this.dy.bind({ g: this.p.g }), 0, dt, os);
      t += dt;
    }
    return os;
  };

  LoadingAnimation.prototype.calcTimeTo = function calcTimeTo(target) {
    var t = 0,
        dt = this.p.dt,
        os = this.os;
    while (Math.abs(os[1] - target) > 1e-4) {
      var nos = _MathUtils2.default.rk4(this.dy.bind({ g: this.p.g }), 0, dt, os);
      if (nos[0] < 0 && nos[1] < target || nos[0] > 0 && nos[1] > target) {
        dt /= 2;
      } else {
        os = nos;
        t += dt;
      }
    }
    return t;
  };

  LoadingAnimation.prototype.update = function update(T) {
    this.os = this.integrate(T);

    this.t += T;
    if (this.t >= this.p.updateInterval) {
      this.t = 0;
      var r = 0.04 * Math.min(this.c.width, this.c.height),
          a = this.os[1],
          x0 = 0.5 * this.c.width,
          y0 = 0.5 * this.c.height,
          ctx = this.ctx;

      ctx.clearRect(0, 0, this.c.width, this.c.height);
      ctx.beginPath();
      ctx.fillStyle = _GraphUtils2.default.color2Rgba(this.p.color, 1);
      ctx.rect(0, 0, this.c.width, this.c.height);
      ctx.fill();

      ctx.beginPath();
      ctx.shadowBlur = 50;
      ctx.fillStyle = _GraphUtils2.default.color2Rgba(_GraphUtils2.default.inverseColor(this.p.color, 0.9), Math.abs(this.os[0] / 6.36));
      ctx.shadowColor = _GraphUtils2.default.color2Rgba(_GraphUtils2.default.inverseColor(this.p.color, 1), 0.9);
      ctx.shadowOffsetX = 0;
      ctx.shadowOffsetY = 0;
      ctx.font = 'bold ' + Math.round(0.25 * r) + 'px Arial';
      ctx.textAlign = 'center';
      ctx.textBaseline = 'middle';
      ctx.fillText((0, _libs.tr)('Loading...'), x0, y0);

      var ps = 10,
          da = 2 * Math.PI / ps; //2.5*_r/r
      ctx.shadowColor = _GraphUtils2.default.color2Rgba(_GraphUtils2.default.inverseColor(this.p.color, 1), 0.7);
      for (var i = 0, _a = a, _r = 0.2 * r; i < ps; ++i, _r *= 0.9, _a += da) {
        ctx.beginPath();
        ctx.fillStyle = _GraphUtils2.default.color2Rgba(_GraphUtils2.default.inverseColor(this.p.color, (ps - i) / ps), 0.7 * (ps - i) / ps);
        var cx = x0 + r * Math.cos(_a),
            cy = y0 - r * Math.sin(_a),
            nx = x0 + r * Math.cos(_a + da),
            ny = y0 - r * Math.sin(_a + da);
        ctx.shadowOffsetX = 0.2 * (nx - cx);
        ctx.shadowOffsetY = 0.2 * (ny - cy);
        ctx.arc(cx, cy, _r, 0, Math.PI * 2, 1);
        ctx.fill();
      }
      if (this.onChange) {
        this.onChange(this.c, this.p.color);
      }
    }
  };

  LoadingAnimation.prototype.getImage = function getImage() {
    return this.c;
  };

  LoadingAnimation.prototype.dispose = function dispose() {
    this.c.width = 0;
    this.c.height = 0;
    delete this.ctx;
    delete this.c;
  };

  LoadingAnimation.prototype.createSprite = function createSprite(n) {
    var c = (0, _libs.$)('<canvas width="' + this.c.width * n + '" height="' + this.c.height + '"></canvas>')[0],
        ctx = c.getContext('2d'),
        t = this.calcTimeTo(this.os[1] + Math.sign(this.os[0]) * 2 * Math.PI),
        dt = t / (n + 1);
    var updateInterval = this.p.updateInterval;

    this.p.updateInterval = 0;
    for (var i = 0; i < n; ++i) {
      this.update(dt);
      ctx.drawImage(this.c, i * this.c.width, 0);
    }
    this.p.updateInterval = updateInterval;
    return c;
  };

  function LoadingAnimation(width, height, color) {
    _classCallCheck(this, LoadingAnimation);

    var jC = (0, _libs.$)('<canvas width="' + width + '" height="' + height + '"></canvas>');
    this.c = jC[0];
    this.p = {
      g: 9.8,
      dt: 1 / 60,
      color: color,
      updateInterval: 0.25
    };
    this.ctx = this.c.getContext('2d');
    this.os = [-2, Math.PI / 2];
    this.t = this.p.updateInterval;
  }

  return LoadingAnimation;
}();

exports.default = LoadingAnimation;

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var LoadingController = function () {
  function LoadingController(view) {
    var showProgress = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    var loadingMsg = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;

    _classCallCheck(this, LoadingController);

    this.view = view;
    this.progress = 0;
    this.showProgress = showProgress;
    this.getLoadingMsg = loadingMsg || LoadingController.defaultLoadingMsg;
    this.updateView();
  }

  LoadingController.defaultLoadingMsg = function defaultLoadingMsg(progress) {
    return ['Please wait... the Application is Loading: ', progress, '%'].join('');
  };

  LoadingController.prototype.dispose = function dispose() {
    this.showProgress = false;
    this.updateView();
    delete this.view;
  };

  LoadingController.prototype.setProgress = function setProgress(v) {
    this.progress = v;
    this.updateView();
  };

  LoadingController.prototype.updateView = function updateView() {
    if (this.view) {

      this.view.setState('widLoadingProgress', {
        enable: true,
        visible: this.showProgress,
        active: false
      });

      this.view.setState('txtLoadingProgress', {
        value: this.getLoadingMsg(this.progress),
        visible: true
      });

      for (var _iterator = this.view.getLinks(), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
        var _ref;

        if (_isArray) {
          if (_i >= _iterator.length) break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done) break;
          _ref = _i.value;
        }

        var name = _ref;

        this.view.setState(name, {
          enable: false,
          visible: true,
          active: false
        });
      }

      this.view.setState('inpPages', {
        visible: true,
        value: ''
      });

      this.view.setState('inpPage', {
        visible: true,
        enable: false,
        value: ''
      });
    }
  };

  return LoadingController;
}();

exports.default = LoadingController;

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(0);

var _EventConverter2 = __webpack_require__(6);

var _EventConverter3 = _interopRequireDefault(_EventConverter2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MouseEventConverter = function (_EventConverter) {
  _inherits(MouseEventConverter, _EventConverter);

  function MouseEventConverter(wnd, doc, element) {
    _classCallCheck(this, MouseEventConverter);

    var _this = _possibleConstructorReturn(this, _EventConverter.call(this, wnd, doc));

    _this.element = element;
    _this.binds = {
      convert: _this.convert.bind(_this)
    };
    (0, _libs.$)(_this.element).on('mousemove mousedown mouseover mouseout click', _this.binds.convert);
    (0, _libs.$)(_this.doc).on('mouseup', _this.binds.convert);
    return _this;
  }

  MouseEventConverter.prototype.dispose = function dispose() {
    (0, _libs.$)(this.element).off('mousemove mousedown mouseover mouseout click', this.binds.convert);
    (0, _libs.$)(this.doc).off('mouseup', this.binds.convert);
  };

  return MouseEventConverter;
}(_EventConverter3.default);

exports.default = MouseEventConverter;

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _libs = __webpack_require__(0);

var _MathUtils = __webpack_require__(3);

var _MathUtils2 = _interopRequireDefault(_MathUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Object3DWatcher = function () {
  function Object3DWatcher(visual, boundBoxClb) {
    var testScale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.testScale;

    _classCallCheck(this, Object3DWatcher);

    this.visual = visual;
    this.boundBoxClb = boundBoxClb;
    this.testScale = testScale;
    this.camera = visual.camera;
    this.element = this.visual.element;
    this.elementSize = { w: 1, h: 1 };
    this.devicePixelRatio = this.visual.wnd.devicePixelRatio || 1;
    this.orbit = visual.getOrbit();
    this.scale = 1;

    this.eps = 1e-4;
    this.v = new _libs.THREE.Vector3();
    this.dv = new _libs.THREE.Vector2();

    this.enabled = false;

    visual.addRenderCallback(this.update.bind(this));

    this.os = {
      vx: 0,
      vy: 0,
      x: 0,
      y: 0
    };
    this.orbit.update();
    this.camera.updateMatrixWorld();
    var box = this.computeClientBoundBox(),
        k = 1.11;
    this.movePan({ x: -k * box.mid.x, y: -k * box.mid.y });
  }

  Object3DWatcher.prototype.movePan = function movePan(dv) {
    this.orbit.pan(dv.x * this.visual.width(), -dv.y * this.visual.height());
  };

  Object3DWatcher.prototype.vToCamera = function vToCamera(v) {
    v.project(this.camera);
    return {
      x: 0.5 * v.x,
      y: 0.5 * v.y
    };
  };

  Object3DWatcher.prototype.computeClientBoundBox = function computeClientBoundBox() {
    var box = this.boundBoxClb(),
        xs = [box.min.x, box.max.x],
        ys = [0, 0],
        zs = [box.min.z, box.max.z];

    var ps = [],
        res = { max: {}, min: {} };
    for (var _iterator = xs, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var x = _ref;

      for (var _iterator2 = ys, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
        var _ref2;

        if (_isArray2) {
          if (_i2 >= _iterator2.length) break;
          _ref2 = _iterator2[_i2++];
        } else {
          _i2 = _iterator2.next();
          if (_i2.done) break;
          _ref2 = _i2.value;
        }

        var y = _ref2;

        for (var _iterator3 = zs, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
          var _ref3;

          if (_isArray3) {
            if (_i3 >= _iterator3.length) break;
            _ref3 = _iterator3[_i3++];
          } else {
            _i3 = _iterator3.next();
            if (_i3.done) break;
            _ref3 = _i3.value;
          }

          var z = _ref3;

          ps.push(this.vToCamera(this.v.set(x, y, z)));
        }
      }
    }

    ps.sort(function (p1, p2) {
      return p1.x - p2.x;
    });
    res.min.x = ps[0].x;
    res.max.x = ps[ps.length - 1].x;
    ps.sort(function (p1, p2) {
      return p1.y - p2.y;
    });
    res.min.y = ps[0].y;
    res.max.y = ps[ps.length - 1].y;

    res.width = res.max.x - res.min.x;
    res.height = res.max.y - res.min.y;

    res.mid = {
      x: 0.5 * (res.max.x + res.min.x),
      y: 0.5 * (res.max.y + res.min.y)
    };

    return res;
  };

  Object3DWatcher.prototype.setObject = function setObject(boundBoxClb) {
    this.boundBoxClb = boundBoxClb;
  };

  Object3DWatcher.prototype.testScale = function testScale() {
    return true;
  };

  Object3DWatcher.prototype.computeCorr = function computeCorr(K, min, max) {
    var corr = 0;
    if (K < 1) {
      if (min > -0.5) {
        corr = -0.5 - min;
      } else if (max < 0.5) {
        corr = 0.5 - max;
      }
    } else {
      if (min < -0.5) {
        corr = -0.5 - min;
      } else if (max > 0.5) {
        corr = 0.5 - max;
      }
    }
    return corr;
  };

  Object3DWatcher.prototype.getScale = function getScale() {
    var box = this.computeClientBoundBox(),
        Kx = this.elementSize.w / box.width,
        Ky = this.elementSize.h / box.height;
    return 1 / Math.min(Kx, Ky);
  };

  Object3DWatcher.prototype.centerView = function centerView(T) {
    var box = this.computeClientBoundBox(),
        Kx = this.elementSize.w / box.width,
        Ky = this.elementSize.h / box.height,
        K = Math.min(Kx, Ky);

    if (this.testScale() && Math.abs(1 / K - this.scale) > this.eps) {
      var scale = 1 / K + 0.2 * (this.scale - 1 / K);
      this.orbit.setScale(this.orbit.getScale() / (K * scale));
      this.orbit.update();
      this.camera.updateMatrixWorld();
      box = this.computeClientBoundBox();
      Kx = this.elementSize.w / box.width;
      Ky = this.elementSize.h / box.height;
      K = Math.min(Kx, Ky);
    }

    var dv = this.dv;
    if (K > 1 - this.eps) {
      dv.set(-box.mid.x, -box.mid.y);
    } else {
      dv.set(this.computeCorr(Kx, box.min.x, box.max.x), this.computeCorr(Ky, box.min.y, box.max.y));
    }

    if (Math.sqrt(this.os.vx * this.os.vx + this.os.vy * this.os.vy) > 0.003 || dv.length() > 0.003) {
      var dt = 1 / 60,
          t = 0,
          os = _extends({}, this.os, {
        x: 0,
        y: 0
      });
      os.tf = function (vx, vy, x, y) {
        return {
          x: 75 * (dv.x - x),
          y: 75 * (dv.y - y)
        };
      };
      while (t < T) {
        if (t + dt > T) {
          dt = T - t;
        }
        os = this.integrate(os, dt);
        t += dt;
      }
      this.movePan(os);
      this.os = os;
    }
  };

  Object3DWatcher.prototype.integrate = function integrate(os, dt) {
    var _MathUtils$rk = _MathUtils2.default.rk4(this.dy.bind(os), 0, dt, [os.vx, os.vy, os.x, os.y]),
        vx = _MathUtils$rk[0],
        vy = _MathUtils$rk[1],
        x = _MathUtils$rk[2],
        y = _MathUtils$rk[3];

    return _extends({}, os, {
      vx: vx, vy: vy, x: x, y: y
    });
  };

  Object3DWatcher.prototype.dy = function dy(t, Y) {
    var vx = Y[0],
        vy = Y[1],
        x = Y[2],
        y = Y[3],
        vd = 15,
        tf = this.tf(vx, vy, x, y);

    return [tf.x - vd * vx, tf.y - vd * vy, vx, vy];
  };

  Object3DWatcher.prototype.update = function update(dt) {
    if (this.enabled && this.boundBoxClb) {
      this.centerView(dt);
    }
  };

  return Object3DWatcher;
}();

exports.default = Object3DWatcher;

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Orbit = function (_THREE$EventDispatche) {
  _inherits(Orbit, _THREE$EventDispatche);

  function Orbit(object, domElement) {
    _classCallCheck(this, Orbit);

    var _this = _possibleConstructorReturn(this, _THREE$EventDispatche.call(this));

    _this.object = object;
    _this.domElement = domElement || document.body;

    // Set to false to disable this control
    _this.enabled = true;

    // "target" sets the location of focus, where the object orbits around
    _this.target = new _libs.THREE.Vector3();

    // How far you can dolly in and out(PerspectiveCamera only)
    _this.minDistance = 0;
    _this.maxDistance = Infinity;

    // How far you can zoom in and out(OrthographicCamera only)
    _this.minZoom = 0;
    _this.maxZoom = Infinity;

    // How far you can orbit vertically, upper and lower limits.
    // Range is 0 to Math.PI radians.
    _this.minPolarAngle = 0; // radians
    _this.maxPolarAngle = Math.PI; // radians

    // How far you can orbit horizontally, upper and lower limits.
    // If set, must be a sub-interval of the interval [-Math.PI, Math.PI ].
    _this.minAzimuthAngle = -Infinity; // radians
    _this.maxAzimuthAngle = Infinity; // radians

    // Set to true to enable damping (inertia)
    // If damping is enabled, you must call controls.update() in your animation loop
    _this.enableDamping = false;
    _this.dampingFactor = 0.25;

    // This option actually enables dollying in and out; left as "zoom" for backwards compatibility.
    // Set to false to disable zooming
    _this.enableZoom = true;
    _this.zoomSpeed = 1.0;

    // Set to false to disable rotating
    _this.enableRotate = true;
    _this.rotateSpeed = 1.0;

    // Set to false to disable panning
    _this.enablePan = true;

    // Set to true to automatically rotate around the target
    // If auto-rotate is enabled, you must call controls.update() in your animation loop
    _this.autoRotate = false;
    _this.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60

    // for reset
    _this.target0 = _this.target.clone();
    _this.position0 = _this.object.position.clone();
    _this.zoom0 = _this.object.zoom;

    //
    // public methods
    //
    _this.getPolarAngle = function () {
      return spherical.phi;
    };

    _this.getAzimuthalAngle = function () {
      return spherical.theta;
    };

    _this.reset = function () {
      scope.target.copy(scope.target0);
      scope.object.position.copy(scope.position0);
      scope.object.zoom = scope.zoom0;

      scope.object.updateProjectionMatrix();
      scope.dispatchEvent(changeEvent);

      scope.update();
    };

    _this.zoomOut = function () {
      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.zoomSpeed;

      var _speed = this.zoomSpeed;
      this.zoomSpeed = speed;
      dollyIn(getZoomScale());
      this.zoomSpeed = _speed;
    };

    _this.zoomIn = function () {
      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.zoomSpeed;

      var _speed = this.zoomSpeed;
      this.zoomSpeed = speed;
      dollyOut(getZoomScale());
      this.zoomSpeed = _speed;
    };

    _this.getScale = function () {
      return scale;
    };

    _this.setScale = function (newScale) {
      scale = newScale;
    };

    // this method is exposed, but perhaps it would be better if we can make it private...
    _this.update = function () {
      var offset = new _libs.THREE.Vector3();
      // so camera.up is the orbit axis
      var quat = new _libs.THREE.Quaternion().setFromUnitVectors(object.up, new _libs.THREE.Vector3(0, 1, 0));
      var quatInverse = quat.clone().inverse();
      var lastPosition = new _libs.THREE.Vector3();
      var lastQuaternion = new _libs.THREE.Quaternion();

      return function update() {
        var position = scope.object.position;
        offset.copy(position).sub(scope.target);
        // rotate offset to "y-axis-is-up" space
        offset.applyQuaternion(quat);
        // angle from z-axis around y-axis
        spherical.setFromVector3(offset);
        if (scope.autoRotate) {
          rotateLeft(getAutoRotationAngle());
        }
        spherical.theta += sphericalDelta.theta;
        spherical.phi += sphericalDelta.phi;
        // restrict theta to be between desired limits
        spherical.theta = Math.max(scope.minAzimuthAngle, Math.min(scope.maxAzimuthAngle, spherical.theta));
        // restrict phi to be between desired limits
        spherical.phi = Math.max(scope.minPolarAngle, Math.min(scope.maxPolarAngle, spherical.phi));
        spherical.makeSafe();
        spherical.radius *= scale;
        // restrict radius to be between desired limits
        spherical.radius = Math.max(scope.minDistance, Math.min(scope.maxDistance, spherical.radius));
        // move target to panned location
        scope.target.add(panOffset);
        offset.setFromSpherical(spherical);
        // rotate offset back to "camera-up-vector-is-up" space
        offset.applyQuaternion(quatInverse);
        position.copy(scope.target).add(offset);
        scope.object.lookAt(scope.target);

        if (scope.enableDamping === true) {
          sphericalDelta.theta *= 1 - scope.dampingFactor;
          sphericalDelta.phi *= 1 - scope.dampingFactor;
        } else {
          sphericalDelta.set(0, 0, 0);
        }

        scale = 1;
        panOffset.set(0, 0, 0);

        // update condition is:
        // min(camera displacement, camera rotation in radians)^2 > EPS
        // using small-angle approximation cos(x/2) = 1-x^2 / 8

        if (zoomChanged || lastPosition.distanceToSquared(scope.object.position) > EPS || 8 * (1 - lastQuaternion.dot(scope.object.quaternion)) > EPS) {

          scope.dispatchEvent(changeEvent);

          lastPosition.copy(scope.object.position);
          lastQuaternion.copy(scope.object.quaternion);
          zoomChanged = false;

          return true;
        }
        return false;
      };
    }();

    _this.dispose = function () {};

    //
    // internals
    //
    var scope = _this;
    var changeEvent = { type: 'change' };
    var EPS = 1e-6;
    // current position in spherical coordinates
    var spherical = new _libs.THREE.Spherical();
    var sphericalDelta = new _libs.THREE.Spherical();

    var scale = 1;
    var panOffset = new _libs.THREE.Vector3();
    var zoomChanged = false;

    function getAutoRotationAngle() {
      return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;
    }

    function getZoomScale() {
      return Math.pow(0.95, scope.zoomSpeed);
    }

    function rotateLeft(angle) {
      sphericalDelta.theta -= angle;
    }

    function rotateUp(angle) {
      sphericalDelta.phi -= angle;
    }

    var panLeft = function () {
      var v = new _libs.THREE.Vector3();
      return function panLeft(distance, objectMatrix) {
        v.setFromMatrixColumn(objectMatrix, 0); // get X column of objectMatrix
        v.multiplyScalar(-distance);
        panOffset.add(v);
      };
    }();

    var panUp = function () {
      var v = new _libs.THREE.Vector3();
      return function panUp(distance, objectMatrix) {
        v.setFromMatrixColumn(objectMatrix, 1); // get Y column of objectMatrix
        v.multiplyScalar(distance);
        panOffset.add(v);
      };
    }();

    // deltaX and deltaY are in pixels; right and down are positive
    scope.pan = function () {
      var offset = new _libs.THREE.Vector3();
      return function pan(deltaX, deltaY) {
        var element = scope.domElement;
        if (scope.object instanceof _libs.THREE.PerspectiveCamera) {
          // perspective
          var position = scope.object.position;
          offset.copy(position).sub(scope.target);
          var targetDistance = offset.length();
          // half of the fov is center to top of screen
          targetDistance *= Math.tan(scope.object.fov / 2 * Math.PI / 180.0);
          // we actually don't use screenWidth, since perspective camera is fixed to screen height
          panLeft(2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix);
          panUp(2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix);
        } else if (scope.object instanceof _libs.THREE.OrthographicCamera) {
          // orthographic
          panLeft(deltaX * (scope.object.right - scope.object.left) / scope.object.zoom / element.clientWidth, scope.object.matrix);
          panUp(deltaY * (scope.object.top - scope.object.bottom) / scope.object.zoom / element.clientHeight, scope.object.matrix);
        } else {
          // camera neither orthographic nor perspective
          console.warn('WARNING: OrbitControls.js encountered an unknown camera type-pan disabled.');
          scope.enablePan = false;
        }
      };
    }();

    function dollyIn(dollyScale) {
      if (scope.object instanceof _libs.THREE.PerspectiveCamera) {
        scale /= dollyScale;
      } else if (scope.object instanceof _libs.THREE.OrthographicCamera) {
        scope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom * dollyScale));
        scope.object.updateProjectionMatrix();
        zoomChanged = true;
      } else {
        console.warn('WARNING: OrbitControls.js encountered an unknown camera type-dolly/zoom disabled.');
        scope.enableZoom = false;
      }
    }

    function dollyOut(dollyScale) {
      if (scope.object instanceof _libs.THREE.PerspectiveCamera) {
        scale *= dollyScale;
      } else if (scope.object instanceof _libs.THREE.OrthographicCamera) {
        scope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom / dollyScale));
        scope.object.updateProjectionMatrix();
        zoomChanged = true;
      } else {
        console.warn('WARNING: OrbitControls.js encountered an unknown camera type-dolly/zoom disabled.');
        scope.enableZoom = false;
      }
    }

    /* Actions */

    function rotate(event, data) {
      if (scope.enabled && scope.enableRotate && data.state === 'move') {
        var element = scope.domElement;
        // rotating across whole screen goes 360 degrees around
        rotateLeft(2 * Math.PI * data.dx / element.clientWidth * scope.rotateSpeed);
        // rotating up and down along whole screen attempts to go 360, but limited to 180
        rotateUp(2 * Math.PI * data.dy / element.clientHeight * scope.rotateSpeed);
        scope.update();
      }
    }

    function pan(event, data) {
      if (scope.enabled && scope.enablePan && data.state === 'move') {
        scope.pan(data.dx, data.dy);
        scope.update();
      }
    }

    function offsetDolly(event, data) {
      if (scope.enabled && scope.enableZoom && data.state === 'move') {
        if (data.dy > 0) {
          dollyIn(getZoomScale());
        } else if (data.dy < 0) {
          dollyOut(getZoomScale());
        }
        scope.update();
      }
    }

    function wheelDolly(event) {
      if (scope.enabled && scope.enableZoom) {
        if (event.deltaY > 0) {
          dollyOut(getZoomScale());
        } else if (event.deltaY < 0) {
          dollyIn(getZoomScale());
        }
        scope.update();
      }
    }

    _this.actions = {
      rotate: rotate,
      pan: pan,
      offsetDolly: offsetDolly,
      wheelDolly: wheelDolly

      // force an update at start
    };_this.update();
    return _this;
  }

  return Orbit;
}(_libs.THREE.EventDispatcher);

exports.default = Orbit;

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(0);

var _ImageBase2 = __webpack_require__(5);

var _ImageBase3 = _interopRequireDefault(_ImageBase2);

var _Pdf = __webpack_require__(19);

var _Pdf2 = _interopRequireDefault(_Pdf);

var _BaseMathUtils = __webpack_require__(2);

var _BaseMathUtils2 = _interopRequireDefault(_BaseMathUtils);

var _CustomEventConverter = __webpack_require__(16);

var _CustomEventConverter2 = _interopRequireDefault(_CustomEventConverter);

var _PolyTarget = __webpack_require__(71);

var _PolyTarget2 = _interopRequireDefault(_PolyTarget);

var _Finder = __webpack_require__(17);

var _Finder2 = _interopRequireDefault(_Finder);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var PdfImage = function (_ImageBase) {
  _inherits(PdfImage, _ImageBase);

  function PdfImage(context, width, height, color, pdf, n) {
    _classCallCheck(this, PdfImage);

    var _this = _possibleConstructorReturn(this, _ImageBase.call(this, context, width, height, color));

    _this.query = '';
    _this.n = n;
    _this.pdf = pdf;
    _this.v = { x: 0, y: 0, z: 0, set: function set(x, y, z) {
        this.x = x;this.y = y;this.z = z;
        return this;
      }, transform: function transform(m) {
        var x = m.m[0][0] * this.x + m.m[1][0] * this.y + m.m[2][0] * this.z,
            y = m.m[0][1] * this.x + m.m[1][1] * this.y + m.m[2][1] * this.z,
            z = m.m[0][2] * this.x + m.m[0][2] * this.y + m.m[2][0] * this.z;
        this.x = x;
        this.y = y;
        this.z = z;
        return this;
      } };
    _this.m = { m: [[1, 0, 0], [0, 1, 0], [0, 0, 1]], set: function set(m00, m01, m02, m10, m11, m12, m20, m21, m22) {
        this.m = [[m00, m01, m02], [m10, m11, m12], [m20, m21, m22]];
        return this;
      } };

    _this.startRender = function () {
      _this.pdf.getHandler(_this.render.bind(_this));
    };
    Promise.resolve().then(function () {
      return _this.pdf.getHandler(_this.init.bind(_this));
    });
    return _this;
  }

  PdfImage.prototype.setQuery = function setQuery(query) {
    this.query = query.trim();
    if (this.textContent) {
      this.setHits(this.textContent);
      // this.finishLoad();
    }
  };

  PdfImage.prototype.rectSize = function rectSize(r) {
    return {
      width: r[2] - r[0],
      height: r[3] - r[1]
    };
  };

  PdfImage.prototype.createPoly = function createPoly(m, p, s) {
    var poly = [],
        v = this.v;
    v.set(p.x, p.y, 1).transform(m);
    poly.push({ x: v.x, y: v.y });
    v.set(p.x, p.y + s.height, 1).transform(m);
    poly.push({ x: v.x, y: v.y });
    v.set(p.x + s.width, p.y + s.height, 1).transform(m);
    poly.push({ x: v.x, y: v.y });
    v.set(p.x + s.width, p.y, 1).transform(m);
    poly.push({ x: v.x, y: v.y });
    return poly;
  };

  PdfImage.prototype.getSimulatedDoc = function getSimulatedDoc() {
    return this;
  };

  PdfImage.prototype.simulate = function simulate(e, doc, x, y) {
    if (this.eventConverter) {
      this.eventConverter.convert(e, { doc: doc, x: x, y: y });
    }
  };

  PdfImage.prototype.setAnnotations = function setAnnotations(annos) {
    var _this2 = this;

    var t = this.viewport.transform,
        targets = [];
    this.m.set(t[0], t[1], 0, t[2], t[3], 0, t[4], t[5], 1);

    for (var _iterator = annos, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var anno = _ref;

      if (anno.subtype === 'Link') {
        var rect = anno.rect,
            aPos = {
          x: rect[0],
          y: rect[1]
        },
            aSz = this.rectSize(rect);
        var _target = new _PolyTarget2.default(this.createPoly(this.m, aPos, aSz).map(function (p) {
          return { x: p.x / _this2.viewport.width, y: 1 - p.y / _this2.viewport.height };
        }));
        _target.anno = anno;
        _target.callback = this.annoClb.bind(this);
        targets.push(_target);
      }
    }
    if (targets.length) {
      this.eventConverter = new _CustomEventConverter2.default(this.wnd, this.doc, _PolyTarget2.default.test, this.getSimulatedDoc());
      for (var _iterator2 = targets, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
        var _ref2;

        if (_isArray2) {
          if (_i2 >= _iterator2.length) break;
          _ref2 = _iterator2[_i2++];
        } else {
          _i2 = _iterator2.next();
          if (_i2.done) break;
          _ref2 = _i2.value;
        }

        var target = _ref2;

        this.eventConverter.addCustom(target);
      }
    }
  };

  PdfImage.prototype.setHits = function setHits(textContent) {
    this.textContent = textContent;
    if (this.query !== '') {
      this.finder = new _Finder2.default(textContent.items.map(function (item) {
        return item.str;
      }), this.query, { contexts: false });
    }
  };

  PdfImage.prototype.renderHits = function renderHits() {
    var _this3 = this;

    if (this.finder) {
      var view = this.page.view,
          testSz = (0, _libs.$)('<div style="position: absolute; visibility: hidden;"></div>').appendTo('body'),
          textDiv = testSz[0],
          baseOffset = testSz.offset().left;
      for (var _iterator3 = this.finder.getHits(), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
        var _ref3;

        if (_isArray3) {
          if (_i3 >= _iterator3.length) break;
          _ref3 = _iterator3[_i3++];
        } else {
          _i3 = _iterator3.next();
          if (_i3.done) break;
          _ref3 = _i3.value;
        }

        var hit = _ref3;

        var item = this.textContent.items[hit.index],
            t = _libs.PDFJS.Util.transform(this.viewport.transform, item.transform),
            style = this.textContent.styles[item.fontName],
            angle = Math.atan2(t[1], t[0]) + (style.vertical ? Math.PI / 2 : 0),
            fontHeight = Math.sqrt(t[2] * t[2] + t[3] * t[3]),
            fontAscent = style.ascent ? style.ascent * fontHeight : style.descent ? (1 + style.descent) * fontHeight : fontHeight;
        testSz.html(item.str.substr(0, hit.offset) + '<span>' + item.str.substr(hit.offset, hit.length) + '</span>' + item.str.substr(hit.offset + hit.length));

        textDiv.style.fontSize = fontHeight + 'px';
        textDiv.style.fontFamily = style.fontFamily;

        var testSpan = testSz.find('span'),
            iwidth = style.vertical ? item.height * this.viewport.scale : item.width * this.viewport.scale,
            width = testSz.width(),
            relativeOffset = (testSpan.offset().left - baseOffset) / width;
        this.m.set(1, 0, 0, 0, 1, 0, t[4] + fontAscent * Math.sin(angle), t[5] - fontAscent * Math.cos(angle), 1);
        var poly = this.createPoly(this.m, { x: relativeOffset * iwidth, y: 0 }, { width: iwidth * testSpan.width() / width, height: testSpan.height() });
        poly = poly.map(function (p) {
          return { x: p.x / _this3.viewport.width, y: 1 - p.y / _this3.viewport.height };
        });
        this.renderHit(poly);
      }
      testSz.remove();
    }
  };

  PdfImage.prototype.annoClb = function annoClb(e, data) {
    if (this.context.dispatchEvent) {
      this.context.dispatchEvent({
        type: 'pdfAnnotation',
        event: e,
        annotation: data.target.anno
      });
    }
  };

  PdfImage.prototype.calcViewport = function calcViewport() {
    var scale = _BaseMathUtils2.default.calcScale(this.size.width, this.size.height, this.resW, this.resH);
    if (!this.viewport || Math.abs(this.viewport.scale - scale) > 1e-4) {
      this.viewport = this.page.getViewport({ scale: scale });
      if (this.type !== 'full') {
        if (this.type === 'right') {
          this.viewport.offsetX += 0.5 * this.viewport.width;
          this.viewport.transform[4] -= 0.5 * this.viewport.width;
        }
        this.viewport.width /= 2;
      }
      this.resW = this.width = this.viewport.width;
      this.resH = this.height = this.viewport.height;
    }
  };

  PdfImage.prototype.init = function init() {
    var _this4 = this;

    this.type = this.pdf.getPageType(this.n);
    this.pdf.getPage(this.n).then(function (page) {
      _this4.page = page;
      _this4.size = _Pdf2.default.getPageSize(page);
      if (_this4.type !== 'full') {
        _this4.size.width /= 2;
      }
      page.getAnnotations().then(_this4.setAnnotations.bind(_this4));
      page.getTextContent().then(_this4.setHits.bind(_this4));
      _this4.calcViewport();
      _this4.finishLoad();
    }).catch(function (e) {
      console.error('Cannot load PDF page: ' + (_this4.n + 1));
      console.error(e);
      _this4.finishLoad();
    });
  };

  PdfImage.prototype.setResolution = function setResolution(res) {
    _ImageBase.prototype.setResolution.call(this, res);
    if (this.page) {
      this.calcViewport();
    }
  };

  PdfImage.prototype.render = function render(handler) {
    var _this5 = this;

    if (this.page) {
      this.page.render({
        canvasContext: this.pushCtx(),
        viewport: this.viewport
      }).promise.then(function () {
        _this5.renderHits();
        _this5.popCtx();
        _this5.finishRender();
      });
    } else {
      this.renderBlankPage();
      this.finishRender();
    }
  };

  return PdfImage;
}(_ImageBase3.default);

exports.default = PdfImage;

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Search = function () {
  function Search(container, pages) {
    _classCallCheck(this, Search);

    this.container = container;
    this.pages = pages;
    this.prevResults = [];
    container.html('\n      <div class="search">\n        <div class="query">\n          <input class="inpQuery" type="text" maxlength="30" value="" />\n        </div>\n        <div class="results">\n        </div>\n        <div class="status">\n\n        </div>\n      </div>\n    '.fb3dQFilter());
    this.query = container.find('.query input');
    this.results = container.find('.results');
    this.status = container.find('.status');

    this.binds = {
      navigate: this.navigate.bind(this),
      doQuery: this.doQuery.bind(this)
    };

    this.query.on('keydown', this.binds.doQuery);
    this.results.on('click', this.binds.navigate);
  }

  Search.prototype.dispose = function dispose() {
    this.results.off('click', this.binds.navigate);
    this.query.off('keydown', this.binds.doQuery);
  };

  Search.prototype.navigate = function navigate(e) {
    e.preventDefault();
    if (this.onNavigate !== undefined) {
      var target = (0, _libs.$)(e.target);
      if (!target.hasClass('result')) {
        var t = target.find('.result');
        if (t.length) {
          target = t;
        } else {
          while (target.length && !target.hasClass('result')) {
            target = (0, _libs.$)(target[0].parentNode);
          }
        }
      }
      var page = target.attr('data');
      if (page !== undefined) {
        this.onNavigate(parseInt(page));
      }
    }
  };

  Search.prototype.doQuery = function doQuery() {
    var _this = this;

    if (this.onQuery) {
      var queryStamp = this.queryStamp = Date.now();
      setTimeout(function () {
        if (queryStamp === _this.queryStamp) {
          _this.onQuery(_this.query[0].value.trim());
        }
      }, 1000);
    }
  };

  Search.prototype.setResults = function setResults(results, lastPage) {
    if (this.prevResults.length && results[0] !== this.prevResults[0]) {
      this.prevResults = [];
      this.results.html('');
    }
    var htmls = [];
    for (var i = this.prevResults.length; i < results.length; ++i) {
      var result = results[i];
      htmls.push('<div class="result" data="' + result.page + '">');
      htmls.push('<a href="#">');
      htmls.push('<div>' + result.contexts.join('</div><div>') + '</div>');
      htmls.push('</a>');
      htmls.push('</div>');
    }
    (0, _libs.$)(htmls.join('')).appendTo(this.results);
    this.prevResults = [].concat(results);
    if (lastPage === undefined) {
      this.status.html('');
    } else {
      this.status.html(lastPage + ' of ' + this.pages);
    }
  };

  return Search;
}();

exports.default = Search;

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(0);

var _ImageBase2 = __webpack_require__(5);

var _ImageBase3 = _interopRequireDefault(_ImageBase2);

var _Utils = __webpack_require__(4);

var _Utils2 = _interopRequireDefault(_Utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var StaticImage = function (_ImageBase) {
  _inherits(StaticImage, _ImageBase);

  function StaticImage(context, width, height, color, src) {
    _classCallCheck(this, StaticImage);

    var _this = _possibleConstructorReturn(this, _ImageBase.call(this, context, width, height, color));

    _this.binds = {};
    _this.image = new Image();
    _this.image.crossOrigin = 'Anonymous';
    _this.binds.imageLoad = function () {
      _this.width = _this.image.width;
      _this.height = _this.image.height;
      _this.resH = _this.height / _this.width * _this.resW;
      _this.startRender = function () {
        _this.renderImage(_this.image);
        _this.finishRender();
      };
      _this.finishLoad();
    };
    _this.binds.imageError = function () {
      _this.startRender = function () {
        _this.renderNotFoundPage();
        _this.finishRender();
      };
      _this.finishLoad();
    };
    (0, _libs.$)(_this.image).on('load', _this.binds.imageLoad).on('error', _this.binds.imageError);
    _this.image.src = _Utils2.default.normalizeUrl(src);
    return _this;
  }

  StaticImage.prototype.dispose = function dispose() {
    (0, _libs.$)(this.image).off('load', this.binds.imageLoad).off('error', this.binds.imageError);
    this.image.src = '';
    delete this.image;
    _ImageBase.prototype.dispose.call(this);
  };

  return StaticImage;
}(_ImageBase3.default);

exports.default = StaticImage;

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var TextureAnimator = function () {
  function TextureAnimator(img, tilesHoriz, tilesVert, numTiles, tileDispDuration) {
    _classCallCheck(this, TextureAnimator);

    var texture = new _libs.THREE.Texture();
    texture.minFilter = _libs.THREE.LinearFilter;
    texture.image = img;
    texture.needsUpdate = true;

    // note: texture passed by reference, will be updated by the update function.
    this.texture = texture;
    this.tilesHorizontal = tilesHoriz;
    this.tilesVertical = tilesVert;
    // how many images does this spritesheet contain?
    //  usually equals tilesHoriz * tilesVert, but not necessarily,
    //  if there at blank tiles at the bottom of the spritesheet.
    this.numberOfTiles = numTiles;
    texture.repeat.set(1 / this.tilesHorizontal, 1 / this.tilesVertical);

    // how long should each image be displayed?
    this.tileDisplayDuration = tileDispDuration;

    // how long has the current image been displayed?
    this.currentDisplayTime = 0;

    // which image is currently being displayed?
    this.currentTile = 0;
  }

  TextureAnimator.prototype.update = function update(milliSec) {
    this.currentDisplayTime += milliSec;
    while (this.currentDisplayTime > this.tileDisplayDuration) {
      this.currentDisplayTime -= this.tileDisplayDuration;
      ++this.currentTile;
      if (this.currentTile == this.numberOfTiles) this.currentTile = 0;
      var currentColumn = this.currentTile % this.tilesHorizontal;
      this.texture.offset.x = currentColumn / this.tilesHorizontal;
      var currentRow = Math.floor(this.currentTile / this.tilesHorizontal);
      this.texture.offset.y = currentRow / this.tilesVertical;
    }
  };

  TextureAnimator.prototype.dispose = function dispose() {
    var img = this.texture.image;
    img.height = img.width = 0;
    this.texture.dispose();
  };

  return TextureAnimator;
}();

exports.default = TextureAnimator;

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(0);

var _Utils = __webpack_require__(4);

var _Utils2 = _interopRequireDefault(_Utils);

var _MouseEventConverter2 = __webpack_require__(55);

var _MouseEventConverter3 = _interopRequireDefault(_MouseEventConverter2);

var _ThreeEventConverter = __webpack_require__(20);

var _ThreeEventConverter2 = _interopRequireDefault(_ThreeEventConverter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ThreeMouseEventConverter = function (_MouseEventConverter) {
  _inherits(ThreeMouseEventConverter, _MouseEventConverter);

  function ThreeMouseEventConverter(wnd, doc, visualWorld, test) {
    _classCallCheck(this, ThreeMouseEventConverter);

    var _this = _possibleConstructorReturn(this, _MouseEventConverter.call(this, wnd, doc, visualWorld.element));

    _Utils2.default.extends(_this, new _ThreeEventConverter2.default(visualWorld, test));
    return _this;
  }

  ThreeMouseEventConverter.prototype.getCallback = function getCallback(object) {
    return object.object.userData.mouseCallback;
  };

  ThreeMouseEventConverter.prototype.setCoordsFromEvent = function setCoordsFromEvent(e) {
    var jElement = (0, _libs.$)(this.element);
    var offset = jElement.offset();
    this.coords.x = (e.pageX - offset.left) / jElement.width() * 2 - 1;
    this.coords.y = -((e.pageY - offset.top) / jElement.height()) * 2 + 1;
    return this.coords;
  };

  return ThreeMouseEventConverter;
}(_MouseEventConverter3.default);

exports.default = ThreeMouseEventConverter;

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(0);

var _Utils = __webpack_require__(4);

var _Utils2 = _interopRequireDefault(_Utils);

var _TouchEventConverter2 = __webpack_require__(65);

var _TouchEventConverter3 = _interopRequireDefault(_TouchEventConverter2);

var _ThreeEventConverter = __webpack_require__(20);

var _ThreeEventConverter2 = _interopRequireDefault(_ThreeEventConverter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ThreeTouchEventConverter = function (_TouchEventConverter) {
  _inherits(ThreeTouchEventConverter, _TouchEventConverter);

  function ThreeTouchEventConverter(wnd, doc, visualWorld, test) {
    _classCallCheck(this, ThreeTouchEventConverter);

    var _this = _possibleConstructorReturn(this, _TouchEventConverter.call(this, wnd, doc, visualWorld.element));

    _Utils2.default.extends(_this, new _ThreeEventConverter2.default(visualWorld, test));
    return _this;
  }

  ThreeTouchEventConverter.prototype.getCallback = function getCallback(object) {
    return object.object.userData.touchCallback;
  };

  ThreeTouchEventConverter.prototype.setCoordsFromEvent = function setCoordsFromEvent(e) {
    var jElement = (0, _libs.$)(this.element),
        offset = jElement.offset(),
        touches = e.touches || e.originalEvent.touches,
        touch = touches.length ? touches[0] : (this.lastTouches || [{ pageX: 0, pageY: 0 }])[0],
        pageX = touch.pageX,
        pageY = touch.pageY;
    this.lastTouches = touches.length ? touches : this.lastTouches;
    this.coords.x = (pageX - offset.left) / jElement.width() * 2 - 1;
    this.coords.y = -((pageY - offset.top) / jElement.height()) * 2 + 1;
    return this.coords;
  };

  return ThreeTouchEventConverter;
}(_TouchEventConverter3.default);

exports.default = ThreeTouchEventConverter;

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _libs = __webpack_require__(0);

var _ImageFactory = __webpack_require__(8);

var _ImageFactory2 = _interopRequireDefault(_ImageFactory);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Thumbnails = function () {
  function Thumbnails(context, container, thumbnailsClb, size) {
    var _this = this;

    var props = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : { kWtoH: 210 / 297 };

    _classCallCheck(this, Thumbnails);

    this.container = container;
    this.p = props;
    this.thumbnailsClb = thumbnailsClb;
    this.size = size;
    this.canvas = (0, _libs.$)('<canvas>')[0];
    this.imageFactory = new _ImageFactory2.default(_extends({}, context, {
      renderCanvas: this.canvas,
      renderCanvasCtx: this.canvas.getContext('2d')
    }));
    this.thumbnails = [];
    for (var i = 0; i < size; ++i) {
      var info = this.thumbnailsClb(i);
      this.thumbnails.push(_extends({}, info, {
        index: i,
        loaded: info.type === 'thumbnail-image',
        heading: null,
        thumbnail: null,
        title: info.title || i
      }));
    }

    this.binds = {
      update: this.update.bind(this),
      navigate: function navigate(e) {
        e.preventDefault();
        if (_this.onNavigate) {
          var node = e.target;
          while (node && !node.dataThumbnail) {
            node = node.parentNode;
          }
          _this.onNavigate(node.dataThumbnail.index);
        }
      }
    };
    this.container.on('scroll', this.binds.update);
  }

  Thumbnails.prototype.getSize = function getSize() {
    return this.size;
  };

  Thumbnails.prototype.setEnable = function setEnable(enable) {
    this.enable = enable;
    this.update();
  };

  Thumbnails.prototype.dispose = function dispose() {
    this.container.find('a').off('click', this.binds.navigate);
    this.container.off('scroll', this.binds.update);
    this.container.html('');
    this.canvas.height = this.canvas.width = 0;
    delete this.canvas;
  };

  Thumbnails.prototype.load = function load(thumbnail) {
    var _this2 = this;

    this.loading = true;
    var wrapper = this.imageFactory.build(thumbnail, thumbnail.number === undefined ? thumbnail.index : thumbnail.number, this.p.kWtoH * 300, 300);
    wrapper.onChange = function (canvas) {
      _this2.setImage(thumbnail, canvas.toDataURL('image/png'));
      thumbnail.loaded = true;
      wrapper.dispose();
      _this2.loading = false;
      Promise.resolve().then(function () {
        return _this2.update();
      });
    };
  };

  Thumbnails.prototype.getActive = function getActive() {
    var first = this.container.scrollTop(),
        last = first + this.container.height(),
        res = [];
    for (var _iterator = this.thumbnails, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var thumbnail = _ref;

      if (Math.max(thumbnail.first, first) < Math.min(thumbnail.last, last)) {
        res.push(thumbnail);
      }
    }
    return res;
  };

  Thumbnails.prototype.update = function update() {
    if (!this.loading && this.canvas && this.enable) {
      if (!this.built) {
        this.render();
      }
      var active = this.getActive();
      for (var _iterator2 = active, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
        var _ref2;

        if (_isArray2) {
          if (_i2 >= _iterator2.length) break;
          _ref2 = _iterator2[_i2++];
        } else {
          _i2 = _iterator2.next();
          if (_i2.done) break;
          _ref2 = _i2.value;
        }

        var thumbnail = _ref2;

        if (!thumbnail.loaded) {
          this.load(thumbnail);
          break;
        }
      }
    }
  };

  Thumbnails.prototype.setImage = function setImage(thumbnail, img) {
    thumbnail.img = img;
    thumbnail.thumbnail.css('background-image', ['url(\'', img, '\')'].join(''));
    thumbnail.thumbnail.removeClass('loading');
  };

  Thumbnails.prototype.render = function render() {
    var elements = ['<div class="thumbnails">'];
    for (var i = 0; i < this.size; ++i) {
      elements.push(['<div class="item"><a href="#"><div class="thumbnail loading"></div></a><div class="heading"><a href="#" title="', i + 1, '">', i + 1, '</a></div></div>'].join(''));
    }
    elements.push('</div>');
    this.container.append(elements.join(''));
    var items = this.container.find('.item'),
        base = this.container.find('.thumbnails').offset().top;
    for (var _i3 = 0; _i3 < items.length; ++_i3) {
      var item = (0, _libs.$)(items[_i3]);
      this.thumbnails[_i3].heading = item.find('.heading');
      this.thumbnails[_i3].thumbnail = item.find('.thumbnail');
      this.thumbnails[_i3].first = item.offset().top - base;
      this.thumbnails[_i3].last = this.thumbnails[_i3].first + item.height();
      if (this.thumbnails[_i3].loaded) {
        this.setImage(this.thumbnails[_i3], this.thumbnails[_i3].src);
      }
      var as = item.find('a');
      for (var j = 0; j < as.length; ++j) {
        var a = as[j];
        a.dataThumbnail = this.thumbnails[_i3];
      }
    }
    this.container.find('a').on('click', this.binds.navigate);
    this.built = true;
  };

  return Thumbnails;
}();

exports.default = Thumbnails;

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(0);

var _EventConverter2 = __webpack_require__(6);

var _EventConverter3 = _interopRequireDefault(_EventConverter2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TouchConverter = function (_EventConverter) {
  _inherits(TouchConverter, _EventConverter);

  function TouchConverter(wnd, doc, element) {
    _classCallCheck(this, TouchConverter);

    var _this = _possibleConstructorReturn(this, _EventConverter.call(this, wnd, doc));

    _this.element = element;
    _this.binds = {
      convert: _this.convert.bind(_this)
    };
    (0, _libs.$)(_this.element).on('touchstart touchmove', _this.binds.convert);
    (0, _libs.$)(_this.doc).on('touchend', _this.binds.convert);
    return _this;
  }

  TouchConverter.prototype.dispose = function dispose() {
    (0, _libs.$)(this.element).off('touchstart touchmove', this.binds.convert);
    (0, _libs.$)(this.doc).off('touchend', this.binds.convert);
  };

  return TouchConverter;
}(_EventConverter3.default);

exports.default = TouchConverter;

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _libs = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var View = function () {
  View.classProperty = function classProperty(ctrl, className, value) {
    if (value) {
      ctrl.addClass(className);
    } else {
      ctrl.removeClass(className);
    }
  };

  View.attributeProperty = function attributeProperty(ctrl, attributeName, value) {
    if (value) {
      ctrl.attr(attributeName, value);
    } else {
      ctrl.removeAttr(attributeName);
    }
  };

  View.callHandlers = function callHandlers(handlers, id, e, data) {
    for (var _iterator = handlers, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var handler = _ref;

      if (handler[id]) {
        handler[id](e, data);
      } else if (handler.handleDefault) {
        handler.handleDefault(id, e, data);
      }
    }
  };

  View.handleEvent = function handleEvent(id, getHandlers, e, data) {
    View.callHandlers(getHandlers(id), id, e, data);
  };

  View.handleLinkEvent = function handleLinkEvent(e) {
    e.preventDefault();
    if (!this.ctrl.hasClass('disabled')) {
      View.handleEvent(this.id, this.getHandlers, e);
    }
  };

  View.handleInputEvent = function handleInputEvent(e) {
    View.handleEvent(this.id, this.getHandlers, e, e.target.value);
  };

  View.handleFormEvent = function handleFormEvent(e) {
    e.preventDefault();
    View.handleEvent(this.id, this.getHandlers, e);
  };

  // virtual functions {


  View.prototype.getLinks = function getLinks() {
    return null;
  };

  View.prototype.getWidgets = function getWidgets() {
    return null;
  };

  View.prototype.getInputs = function getInputs() {
    return null;
  };

  View.prototype.getTexts = function getTexts() {
    return null;
  };

  View.prototype.getTemplate = function getTemplate() {
    return {};
  };

  View.prototype.getHandlers = function getHandlers(id) {
    return this.handlers;
  };
  // }

  View.prototype.callLater = function callLater(handlers, id, e, data, ms) {
    var _this = this;

    this.pendings[id] = {
      timestamp: new Date().getTime()
    };
    setTimeout(function () {
      var timestamp = new Date().getTime(),
          pending = _this.pendings[id];
      if (pending && timestamp - pending.timestamp >= ms) {
        View.callHandlers(handlers, id, e, data);
        delete _this.pendings[id];
      }
    }, ms);
  };

  // loadFiles(urls, ready, failure) {
  //   let done = Promise.resolve();
  //   for(let url of urls) {
  //     done = done.then(()=> {
  //       return new Promise((resolve, reject)=> {
  //         $.get(url, (res)=> {
  //           ready(res, url);
  //           resolve();
  //         }).fail((res)=> {
  //           if(failure && failure(res, url)) {
  //             resolve();
  //           }
  //           else {
  //             reject(res);
  //           }
  //         });
  //       });
  //     });
  //   }
  //   return done;
  // }

  View.prototype.loadFiles = function loadFiles(urls, files) {
    var tasks = [];

    var _loop = function _loop() {
      if (_isArray2) {
        if (_i2 >= _iterator2.length) return 'break';
        _ref2 = _iterator2[_i2++];
      } else {
        _i2 = _iterator2.next();
        if (_i2.done) return 'break';
        _ref2 = _i2.value;
      }

      var name = _ref2;

      files[name] = [];

      var _loop2 = function _loop2() {
        if (_isArray3) {
          if (_i3 >= _iterator3.length) return 'break';
          _ref3 = _iterator3[_i3++];
        } else {
          _i3 = _iterator3.next();
          if (_i3.done) return 'break';
          _ref3 = _i3.value;
        }

        var url = _ref3;

        tasks.push(new Promise(function (resolve, reject) {
          _libs.$.get(url, function (data) {
            files[name].push({ url: url, data: data });
            resolve();
          }).fail(function (res) {
            reject(res);
          });
        }));
      };

      for (var _iterator3 = urls[name], _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
        var _ref3;

        var _ret2 = _loop2();

        if (_ret2 === 'break') break;
      }
    };

    for (var _iterator2 = Object.keys(urls), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
      var _ref2;

      var _ret = _loop();

      if (_ret === 'break') break;
    }
    return Promise.all(tasks);
  };

  View.prototype.urlResolver = function urlResolver(baseUrl, url) {
    url = url.replace(/\\/g, '/');
    if (url.charAt(0) !== '/' && url.toLowerCase().search('data:') !== 0) {
      baseUrl = baseUrl.replace(/\\/g, '/');
      var p = baseUrl.lastIndexOf('/');
      url = (~p ? baseUrl.substr(0, p + 1) : '') + url;

      var parts = url.split('/');
      url = [];
      for (var _iterator4 = parts, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {
        var _ref4;

        if (_isArray4) {
          if (_i4 >= _iterator4.length) break;
          _ref4 = _iterator4[_i4++];
        } else {
          _i4 = _iterator4.next();
          if (_i4.done) break;
          _ref4 = _i4.value;
        }

        var part = _ref4;

        if (part === '.') {} else if (part === '..') {
          if (url.length && !(url.length === 1 && url[0] === '')) {
            url.pop();
          }
        } else {
          url.push(part);
        }
      }
      url = url.join('/');
    }

    return url;
  };

  View.prototype.objToAttrsStr = function objToAttrsStr(o) {
    var res = [];
    for (var _iterator5 = Object.keys(o), _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {
      var _ref5;

      if (_isArray5) {
        if (_i5 >= _iterator5.length) break;
        _ref5 = _iterator5[_i5++];
      } else {
        _i5 = _iterator5.next();
        if (_i5.done) break;
        _ref5 = _i5.value;
      }

      var _name = _ref5;

      res.push([_name, '="', o[_name], '"'].join(''));
    }
    return res.join(' ');
  };

  View.prototype.checkIframeSize = function checkIframeSize() {
    if (this.frame) {
      if (Math.abs(this.frame.width - this.parentContainer.width()) > 1 || Math.abs(this.frame.height - this.parentContainer.height()) > 1) {
        this.onResize();
      }
      setTimeout(this.checkIframeSize.bind(this), 250);
    }
  };

  View.prototype.onResize = function onResize() {
    this.frame.width = this.parentContainer.width();
    this.frame.height = this.parentContainer.height();
  };

  View.prototype.translate = function translate(html) {
    return html.replace(/<\$tr>(.*)<\/\$tr>/gi, function (s0, s1) {
      return (0, _libs.tr)(s1);
    });
  };

  View.prototype.fireLinksOnLoadEvent = function fireLinksOnLoadEvent() {
    var _this2 = this;

    if (this.templateObject && this.templateObject.linkLoaded) {
      var loaded = true;

      var _loop3 = function _loop3() {
        if (_isArray6) {
          if (_i6 >= _iterator6.length) return 'break';
          _ref6 = _iterator6[_i6++];
        } else {
          _i6 = _iterator6.next();
          if (_i6.done) return 'break';
          _ref6 = _i6.value;
        }

        var jLink = _ref6;

        var link = jLink[0];
        var img = new Image();
        img.onerror = function () {
          return _this2.templateObject.linkLoaded(link);
        };
        img.src = link.href;
      };

      for (var _iterator6 = this.jLinks, _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : _iterator6[Symbol.iterator]();;) {
        var _ref6;

        var _ret3 = _loop3();

        if (_ret3 === 'break') break;
      }
    }
  };

  function View(parentContainer, onLoad) {
    var _this3 = this;

    var template = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    _classCallCheck(this, View);

    this.pendings = {};
    this.binds = {
      onResize: this.onResize.bind(this)
    };
    this.parentContainer = (0, _libs.$)(parentContainer);
    this.isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
    this.parentContainer.html('<iframe style="border: 0;' + (this.isIOS ? '' : ' width: 100%; height: 100%') + '" scrolling="no"></iframe>');

    this.frame = this.parentContainer.find('iframe')[0];
    if (this.frame.contentWindow.stop) {
      this.frame.contentWindow.stop();
    }
    if (this.isIOS) {
      (0, _libs.$)(this.parentContainer[0].ownerDocument.defaultView).on('resize', this.binds.onResize);
      this.onResize();
      setTimeout(this.checkIframeSize.bind(this), 250);
    }

    this.container = (0, _libs.$)(this.frame.contentDocument.body);
    this.container.css('margin', '0');
    this.head = (0, _libs.$)(this.frame.contentDocument.head);
    this.onLoad = onLoad;
    this.handlers = [];

    var script = template.html ? template.script : this.getTemplate().script;
    var urls = void 0,
        files = void 0,
        links = void 0,
        templateName = void 0;
    if (typeof template === 'function') {
      urls = {};
      files = template();
      links = [];
      templateName = files.name;
    } else {
      links = template.links || this.getTemplate().links;
      urls = {
        styles: template.styles || this.getTemplate().styles,
        html: [template.html || this.getTemplate().html],
        script: script ? [script] : []
      };
      templateName = template.name;
      files = {};
    }
    if (templateName) {
      this.container.addClass(templateName);
    }
    this.loadFiles(urls, files).then(function () {
      var _loop4 = function _loop4() {
        if (_isArray7) {
          if (_i7 >= _iterator7.length) return 'break';
          _ref7 = _iterator7[_i7++];
        } else {
          _i7 = _iterator7.next();
          if (_i7.done) return 'break';
          _ref7 = _i7.value;
        }

        var style = _ref7;

        var textCss = style.data,
            url = style.url;
        textCss = textCss.replace(/url\(['"](.*?)["']\)/g, function (r, r1) {
          return ['url(\'', _this3.urlResolver(url, r1), '\')'].join('');
        });
        (0, _libs.$)('<style type="text/css">' + textCss + '</style>').appendTo(_this3.head);
      };

      for (var _iterator7 = files.styles, _isArray7 = Array.isArray(_iterator7), _i7 = 0, _iterator7 = _isArray7 ? _iterator7 : _iterator7[Symbol.iterator]();;) {
        var _ref7;

        var _ret4 = _loop4();

        if (_ret4 === 'break') break;
      }

      _this3.container.html(_this3.translate(files.html[0].data));

      _this3.jLinks = [];
      for (var _iterator8 = links, _isArray8 = Array.isArray(_iterator8), _i8 = 0, _iterator8 = _isArray8 ? _iterator8 : _iterator8[Symbol.iterator]();;) {
        var _ref8;

        if (_isArray8) {
          if (_i8 >= _iterator8.length) break;
          _ref8 = _iterator8[_i8++];
        } else {
          _i8 = _iterator8.next();
          if (_i8.done) break;
          _ref8 = _i8.value;
        }

        var _link = _ref8;

        _this3.jLinks.push((0, _libs.$)(['<link ', _this3.objToAttrsStr(_link), '>'].join('')).appendTo(_this3.head));
      }

      if (files.script[0]) {
        var init = eval(files.script[0].data);
        _this3.templateObject = init(_this3.container);
      } else {
        _this3.templateObject = {};
      }

      _this3.linkControls = {};
      for (var _iterator9 = _this3.getLinks(), _isArray9 = Array.isArray(_iterator9), _i9 = 0, _iterator9 = _isArray9 ? _iterator9 : _iterator9[Symbol.iterator]();;) {
        var _ref9;

        if (_isArray9) {
          if (_i9 >= _iterator9.length) break;
          _ref9 = _iterator9[_i9++];
        } else {
          _i9 = _iterator9.next();
          if (_i9.done) break;
          _ref9 = _i9.value;
        }

        var id = _ref9;

        _this3.linkControls[id] = _this3.container.find('.' + id);
        _this3.binds[id] = View.handleLinkEvent.bind({ getHandlers: _this3.getHandlers.bind(_this3), id: id, ctrl: _this3.linkControls[id] });
        _this3.linkControls[id].on('click', _this3.binds[id]);
      }

      _this3.widgetControls = {};
      for (var _iterator10 = _this3.getWidgets(), _isArray10 = Array.isArray(_iterator10), _i10 = 0, _iterator10 = _isArray10 ? _iterator10 : _iterator10[Symbol.iterator]();;) {
        var _ref10;

        if (_isArray10) {
          if (_i10 >= _iterator10.length) break;
          _ref10 = _iterator10[_i10++];
        } else {
          _i10 = _iterator10.next();
          if (_i10.done) break;
          _ref10 = _i10.value;
        }

        var _id = _ref10;

        _this3.widgetControls[_id] = _this3.container.find('.' + _id);
      }

      _this3.inputControls = {};
      for (var _iterator11 = _this3.getInputs(), _isArray11 = Array.isArray(_iterator11), _i11 = 0, _iterator11 = _isArray11 ? _iterator11 : _iterator11[Symbol.iterator]();;) {
        var _ref11;

        if (_isArray11) {
          if (_i11 >= _iterator11.length) break;
          _ref11 = _iterator11[_i11++];
        } else {
          _i11 = _iterator11.next();
          if (_i11.done) break;
          _ref11 = _i11.value;
        }

        var _id2 = _ref11;

        _this3.inputControls[_id2] = _this3.container.find('.' + _id2);
        _this3.binds[_id2] = View.handleInputEvent.bind({ getHandlers: _this3.getHandlers.bind(_this3), id: _id2, ctrl: _this3.inputControls[_id2] });
        _this3.inputControls[_id2].on('keyup', _this3.binds[_id2]);
      }

      _this3.formControls = {};
      for (var _iterator12 = _this3.getForms(), _isArray12 = Array.isArray(_iterator12), _i12 = 0, _iterator12 = _isArray12 ? _iterator12 : _iterator12[Symbol.iterator]();;) {
        var _ref12;

        if (_isArray12) {
          if (_i12 >= _iterator12.length) break;
          _ref12 = _iterator12[_i12++];
        } else {
          _i12 = _iterator12.next();
          if (_i12.done) break;
          _ref12 = _i12.value;
        }

        var _id3 = _ref12;

        _this3.formControls[_id3] = _this3.container.find('.' + _id3);
        _this3.binds[_id3] = View.handleFormEvent.bind({ getHandlers: _this3.getHandlers.bind(_this3), id: _id3, ctrl: _this3.formControls[_id3] });
        _this3.formControls[_id3].on('submit', _this3.binds[_id3]);
      }

      _this3.textControls = {};
      for (var _iterator13 = _this3.getTexts(), _isArray13 = Array.isArray(_iterator13), _i13 = 0, _iterator13 = _isArray13 ? _iterator13 : _iterator13[Symbol.iterator]();;) {
        var _ref13;

        if (_isArray13) {
          if (_i13 >= _iterator13.length) break;
          _ref13 = _iterator13[_i13++];
        } else {
          _i13 = _iterator13.next();
          if (_i13.done) break;
          _ref13 = _i13.value;
        }

        var _id4 = _ref13;

        _this3.textControls[_id4] = _this3.container.find('.' + _id4);
      }

      _this3.stateSetters = [{
        map: _this3.linkControls,
        setter: _this3.setLinkControlState.bind(_this3)
      }, {
        map: _this3.widgetControls,
        setter: _this3.setWidgetControlState.bind(_this3)
      }, {
        map: _this3.inputControls,
        setter: _this3.setInputControlState.bind(_this3)
      }, {
        map: _this3.textControls,
        setter: _this3.setTextControlState.bind(_this3)
      }];

      _this3.initView();

      if (_this3.onLoad) {
        _this3.onLoad();
      }

      _this3.fireLinksOnLoadEvent();
    }).catch(function (res) {
      return console.error(res);
    });
  }

  View.prototype.dispose = function dispose() {
    delete this.textControls;
    for (var _iterator14 = this.getLinks(), _isArray14 = Array.isArray(_iterator14), _i14 = 0, _iterator14 = _isArray14 ? _iterator14 : _iterator14[Symbol.iterator]();;) {
      var _ref14;

      if (_isArray14) {
        if (_i14 >= _iterator14.length) break;
        _ref14 = _iterator14[_i14++];
      } else {
        _i14 = _iterator14.next();
        if (_i14.done) break;
        _ref14 = _i14.value;
      }

      var id = _ref14;

      this.linkControls[id].off('click', this.binds[id]);
    }
    delete this.linkControls;
    delete this.widgetControls;
    for (var _iterator15 = this.getInputs(), _isArray15 = Array.isArray(_iterator15), _i15 = 0, _iterator15 = _isArray15 ? _iterator15 : _iterator15[Symbol.iterator]();;) {
      var _ref15;

      if (_isArray15) {
        if (_i15 >= _iterator15.length) break;
        _ref15 = _iterator15[_i15++];
      } else {
        _i15 = _iterator15.next();
        if (_i15.done) break;
        _ref15 = _i15.value;
      }

      var _id5 = _ref15;

      this.inputControls[_id5].off('keyup', this.binds[_id5]);
    }
    delete this.inputControls;
    for (var _iterator16 = this.getForms(), _isArray16 = Array.isArray(_iterator16), _i16 = 0, _iterator16 = _isArray16 ? _iterator16 : _iterator16[Symbol.iterator]();;) {
      var _ref16;

      if (_isArray16) {
        if (_i16 >= _iterator16.length) break;
        _ref16 = _iterator16[_i16++];
      } else {
        _i16 = _iterator16.next();
        if (_i16.done) break;
        _ref16 = _i16.value;
      }

      var _id6 = _ref16;

      this.formControls[_id6].off('submit', this.binds[_id6]);
    }
    delete this.formControls;

    !this.templateObject.dispose || this.templateObject.dispose();
    delete this.templateObject;

    if (this.isIOS) {
      (0, _libs.$)(this.parentContainer[0].ownerDocument.defaultView).off('resize', this.binds.onResize);
    }
    this.parentContainer.html('');
    delete this.frame;
  };

  View.prototype.getContainer = function getContainer() {
    return this.container[0];
  };

  View.prototype.getParentContainer = function getParentContainer() {
    return this.parentContainer[0];
  };

  View.prototype.addHandler = function addHandler(handler) {
    this.handlers.push(handler);
  };

  View.prototype.initView = function initView() {};

  View.setControlState = function setControlState(ctrl, defaults, state, stateHandlers) {
    if (ctrl && ctrl[0]) {
      var st = _extends({}, defaults, state);
      for (var _name2 in st) {
        if (st.hasOwnProperty(_name2) && stateHandlers[_name2]) {
          stateHandlers[_name2](ctrl, st[_name2]);
        }
      }
    }
  };

  View.prototype.setLinkControlState = function setLinkControlState(id, state) {
    View.setControlState(this.linkControls[id], {
      visible: true,
      active: false,
      enable: true
    }, state, View.linkStateHandlers);
  };

  View.prototype.setWidgetControlState = function setWidgetControlState(id, state) {
    View.setControlState(this.widgetControls[id], {
      visible: true,
      active: false,
      enable: true
    }, state, View.widgetStateHandlers);
  };

  View.prototype.setInputControlState = function setInputControlState(id, state) {
    View.setControlState(this.inputControls[id], {
      visible: true,
      enable: true,
      value: ''
    }, state, View.inputStateHandlers);
  };

  View.prototype.setTextControlState = function setTextControlState(id, state) {
    View.setControlState(this.textControls[id], {
      visible: true,
      value: ''
    }, state, View.textStateHandlers);
  };

  View.prototype.onItemStateChanged = function onItemStateChanged() {};

  View.prototype.setState = function setState(id, state) {
    for (var _iterator17 = this.stateSetters, _isArray17 = Array.isArray(_iterator17), _i17 = 0, _iterator17 = _isArray17 ? _iterator17 : _iterator17[Symbol.iterator]();;) {
      var _ref17;

      if (_isArray17) {
        if (_i17 >= _iterator17.length) break;
        _ref17 = _iterator17[_i17++];
      } else {
        _i17 = _iterator17.next();
        if (_i17.done) break;
        _ref17 = _i17.value;
      }

      var item = _ref17;

      if (item.map[id]) {
        item.setter(id, state);
        this.onItemStateChanged(id, state);
        break;
      }
    }
  };

  return View;
}();

View.linkStateHandlers = {
  visible: function visible(ctrl, value) {
    return View.classProperty(ctrl, 'hidden', !value);
  },
  active: function active(ctrl, value) {
    return View.classProperty(ctrl, 'active', value);
  },
  enable: function enable(ctrl, value) {
    return View.classProperty(ctrl, 'disabled', !value);
  }
};
View.widgetStateHandlers = {
  visible: function visible(ctrl, value) {
    return View.classProperty(ctrl, 'hidden', !value);
  },
  active: function active(ctrl, value) {
    return View.classProperty(ctrl, 'active', value);
  },
  enable: function enable(ctrl, value) {
    return View.classProperty(ctrl, 'disabled', !value);
  }
};
View.inputStateHandlers = {
  visible: function visible(ctrl, value) {
    return View.classProperty(ctrl, 'hidden', !value);
  },
  value: function value(ctrl, _value) {
    return ctrl[0].value = _value;
  },
  enable: function enable(ctrl, value) {
    return View.attributeProperty(ctrl, 'disabled', !value);
  }
};
View.textStateHandlers = {
  visible: function visible(ctrl, value) {
    return View.classProperty(ctrl, 'hidden', !value);
  },
  value: function value(ctrl, _value2) {
    return ctrl.text(_value2);
  }
};
exports.default = View;

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _libs = __webpack_require__(0);

var _Orbit = __webpack_require__(57);

var _Orbit2 = _interopRequireDefault(_Orbit);

var _ThreeMouseEventConverter = __webpack_require__(62);

var _ThreeMouseEventConverter2 = _interopRequireDefault(_ThreeMouseEventConverter);

var _ThreeTouchEventConverter = __webpack_require__(63);

var _ThreeTouchEventConverter2 = _interopRequireDefault(_ThreeTouchEventConverter);

var _Drag = __webpack_require__(49);

var _Drag2 = _interopRequireDefault(_Drag);

var _CSS3DRenderer = __webpack_require__(12);

var _CSS3DRenderer2 = _interopRequireDefault(_CSS3DRenderer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var VisualWorld = function (_THREE$EventDispatche) {
  _inherits(VisualWorld, _THREE$EventDispatche);

  function VisualWorld(wnd, doc, container) {
    var useHelpers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

    _classCallCheck(this, VisualWorld);

    var _this = _possibleConstructorReturn(this, _THREE$EventDispatche.call(this));

    _this.checkUpdateFlag = true;
    _this.wnd = wnd;
    _this.doc = doc;
    _this.jContainer = container;
    _this.renderCallbacks = [];
    _this.diag = _this.getDiag();

    _this.clock = new _libs.THREE.Clock();

    _this.raycaster = new _libs.THREE.Raycaster();

    _this.scene = new _libs.THREE.Scene();
    _this.cssScene = new _libs.THREE.Scene();

    _this.camera = new _libs.THREE.PerspectiveCamera(30, _this.width() / _this.height(), 0.2, 2000);
    var scale = 1;

    _this.camera.position.x = 0;
    _this.camera.position.y = 5.5 * scale;
    _this.camera.position.z = 0;

    _this.renderer = new _libs.THREE.WebGLRenderer({ alpha: true, precision: VisualWorld.getPrecision(), antialias: true });
    _this.renderer.setClearColor(0x000000, 0);
    _this.renderer.setPixelRatio(_this.wnd.devicePixelRatio);
    _this.renderer.setSize(_this.width(), _this.height());

    _this.jContainer.append(_this.renderer.domElement);

    _this.cssRenderer = new _CSS3DRenderer2.default();
    _this.cssRenderer.setSize(_this.width(), _this.height());
    (0, _libs.$)(_this.cssRenderer.domElement).css({
      position: 'absolute',
      top: 0,
      margin: 0,
      padding: 0
    });
    _this.jContainer.append(_this.cssRenderer.domElement);

    _this.element = _this.cssRenderer.domElement;

    _this.textureLoader = new _libs.THREE.TextureLoader();

    _this.scene.add(new _libs.THREE.AmbientLight(0xD0D0D0)); //0xC0C0C0

    _this.light = new _libs.THREE.DirectionalLight(0x404040, 1);
    _this.light.position.set(0, 6 * scale, 0);
    _this.light.castShadow = false;
    // const d = 20*scale;
    // this.light.shadow.camera.left = -d;
    // this.light.shadow.camera.right = d;
    // this.light.shadow.camera.top = d;
    // this.light.shadow.camera.bottom = -d;
    // this.light.shadow.camera.near = 1*scale;
    // this.light.shadow.camera.far = 25*scale;
    // this.light.shadow.mapSize.x = 1024;
    // this.light.shadow.mapSize.y = 1024;
    _this.scene.add(_this.light);

    _this.controls = new _Orbit2.default(_this.camera, _this.element);
    _this.controls.target.y = 0.5;

    var cssScene = (0, _libs.$)(_this.cssRenderer.domElement).find('div'),
        tmpVector = new _libs.THREE.Vector3();
    _this.controls.addEventListener('change', function () {
      _this.camera.getWorldDirection(tmpVector);
      cssScene.css('display', tmpVector.y - _this.camera.position.y > 0 ? 'none' : 'block');
      _this.updateThree();
    });

    if (useHelpers) {
      _this.scene.add(new _libs.THREE.AxisHelper(5));
    }

    _this.binds = {
      onWindowResize: _this.onWindowResize.bind(_this),
      animate: _this.animate.bind(_this)
    };

    (0, _libs.$)(_this.wnd).on('resize', _this.binds.onWindowResize);

    _this.mouseEvents = new _ThreeMouseEventConverter2.default(_this.wnd, _this.doc, _this);
    _this.touchEvents = new _ThreeTouchEventConverter2.default(_this.wnd, _this.doc, _this);
    var filterData = { type: 'mousemove' };
    _this.mouseEvents.filter = function (element, e) {
      var types = ['mouseenter', 'mouseover', 'mouseleave', 'mouseout'],
          contains = function contains(p, c) {
        return p === c || _libs.$.contains(p, c);
      };
      if (e.type === 'mousemove') {
        filterData.pageX = e.pageX;
        filterData.pageY = e.pageY;
      }
      return e.relatedTarget && ~types.indexOf(e.type) && contains(element, e.target) && contains(element, e.relatedTarget) ? _extends({}, e, filterData) : e;
    };
    _this.drag = new _Drag2.default(_this.wnd, _this.doc, _this);

    _this.onWindowResize();
    _this.animate();
    return _this;
  }

  VisualWorld.prototype.getDiag = function getDiag() {
    var test = (0, _libs.$)('<div style="height: 1in; width: 1in; display: none;"></div>').appendTo(this.jContainer),
        r = new _libs.THREE.Vector2(screen.width / test.width(), screen.height / test.height());
    test.remove();
    return r.length();
  };

  VisualWorld.prototype.updateThree = function updateThree() {
    this.light.userData.needsUpdate = true;
  };

  VisualWorld.prototype.dispose = function dispose() {
    delete this.binds.animate;
    (0, _libs.$)(this.wnd).off('resize', this.binds.onWindowResize);
    this.mouseEvents.dispose();
    this.touchEvents.dispose();
    this.drag.dispose();
    this.controls.dispose();
  };

  VisualWorld.prototype.width = function width() {
    return this.jContainer.width();
  };

  VisualWorld.prototype.height = function height() {
    return this.jContainer.height();
  };

  VisualWorld.prototype.setExtraLighting = function setExtraLighting(v) {
    this.light.intensity = v;
  };

  VisualWorld.prototype.isMobile = function isMobile() {
    return this.diag < 11;
  };

  VisualWorld.prototype.getOrbit = function getOrbit() {
    return this.controls;
  };

  VisualWorld.prototype.setControlsState = function setControlsState(state) {
    this.controls.enabled = state;
  };

  VisualWorld.prototype.getControlsState = function getControlsState() {
    return this.controls.enabled;
  };

  VisualWorld.prototype.onWindowResize = function onWindowResize() {
    var _this2 = this;

    if (this.width() > 1 && this.height() > 1) {
      var updateCamera = function updateCamera(camera) {
        camera.aspect = _this2.width() / _this2.height();
        camera.updateProjectionMatrix();
      },
          updateRenderer = function updateRenderer(renderer) {
        renderer.setSize(_this2.width(), _this2.height());
      };

      updateCamera(this.camera);
      updateRenderer(this.renderer);
      updateRenderer(this.cssRenderer);
      this.updateThree();

      this.dispatchEvent({ type: 'resize' });
    } else {
      setTimeout(function () {
        _this2.onWindowResize();
      }, 250);
    }
  };

  VisualWorld.prototype.addObject = function addObject(object) {
    this.scene.add(object);
  };

  VisualWorld.prototype.addCssObject = function addCssObject(object) {
    this.cssScene.add(object);
  };

  VisualWorld.prototype.removeCssObject = function removeCssObject(object) {
    this.cssScene.remove(object);
  };

  VisualWorld.prototype.removeObject = function removeObject(object) {
    this.scene.remove(object);
  };

  VisualWorld.prototype.animate = function animate() {
    if (this.binds.animate) {
      requestAnimationFrame(this.binds.animate);
    }
    this.render();
  };

  VisualWorld.prototype.addRenderCallback = function addRenderCallback(clb) {
    this.renderCallbacks.push(clb);
  };

  VisualWorld.prototype.removeRenderCallback = function removeRenderCallback(clb) {
    var i = this.renderCallbacks.indexOf(clb);
    if (~i) {
      this.renderCallbacks.splice(i, 1);
    }
  };

  VisualWorld.prototype.render = function render() {
    var deltaTime = this.clock.getDelta();
    this.controls.update(deltaTime);
    for (var _iterator = this.renderCallbacks, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var clb = _ref;

      clb(deltaTime);
    }
    this.cssRenderer.render(this.cssScene, this.camera);
    var render = true;
    if (this.checkUpdateFlag) {
      render = false;
      for (var _iterator2 = this.scene.children, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
        var _ref2;

        if (_isArray2) {
          if (_i2 >= _iterator2.length) break;
          _ref2 = _iterator2[_i2++];
        } else {
          _i2 = _iterator2.next();
          if (_i2.done) break;
          _ref2 = _i2.value;
        }

        var o = _ref2;

        render = render || o.userData.needsUpdate;
        o.userData.needsUpdate = false;
      }
    }
    if (render) {
      this.renderer.render(this.scene, this.camera);
    }
  };

  VisualWorld.getPrecision = function getPrecision() {
    var scene = new _libs.THREE.Scene();
    scene.add(new _libs.THREE.AmbientLight(0xffffff));

    var camera = new _libs.THREE.PerspectiveCamera(30, 1, 1, 100);
    camera.position.set(0, 0, 1);
    camera.lookAt(0, 0, 0);

    var renderer = new _libs.THREE.WebGLRenderer();
    renderer.setClearColor(0xffffff);
    renderer.setSize(1, 1);

    var c = document.createElement('canvas'),
        ctx = c.getContext('2d');
    c.width = c.height = 1;
    ctx.fillStyle = '#ff0000';
    ctx.fillRect(0, 0, c.width, c.height);
    var t = new _libs.THREE.Texture(c);
    t.needsUpdate = true;

    scene.add(new _libs.THREE.Mesh(new _libs.THREE.PlaneGeometry(1, 1, 1, 1), new _libs.THREE.MeshPhongMaterial({ map: t })));

    renderer.render(scene, camera);

    function getPixel(c, x, y) {
      var ps = new Uint8Array(4);
      c.readPixels(x, y, 1, 1, c.RGBA, c.UNSIGNED_BYTE, ps);
      return ps;
    }
    var p = getPixel(renderer.domElement.getContext('webgl') || renderer.domElement.getContext('experimental-webgl'), 0, 0);
    return p[0] === 255 && p[1] === 0 && p[2] === 0 ? 'highp' : 'mediump';
  };

  return VisualWorld;
}(_libs.THREE.EventDispatcher);

exports.default = VisualWorld;

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _Controller2 = __webpack_require__(15);

var _Controller3 = _interopRequireDefault(_Controller2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var WidgetController = function (_Controller) {
  _inherits(WidgetController, _Controller);

  function WidgetController(view) {
    _classCallCheck(this, WidgetController);

    var _this = _possibleConstructorReturn(this, _Controller.call(this));

    _this.view = view;
    _this.visible = false;
    return _this;
  }

  WidgetController.prototype.togle = function togle() {
    this.visible = !this.visible;
    this.fireChange();
  };

  WidgetController.prototype.hide = function hide() {
    this.visible = false;
    this.fireChange();
  };

  WidgetController.prototype.fireChange = function fireChange() {
    if (this.onChange) {
      this.onChange();
    }
    this.updateView();
  };

  WidgetController.prototype.updateView = function updateView() {
    if (this.view) {
      this.view.setState('widFloatWnd', {
        enable: true,
        visible: this.visible,
        active: false
      });
    }
  };

  return WidgetController;
}(_Controller3.default);

exports.default = WidgetController;

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var YouTubeApi = function () {
  function YouTubeApi() {
    _classCallCheck(this, YouTubeApi);
  }

  YouTubeApi.init = function init() {
    if (!YouTubeApi.task) {
      YouTubeApi.task = new Promise(function (resolve) {
        if (!window['YT']) {
          window['YT'] = {
            loading: 0,
            loaded: 0
          };
        }
        if (!window['YTConfig']) {
          window['YTConfig'] = {
            'host': 'http://www.youtube.com'
          };
        }
        if (!YT.loading) {
          YT.loading = 1;
          (function () {
            var l = [];
            YT.ready = function (f) {
              if (YT.loaded) {
                f();
              } else {
                l.push(f);
              }
            };
            window.onYTReady = function () {
              YT.loaded = 1;
              for (var i = 0; i < l.length; i++) {
                try {
                  l[i]();
                } catch (e) {}
              }
              resolve();
            };
            YT.setConfig = function (c) {
              for (var k in c) {
                if (c.hasOwnProperty(k)) {
                  YTConfig[k] = c[k];
                }
              }
            };
            var a = document.createElement('script');
            a.type = 'text/javascript';
            a.id = 'www-widgetapi-script';
            a.src = 'https://s.ytimg.com/yts/jsbin/www-widgetapi-vfldn1jRM/www-widgetapi.js';
            a.async = false;
            var c = document.currentScript;
            if (c) {
              var n = c.nonce || c.getAttribute('nonce');
              if (n) {
                a.setAttribute('nonce', n);
              }
            }
            var b = document.getElementsByTagName('script')[0];
            b.parentNode.insertBefore(a, b);
          })();
        }
      });
    }
    return YouTubeApi.task;
  };

  return YouTubeApi;
}();

exports.default = YouTubeApi;

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _Target2 = __webpack_require__(22);

var _Target3 = _interopRequireDefault(_Target2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var CircleTarget = function (_Target) {
  _inherits(CircleTarget, _Target);

  function CircleTarget(x, y, r) {
    _classCallCheck(this, CircleTarget);

    var _this = _possibleConstructorReturn(this, _Target.call(this));

    _this.p = {
      x: x,
      y: y,
      r: r
    };
    return _this;
  }

  CircleTarget.prototype.testIntersection = function testIntersection(e, data) {
    var res = void 0;
    var x = data.x,
        y = data.y,
        p = this.p;

    if ((x - p.x) * (x - p.x) + (y - p.y) * (y - p.y) <= p.r * p.r) {
      res = {
        target: this,
        data: data
      };
    }
    return res;
  };

  return CircleTarget;
}(_Target3.default);

exports.default = CircleTarget;

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _Target2 = __webpack_require__(22);

var _Target3 = _interopRequireDefault(_Target2);

var _BaseMathUtils = __webpack_require__(2);

var _BaseMathUtils2 = _interopRequireDefault(_BaseMathUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var PolyTarget = function (_Target) {
  _inherits(PolyTarget, _Target);

  function PolyTarget(poly) {
    _classCallCheck(this, PolyTarget);

    var _this = _possibleConstructorReturn(this, _Target.call(this));

    _this.poly = poly;
    return _this;
  }

  PolyTarget.prototype.testIntersection = function testIntersection(e, p) {
    return _BaseMathUtils2.default.isInsidePoly(this.poly, p) ? {
      target: this,
      data: p
    } : undefined;
  };

  return PolyTarget;
}(_Target3.default);

exports.default = PolyTarget;

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

/*** IMPORTS FROM imports-loader ***/
var define = false;

/*!
 * jQuery Mousewheel 3.1.13
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 */

(function (factory) {
    if ( typeof define === 'function' && define.amd ) {
        // AMD. Register as an anonymous module.
        define(['jquery'], factory);
    } else if (true) {
        // Node/CommonJS style for Browserify
        module.exports = factory;
    } else {
        // Browser globals
        factory(jQuery);
    }
}(function ($) {

    var toFix  = ['wheel', 'mousewheel', 'DOMMouseScroll', 'MozMousePixelScroll'],
        toBind = ( 'onwheel' in document || document.documentMode >= 9 ) ?
                    ['wheel'] : ['mousewheel', 'DomMouseScroll', 'MozMousePixelScroll'],
        slice  = Array.prototype.slice,
        nullLowestDeltaTimeout, lowestDelta;

    if ( $.event.fixHooks ) {
        for ( var i = toFix.length; i; ) {
            $.event.fixHooks[ toFix[--i] ] = $.event.mouseHooks;
        }
    }

    var special = $.event.special.mousewheel = {
        version: '3.1.12',

        setup: function() {
            if ( this.addEventListener ) {
                for ( var i = toBind.length; i; ) {
                    this.addEventListener( toBind[--i], handler, false );
                }
            } else {
                this.onmousewheel = handler;
            }
            // Store the line height and page height for this particular element
            $.data(this, 'mousewheel-line-height', special.getLineHeight(this));
            $.data(this, 'mousewheel-page-height', special.getPageHeight(this));
        },

        teardown: function() {
            if ( this.removeEventListener ) {
                for ( var i = toBind.length; i; ) {
                    this.removeEventListener( toBind[--i], handler, false );
                }
            } else {
                this.onmousewheel = null;
            }
            // Clean up the data we added to the element
            $.removeData(this, 'mousewheel-line-height');
            $.removeData(this, 'mousewheel-page-height');
        },

        getLineHeight: function(elem) {
            var $elem = $(elem),
                $parent = $elem['offsetParent' in $.fn ? 'offsetParent' : 'parent']();
            if (!$parent.length) {
                $parent = $('body');
            }
            return parseInt($parent.css('fontSize'), 10) || parseInt($elem.css('fontSize'), 10) || 16;
        },

        getPageHeight: function(elem) {
            return $(elem).height();
        },

        settings: {
            adjustOldDeltas: true, // see shouldAdjustOldDeltas() below
            normalizeOffset: true  // calls getBoundingClientRect for each event
        }
    };

    $.fn.extend({
        mousewheel: function(fn) {
            return fn ? this.bind('mousewheel', fn) : this.trigger('mousewheel');
        },

        unmousewheel: function(fn) {
            return this.unbind('mousewheel', fn);
        }
    });


    function handler(event) {
        var orgEvent   = event || window.event,
            args       = slice.call(arguments, 1),
            delta      = 0,
            deltaX     = 0,
            deltaY     = 0,
            absDelta   = 0,
            offsetX    = 0,
            offsetY    = 0;
        event = $.event.fix(orgEvent);
        event.type = 'mousewheel';

        // Old school scrollwheel delta
        if ( 'detail'      in orgEvent ) { deltaY = orgEvent.detail * -1;      }
        if ( 'wheelDelta'  in orgEvent ) { deltaY = orgEvent.wheelDelta;       }
        if ( 'wheelDeltaY' in orgEvent ) { deltaY = orgEvent.wheelDeltaY;      }
        if ( 'wheelDeltaX' in orgEvent ) { deltaX = orgEvent.wheelDeltaX * -1; }

        // Firefox < 17 horizontal scrolling related to DOMMouseScroll event
        if ( 'axis' in orgEvent && orgEvent.axis === orgEvent.HORIZONTAL_AXIS ) {
            deltaX = deltaY * -1;
            deltaY = 0;
        }

        // Set delta to be deltaY or deltaX if deltaY is 0 for backwards compatabilitiy
        delta = deltaY === 0 ? deltaX : deltaY;

        // New school wheel delta (wheel event)
        if ( 'deltaY' in orgEvent ) {
            deltaY = orgEvent.deltaY * -1;
            delta  = deltaY;
        }
        if ( 'deltaX' in orgEvent ) {
            deltaX = orgEvent.deltaX;
            if ( deltaY === 0 ) { delta  = deltaX * -1; }
        }

        // No change actually happened, no reason to go any further
        if ( deltaY === 0 && deltaX === 0 ) { return; }

        // Need to convert lines and pages to pixels if we aren't already in pixels
        // There are three delta modes:
        //   * deltaMode 0 is by pixels, nothing to do
        //   * deltaMode 1 is by lines
        //   * deltaMode 2 is by pages
        if ( orgEvent.deltaMode === 1 ) {
            var lineHeight = $.data(this, 'mousewheel-line-height');
            delta  *= lineHeight;
            deltaY *= lineHeight;
            deltaX *= lineHeight;
        } else if ( orgEvent.deltaMode === 2 ) {
            var pageHeight = $.data(this, 'mousewheel-page-height');
            delta  *= pageHeight;
            deltaY *= pageHeight;
            deltaX *= pageHeight;
        }

        // Store lowest absolute delta to normalize the delta values
        absDelta = Math.max( Math.abs(deltaY), Math.abs(deltaX) );

        if ( !lowestDelta || absDelta < lowestDelta ) {
            lowestDelta = absDelta;

            // Adjust older deltas if necessary
            if ( shouldAdjustOldDeltas(orgEvent, absDelta) ) {
                lowestDelta /= 40;
            }
        }

        // Adjust older deltas if necessary
        if ( shouldAdjustOldDeltas(orgEvent, absDelta) ) {
            // Divide all the things by 40!
            delta  /= 40;
            deltaX /= 40;
            deltaY /= 40;
        }

        // Get a whole, normalized value for the deltas
        delta  = Math[ delta  >= 1 ? 'floor' : 'ceil' ](delta  / lowestDelta);
        deltaX = Math[ deltaX >= 1 ? 'floor' : 'ceil' ](deltaX / lowestDelta);
        deltaY = Math[ deltaY >= 1 ? 'floor' : 'ceil' ](deltaY / lowestDelta);

        // Normalise offsetX and offsetY properties
        if ( special.settings.normalizeOffset && this.getBoundingClientRect ) {
            var boundingRect = this.getBoundingClientRect();
            offsetX = event.clientX - boundingRect.left;
            offsetY = event.clientY - boundingRect.top;
        }

        // Add information to the event object
        event.deltaX = deltaX;
        event.deltaY = deltaY;
        event.deltaFactor = lowestDelta;
        event.offsetX = offsetX;
        event.offsetY = offsetY;
        // Go ahead and set deltaMode to 0 since we converted to pixels
        // Although this is a little odd since we overwrite the deltaX/Y
        // properties with normalized deltas.
        event.deltaMode = 0;

        // Add event and delta to the front of the arguments
        args.unshift(event, delta, deltaX, deltaY);

        // Clearout lowestDelta after sometime to better
        // handle multiple device types that give different
        // a different lowestDelta
        // Ex: trackpad = 3 and mouse wheel = 120
        if (nullLowestDeltaTimeout) { clearTimeout(nullLowestDeltaTimeout); }
        nullLowestDeltaTimeout = setTimeout(nullLowestDelta, 200);

        return ($.event.dispatch || $.event.handle).apply(this, args);
    }

    function nullLowestDelta() {
        lowestDelta = null;
    }

    function shouldAdjustOldDeltas(orgEvent, absDelta) {
        // If this is an older event and the delta is divisable by 120,
        // then we are assuming that the browser is treating this as an
        // older mouse wheel event and that we should divide the deltas
        // by 40 to try and get a more usable deltaFactor.
        // Side note, this actually impacts the reported scroll distance
        // in older browsers and can cause scrolling to be slower than native.
        // Turn this off by setting $.event.special.mousewheel.settings.adjustOldDeltas to false.
        return special.settings.adjustOldDeltas && orgEvent.type === 'mousewheel' && absDelta % 120 === 0;
    }

}));



/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

// stats.js - http://github.com/mrdoob/stats.js
(function(f,e){ true?module.exports=e():"function"===typeof define&&define.amd?define(e):f.Stats=e()})(this,function(){var f=function(){function e(a){c.appendChild(a.dom);return a}function u(a){for(var d=0;d<c.children.length;d++)c.children[d].style.display=d===a?"block":"none";l=a}var l=0,c=document.createElement("div");c.style.cssText="position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000";c.addEventListener("click",function(a){a.preventDefault();
u(++l%c.children.length)},!1);var k=(performance||Date).now(),g=k,a=0,r=e(new f.Panel("FPS","#0ff","#002")),h=e(new f.Panel("MS","#0f0","#020"));if(self.performance&&self.performance.memory)var t=e(new f.Panel("MB","#f08","#201"));u(0);return{REVISION:16,dom:c,addPanel:e,showPanel:u,begin:function(){k=(performance||Date).now()},end:function(){a++;var c=(performance||Date).now();h.update(c-k,200);if(c>g+1E3&&(r.update(1E3*a/(c-g),100),g=c,a=0,t)){var d=performance.memory;t.update(d.usedJSHeapSize/
1048576,d.jsHeapSizeLimit/1048576)}return c},update:function(){k=this.end()},domElement:c,setMode:u}};f.Panel=function(e,f,l){var c=Infinity,k=0,g=Math.round,a=g(window.devicePixelRatio||1),r=80*a,h=48*a,t=3*a,v=2*a,d=3*a,m=15*a,n=74*a,p=30*a,q=document.createElement("canvas");q.width=r;q.height=h;q.style.cssText="width:80px;height:48px";var b=q.getContext("2d");b.font="bold "+9*a+"px Helvetica,Arial,sans-serif";b.textBaseline="top";b.fillStyle=l;b.fillRect(0,0,r,h);b.fillStyle=f;b.fillText(e,t,v);
b.fillRect(d,m,n,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d,m,n,p);return{dom:q,update:function(h,w){c=Math.min(c,h);k=Math.max(k,h);b.fillStyle=l;b.globalAlpha=1;b.fillRect(0,0,r,m);b.fillStyle=f;b.fillText(g(h)+" "+e+" ("+g(c)+"-"+g(k)+")",t,v);b.drawImage(q,d+a,m,n-a,p,d,m,n-a,p);b.fillRect(d+n-a,m,a,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d+n-a,m,a,g((1-h/w)*p))}}};return f});


/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(24);
module.exports = __webpack_require__(23);


/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgMTNjNGY0OGE4MmYzODkxYWJkZDUiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2xpYnMuanMiLCJ3ZWJwYWNrOi8vLy4vanMvbGlicy5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9CYXNlTWF0aFV0aWxzLmpzIiwid2VicGFjazovLy8uLy4uL2NvbW1vbi9jbGFzc2VzL01hdGhVdGlscy5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9VdGlscy5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9JbWFnZUJhc2UuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvRXZlbnRDb252ZXJ0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvR3JhcGhVdGlscy5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9JbWFnZUZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vanMvY2xhc3Nlcy9Cb29rUHJvcHNCdWlsZGVyLmpzIiwid2VicGFjazovLy8uL2pzL2NsYXNzZXMvU2hlZXRCbG9jay5qcyIsIndlYnBhY2s6Ly8vLi9qcy9wcm9wcy9ib29rLmpzIiwid2VicGFjazovLy8uLy4uL2NvbW1vbi9jbGFzc2VzL0NTUzNEUmVuZGVyZXIuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvQ1NTTGF5ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvQ2FjaGUuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvQ29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9DdXN0b21FdmVudENvbnZlcnRlci5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9GaW5kZXIuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvRnVsbFNjcmVlblguanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvUGRmLmpzIiwid2VicGFjazovLy8uLy4uL2NvbW1vbi9jbGFzc2VzL1RocmVlRXZlbnRDb252ZXJ0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvVGhyZWVVdGlscy5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy90YXJnZXRzL1RhcmdldC5qcyIsIndlYnBhY2s6Ly8vLi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vcG9seWZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vanMvY2xhc3Nlcy9BdXRvTmF2aWdhdG9yLmpzIiwid2VicGFjazovLy8uL2pzL2NsYXNzZXMvQmluZGVyLmpzIiwid2VicGFjazovLy8uL2pzL2NsYXNzZXMvQm9vay5qcyIsIndlYnBhY2s6Ly8vLi9qcy9jbGFzc2VzL0Jvb2tDb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL2pzL2NsYXNzZXMvQm9va1ByaW50ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vanMvY2xhc3Nlcy9Cb29rVmlldy5qcyIsIndlYnBhY2s6Ly8vLi9qcy9jbGFzc2VzL0NsYkJvb2tQcm9wc0J1aWxkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vanMvY2xhc3Nlcy9Db3Zlci5qcyIsIndlYnBhY2s6Ly8vLi9qcy9jbGFzc2VzL0Nzc0xheWVyc01hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vanMvY2xhc3Nlcy9QYWdlTWFuYWdlci5qcyIsIndlYnBhY2s6Ly8vLi9qcy9jbGFzc2VzL1BkZkJvb2tQcm9wc0J1aWxkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vanMvY2xhc3Nlcy9QZGZMaW5rc0hhbmRsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vanMvY2xhc3Nlcy9TZWFyY2hFbmdpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vanMvY2xhc3Nlcy9TaGVldENzc0xheWVyLmpzIiwid2VicGFjazovLy8uL2pzL2NsYXNzZXMvU2hlZXRQaHlzaWNzLmpzIiwid2VicGFjazovLy8uL2pzL2NsYXNzZXMvU291bmRzRW52aXJvbWVudC5qcyIsIndlYnBhY2s6Ly8vLi9qcy9jbGFzc2VzL1RvY0NvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vanMvbW9kZWxzL3NoZWV0QmxvY2suanMiLCJ3ZWJwYWNrOi8vLy4vanMvcHJvcHMvYm9va0NvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvQmxhbmtJbWFnZS5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9Cb29rbWFya3MuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvRGV0ZWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvRG9jTW91c2VTaW11bGF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvRG9tMkltYWdlLmpzIiwid2VicGFjazovLy8uLy4uL2NvbW1vbi9jbGFzc2VzL0RyYWcuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvRXZlbnRzVG9BY3Rpb25zLmpzIiwid2VicGFjazovLy8uLy4uL2NvbW1vbi9jbGFzc2VzL0Z1bGxTY3JlZW4uanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvSW50ZXJhY3RpdmVJbWFnZS5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9Mb2FkaW5nQW5pbWF0aW9uLmpzIiwid2VicGFjazovLy8uLy4uL2NvbW1vbi9jbGFzc2VzL0xvYWRpbmdDb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uLy4uL2NvbW1vbi9jbGFzc2VzL01vdXNlRXZlbnRDb252ZXJ0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvT2JqZWN0M0RXYXRjaGVyLmpzIiwid2VicGFjazovLy8uLy4uL2NvbW1vbi9jbGFzc2VzL09yYml0LmpzIiwid2VicGFjazovLy8uLy4uL2NvbW1vbi9jbGFzc2VzL1BkZkltYWdlLmpzIiwid2VicGFjazovLy8uLy4uL2NvbW1vbi9jbGFzc2VzL1NlYXJjaC5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9TdGF0aWNJbWFnZS5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9UZXh0dXJlQW5pbWF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvVGhyZWVNb3VzZUV2ZW50Q29udmVydGVyLmpzIiwid2VicGFjazovLy8uLy4uL2NvbW1vbi9jbGFzc2VzL1RocmVlVG91Y2hFdmVudENvbnZlcnRlci5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9UaHVtYm5haWxzLmpzIiwid2VicGFjazovLy8uLy4uL2NvbW1vbi9jbGFzc2VzL1RvdWNoRXZlbnRDb252ZXJ0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvVmlldy5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9WaXN1YWxXb3JsZC5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9XaWRnZXRDb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uLy4uL2NvbW1vbi9jbGFzc2VzL1lvdVR1YmVBcGkuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvdGFyZ2V0cy9DaXJjbGVUYXJnZXQuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvdGFyZ2V0cy9Qb2x5VGFyZ2V0LmpzIiwid2VicGFjazovLy8uLi9+L2pxdWVyeS1tb3VzZXdoZWVsL2pxdWVyeS5tb3VzZXdoZWVsLmpzIiwid2VicGFjazovLy8uLi9+L3N0YXRzLmpzL2J1aWxkL3N0YXRzLm1pbi5qcyJdLCJuYW1lcyI6WyJfJCIsIkdMT0JBTF9MSUJTIiwid2luZG93IiwialF1ZXJ5IiwicmVxdWlyZSIsIl9odG1sMmNhbnZhcyIsImh0bWwyY2FudmFzIiwiX1RIUkVFIiwiVEhSRUUiLCJfUmVhY3QiLCJSZWFjdCIsIl9SZWFjdERPTSIsIlJlYWN0RE9NIiwiX1BERkpTIiwicGRmanNMaWIiLCJfdHIiLCJzIiwiaWJlcmV6YW5za3kiLCJ0ciIsIiQiLCJQREZKUyIsIkZCM0RfTE9DQUxFIiwiZGljdGlvbmFyeSIsIkJhc2VNYXRoVXRpbHMiLCJzdW0xIiwia2EiLCJhIiwia2IiLCJiIiwic3VtMiIsInN1bTMiLCJzdW00Iiwicms0IiwiZHkiLCJ0IiwiZHQiLCJ5Iiwic3VtIiwibGVuZ3RoIiwiazEiLCJrMiIsImszIiwiazQiLCJleHRyYXBvbGF0ZUxpbmVhciIsIngiLCJ4aSIsImludGVycG9sYXRlTGluZWFyIiwieWkiLCJyZXZlcnNlIiwiY2FsY1NjYWxlIiwic3JjVyIsInNyY0giLCJkc3RXIiwiZHN0SCIsIm11bE0iLCJyIiwiaSIsInB1c2giLCJqIiwiayIsInRyYW5zTSIsIm0iLCJtYXQiLCJkYXRhIiwiZGlzcCIsIk0iLCJwcmVkaWN0MSIsIm51bSIsImwiLCJEIiwiYW0iLCJibSIsInRhIiwiZCIsInAiLCJ2IiwiTWF0aCIsInJvdW5kIiwiaW5kZXhPZiIsInByZWRpY3QiLCJzZ25zIiwic2lnbiIsImFicyIsImN1ciIsImdldFVuaXF1ZSIsImNlaWwiLCJyYW5kb20iLCJzZXRTcGxpbmVQb2ludHMiLCJzcGxpbmUiLCJwcyIsInBvaW50cyIsImNvbnNvbGUiLCJ3YXJuIiwic2V0IiwieiIsIm1hcGwyTCIsImxzIiwibGVuIiwibiIsImYiLCJkTCIsIkwiLCJkZXQyIiwiYyIsInNvbHZlMkxpbiIsImExIiwiYjEiLCJhMiIsImIyIiwicmVzIiwiZXBzIiwiZHgiLCJpc0luc2lkZVBvbHkiLCJkb25lIiwiY3QiLCJ2MmRpc3QiLCJucCIsInJuIiwicDAiLCJwMSIsImlwIiwibWluIiwibWF4IiwidG4iLCJpc0luc2lkZUNvbnZQb2x5Iiwic2ciLCJ2MmxlbiIsInYyIiwic3FydCIsInYyMSIsInYyMiIsImNvbXB1dGVTcXVhcmUiLCJjb21wdXRlSW50ZXJwQ29lZnMiLCJ0cmkiLCJjb2VmcyIsIk1hdGhVdGlscyIsInNwbGl0U3BsaW5lIiwiTiIsIm8iLCJkbCIsImdldFBvaW50IiwidjEiLCJkaXN0YW5jZVRvIiwiY29weSIsImdldExpbmVhckluZGVjZXMiLCJkZWwiLCJkRGVsIiwicmVmaW5lUG9seSIsInBvbHkiLCJtYXhEbCIsIlZlY3RvcjIiLCJWZWN0b3IzIiwiVXRpbHMiLCJub3JtYWxpemVVcmwiLCJ1cmwiLCJzcGxpdCIsInJlcGxhY2UiLCJiYXNlIiwibG9jYXRpb24iLCJocmVmIiwiam9pbiIsImV4dGVuZHMiLCJkZXIiLCJuYW1lIiwiaGFzT3duUHJvcGVydHkiLCJkZWZhdWx0Q21wIiwibG93ZXJCb3VuZCIsImNtcCIsImgiLCJtaWQiLCJmbG9vciIsIkltYWdlQmFzZSIsImNvbnRleHQiLCJ3aWR0aCIsImhlaWdodCIsImNvbG9yIiwid25kIiwiZG9jIiwiZWxlbWVudCIsImJvZHkiLCJyZW5kZXJDYW52YXMiLCJjdHgiLCJyZW5kZXJDYW52YXNDdHgiLCJyZXNXIiwicmVzSCIsInNldFJlbmRlckNhbnZhcyIsInNldFJlc29sdXRpb24iLCJkaXNwb3NlIiwicmVuZGVyQmxhbmtQYWdlIiwiYmVnaW5QYXRoIiwiZmlsbFN0eWxlIiwiR3JhcGhVdGlscyIsImNvbG9yMlJnYmEiLCJyZWN0IiwiZmlsbCIsInJlbmRlckltYWdlIiwiaW1hZ2UiLCJwdXNoQ3R4IiwiZHJhd0ltYWdlIiwicG9wQ3R4Iiwibm9ybVRvQ29udiIsInJlbmRlckhpdCIsIm1vdmVUbyIsImxpbmVUbyIsImNsb3NlUGF0aCIsInNhdmUiLCJzY2FsZSIsInJlc3RvcmUiLCJyZW5kZXJOb3RGb3VuZFBhZ2UiLCJmaW5pc2hSZW5kZXIiLCJvbkNoYW5nZSIsImZpbmlzaExvYWQiLCJvbkxvYWQiLCJzdGFydFJlbmRlciIsImdldFNpbXVsYXRlZERvYyIsInVuZGVmaW5lZCIsImdldENvbnRleHQiLCJFdmVudENvbnZlcnRlciIsImVuYWJsZWQiLCJzZXRFbmFibGUiLCJ2bCIsIm1DYXBPYmplY3QiLCJub3RpZnkiLCJFdmVudCIsIm1Ib3ZPYmplY3QiLCJnZXRDYWxsYmFjayIsIm9iamVjdCIsImUiLCJ0eXBlIiwiY2FsbGJhY2siLCJwcm9wcyIsInZpZXciLCJqRSIsImNvbnZlcnQiLCJmaWx0ZXIiLCJnZXRPYmplY3QiLCJjb252ZXJ0VG91Y2giLCJjb252ZXJ0TW91c2UiLCJ0Q2FwT2JqZWN0IiwidGVzdCIsImludGVycG9sYXRlMDEiLCJ5MSIsInkyIiwiZ2V0Q29sb3JCeXRlcyIsImludmVyc2VDb2xvciIsImJzIiwiaWJzIiwibmJzIiwiYnl0ZXMyQ29sb3IiLCJieXRlczJSZ2JhIiwiSW1hZ2VGYWN0b3J5IiwiY2FjaGUiLCJDYWNoZSIsImJ1aWxkIiwiaW5mbyIsIndpZHRoVGV4ZWxzIiwiaGVpZ2h0VGV4ZWxzIiwiaW5qZWN0b3IiLCJJbnRlcmFjdGl2ZUltYWdlIiwic3JjIiwiU3RhdGljSW1hZ2UiLCJQZGZJbWFnZSIsIkJsYW5rSW1hZ2UiLCJCb29rUHJvcHNCdWlsZGVyIiwib25SZWFkeSIsInN0eWxlIiwiZGVmYXVsdHMiLCJjYWxjU2l6ZSIsImNhbGNUZXhlbHMiLCJzaGVldCIsImNhbGNQcm9wcyIsImNvdmVyIiwicGFnZSIsImNhbGNTaGVldHMiLCJwYWdlcyIsInNoZWV0cyIsImdldFNoZWV0cyIsImdldFByb3BzIiwiZ2V0UGFnZUNhbGxiYWNrIiwiYmluZHMiLCJwYWdlQ2FsbGJhY2siLCJyZWFkeSIsIlNoZWV0QmxvY2siLCJ2aXN1YWwiLCJmaXJzdCIsImxhc3QiLCJhbmdsZSIsInN0YXRlIiwibG9hZGVkUG9pbnRzIiwibG9hZFBvaW50cyIsIk9iamVjdCIsImtleXMiLCJtYXAiLCJzaGFwZSIsInBTcGxpbmUiLCJDYXRtdWxsUm9tQ3VydmUzIiwiaW50ZXJwb2xhdGlvblBvaW50cyIsImlTcGxpbmUiLCJzaGVldEJsb2NrIiwicmVzWCIsImFTcGxpbmVzIiwiZ2VvbWV0cnkiLCJjbG9uZSIsInNpZGVGYWNlcyIsImZhY2VzIiwic2lkZVRleHR1cmUiLCJUZXh0dXJlIiwid3JhcFQiLCJSZXBlYXRXcmFwcGluZyIsInJlcGVhdCIsIm5lZWRzVXBkYXRlIiwibWF0ZXJpYWxzIiwiTWVzaFBob25nTWF0ZXJpYWwiLCJzZXRUZXh0dXJlIiwibWVzaCIsIk1lc2giLCJjYXN0U2hhZG93IiwicmVjZWl2ZVNoYWRvdyIsInRocmVlIiwidXNlckRhdGEiLCJzZWxmIiwibWFya2VycyIsIm1hcmtlciIsInVzZSIsInZlcnRpY2VzIiwiaXMiLCJBcnJheSIsImFwcGx5IiwiXyIsIlRocmVlVXRpbHMiLCJjcmVhdGVNYXJrZXIiLCJzaXplIiwidmVydGV4IiwiYWRkIiwiY29ybmVyIiwibWF4RGlzdGFuY2UiLCJPWiIsImF4aXMiLCJnZXRTaXplIiwiZ2V0VG9wQ2VybmVycyIsIm9mZiIsIlBJIiwicmVzWiIsImdldFRvcFNpemUiLCJ2cyIsImdldFRvcFdvcmxkUm90YXRpb24iLCJxIiwiZ2V0VG9wV29ybGRQb3NpdGlvbiIsInZpIiwibG9jYWxUb1dvcmxkIiwiZ2V0SW50ZXJwb2xhdGlvblBvaW50cyIsImluZHMiLCJtb2QiLCJLIiwid2F2ZSIsImNsb3NlZEFuZ2xlIiwiYmluZGVyVHVybiIsIm9wZW5lZEFuZ2xlIiwiY2xvc2VkSW50ZXJwb2xhdGlvbkluZGVjZXMiLCJmbGF0SW50ZXJwb2xhdGlvbkluZGVjZXMiLCJnZXRQb2ludHNBdEFuZ2xlIiwib3BlbmVkSW50ZXJwb2xhdGlvbkluZGVjZXMiLCJobCIsImhyIiwib2Zmc2V0IiwiZGVwdGgiLCJpbkFuZ2xlIiwiaEFuZ2xlIiwiZ2V0UG9pbnRzQXRBbmdsZUFuZEhzIiwibGVmdCIsInJpZ2h0IiwiaW52ZXJzZSIsInNldFBvaW50cyIsInlzIiwicmVzWSIsInBsYW5lIiwiUGxhbmUiLCJub3JtYWwiLCJwbGFuZU9mZnNldCIsImZsZXhpYmxlQ29ybmVyIiwicHJvaiIsInNldEZyb21Ob3JtYWxBbmRDb3BsYW5hclBvaW50Iiwibm9ybWFsaXplIiwicHJvamVjdFBvaW50Iiwic3ViIiwiZGlzdGFuY2UiLCJkMkFuZ2xlIiwiY29ybmVyRGV2aWF0aW9uIiwiZXhwIiwiYmVuZGluZyIsImFwcGx5QXhpc0FuZ2xlIiwicG9pbnQiLCJwb3NpdGlvbiIsImNvbXB1dGVWZXJ0ZXhOb3JtYWxzIiwiY29tcHV0ZUJvdW5kaW5nU3BoZXJlIiwidmVydGljZXNOZWVkVXBkYXRlIiwibWFya3VwIiwiY29tcHV0ZVZlcnRpY2VzIiwiZ2V0UG9pbnRzQXRIcyIsImhzIiwiYmwiLCJwMiIsImRwIiwibG4iLCJzcCIsInNpbiIsImNvcyIsIm5wcyIsImFuZ2xlcyIsInhwcyIsInlwcyIsImludGVycG9sYXRlIiwiZGVmIiwiZ3Jhdml0eSIsImNhY2hlZFBhZ2VzIiwicmVuZGVySW5hY3RpdmVQYWdlcyIsInJlbmRlckluYWN0aXZlUGFnZXNPbk1vYmlsZSIsInJlbmRlcldoaWxlRmxpcHBpbmciLCJwYWdlc0ZvclByZWRpY3RpbmciLCJwcmVsb2FkUGFnZXMiLCJydGwiLCJzdGFydFZlbG9jaXR5IiwiZmxleGliaWxpdHkiLCJzaWRlIiwiYmluZGVyVGV4dHVyZSIsInBhZGRpbmciLCJtYXNzIiwiY3NzTGF5ZXJQcm9wcyIsInN0eWxlcyIsInZvbHVtZSIsImZsYXQiLCJDU1MzRE9iamVjdCIsImFkZEV2ZW50TGlzdGVuZXIiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJPYmplY3QzRCIsIkNTUzNEU3ByaXRlIiwiQ1NTM0RSZW5kZXJlciIsIl93aWR0aCIsIl9oZWlnaHQiLCJfd2lkdGhIYWxmIiwiX2hlaWdodEhhbGYiLCJtYXRyaXgiLCJNYXRyaXg0IiwiY2FtZXJhIiwiZm92Iiwib2JqZWN0cyIsImRvbUVsZW1lbnQiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJvdmVyZmxvdyIsImNhbWVyYUVsZW1lbnQiLCJXZWJraXRUcmFuc2Zvcm1TdHlsZSIsIk1velRyYW5zZm9ybVN0eWxlIiwidHJhbnNmb3JtU3R5bGUiLCJhcHBlbmRDaGlsZCIsImlzSUUiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJzZXRDbGVhckNvbG9yIiwic2V0U2l6ZSIsImVwc2lsb24iLCJ2YWx1ZSIsImdldENhbWVyYUNTU01hdHJpeCIsImVsZW1lbnRzIiwiZ2V0T2JqZWN0Q1NTTWF0cml4IiwiY2FtZXJhQ1NTTWF0cml4IiwibWF0cml4M2QiLCJyZW5kZXJPYmplY3QiLCJtYXRyaXhXb3JsZEludmVyc2UiLCJ0cmFuc3Bvc2UiLCJjb3B5UG9zaXRpb24iLCJtYXRyaXhXb3JsZCIsImNhY2hlZFN0eWxlIiwiaWQiLCJXZWJraXRUcmFuc2Zvcm0iLCJNb3pUcmFuc2Zvcm0iLCJ0cmFuc2Zvcm0iLCJkaXN0YW5jZVRvQ2FtZXJhU3F1YXJlZCIsImdldERpc3RhbmNlVG9TcXVhcmVkIiwiY2hpbGRyZW4iLCJvYmplY3QxIiwib2JqZWN0MiIsInNldEZyb21NYXRyaXhQb3NpdGlvbiIsImRpc3RhbmNlVG9TcXVhcmVkIiwiek9yZGVyIiwic2NlbmUiLCJvcmRlciIsInNvcnQiLCJ6TWF4IiwidHJhdmVyc2UiLCJpbmRleCIsInpJbmRleCIsInJlbmRlciIsInByb2plY3Rpb25NYXRyaXgiLCJXZWJraXRQZXJzcGVjdGl2ZSIsIk1velBlcnNwZWN0aXZlIiwicGVyc3BlY3RpdmUiLCJ1cGRhdGVNYXRyaXhXb3JsZCIsInBhcmVudCIsIl9DU1MzRE9iamVjdCIsIl9DU1MzRFNwcml0ZSIsIkNTU0xheWVyIiwiaW5pdCIsImRlbGF5IiwiZmIzZFFGaWx0ZXIiLCJhcHBlbmRUbyIsImhlYWQiLCJyZW1vdmUiLCJqQ29udGFpbmVyIiwid2lkdGhQeHMiLCJoZWlnaHRQeHMiLCJzZXREYXRhIiwiY2FsbEludGVybmFsIiwiZXJyb3IiLCJjbGVhckludGVybmFscyIsImNzcyIsImh0bWwiLCJqcyIsImV2YWwiLCJwZW5kZWRDYWxsIiwiY2xiIiwidGltZXN0YW1wIiwiRGF0ZSIsIm5vdyIsInNldFRpbWVvdXQiLCJpc0hpZGRlbiIsImhhc0NsYXNzIiwiaGlkZSIsImFkZENsYXNzIiwiUHJvbWlzZSIsInJlc29sdmUiLCJzaG93IiwicmVtb3ZlQ2xhc3MiLCJtYXhTaXplIiwiSW5maW5pdHkiLCJzaXplb2YiLCJjb3VudFNpemVvZiIsIm9zIiwiTWFwIiwiZm9yRWFjaCIsImdldCIsImxvY2tlZCIsImRlbGV0ZSIsImZyZWVTcGFjZSIsImFyciIsImtleSIsInJlY3Vyc2lvblNpemVvZiIsImdldFRpbWVzdGFtcCIsInB1dCIsIkNvbnRyb2xsZXIiLCJoYW5kbGVEZWZhdWx0IiwiZGlzcGF0Y2hBc3luYyIsInRoZW4iLCJkaXNwYXRjaEV2ZW50IiwiRXZlbnREaXNwYXRjaGVyIiwiQ3VzdG9tRXZlbnRDb252ZXJ0ZXIiLCJjdXN0b21UZXN0IiwiZURvYyIsImN1c3RvbXMiLCJ0YXJnZXQiLCJhZGRDdXN0b20iLCJjdXN0b20iLCJ0ZXN0SW50ZXJzZWN0aW9uIiwiRmluZGVyIiwiaXNEZWxpbWV0ciIsIkRFTElNSVRFUiIsIm1lcmdlIiwiYXMiLCJzdHJzIiwiY2hhckF0Iiwic3RyIiwiYWRkSGl0cyIsImNoYXJzIiwicGF0dGVybiIsImRlbGltZXRlciIsImhpdHMiLCJhZGRDb250ZXh0IiwiZGVscyIsImNvbnRleHRMZW5ndGgiLCJwcmV2RGVscyIsImNvbnRleHRzIiwic3Vic3RyIiwiZ2V0SGl0cyIsImdldENvbnRleHRzIiwidG9Mb3dlckNhc2UiLCJsc3RyIiwiRnVsbFNjcmVlblgiLCJhdmFpbGFibGUiLCJhY3RpdmF0ZWQiLCJub2RlIiwiY2xhc3NYIiwiaGFuZGxlciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJkZWZIYW5kbGVyIiwicmVxdWVzdCIsImNhbmNlbCIsImRlZk5vZGUiLCJGdWxsU2NyZWVuIiwiR2xvYmFsV29ya2VyT3B0aW9ucyIsIndvcmtlclNyYyIsIlBERkpTX0xPQ0FMRSIsIkdMT0JBTF9QQVRIUyIsInBkZkpzV29ya2VyIiwiY01hcFVybCIsInBkZkpzQ01hcFVybCIsImNNYXBQYWNrZWQiLCJkaXNhYmxlQXV0b0ZldGNoIiwiZGlzYWJsZVN0cmVhbSIsImltYWdlUmVzb3VyY2VzUGF0aCIsImV4dGVybmFsTGlua1RhcmdldCIsIkxpbmtUYXJnZXQiLCJCTEFOSyIsIlBkZiIsImxvYWRpbmdQcm9ncmVzcyIsImhhbmRsZXJRdWV1ZSIsInByb2dyZXNEYXRhIiwibG9hZGVkIiwidG90YWwiLCJ0YXNrIiwiZ2V0RG9jdW1lbnQiLCJyYW5nZUNodW5rU2l6ZSIsIm9uUHJvZ3Jlc3MiLCJvbGQiLCJpc05hTiIsInByb21pc2UiLCJudW1QYWdlcyIsImFsbCIsImdldFBhZ2UiLCJjYXRjaCIsImVycm9ySGFuZGxlciIsImRvdWJsZWRQYWdlcyIsImdldFBhZ2VTaXplIiwiZ2V0UGFnZVR5cGUiLCJnZXRQYWdlc051bSIsImdldERlc3RpbmF0aW9uIiwiZGVzdCIsImRlc3RQcm9taXNlIiwiZ2V0UGFnZUluZGV4IiwibnVtYmVyIiwic3BsaWNlIiwic2V0TG9hZGluZ1Byb2dyZXNzQ2xiIiwic2V0RXJyb3JIYW5kbGVyIiwiZWgiLCJnZXRIYW5kbGVyIiwiVGhyZWVFdmVudENvbnZlcnRlckZzIiwib2JqZWN0c1Rlc3QiLCJvYmplY3RzQW5kRmFjZXNUZXN0IiwiZmFjZSIsIm1hdGVyaWFsSW5kZXgiLCJ2aXN1YWxXb3JsZCIsImNvb3JkcyIsInJheWNhc3RlciIsInRocmVlcyIsImFkZFRocmVlIiwicmVtb3ZlVGhyZWUiLCJzZXRDb29yZHNGcm9tRXZlbnQiLCJzZXRGcm9tQ2FtZXJhIiwiaW50ZXJzZWN0cyIsImludGVyc2VjdE9iamVjdHMiLCJ2ZXJ0aWNlczJVVnMiLCJpbmRlY2VzIiwiY29udmVyQ2xiIiwidmlzIiwiY29tcHV0ZUZhY2VWZXJ0ZXhVdnMiLCJ1dnMiLCJ1dnNpIiwiZmFjZVZlcnRleFV2cyIsIlNwaGVyZUdlb21ldHJ5IiwiZmluZFV2VHJpcyIsImZvdW5kIiwiZmluZEludGVybmFsVmVydGljZXMiLCJ2ZXJ0ZXhOb3JtYWxzIiwidmFsdWVzIiwiVGFyZ2V0IiwiZm4iLCJGbGlwQm9vayIsIm9wdGlvbnMiLCJwZGZMaW5rc0hhbmRsZXIiLCJzb3VuZHMiLCJ0b2NDdHJsIiwidGh1bWJuYWlscyIsImJvb2ttYXJrcyIsImN0cmwiLCJib29rUHJpbnRlciIsImJvb2siLCJwcm9wc0J1aWxkZXIiLCJib29rQnVpbGRlciIsInBlbmRpbmdEaXNwb3NlIiwicGFyZW50Q29udGFpbmVyIiwiYWN0aXZhdGVGdWxsU2NyZWVuIiwiQm9va1ZpZXciLCJEZXRlY3RvciIsIndlYmdsIiwiYWRkR2V0V2ViR0xNZXNzYWdlIiwiZ2V0VmlldyIsImxvYWRpbmdDdHJsIiwiTG9hZGluZ0NvbnRyb2xsZXIiLCJwcm9ncmVzcyIsIlZpc3VhbFdvcmxkIiwiZ2V0Q29udGFpbmVyIiwib3duZXJEb2N1bWVudCIsImRlZmF1bHRWaWV3IiwicHJvcGVydGllc0NhbGxiYWNrIiwiQm9vayIsIkJvb2tQcmludGVyIiwidGVtcGxhdGUiLCJwcmludFN0eWxlIiwiQm9va0NvbnRyb2xsZXIiLCJjb250cm9sc1Byb3BzIiwic2V0SW5qZWN0b3IiLCJ3IiwiYm9va0N0cmwiLCJhZGRIYW5kbGVyIiwic2V0UHJpbnRlciIsInNlYXJjaCIsIlNlYXJjaCIsImdldFNlYXJjaFZpZXciLCJnZXRQYWdlcyIsIm9uUXVlcnkiLCJzZXRRdWVyeSIsImJpbmQiLCJzZXRSZXN1bHRzIiwicmVzdWx0cyIsImxhc3RQYWdlIiwiVGh1bWJuYWlscyIsImdldFRodW1ibmFpbHNWaWV3Iiwia1d0b0giLCJUb2NDb250cm9sbGVyIiwic2V0VGh1bWJuYWlscyIsInNldFNlYXJjaCIsInNldFRvY0N0cmwiLCJQZGZMaW5rc0hhbmRsZXIiLCJoYW5kbGVFdmVudCIsImdldE91dGxpbmUiLCJvdXRsaW5lIiwiQm9va21hcmtzIiwiZ2V0Qm9va21hcmtzVmlldyIsInNldEJvb2ttYXJrcyIsInBkZkxpbmtzIiwic2V0SGFuZGxlciIsIlNvdW5kc0Vudmlyb21lbnQiLCJzZXRTb3VuZHMiLCJzdWJzY3JpYmVGbGlwcyIsIkF1dG9OYXZpZ2F0b3IiLCJhdXRvTmF2aWdhdGlvbiIsInBkZiIsIlBkZkJvb2tQcm9wc0J1aWxkZXIiLCJib29rU3R5bGUiLCJzZXRQcm9ncmVzcyIsIkNsYkJvb2tQcm9wc0J1aWxkZXIiLCJjb250YWluZXJzIiwiYXR0ciIsInByb3RvdHlwZSIsIlR5cGVFcnJvciIsIk8iLCJzdGFydCIsImFyZ3VtZW50cyIsInJlbGF0aXZlU3RhcnQiLCJlbmQiLCJyZWxhdGl2ZUVuZCIsImZpbmFsIiwiZmluZCIsImRlZmluZVByb3BlcnR5IiwicHJlZGljYXRlIiwibGlzdCIsInRoaXNBcmciLCJjYWxsIiwiZmluZEluZGV4IiwiUmVnRXhwIiwiZXNjYXBlIiwiU3RyaW5nIiwicmVwbGFjZUFsbCIsInVybFBhcmFtIiwibmF2aWdhdGVzIiwicGFnZU4iLCJmYjNkIiwiaW5zdGFuY2VzIiwiZ29Ub1BhZ2UiLCJnZXRQYWdlTnVtYmVyIiwiZ2V0UGFyYW1ldGVyQnlOYW1lIiwicmVnZXgiLCJleGVjIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwicGFyc2VJbnQiLCJCaW5kZXIiLCJiYWNrU2l6ZSIsImJhY2tHIiwiQm94R2VvbWV0cnkiLCJvcGFjaXR5IiwidHJhbnNwYXJlbnQiLCJiYWNrTSIsInRleHR1cmVMb2FkZXIiLCJsb2FkIiwidGV4dHVyZSIsInNldEhleCIsIm1pbkZpbHRlciIsIkxpbmVhckZpbHRlciIsImJhY2siLCJiYWNrUlQiLCJiYWNrUlIiLCJiYWNrTFQiLCJiYWNrTFIiLCJsZWZ0UGl2b3QiLCJyaWdodFBpdm90IiwidHIxIiwicXVhdGVybmlvbiIsInNldEZyb21BeGlzQW5nbGUiLCJ0cjIiLCJzZXRMZWZ0Iiwic2V0UmlnaHQiLCJqb2luTGVmdENvdmVyIiwiZGlzY29ubmVjdExlZnRDb3ZlciIsImpvaW5SaWdodENvdmVyIiwiZGlzY29ubmVjdFJpZ2h0Q292ZXIiLCJjc3NGcyIsInBsYXkiLCJwbGF5ZXIiLCJmYjNkTm9QbGF5IiwicGVuZGluZ1BsYXllcnMiLCJwbGF5VmlkZW8iLCJwYXVzZSIsInBhdXNlVmlkZW8iLCJtb3VzZUNvbnRyb2xsZXIiLCJwcmVwYXJlUHJvcHMiLCJ6b29tIiwic2luZ2xlUGFnZSIsImF1dG9SZXNvbHV0aW9uIiwiZW5hYmxlIiwidXNlckRpcmVjdGlvbiIsImxhc3RUb3BQYWdlIiwiZGlyZWN0aW9uIiwicGFnZU1hbmFnZXIiLCJQYWdlTWFuYWdlciIsImxheWVyTWFuYWdlciIsIkNzc0xheWVyc01hbmFnZXIiLCJzZWFyY2hFbmdpbmUiLCJTZWFyY2hFbmdpbmUiLCJvblBhZ2VIaXRzQ2hhbmdlZCIsInF1ZXJ5IiwicmVmcmVzaFBhZ2VRdWVyeSIsImJpbmRlciIsImxlZnRDb3ZlciIsIkNvdmVyIiwic2V0TGVmdENvdmVyVGV4dHVyZSIsInN1YnNjcmliZVNoZWV0QmxvY2siLCJyaWdodENvdmVyIiwic2V0UmlnaHRDb3ZlclRleHR1cmUiLCJ0aHJlZVNoZWV0QmxvY2tzIiwic2hlZXRCbG9ja3MiLCJhZGRTaGVldEJsb2NrIiwic2V0UGFnZVRleHR1cmUiLCJsYXN0TW91c2VQb3MiLCJzaGVldFBoeXNpY3MiLCJTaGVldFBoeXNpY3MiLCJ1cGRhdGUiLCJwYWdlWCIsInBhZ2VZIiwiYWRkUmVuZGVyQ2FsbGJhY2siLCJvbiIsIm9uUGlja0NhbGxiYWNrIiwiZHJhZyIsIm9uRHJhZ0NhbGxiYWNrIiwib25SZWxlYXNlQ2FsbGJhY2siLCJkcmFnQW5nbGUiLCJ0bXAiLCJib3hzIiwiQm94MyIsImFkZE9iamVjdCIsInJlZnJlc2hab29tIiwiaXNQcm9jZXNzaW5nIiwibm90aWZ5QmVmb3JlQW5pbWF0aW9uIiwibm90aWZ5QWZ0ZXJBbmltYXRpb24iLCJ1cGRhdGVUaHJlZSIsInJlbW92ZU9iamVjdCIsInJlbW92ZVJlbmRlckNhbGxiYWNrIiwicmVtb3ZlU2hlZXRCbG9ja3MiLCJyZW1vdmVTaGVldEJsb2NrIiwiaGFzUGVuZGluZ1BsYXllcnMiLCJyZXNvbHZlUGVuZGluZ1BsYXllcnMiLCJzZXRBdXRvUmVzb2x1dGlvbiIsInNldFpvb20iLCJzZXRGbGlwUHJvZ3Jlc3NDbGIiLCJmbGlwUHJvZ3Jlc3NDbGIiLCJpc0FjdGl2ZVBhZ2UiLCJnZXRCbG9ja0J5UGFnZSIsImJsb2NrIiwiZ2V0QmxvY2tQYWdlcyIsInJhbmdlIiwiZ2V0VG9wUGFnZXMiLCJnZXRQYWdlU3RhdGUiLCJlbmFibGVMb2FkaW5nQW5pbWF0aW9uIiwiZ2V0TGVmdEZsaXBwaW5nIiwiZ2V0UmlnaHRGbGlwcGluZyIsImdldENsb3NlZEJsb2NrQW5nbGUiLCJwaHlzaWNJZCIsImdldFBhcmFtZXRyIiwiZmxpcExlZnQiLCJwcm9ncmVzc0NsYiIsImNvbm5lY3RQaHlzaWNzIiwic2V0U2hlZXRCbG9ja3MiLCJzcGxpdFNoZWV0QmxvY2siLCJmaW5pc2hBbmltYXRpb25DbGIiLCJmbGlwUmlnaHQiLCJjbGVhckhvdmVySW5mbyIsInR1cm5PbkV2ZW50cyIsImhvdmVySW5mbyIsImZvcmNlIiwiY29ybmVyRm9yY2UiLCJ4U2VnbWVudCIsInNldEZyb21PYmplY3QiLCJ1bmlvbiIsImNvbXB1dGVUYXJnZXQiLCJzZWciLCJ1diIsImNvcm5lclRhcmdldCIsImRyYWdGb3JjZUNsYiIsImdldERyYWdDb3JuZXJGb3JjZUNsYiIsImRyYWdJbmZvIiwidHVybk9mZkV2ZW50cyIsImdldEZsaXBwaW5nIiwiZmxpcCIsImVuYWJsZU1vdXNlIiwiY29ybmVyQ2FsbGJhY2siLCJwZW5kaW5ncyIsImhvdmVyQW5nbGUiLCJob3ZlciIsInBvc3NpYmxlIiwibmV4dEJsb2NrIiwic2V0UGFyYW1ldHIiLCJnZXRUYXJnZXRGb3JjZUNsYiIsImhvdmVyQ29ybmVyRm9yY2VDbGIiLCJjb3JuZXJDbGlja0RhdGEiLCJwb3ciLCJldmVudENvbnZlcnRlciIsIkNpcmNsZVRhcmdldCIsIm1vdXNlQ2FsbGJhY2siLCJ0cmFuc2ZlckV2ZW50VG9UZXh0dXJlIiwidG91Y2hDYWxsYmFjayIsIm1vdXNlRXZlbnRzIiwidG91Y2hFdmVudHMiLCJibG9ja3MiLCJtYXRlcmlhbCIsIm1lcmdlU2hlZXRCbG9ja3MiLCJjYWxjQmxvY2tGb3JjZSIsInZlbG9jaXR5IiwiY29ybmVySGVpZ2h0IiwiY2FsY0Jsb2NrQ29ybmVyRm9yY2UiLCJhbmltYXRpb25Ob3RpZmljYXRpb24iLCJyZWplY3QiLCJnZXRVc2VyRGlyZWN0aW9uIiwiY292ZXJIZWlnaHQiLCJzaW11bGF0ZUNsYiIsInJlbW92ZUNsYiIsImFuZ2wiLCJjaCIsImxhc3RUIiwidHJpZ2dlciIsInNpbXVsYXRlIiwibGVmdFNpemUiLCJuZXdCbG9jayIsImZpcnN0QmxvY2siLCJsYXN0QmxvY2siLCJjcmVhdGVTaWRlVGV4dHVyZSIsImpDIiwibWVyZ2VQcm9wcyIsInNlY29uZCIsImNzc0xheWVyc0xvYWRlciIsImxvYWRlciIsIm5scyIsImNzc0xheWVySnNPYmplY3QiLCJjbElmRXgiLCJubyIsImNzc0xheWVySnNPYmplY3RJbml0Iiwicm8iLCJwcmV2ZW50RGVmYXVsdCIsIllvdVR1YmVBcGkiLCJZVCIsIlBsYXllciIsInZpZGVvSWQiLCJlYWNoIiwic2hvd24iLCJuYXZpZ2F0aW9uQ29udHJvbHMiLCJvcmJpdCIsImdldE9yYml0IiwidXBkYXRlVmlld0lmU3RhdGUiLCJiaW5kQWN0aW9ucyIsInNtYXJ0UGFuIiwiYWN0aW9ucyIsImFjdGl2ZSIsImFjdGl2ZUZvck1vYmlsZSIsImlzTW9iaWxlIiwic3RhdHMiLCJsaWdodGluZyIsImRlZmF1bHQiLCJhY3RpdmVTaWRlIiwiYm9va1dhdGNoZXIiLCJPYmplY3QzRFdhdGNoZXIiLCJTdGF0cyIsInRvcCIsInNldEV4dHJhTGlnaHRpbmciLCJvblNjcmVlbk1vZGVDaGFuZ2VkIiwib25VcGRhdGVWaWV3IiwidXBkYXRlVmlldyIsImdldFBhcmVudENvbnRhaW5lciIsImNtZFNtYXJ0UGFuIiwidGVtcGxhdGVPYmplY3QiLCJhcHBMb2FkZWQiLCJsb2FkaW5nQW5pbWF0aW9uIiwic2tpbiIsImluaXRMb2FkaW5nQW5pbWF0aW9uIiwiY29lZmZpY2llbnQiLCJ2aXNpYmxlIiwic2V0U3RhdGUiLCJlbmFibGVOYXZpZ2F0aW9uIiwicHJpbnRlciIsInNldEVuYWJsZWQiLCJjYW5ab29tSW4iLCJjYW5ab29tT3V0IiwiY2FuRGVmYXVsdFpvb20iLCJzZXRCb29rWm9vbSIsImNtZFpvb21JbiIsImRlbHRhIiwiem9vbUluIiwiY21kWm9vbU91dCIsInpvb21PdXQiLCJzZXRTY2FsZSIsImNtZERlZmF1bHRab29tIiwiY21kVG9jIiwidG9nbGUiLCJjbWRGYXN0QmFja3dhcmQiLCJzdGFydEZsaXAiLCJjbWRCYWNrd2FyZCIsImNtZEJpZ0JhY2t3YXJkIiwiY21kRm9yd2FyZCIsImNtZEJpZ0ZvcndhcmQiLCJjbWRGYXN0Rm9yd2FyZCIsImNtZFNhdmUiLCJvcGVuIiwiZG93bmxvYWRVUkwiLCJjbWRQcmludCIsInByaW50IiwiY21kRnVsbFNjcmVlbiIsIm1pbkF6aW11dGhBbmdsZSIsIm1heEF6aW11dGhBbmdsZSIsIm1pblBvbGFyQW5nbGUiLCJtYXhQb2xhckFuZ2xlIiwiY21kU2luZ2xlUGFnZSIsImNtZFNvdW5kcyIsImNtZFN0YXRzIiwiYXBwZW5kIiwiY21kTGlnaHRpbmdVcCIsImNtZExpZ2h0aW5nRG93biIsImNtZFBlbmRpbmdQbGF5IiwicGFnZU51bSIsImN1cnJlbnQiLCJmbGlwcyIsImNvdnMiLCJjdiIsInNldENsYiIsImZsIiwidGltZSIsIm5leHQiLCJmbGlwUmVzIiwiZW5kRmxpcCIsImdldFBhZ2VGb3JHVUkiLCJpbnBQYWdlIiwiaXNDbWRWaXNpYmxlIiwibmFycm93VmlldyIsImVuYWJsZWRJbk5hcnJvdyIsInVwZGF0ZVZpZXdTdGF0ZSIsInZpZXdTdGF0ZSIsImZsaXBwZXJzRW5hYmxlIiwiZ2V0QWN0aW9ucyIsImlzU3dpcHBpbmciLCJ0b3VjaENtZFN3aXBlIiwiY29kZSIsImNtZHMiLCJhY3RpdmF0ZSIsImNtZFBhbkxlZnQiLCJwYW4iLCJzcGVlZCIsImNtZFBhblJpZ2h0IiwiY21kUGFuVXAiLCJjbWRQYW5Eb3duIiwibW91c2VDbWRSb3RhdGUiLCJyb3RhdGUiLCJtb3VzZUNtZERyYWdab29tIiwibW91c2VDbWRQYW4iLCJtb3VzZUNtZFdoZWVsWm9vbSIsImRlbHRhWSIsInRvdWNoQ21kUm90YXRlIiwidG91Y2hDbWRab29tIiwidG91Y2hab29tRGF0YSIsInRvdWNoQ21kUGFuIiwidG91Y2giLCJ0b3VjaGVzIiwib3JpZ2luYWxFdmVudCIsInN3aXBlRGF0YSIsImhhbmRsZWQiLCJ4MCIsInkwIiwid2lkU2V0dGluZ3MiLCJlVG9BIiwiRXZlbnRzVG9BY3Rpb25zIiwiYWRkQWN0aW9uIiwibW91c2VCdXR0b25zIiwiUmlnaHQiLCJhY3Rpb24iLCJmbGFncyIsInNldEFjdGlvbnMiLCJsZXZlbHMiLCJzdHlsZVNoZWV0IiwicGRmU3JjIiwiY2FuY2VsZWQiLCJmcmFtZSIsInByaW50V25kIiwiY2FsbE1hbnVhbGx5IiwidXNlSUZyYW1lIiwiY29udGVudFdpbmRvdyIsInJlbmRlckNvbnRlbnQiLCJjb250ZW50IiwicHJpbnREb2MiLCJ3cml0ZSIsImNsb3NlIiwiU2V0IiwicmVuZGVySHRtbCIsInJlbmRlckhlYWQiLCJ3cmFwIiwibGlua3MiLCJtYXRjaCIsImxpbmsiLCJmYWlsIiwicmVzcG9uc2VUZXh0IiwiZGVmYXVsdFN0eWxlU2hlZXQiLCJpc0Nocm9taXVtIiwiY2hyb21lIiwid2luTmF2IiwidmVuZG9yTmFtZSIsInZlbmRvciIsImlzSUVlZGdlIiwiaXNJT1NDaHJvbWUiLCJjb250YWluZXIiLCJpbml0VmlldyIsImJvb2ttYXJrc1ZpZXciLCJ0aHVtYm5haWxzVmlldyIsInNlYXJjaFZpZXciLCJnZXRIYW5kbGVycyIsImhhbmRsZXJzIiwiY2FsbExhdGVyIiwiUEFHRV9IQU5ETEVSX0RFTEFZIiwib25JdGVtU3RhdGVDaGFuZ2VkIiwiZ2V0Rm9ybXMiLCJnZXRMaW5rcyIsImdldFdpZGdldHMiLCJnZXRJbnB1dHMiLCJnZXRUZXh0cyIsImdldFRlbXBsYXRlIiwicmVsIiwic2NyaXB0IiwiVmlldyIsImltYWdlRmFjdG9yeSIsIndyYXBwZXJzIiwiZ2V0QWN0aXZlcyIsImFjcyIsImxheWVycyIsImhpZGRlbiIsImdldExheWVycyIsImZpbmlzaCIsInNsIiwiU2hlZXRDc3NMYXllciIsInBhZ2VOdW1iZXIiLCJ3YWl0IiwicGFnZVF1ZXJ5IiwicGFnZUNhY2hlIiwicmVzb3VyY2VzQ2FjaGUiLCJjYW52YXNlcyIsIm5leHRDYW52YXMiLCJsb2FkaW5ncyIsInJlbmRlclF1ZXVlIiwicHJlZGljdGVkUmVxdWVzdHMiLCJ0bXBNYXRlcmlhbCIsIk1lc2hCYXNpY01hdGVyaWFsIiwiUGxhbmVHZW9tZXRyeSIsImxvYWRpbmciLCJjcmVhdGVMb2FkaW5nVGV4dHVyZSIsImxvYWRQcmVkaWN0ZWRQYWdlcyIsInVwZGF0ZVJlbmRlclF1ZXVlIiwic3ByaXRlVGlsZXMiLCJhbmltYXRpb24iLCJMb2FkaW5nQW5pbWF0aW9uIiwiYW5pbWF0b3IiLCJUZXh0dXJlQW5pbWF0b3IiLCJjcmVhdGVTcHJpdGUiLCJpc0NvdmVyIiwic2V0dXBNYXRlcmlhbCIsImlzQWN0aXZlIiwicmVtb3ZlRnJvbUxvYWRpbmdzIiwicmVtb3ZlRnJvbVJlbmRlclF1ZXVlIiwid3JhcHBlciIsInB1c2hJblJlbmRlclF1ZXVlIiwiZXMiLCJhcmdzIiwicmVzb2x2ZVBlbmRpbmdzIiwicnRsUGFnZU4iLCJwaSIsImlzVG9wIiwic2V0TWF0ZXJpYWwiLCJjYWxjUmVzb2x1dGlvbiIsImludGVyYWN0aXZlIiwiQ29sb3IiLCJvblVwZGF0ZSIsInJlbmRlcmluZyIsImlzU2luZ2xlUGFnZSIsInVkIiwibmVhciIsInRyYW5zZmVyRXZlbnRzIiwibW91c2V1cCIsIm1vdXNlb3V0IiwiZW50IiwidG9PYmplY3QiLCJnZXRPckxvYWRUZXh0dXJlT2JqZWN0IiwidG9Eb2MiLCJvYiIsInBhZ2VEZXNjcmlwdGlvbiIsInZpZXdwb3J0IiwiZ2V0Vmlld3BvcnQiLCJjdXJzb3JzIiwiZGVmYXVsdEhhbmRsZXIiLCJkZXN0aW5hdGlvbiIsImNhbGxIYW5kbGVycyIsImV2ZW50IiwiYW5ubyIsImFubm90YXRpb24iLCJwb3AiLCJwcm9jZXNzIiwic3RhbXAiLCJnZXRUZXh0Q29udGVudCIsInRleHRDb250ZW50IiwiaXRlbXMiLCJpdGVtIiwibGF5ZXIiLCJhZGRDc3NPYmplY3QiLCJyZW1vdmVDc3NPYmplY3QiLCJyb3RhdGlvbiIsInRhcmdldEZvcmNlQ2xiIiwiZyIsInRsIiwidGFyZ2V0QW5nbGUiLCJmbGJ0IiwiZHJhZ0Nvcm5lckZvcmNlQ2xiIiwiZnBzIiwic3RhcnREdCIsIm1hcmdpbiIsImluZk0iLCJhdHRlbXB0cyIsIm1heEl0ZXJhdGlvbnMiLCJmb3JjZUNsYiIsImNvcm5lckZvcmNlQ2xiIiwiY2YiLCJnZXRQYXJhbWV0ck1hcCIsIlQiLCJhdHRlbXB0IiwiaXQiLCJub3MiLCJpbnRlZ3JhdGUiLCJjaSIsImZpbmRDb2xsaXNpb25zIiwic2NvcyIsInNvbHZlQ29sbGlzaW9uIiwiZ3MiLCJpMCIsImZpbmRBbmRTb2x2ZUNvcm5lckNvbGxpc2lvbnMiLCJyZW1vdmVTdGF0aWNzIiwiYWwiLCJkQ2giLCJkdiIsIm1tIiwiYXYiLCJidiIsImlzQ29sbGlzaW9uIiwiYWxmIiwiY29zQWxmIiwiYnJmIiwiYXVkaW8iLCJBdWRpbyIsImN1cnJlbnRUaW1lIiwiZW1pdHRlciIsInRhYiIsIm9uTmF2aWdhdGUiLCJuYXZpZ2F0ZVRodW1ibmFpbHMiLCJmaXJlQ2hhbmdlIiwibmF2aWdhdGVTZWFyY2giLCJuYXZpZ2F0ZUJvb2ttYXJrcyIsImlzQm9va21hcmtzIiwiY21kQm9va21hcmtzIiwiY21kVGh1bWJuYWlscyIsImNtZFNlYXJjaCIsImNtZENsb3NlVG9jIiwiV2lkZ2V0Q29udHJvbGxlciIsImZyb250R2VvbWV0cnkiLCJ0cmFuc2xhdGUiLCJiYWNrR2VvbWV0cnkiLCJyb3RhdGVZIiwibGVmdEdlb21ldHJ5IiwicmlnaHRHZW9tZXRyeSIsInRvcEdlb21ldHJ5Iiwicm90YXRlWCIsImJvdHRvbUdlb21ldHJ5IiwiR2VvbWV0cnkiLCJhZGRGYWNlcyIsImZzIiwiRmFjZTMiLCJtYXBWZXJ0aWNlcyIsImRzdCIsImVxIiwiZnJvbnRNYXAiLCJiYWNrTWFwIiwibGVmdE1hcCIsInJpZ2h0TWFwIiwiTGVmdCIsIk1pZGRsZSIsImdldFRpdGxlIiwidGl0bGUiLCJnZXRJdGVtcyIsIm5vZGVzIiwibWFwTm9kZXMiLCJsaSIsImNtZCIsIm1pbmltaXplZCIsInJlbmRlck5vZGUiLCJyZW5kZXJOb2RlcyIsImV4cGFuZCIsIm1pbmltaXplIiwibGV2ZWwiLCJnZXRXZWJHTEVycm9yTWVzc2FnZSIsImZvbnRGYW1pbHkiLCJmb250U2l6ZSIsImZvbnRXZWlnaHQiLCJ0ZXh0QWxpZ24iLCJiYWNrZ3JvdW5kIiwiaW5uZXJIVE1MIiwiV2ViR0xSZW5kZXJpbmdDb250ZXh0IiwicGFyYW1ldGVycyIsImNhbnZhcyIsIkNhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCIsIndvcmtlcnMiLCJXb3JrZXIiLCJmaWxlYXBpIiwiRmlsZSIsIkZpbGVSZWFkZXIiLCJGaWxlTGlzdCIsIkJsb2IiLCJEb2NNb3VzZVNpbXVsYXRvciIsImpGcmFtZSIsImJFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwicmVzZW5kUHJvcGVydGllcyIsImdldERlZmF1bHRSZXNlbmRQcm9wZXJ0aWVzIiwidW5kZWZpbmVkUHJvcGVydGllcyIsImdldERlZmF1bHRVbmRlZmluZWRQcm9wZXJ0aWVzIiwib25Eb2NDaGFuZ2VDbGJzIiwidGVybXMiLCJIT1ZFUiIsIkFDVElWRSIsInN0eWxlU2hlZXRzIiwic3MiLCJjc3NSdWxlcyIsImNzc1RleHQiLCJ0ZXJtIiwic2VsZWN0b3JUZXh0IiwiY29udmVydENvb3JkcyIsImpFbGVtZW50IiwidHJpZ2dlckV2ZW50IiwiYWR2YW5jZWRQcm9wcyIsInRpbWVTdGFtcCIsImdldENvbXB1dGVkU3R5bGUiLCJnZXRQcm9wZXJ0eVZhbHVlIiwiZW50ZXJFbGVtZW50IiwibGVhdmVFbGVtZW50IiwiYWN0aXZhdGVFbGVtZW50IiwiZGVhY3RpdmF0ZUVsZW1lbnQiLCJhZGREb2NDaGFuZ2VDbGIiLCJlbGVtZW50RnJvbVBvaW50IiwiY2hpbGROb2RlcyIsImNoaWxkIiwiRWxlbWVudCIsImdldEVsZW1lbnQiLCJvZmYwIiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0IiwiY2FwRWxlbWVudCIsImxlYXZlZCIsImhvdkVsZW1lbnQiLCJyZWxhdGVkVGFyZ2V0IiwiRG9tMkltYWdlIiwidXRpbCIsIm5ld1V0aWwiLCJpbmxpbmVyIiwibmV3SW5saW5lciIsImZvbnRGYWNlcyIsIm5ld0ZvbnRGYWNlcyIsImltYWdlcyIsIm5ld0ltYWdlcyIsInRvU3ZnIiwidG9QbmciLCJ0b0pwZWciLCJ0b0Jsb2IiLCJ0b1BpeGVsRGF0YSIsImltcGwiLCJjbG9uZU5vZGUiLCJlbWJlZEZvbnRzIiwiaW5saW5lSW1hZ2VzIiwiYXBwbHlPcHRpb25zIiwibWFrZVN2Z0RhdGFVcmkiLCJiZ2NvbG9yIiwiYmFja2dyb3VuZENvbG9yIiwicHJvcGVydHkiLCJkcmF3IiwiZ2V0SW1hZ2VEYXRhIiwidG9EYXRhVVJMIiwicXVhbGl0eSIsImNhbnZhc1RvQmxvYiIsImRvbU5vZGUiLCJtYWtlSW1hZ2UiLCJuZXdDYW52YXMiLCJmaWxsUmVjdCIsInJvb3QiLCJtYWtlTm9kZUNvcHkiLCJjbG9uZUNoaWxkcmVuIiwicHJvY2Vzc0Nsb25lIiwiaXNDYW52YXMiLCJvcmlnaW5hbCIsImNsb25lQ2hpbGRyZW5Jbk9yZGVyIiwiYXNBcnJheSIsImNoaWxkQ2xvbmUiLCJpc0VsZW1lbnQiLCJjbG9uZVN0eWxlIiwiY2xvbmVQc2V1ZG9FbGVtZW50cyIsImNvcHlVc2VySW5wdXQiLCJmaXhTdmciLCJjb3B5U3R5bGUiLCJzb3VyY2UiLCJjb3B5UHJvcGVydGllcyIsInNldFByb3BlcnR5IiwiZ2V0UHJvcGVydHlQcmlvcml0eSIsImNsb25lUHNldWRvRWxlbWVudCIsImNsYXNzTmFtZSIsInVpZCIsInN0eWxlRWxlbWVudCIsImZvcm1hdFBzZXVkb0VsZW1lbnRTdHlsZSIsInNlbGVjdG9yIiwiZm9ybWF0Q3NzVGV4dCIsImZvcm1hdENzc1Byb3BlcnRpZXMiLCJjcmVhdGVUZXh0Tm9kZSIsImZvcm1hdFByb3BlcnR5IiwiaXNUZXh0QXJlYSIsImlzSW5wdXQiLCJzZXRBdHRyaWJ1dGUiLCJpc1NWRyIsImlzU1ZHUmVjdCIsImF0dHJpYnV0ZSIsImdldEF0dHJpYnV0ZSIsInJlc29sdmVBbGwiLCJzdHlsZU5vZGUiLCJpbmxpbmVBbGwiLCJYTUxTZXJpYWxpemVyIiwic2VyaWFsaXplVG9TdHJpbmciLCJlc2NhcGVYaHRtbCIsInhodG1sIiwicGFyc2VFeHRlbnNpb24iLCJtaW1lVHlwZSIsImRhdGFBc1VybCIsImlzRGF0YVVybCIsInJlc29sdmVVcmwiLCJnZXRBbmRFbmNvZGUiLCJpc0ltYWdlIiwibWltZXMiLCJXT0ZGIiwiSlBFRyIsImV4dGVuc2lvbiIsImJpbmFyeVN0cmluZyIsImF0b2IiLCJiaW5hcnlBcnJheSIsIlVpbnQ4QXJyYXkiLCJjaGFyQ29kZUF0IiwiYmFzZVVybCIsImltcGxlbWVudGF0aW9uIiwiY3JlYXRlSFRNTERvY3VtZW50IiwiZm91clJhbmRvbUNoYXJzIiwidG9TdHJpbmciLCJzbGljZSIsInVyaSIsIkltYWdlIiwib25sb2FkIiwib25lcnJvciIsIlRJTUVPVVQiLCJYTUxIdHRwUmVxdWVzdCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsIm9udGltZW91dCIsInRpbWVvdXQiLCJyZXNwb25zZVR5cGUiLCJzZW5kIiwicmVhZHlTdGF0ZSIsInN0YXR1cyIsImVuY29kZXIiLCJvbmxvYWRlbmQiLCJyZXN1bHQiLCJyZWFkQXNEYXRhVVJMIiwicmVzcG9uc2UiLCJtZXNzYWdlIiwic3RyaW5nIiwibXMiLCJhcmciLCJhcnJheUxpa2UiLCJhcnJheSIsImxlZnRCb3JkZXIiLCJweCIsInJpZ2h0Qm9yZGVyIiwic2Nyb2xsV2lkdGgiLCJ0b3BCb3JkZXIiLCJib3R0b21Cb3JkZXIiLCJzY3JvbGxIZWlnaHQiLCJzdHlsZVByb3BlcnR5IiwicGFyc2VGbG9hdCIsIkhUTUxDYW52YXNFbGVtZW50IiwiSFRNTFRleHRBcmVhRWxlbWVudCIsIkhUTUxJbnB1dEVsZW1lbnQiLCJTVkdFbGVtZW50IiwiU1ZHUmVjdEVsZW1lbnQiLCJIVE1MSW1hZ2VFbGVtZW50IiwiVVJMX1JFR0VYIiwic2hvdWxkUHJvY2VzcyIsInJlYWRVcmxzIiwiaW5saW5lIiwiZGF0YVVybCIsInVybEFzUmVnZXgiLCJub3RoaW5nVG9JbmxpbmUiLCJ1cmxzIiwicmVhZEFsbCIsIndlYkZvbnRzIiwid2ViRm9udCIsImNzc1N0cmluZ3MiLCJnZXRDc3NSdWxlcyIsInNlbGVjdFdlYkZvbnRSdWxlcyIsInJ1bGVzIiwibmV3V2ViRm9udCIsInJ1bGUiLCJDU1NSdWxlIiwiRk9OVF9GQUNFX1JVTEUiLCJsb2ciLCJ3ZWJGb250UnVsZSIsInBhcmVudFN0eWxlU2hlZXQiLCJuZXdJbWFnZSIsImlubGluZUJhY2tncm91bmQiLCJpbmxpbmVkIiwiRHJhZyIsImludGVyc2VjdGlvbiIsInNlbGVjdGVkIiwiY29udHJvbHNTdGF0ZSIsImdldENvbnRyb2xzU3RhdGUiLCJvbk1vdXNlTW92ZSIsIm9uTW91c2VEb3duIiwib25Nb3VzZVVwIiwicmF5Iiwib3JpZ2luIiwic2V0Q29udHJvbHNTdGF0ZSIsImdldFdvcmxkRGlyZWN0aW9uIiwiaW50ZXJzZWN0UGxhbmUiLCJnZXRFdmVudEZsYWdzIiwiY3RybEtleSIsInNoaWZ0S2V5IiwiYWx0S2V5IiwiZ2V0UG9zaXRpb24iLCJjb250ZXh0TWVudSIsIm1vdXNlRG93biIsIm1vdXNlTW92ZSIsIm1vdXNlVXAiLCJtb3VzZVdoZWVsIiwibW91c2VNb3ZlRG9jIiwibW91c2VVcERvYyIsImNsaWNrIiwiZGJsY2xpY2siLCJ0b3VjaFN0YXJ0IiwidG91Y2hNb3ZlIiwidG91Y2hFbmQiLCJrZXlEb3duIiwia2V5UHJlc3MiLCJrZXlVcCIsImZpcmVBY3Rpb25zIiwiYnV0dG9uIiwicGlja2VkIiwiY2xpY2tzIiwidG91Y2hQaWNrIiwicG9zIiwidG91Y2hQaWNrZWQiLCJrZXlDb2RlIiwibW9kS2V5cyIsIkN0cmwiLCJTaGlmdCIsIkFsdCIsIl9oYXNXZWJraXRGdWxsU2NyZWVuIiwiX2hhc01vekZ1bGxTY3JlZW4iLCJfaGFzTXNGdWxsc2NyZWVuIiwid2Via2l0SXNGdWxsU2NyZWVuIiwibW96RnVsbFNjcmVlbiIsIm1zRnVsbHNjcmVlbkVsZW1lbnQiLCJhc3NlcnQiLCJ3ZWJraXRSZXF1ZXN0RnVsbFNjcmVlbiIsIm1velJlcXVlc3RGdWxsU2NyZWVuIiwibXNSZXF1ZXN0RnVsbHNjcmVlbiIsIndlYmtpdENhbmNlbEZ1bGxTY3JlZW4iLCJtb3pDYW5jZWxGdWxsU2NyZWVuIiwibXNFeGl0RnVsbHNjcmVlbiIsImRvY3VtZW50RWxlbWVudCIsImlJZCIsImhhc0ZlYXR1cmUiLCJpbWFnZUxvYWQiLCJzdmdSZW5kZXIiLCJmcmFtZUxvYWQiLCJzaW11bGF0b3IiLCJjYWxjVGltZVRvIiwidXBkYXRlSW50ZXJ2YWwiLCJjbGVhclJlY3QiLCJzaGFkb3dCbHVyIiwic2hhZG93Q29sb3IiLCJzaGFkb3dPZmZzZXRYIiwic2hhZG93T2Zmc2V0WSIsImZvbnQiLCJ0ZXh0QmFzZWxpbmUiLCJmaWxsVGV4dCIsImRhIiwiX2EiLCJfciIsImN4IiwiY3kiLCJueCIsIm55IiwiYXJjIiwiZ2V0SW1hZ2UiLCJzaG93UHJvZ3Jlc3MiLCJsb2FkaW5nTXNnIiwiZ2V0TG9hZGluZ01zZyIsImRlZmF1bHRMb2FkaW5nTXNnIiwiTW91c2VFdmVudENvbnZlcnRlciIsImJvdW5kQm94Q2xiIiwidGVzdFNjYWxlIiwiZWxlbWVudFNpemUiLCJkZXZpY2VQaXhlbFJhdGlvIiwidngiLCJ2eSIsImJveCIsImNvbXB1dGVDbGllbnRCb3VuZEJveCIsIm1vdmVQYW4iLCJ2VG9DYW1lcmEiLCJwcm9qZWN0IiwieHMiLCJ6cyIsInNldE9iamVjdCIsImNvbXB1dGVDb3JyIiwiY29yciIsImdldFNjYWxlIiwiS3giLCJLeSIsImNlbnRlclZpZXciLCJ0ZiIsIlkiLCJ2ZCIsIk9yYml0IiwibWluRGlzdGFuY2UiLCJtaW5ab29tIiwibWF4Wm9vbSIsImVuYWJsZURhbXBpbmciLCJkYW1waW5nRmFjdG9yIiwiZW5hYmxlWm9vbSIsInpvb21TcGVlZCIsImVuYWJsZVJvdGF0ZSIsInJvdGF0ZVNwZWVkIiwiZW5hYmxlUGFuIiwiYXV0b1JvdGF0ZSIsImF1dG9Sb3RhdGVTcGVlZCIsInRhcmdldDAiLCJwb3NpdGlvbjAiLCJ6b29tMCIsImdldFBvbGFyQW5nbGUiLCJzcGhlcmljYWwiLCJwaGkiLCJnZXRBemltdXRoYWxBbmdsZSIsInRoZXRhIiwicmVzZXQiLCJzY29wZSIsInVwZGF0ZVByb2plY3Rpb25NYXRyaXgiLCJjaGFuZ2VFdmVudCIsIl9zcGVlZCIsImRvbGx5SW4iLCJnZXRab29tU2NhbGUiLCJkb2xseU91dCIsIm5ld1NjYWxlIiwicXVhdCIsIlF1YXRlcm5pb24iLCJzZXRGcm9tVW5pdFZlY3RvcnMiLCJ1cCIsInF1YXRJbnZlcnNlIiwibGFzdFBvc2l0aW9uIiwibGFzdFF1YXRlcm5pb24iLCJhcHBseVF1YXRlcm5pb24iLCJzZXRGcm9tVmVjdG9yMyIsInJvdGF0ZUxlZnQiLCJnZXRBdXRvUm90YXRpb25BbmdsZSIsInNwaGVyaWNhbERlbHRhIiwibWFrZVNhZmUiLCJyYWRpdXMiLCJwYW5PZmZzZXQiLCJzZXRGcm9tU3BoZXJpY2FsIiwibG9va0F0Iiwiem9vbUNoYW5nZWQiLCJFUFMiLCJkb3QiLCJTcGhlcmljYWwiLCJyb3RhdGVVcCIsInBhbkxlZnQiLCJvYmplY3RNYXRyaXgiLCJzZXRGcm9tTWF0cml4Q29sdW1uIiwibXVsdGlwbHlTY2FsYXIiLCJwYW5VcCIsImRlbHRhWCIsIlBlcnNwZWN0aXZlQ2FtZXJhIiwidGFyZ2V0RGlzdGFuY2UiLCJ0YW4iLCJjbGllbnRIZWlnaHQiLCJPcnRob2dyYXBoaWNDYW1lcmEiLCJjbGllbnRXaWR0aCIsImJvdHRvbSIsImRvbGx5U2NhbGUiLCJvZmZzZXREb2xseSIsIndoZWVsRG9sbHkiLCJtMDAiLCJtMDEiLCJtMDIiLCJtMTAiLCJtMTEiLCJtMTIiLCJtMjAiLCJtMjEiLCJtMjIiLCJ0cmltIiwic2V0SGl0cyIsInJlY3RTaXplIiwiY3JlYXRlUG9seSIsInNldEFubm90YXRpb25zIiwiYW5ub3MiLCJ0YXJnZXRzIiwic3VidHlwZSIsImFQb3MiLCJhU3oiLCJQb2x5VGFyZ2V0IiwiYW5ub0NsYiIsImZpbmRlciIsInJlbmRlckhpdHMiLCJ0ZXN0U3oiLCJ0ZXh0RGl2IiwiYmFzZU9mZnNldCIsImhpdCIsIlV0aWwiLCJmb250TmFtZSIsImF0YW4yIiwidmVydGljYWwiLCJmb250SGVpZ2h0IiwiZm9udEFzY2VudCIsImFzY2VudCIsImRlc2NlbnQiLCJ0ZXN0U3BhbiIsIml3aWR0aCIsInJlbGF0aXZlT2Zmc2V0IiwiY2FsY1ZpZXdwb3J0Iiwib2Zmc2V0WCIsImdldEFubm90YXRpb25zIiwiY2FudmFzQ29udGV4dCIsInByZXZSZXN1bHRzIiwibmF2aWdhdGUiLCJkb1F1ZXJ5IiwicXVlcnlTdGFtcCIsImh0bWxzIiwiY3Jvc3NPcmlnaW4iLCJpbWFnZUVycm9yIiwiaW1nIiwidGlsZXNIb3JpeiIsInRpbGVzVmVydCIsIm51bVRpbGVzIiwidGlsZURpc3BEdXJhdGlvbiIsInRpbGVzSG9yaXpvbnRhbCIsInRpbGVzVmVydGljYWwiLCJudW1iZXJPZlRpbGVzIiwidGlsZURpc3BsYXlEdXJhdGlvbiIsImN1cnJlbnREaXNwbGF5VGltZSIsImN1cnJlbnRUaWxlIiwibWlsbGlTZWMiLCJjdXJyZW50Q29sdW1uIiwiY3VycmVudFJvdyIsIlRocmVlTW91c2VFdmVudENvbnZlcnRlciIsIlRocmVlRXZlbnRDb252ZXJ0ZXIiLCJUaHJlZVRvdWNoRXZlbnRDb252ZXJ0ZXIiLCJsYXN0VG91Y2hlcyIsIlRvdWNoRXZlbnRDb252ZXJ0ZXIiLCJ0aHVtYm5haWxzQ2xiIiwiaGVhZGluZyIsInRodW1ibmFpbCIsImRhdGFUaHVtYm5haWwiLCJzZXRJbWFnZSIsImdldEFjdGl2ZSIsInNjcm9sbFRvcCIsImJ1aWx0IiwiVG91Y2hDb252ZXJ0ZXIiLCJjbGFzc1Byb3BlcnR5IiwiYXR0cmlidXRlUHJvcGVydHkiLCJhdHRyaWJ1dGVOYW1lIiwicmVtb3ZlQXR0ciIsImhhbmRsZUxpbmtFdmVudCIsImhhbmRsZUlucHV0RXZlbnQiLCJoYW5kbGVGb3JtRXZlbnQiLCJnZXRUaW1lIiwicGVuZGluZyIsImxvYWRGaWxlcyIsImZpbGVzIiwidGFza3MiLCJ1cmxSZXNvbHZlciIsImxhc3RJbmRleE9mIiwicGFydHMiLCJwYXJ0Iiwib2JqVG9BdHRyc1N0ciIsImNoZWNrSWZyYW1lU2l6ZSIsIm9uUmVzaXplIiwiczAiLCJzMSIsImZpcmVMaW5rc09uTG9hZEV2ZW50IiwibGlua0xvYWRlZCIsImpMaW5rIiwiakxpbmtzIiwiaXNJT1MiLCJNU1N0cmVhbSIsInN0b3AiLCJ0ZW1wbGF0ZU5hbWUiLCJ0ZXh0Q3NzIiwicjEiLCJsaW5rQ29udHJvbHMiLCJ3aWRnZXRDb250cm9scyIsImlucHV0Q29udHJvbHMiLCJmb3JtQ29udHJvbHMiLCJ0ZXh0Q29udHJvbHMiLCJzdGF0ZVNldHRlcnMiLCJzZXR0ZXIiLCJzZXRMaW5rQ29udHJvbFN0YXRlIiwic2V0V2lkZ2V0Q29udHJvbFN0YXRlIiwic2V0SW5wdXRDb250cm9sU3RhdGUiLCJzZXRUZXh0Q29udHJvbFN0YXRlIiwic2V0Q29udHJvbFN0YXRlIiwic3RhdGVIYW5kbGVycyIsInN0IiwibGlua1N0YXRlSGFuZGxlcnMiLCJ3aWRnZXRTdGF0ZUhhbmRsZXJzIiwiaW5wdXRTdGF0ZUhhbmRsZXJzIiwidGV4dFN0YXRlSGFuZGxlcnMiLCJ0ZXh0IiwidXNlSGVscGVycyIsImNoZWNrVXBkYXRlRmxhZyIsInJlbmRlckNhbGxiYWNrcyIsImRpYWciLCJnZXREaWFnIiwiY2xvY2siLCJDbG9jayIsIlJheWNhc3RlciIsIlNjZW5lIiwiY3NzU2NlbmUiLCJyZW5kZXJlciIsIldlYkdMUmVuZGVyZXIiLCJhbHBoYSIsInByZWNpc2lvbiIsImdldFByZWNpc2lvbiIsImFudGlhbGlhcyIsInNldFBpeGVsUmF0aW8iLCJjc3NSZW5kZXJlciIsIlRleHR1cmVMb2FkZXIiLCJBbWJpZW50TGlnaHQiLCJsaWdodCIsIkRpcmVjdGlvbmFsTGlnaHQiLCJjb250cm9scyIsInRtcFZlY3RvciIsIkF4aXNIZWxwZXIiLCJvbldpbmRvd1Jlc2l6ZSIsImFuaW1hdGUiLCJmaWx0ZXJEYXRhIiwidHlwZXMiLCJjb250YWlucyIsInNjcmVlbiIsImludGVuc2l0eSIsInVwZGF0ZUNhbWVyYSIsImFzcGVjdCIsInVwZGF0ZVJlbmRlcmVyIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiZGVsdGFUaW1lIiwiZ2V0RGVsdGEiLCJnZXRQaXhlbCIsInJlYWRQaXhlbHMiLCJSR0JBIiwiVU5TSUdORURfQllURSIsIm9uWVRSZWFkeSIsInNldENvbmZpZyIsIllUQ29uZmlnIiwiYXN5bmMiLCJjdXJyZW50U2NyaXB0Iiwibm9uY2UiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImluc2VydEJlZm9yZSJdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxtREFBMkMsY0FBYzs7QUFFekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBMkIsMEJBQTBCLEVBQUU7QUFDdkQseUNBQWlDLGVBQWU7QUFDaEQ7QUFDQTtBQUNBOztBQUVBO0FBQ0EsOERBQXNELCtEQUErRDs7QUFFckg7QUFDQTs7QUFFQTtBQUNBOzs7Ozs7Ozs7OztBQ2hFQSxJQUFNQSxLQUFLQyxLQUFBLEdBQW9CQyxPQUFPQyxNQUEzQixHQUFtQ0MsUUFBUSxRQUFSLENBQTlDO0FBQUEsSUFDTUMsZUFBZUosS0FBQSxHQUF5QkMsT0FBT0ksV0FBaEMsR0FBNkNGLFFBQVEsYUFBUixDQURsRTtBQUFBLElBRU1HLFNBQVNOLEtBQUEsR0FBbUJDLE9BQU9NLEtBQTFCLEdBQWlDSixRQUFRLE9BQVIsQ0FGaEQ7QUFBQSxJQUdNSyxTQUFTUixLQUFBLEdBQW1CQyxPQUFPUSxLQUExQixHQUFpQ04sUUFBUSxPQUFSLENBSGhEO0FBQUEsSUFJTU8sWUFBWVYsS0FBQSxHQUFtQkMsT0FBT1UsUUFBMUIsR0FBb0NSLFFBQVEsV0FBUixDQUp0RDtBQUFBLElBS01TLFNBQVNaLEtBQUEsR0FBbUJDLE9BQU9ZLFFBQTFCLEdBQW9DVixRQUFRLE9BQVIsQ0FMbkQ7QUFBQSxJQU1NVyxNQUFNLFNBQU5BLEdBQU0sQ0FBQ0MsQ0FBRDtBQUFBLFNBQU0sQ0FBQ2QsT0FBT2UsV0FBUCxJQUFzQixFQUF2QixFQUEyQkMsRUFBM0IsSUFBaUNoQixPQUFPZSxXQUFQLENBQW1CQyxFQUFuQixDQUFzQkYsQ0FBdEIsQ0FBakMsSUFBNkRBLENBQW5FO0FBQUEsQ0FOWjs7UUFTUUcsQyxHQUFObkIsRTtRQUNnQk0sVyxHQUFoQkQsWTtRQUNVRyxLLEdBQVZELE07UUFDVUcsSyxHQUFWRCxNO1FBQ2FHLFEsR0FBYkQsUztRQUNVUyxLLEdBQVZQLE07UUFDT0ssRSxHQUFQSCxHOzs7Ozs7Ozs7Ozs7O0FDZkYsSUFBTWYsS0FBS0MsS0FBQSxHQUFvQkMsT0FBT0MsTUFBM0IsR0FBbUNDLFFBQVEsUUFBUixDQUE5QztBQUFBLElBQ01DLGVBQWVKLEtBQUEsR0FBeUJDLE9BQU9JLFdBQWhDLEdBQTZDRixRQUFRLGFBQVIsQ0FEbEU7QUFBQSxJQUVNRyxTQUFTTixLQUFBLEdBQW1CQyxPQUFPTSxLQUExQixHQUFpQ0osUUFBUSxPQUFSLENBRmhEO0FBQUEsSUFHTVMsU0FBU1osS0FBQSxHQUFtQkMsT0FBT2tCLEtBQTFCLEdBQWlDaEIsUUFBUSxPQUFSLENBSGhEO0FBQUEsSUFJTVcsTUFBTSxTQUFOQSxHQUFNLENBQUNDLENBQUQ7QUFBQSxTQUFNLENBQUNkLE9BQU9lLFdBQVAsSUFBc0IsRUFBdkIsRUFBMkJDLEVBQTNCLElBQWlDaEIsT0FBT2UsV0FBUCxDQUFtQkMsRUFBbkIsQ0FBc0JGLENBQXRCLENBQWpDLElBQTZEQSxDQUFuRTtBQUFBLENBSlo7O0FBTUEsSUFBR2QsT0FBT21CLFdBQVYsRUFBdUI7QUFDckJuQixTQUFPZSxXQUFQLGdCQUNLZixPQUFPZSxXQURaO0FBRUVDLFFBQUksWUFBQ0YsQ0FBRDtBQUFBLGFBQU0sQ0FBQ0ssWUFBWUMsVUFBWixJQUEwQixFQUEzQixFQUErQk4sQ0FBL0IsS0FBcUNBLENBQTNDO0FBQUE7QUFGTjtBQUlEOztRQUdPRyxDLEdBQU5uQixFO1FBQ2dCTSxXLEdBQWhCRCxZO1FBQ1VHLEssR0FBVkQsTTtRQUNVYSxLLEdBQVZQLE07UUFDT0ssRSxHQUFQSCxHOzs7Ozs7Ozs7Ozs7O0lDbEJtQlEsYTs7Ozs7Z0JBSVpDLEksaUJBQUtDLEUsRUFBR0MsQyxFQUFFQyxFLEVBQUdDLEMsRUFBRztBQUNyQixXQUFPLENBQ0xILEtBQUdDLEVBQUUsQ0FBRixDQUFILEdBQVFDLEtBQUdDLEVBQUUsQ0FBRixDQUROLENBQVA7QUFHRCxHOztnQkFFTUMsSSxpQkFBS0osRSxFQUFHQyxDLEVBQUVDLEUsRUFBR0MsQyxFQUFHO0FBQ3JCLFdBQU8sQ0FDTEgsS0FBR0MsRUFBRSxDQUFGLENBQUgsR0FBUUMsS0FBR0MsRUFBRSxDQUFGLENBRE4sRUFFTEgsS0FBR0MsRUFBRSxDQUFGLENBQUgsR0FBUUMsS0FBR0MsRUFBRSxDQUFGLENBRk4sQ0FBUDtBQUlELEc7O2dCQUVNRSxJLGlCQUFLTCxFLEVBQUdDLEMsRUFBRUMsRSxFQUFHQyxDLEVBQUc7QUFDckIsV0FBTyxDQUNMSCxLQUFHQyxFQUFFLENBQUYsQ0FBSCxHQUFRQyxLQUFHQyxFQUFFLENBQUYsQ0FETixFQUVMSCxLQUFHQyxFQUFFLENBQUYsQ0FBSCxHQUFRQyxLQUFHQyxFQUFFLENBQUYsQ0FGTixFQUdMSCxLQUFHQyxFQUFFLENBQUYsQ0FBSCxHQUFRQyxLQUFHQyxFQUFFLENBQUYsQ0FITixDQUFQO0FBS0QsRzs7Z0JBRU1HLEksaUJBQUtOLEUsRUFBR0MsQyxFQUFFQyxFLEVBQUdDLEMsRUFBRztBQUNyQixXQUFPLENBQ0xILEtBQUdDLEVBQUUsQ0FBRixDQUFILEdBQVFDLEtBQUdDLEVBQUUsQ0FBRixDQUROLEVBRUxILEtBQUdDLEVBQUUsQ0FBRixDQUFILEdBQVFDLEtBQUdDLEVBQUUsQ0FBRixDQUZOLEVBR0xILEtBQUdDLEVBQUUsQ0FBRixDQUFILEdBQVFDLEtBQUdDLEVBQUUsQ0FBRixDQUhOLEVBSUxILEtBQUdDLEVBQUUsQ0FBRixDQUFILEdBQVFDLEtBQUdDLEVBQUUsQ0FBRixDQUpOLENBQVA7QUFNRCxHOztnQkFFTUksRyxnQkFBSUMsRSxFQUFJQyxDLEVBQUdDLEUsRUFBSUMsQyxFQUFzQztBQUFBLFFBQW5DQyxHQUFtQyx1RUFBL0JkLGNBQWNjLEdBQWQsQ0FBa0JELEVBQUVFLE1BQUYsR0FBUyxDQUEzQixDQUErQjs7QUFDMUQsUUFBTUMsS0FBR04sR0FBR0MsQ0FBSCxFQUFLRSxDQUFMLENBQVQ7QUFBQSxRQUNNSSxLQUFHUCxHQUFHQyxJQUFFQyxLQUFHLENBQVIsRUFBVUUsSUFBSSxDQUFKLEVBQU1ELENBQU4sRUFBUUQsS0FBRyxDQUFYLEVBQWFJLEVBQWIsQ0FBVixDQURUO0FBQUEsUUFFTUUsS0FBR1IsR0FBR0MsSUFBRUMsS0FBRyxDQUFSLEVBQVVFLElBQUksQ0FBSixFQUFNRCxDQUFOLEVBQVFELEtBQUcsQ0FBWCxFQUFhSyxFQUFiLENBQVYsQ0FGVDtBQUFBLFFBR01FLEtBQUdULEdBQUdDLElBQUVDLEVBQUwsRUFBUUUsSUFBSSxDQUFKLEVBQU1ELENBQU4sRUFBUUQsRUFBUixFQUFXTSxFQUFYLENBQVIsQ0FIVDtBQUlBLFdBQU9KLElBQUksQ0FBSixFQUFNRCxDQUFOLEVBQVFELEtBQUcsQ0FBWCxFQUFhRSxJQUFJLENBQUosRUFBTUEsSUFBSSxDQUFKLEVBQU1FLEVBQU4sRUFBUyxDQUFULEVBQVdDLEVBQVgsQ0FBTixFQUFxQixDQUFyQixFQUF1QkgsSUFBSSxDQUFKLEVBQU1JLEVBQU4sRUFBUyxDQUFULEVBQVdDLEVBQVgsQ0FBdkIsQ0FBYixDQUFQO0FBQ0QsRzs7Z0JBRU1DLGlCLDhCQUFrQkMsQyxFQUFFUixDLEVBQUVTLEUsRUFBSTtBQUMvQixXQUFPVCxFQUFFLENBQUYsSUFBSyxDQUFDQSxFQUFFLENBQUYsSUFBS0EsRUFBRSxDQUFGLENBQU4sS0FBYVEsRUFBRSxDQUFGLElBQUtBLEVBQUUsQ0FBRixDQUFsQixLQUF5QkMsS0FBR0QsRUFBRSxDQUFGLENBQTVCLENBQVo7QUFDRCxHOztnQkFFTUUsaUIsOEJBQWtCRixDLEVBQUVSLEMsRUFBRVMsRSxFQUFJO0FBQy9CLFFBQUlFLFdBQUo7QUFDQSxRQUFHSCxFQUFFLENBQUYsSUFBS0EsRUFBRSxDQUFGLENBQVIsRUFBYztBQUNaQSxVQUFFQSxFQUFFSSxPQUFGLEVBQUY7QUFDQVosVUFBRUEsRUFBRVksT0FBRixFQUFGO0FBQ0Q7QUFDRCxRQUFHSCxLQUFHRCxFQUFFLENBQUYsQ0FBTixFQUFZO0FBQ1ZHLFdBQUdYLEVBQUUsQ0FBRixDQUFIO0FBQ0QsS0FGRCxNQUdLLElBQUdTLEtBQUdELEVBQUUsQ0FBRixDQUFOLEVBQVk7QUFDZkcsV0FBR1gsRUFBRSxDQUFGLENBQUg7QUFDRCxLQUZJLE1BR0E7QUFDSFcsV0FBR3hCLGNBQWNvQixpQkFBZCxDQUFnQ0MsQ0FBaEMsRUFBa0NSLENBQWxDLEVBQW9DUyxFQUFwQyxDQUFIO0FBQ0Q7QUFDRCxXQUFPRSxFQUFQO0FBQ0QsRzs7Z0JBRU1FLFMsc0JBQVVDLEksRUFBTUMsSSxFQUFNQyxJLEVBQU1DLEksRUFBTTtBQUN2QyxXQUFPRCxPQUFLRixJQUFaLENBRHVDLENBQ3JCO0FBQ25CLEc7O2dCQUVNSSxJLGlCQUFLNUIsQyxFQUFHRSxDLEVBQUc7QUFDaEIsUUFBTTJCLElBQUUsRUFBUjtBQUNBLFNBQUksSUFBSUMsSUFBRSxDQUFWLEVBQVlBLElBQUU5QixFQUFFWSxNQUFoQixFQUF1QixFQUFFa0IsQ0FBekIsRUFBNEI7QUFDMUJELFFBQUVFLElBQUYsQ0FBTyxFQUFQO0FBQ0EsV0FBSSxJQUFJQyxJQUFFLENBQVYsRUFBWUEsSUFBRTlCLEVBQUUsQ0FBRixFQUFLVSxNQUFuQixFQUEwQixFQUFFb0IsQ0FBNUIsRUFBK0I7QUFDN0JILFVBQUVDLENBQUYsRUFBS0UsQ0FBTCxJQUFVLENBQVY7QUFDQSxhQUFJLElBQUlDLElBQUUsQ0FBVixFQUFZQSxJQUFFL0IsRUFBRVUsTUFBaEIsRUFBdUIsRUFBRXFCLENBQXpCLEVBQTRCO0FBQzFCSixZQUFFQyxDQUFGLEVBQUtFLENBQUwsS0FBU2hDLEVBQUU4QixDQUFGLEVBQUtHLENBQUwsSUFBUS9CLEVBQUUrQixDQUFGLEVBQUtELENBQUwsQ0FBakI7QUFDRDtBQUNGO0FBQ0Y7QUFDRCxXQUFPSCxDQUFQO0FBQ0QsRzs7Z0JBRU1LLE0sbUJBQU9DLEMsRUFBRztBQUNmLFFBQU1OLElBQUUsRUFBUjtBQUNBLFNBQUksSUFBSUMsSUFBRSxDQUFWLEVBQVlBLElBQUVLLEVBQUV2QixNQUFoQixFQUF1QixFQUFFa0IsQ0FBekIsRUFBNEI7QUFDMUIsV0FBSSxJQUFJRSxJQUFFLENBQVYsRUFBWUEsSUFBRUcsRUFBRSxDQUFGLEVBQUt2QixNQUFuQixFQUEwQixFQUFFb0IsQ0FBNUIsRUFBK0I7QUFDN0IsWUFBRyxDQUFDSCxFQUFFRyxDQUFGLENBQUosRUFBVTtBQUNSSCxZQUFFRyxDQUFGLElBQUssRUFBTDtBQUNEO0FBQ0RILFVBQUVHLENBQUYsRUFBS0YsQ0FBTCxJQUFRSyxFQUFFTCxDQUFGLEVBQUtFLENBQUwsQ0FBUjtBQUNEO0FBQ0Y7QUFDRCxXQUFPSCxDQUFQO0FBQ0QsRzs7Z0JBRU1PLEcsZ0JBQUlDLEksRUFBTTtBQUNmLFFBQUkvQyxJQUFFLENBQU47QUFDQSx5QkFBYStDLElBQWIsa0hBQW1CO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQSxVQUFYbkIsQ0FBVzs7QUFDakI1QixXQUFHNEIsQ0FBSDtBQUNEO0FBQ0QsV0FBTzVCLElBQUUrQyxLQUFLekIsTUFBZDtBQUNELEc7O2dCQUVNMEIsSSxpQkFBS0QsSSxFQUFNO0FBQ2hCLFFBQU1FLElBQUUxQyxjQUFjdUMsR0FBZCxDQUFrQkMsSUFBbEIsQ0FBUjtBQUNBLFFBQUkvQyxJQUFFLENBQU47QUFDQSwwQkFBYStDLElBQWIseUhBQW1CO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQSxVQUFYbkIsQ0FBVzs7QUFDakI1QixXQUFHLENBQUM0QixJQUFFcUIsQ0FBSCxLQUFPckIsSUFBRXFCLENBQVQsQ0FBSDtBQUNEO0FBQ0QsV0FBT2pELElBQUUrQyxLQUFLekIsTUFBZDtBQUNELEc7O2dCQUVNNEIsUSxxQkFBU0gsSSxFQUFNSSxHLEVBQUs7QUFDekIsUUFBTVosSUFBRSxFQUFSO0FBQUEsUUFBWWEsSUFBRUwsS0FBS3pCLE1BQW5CO0FBQUEsUUFBMkIrQixJQUFFOUMsY0FBY3lDLElBQWQsQ0FBbUJELElBQW5CLENBQTdCO0FBQ0EsUUFBR00sSUFBRUQsQ0FBRixJQUFPQSxJQUFFLENBQVosRUFBZTtBQUNiLFVBQU1FLEtBQUcsRUFBVDtBQUFBLFVBQWFDLEtBQUcsRUFBaEI7QUFDQSxXQUFJLElBQUlmLElBQUUsQ0FBVixFQUFZQSxJQUFFWSxDQUFkLEVBQWdCLEVBQUVaLENBQWxCLEVBQXFCO0FBQ25CYyxXQUFHYixJQUFILENBQVEsQ0FBQ0QsQ0FBRCxFQUFHLENBQUgsQ0FBUjtBQUNBZSxXQUFHZCxJQUFILENBQVEsQ0FBQ00sS0FBS1AsQ0FBTCxDQUFELENBQVI7QUFDRDtBQUNELFVBQU1nQixLQUFHakQsY0FBY3FDLE1BQWQsQ0FBcUJVLEVBQXJCLENBQVQ7QUFBQSxVQUFtQzVDLElBQUVILGNBQWMrQixJQUFkLENBQW1Ca0IsRUFBbkIsRUFBc0JGLEVBQXRCLENBQXJDO0FBQUEsVUFBZ0UxQyxJQUFFTCxjQUFjK0IsSUFBZCxDQUFtQmtCLEVBQW5CLEVBQXNCRCxFQUF0QixDQUFsRTtBQUFBLFVBQ0FFLElBQUcvQyxFQUFFLENBQUYsRUFBSyxDQUFMLElBQVFBLEVBQUUsQ0FBRixFQUFLLENBQUwsQ0FBUixHQUFnQkEsRUFBRSxDQUFGLEVBQUssQ0FBTCxJQUFRQSxFQUFFLENBQUYsRUFBSyxDQUFMLENBRDNCO0FBQUEsVUFFQWdELElBQUUsQ0FDQSxFQUFFaEQsRUFBRSxDQUFGLEVBQUssQ0FBTCxJQUFRRSxFQUFFLENBQUYsRUFBSyxDQUFMLENBQVIsR0FBZ0JBLEVBQUUsQ0FBRixFQUFLLENBQUwsSUFBUUYsRUFBRSxDQUFGLEVBQUssQ0FBTCxDQUExQixJQUFtQytDLENBRG5DLEVBRUEsQ0FBQy9DLEVBQUUsQ0FBRixFQUFLLENBQUwsSUFBUUUsRUFBRSxDQUFGLEVBQUssQ0FBTCxDQUFSLEdBQWdCRixFQUFFLENBQUYsRUFBSyxDQUFMLElBQVFFLEVBQUUsQ0FBRixFQUFLLENBQUwsQ0FBekIsSUFBa0M2QyxDQUZsQyxDQUZGO0FBTUEsV0FBSSxJQUFJakIsTUFBRSxDQUFWLEVBQVlBLE1BQUVXLEdBQWQsRUFBa0IsRUFBRVgsR0FBcEIsRUFBdUI7QUFDckIsWUFBTW1CLElBQUlDLEtBQUtDLEtBQUwsQ0FBV0gsRUFBRSxDQUFGLEtBQU1sQixNQUFFWSxDQUFSLElBQVdNLEVBQUUsQ0FBRixDQUF0QixDQUFWO0FBQ0EsWUFBR25CLEVBQUV1QixPQUFGLENBQVVILENBQVYsTUFBZSxDQUFDLENBQW5CLEVBQXNCO0FBQ3BCcEIsWUFBRUUsSUFBRixDQUFPa0IsQ0FBUDtBQUNEO0FBQ0Y7QUFDRjtBQUNELFdBQU9wQixDQUFQO0FBQ0QsRzs7Z0JBRU13QixPLG9CQUFRaEIsSSxFQUFNSSxHLEVBQUs7QUFDeEIsUUFBTVosSUFBRSxFQUFSO0FBQUEsUUFBWWEsSUFBRUwsS0FBS3pCLE1BQW5CO0FBQ0EsUUFBSTBDLE9BQUssQ0FBVDtBQUNBLFNBQUksSUFBSXhCLElBQUUsQ0FBVixFQUFZQSxJQUFFWSxJQUFFLENBQWhCLEVBQWtCLEVBQUVaLENBQXBCLEVBQXVCO0FBQ3JCd0IsY0FBTUosS0FBS0ssSUFBTCxDQUFVbEIsS0FBS1AsSUFBRSxDQUFQLElBQVVPLEtBQUtQLENBQUwsQ0FBcEIsQ0FBTjtBQUNEO0FBQ0QsUUFBR29CLEtBQUtNLEdBQUwsQ0FBU0YsSUFBVCxLQUFnQixDQUFDWixJQUFFLENBQUgsSUFBTSxDQUF6QixFQUE0QjtBQUMxQlksYUFBTyxDQUFDLENBQVI7QUFDRCxLQUZELE1BR0s7QUFDSEEsYUFBT0osS0FBS0ssSUFBTCxDQUFVRCxJQUFWLENBQVA7QUFDRDtBQUNELFNBQUksSUFBSXhCLE1BQUUsQ0FBTixFQUFTMkIsTUFBSXBCLEtBQUtLLElBQUUsQ0FBUCxDQUFqQixFQUE0QlosTUFBRVcsR0FBRixJQUFTZ0IsTUFBSSxDQUF6QyxFQUE0QyxFQUFFM0IsR0FBOUMsRUFBaUQ7QUFDL0MyQixhQUFLSCxJQUFMO0FBQ0F6QixRQUFFRSxJQUFGLENBQU8wQixHQUFQO0FBQ0Q7QUFDRCxXQUFPNUIsQ0FBUDtBQUNELEc7O2dCQUVNNkIsUyx3QkFBWTtBQUNqQixXQUFPUixLQUFLUyxJQUFMLENBQVUsTUFBSVQsS0FBS1UsTUFBTCxFQUFkLENBQVA7QUFDRCxHOztnQkFFTUMsZSw0QkFBZ0JDLE0sRUFBUUMsRSxFQUFJO0FBQ2pDLFFBQUdELE9BQU9FLE1BQVAsQ0FBY3BELE1BQWQsS0FBdUJtRCxHQUFHN0MsQ0FBSCxDQUFLTixNQUEvQixFQUF1QztBQUNyQ3FELGNBQVFDLElBQVIsQ0FBYSw2QkFBYjtBQUNEO0FBQ0QsU0FBSSxJQUFJcEMsSUFBRSxDQUFWLEVBQWFBLElBQUVnQyxPQUFPRSxNQUFQLENBQWNwRCxNQUE3QixFQUFxQyxFQUFFa0IsQ0FBdkMsRUFBMEM7QUFDeENnQyxhQUFPRSxNQUFQLENBQWNsQyxDQUFkLEVBQWlCcUMsR0FBakIsQ0FBcUJKLEdBQUc3QyxDQUFILENBQUtZLENBQUwsQ0FBckIsRUFBOEJpQyxHQUFHckQsQ0FBSCxDQUFLb0IsQ0FBTCxDQUE5QixFQUF1Q2lDLEdBQUdLLENBQUgsR0FBTUwsR0FBR0ssQ0FBSCxDQUFLdEMsQ0FBTCxDQUFOLEdBQWUsQ0FBdEQ7QUFDRDtBQUNGLEc7O2dCQUVNdUMsTSxtQkFBT0MsRSxFQUFJQyxHLEVBQUtDLEMsRUFBR0MsQyxFQUFHO0FBQzNCLFFBQU1DLEtBQUtILE9BQUtDLElBQUUsQ0FBUCxDQUFYO0FBQ0EsUUFBSUcsSUFBRSxDQUFOO0FBQ0EsU0FBSSxJQUFJN0MsSUFBRSxDQUFOLEVBQVNpQixJQUFFdUIsR0FBRyxDQUFILENBQWYsRUFBc0J4QyxJQUFFd0MsR0FBRzFELE1BQUgsR0FBVSxDQUFaLElBQWlCK0QsSUFBRUosTUFBSSxNQUFJRyxFQUFqRCxFQUFxRCxFQUFFNUMsQ0FBRixFQUFLaUIsS0FBR3VCLEdBQUd4QyxDQUFILENBQTdELEVBQW9FO0FBQ2xFLFVBQUdvQixLQUFLTSxHQUFMLENBQVNtQixJQUFFNUIsQ0FBWCxJQUFjRyxLQUFLTSxHQUFMLENBQVNtQixJQUFFNUIsQ0FBRixHQUFJdUIsR0FBR3hDLElBQUUsQ0FBTCxDQUFiLENBQWpCLEVBQXdDO0FBQ3RDMkMsVUFBRTNDLENBQUYsRUFBSzZDLENBQUw7QUFDQUEsYUFBR0QsRUFBSDtBQUNEO0FBQ0Y7QUFDRCxRQUFHQyxJQUFFSixNQUFJLE1BQUlHLEVBQWIsRUFBaUI7QUFDZlQsY0FBUUMsSUFBUixDQUFhLDJCQUFiO0FBQ0Q7QUFDRixHOztnQkFFTVUsSSxpQkFBSzVFLEMsRUFBRUUsQyxFQUFFMkUsQyxFQUFFOUIsQyxFQUFHO0FBQ25CLFdBQU8vQyxJQUFFK0MsQ0FBRixHQUFJN0MsSUFBRTJFLENBQWI7QUFDRCxHOztnQkFFTUMsUyxzQkFBVUMsRSxFQUFHQyxFLEVBQUdDLEUsRUFBR0MsRSxFQUFJO0FBQzVCLFFBQUlDLFlBQUo7QUFDQSxRQUFNcEMsSUFBRWxELGNBQWMrRSxJQUFkLENBQW1CRyxHQUFHLENBQUgsQ0FBbkIsRUFBeUJBLEdBQUcsQ0FBSCxDQUF6QixFQUErQkUsR0FBRyxDQUFILENBQS9CLEVBQXFDQSxHQUFHLENBQUgsQ0FBckMsQ0FBUjtBQUNBLFFBQUcvQixLQUFLTSxHQUFMLENBQVNULENBQVQsSUFBWWxELGNBQWN1RixHQUE3QixFQUFrQztBQUNoQyxVQUFNQyxLQUFHeEYsY0FBYytFLElBQWQsQ0FBbUJJLEVBQW5CLEVBQXNCRCxHQUFHLENBQUgsQ0FBdEIsRUFBNEJHLEVBQTVCLEVBQStCRCxHQUFHLENBQUgsQ0FBL0IsQ0FBVDtBQUFBLFVBQWdEMUUsS0FBR1YsY0FBYytFLElBQWQsQ0FBbUJHLEdBQUcsQ0FBSCxDQUFuQixFQUF5QkMsRUFBekIsRUFBNEJDLEdBQUcsQ0FBSCxDQUE1QixFQUFrQ0MsRUFBbEMsQ0FBbkQ7QUFDQUMsWUFBTTtBQUNKakUsV0FBR21FLEtBQUd0QyxDQURGO0FBRUpyQyxXQUFHSCxLQUFHd0M7QUFGRixPQUFOO0FBSUQ7QUFDRCxXQUFPb0MsR0FBUDtBQUNELEc7O2dCQUVNRyxZLHlCQUFhdkIsRSxFQUFJZixDLEVBQUc7QUFDekIsUUFBSXVDLE9BQU8sS0FBWDtBQUFBLFFBQWtCQyxXQUFsQjtBQUNBLFNBQUksSUFBSTFELElBQUUsQ0FBVixFQUFhQSxJQUFFaUMsR0FBR25ELE1BQWxCLEVBQTBCLEVBQUVrQixDQUE1QixFQUErQjtBQUM3QixVQUFHakMsY0FBYzRGLE1BQWQsQ0FBcUJ6QyxDQUFyQixFQUF3QmUsR0FBR2pDLENBQUgsQ0FBeEIsSUFBK0JqQyxjQUFjdUYsR0FBaEQsRUFBcUQ7QUFDbkRJLGFBQUcsQ0FBSDtBQUNBRCxlQUFPLElBQVA7QUFDQTtBQUNEO0FBQ0Y7QUFDRCxXQUFNLENBQUNBLElBQVAsRUFBYTtBQUNYQSxhQUFPLElBQVA7QUFDQUMsV0FBSyxDQUFMO0FBQ0EsVUFBSUUsS0FBSyxFQUFDeEUsR0FBRzhCLEVBQUU5QixDQUFGLEdBQUlnQyxLQUFLVSxNQUFMLEVBQUosR0FBa0IsR0FBdEIsRUFBMkJsRCxHQUFHc0MsRUFBRXRDLENBQUYsR0FBSXdDLEtBQUtVLE1BQUwsRUFBSixHQUFrQixHQUFoRCxFQUFUO0FBQUEsVUFBK0QrQixLQUFLLEVBQUN6RSxHQUFHd0UsR0FBR3hFLENBQUgsR0FBSzhCLEVBQUU5QixDQUFYLEVBQWNSLEdBQUdnRixHQUFHaEYsQ0FBSCxHQUFLc0MsRUFBRXRDLENBQXhCLEVBQXBFO0FBQUEsVUFBZ0dxRSxLQUFHLENBQUNZLEdBQUdqRixDQUFKLEVBQU8sQ0FBQ2lGLEdBQUd6RSxDQUFYLENBQW5HO0FBQUEsVUFBa0g4RCxLQUFHaEMsRUFBRTlCLENBQUYsR0FBSXlFLEdBQUdqRixDQUFQLEdBQVNzQyxFQUFFdEMsQ0FBRixHQUFJaUYsR0FBR3pFLENBQXJJO0FBQ0EsV0FBSSxJQUFJWSxNQUFFLENBQVYsRUFBYUEsTUFBRWlDLEdBQUduRCxNQUFsQixFQUEwQixFQUFFa0IsR0FBNUIsRUFBK0I7QUFDN0IsWUFBTThELEtBQUc3QixHQUFHakMsR0FBSCxDQUFUO0FBQUEsWUFBZ0IrRCxLQUFHOUIsR0FBRyxDQUFDakMsTUFBRSxDQUFILElBQU1pQyxHQUFHbkQsTUFBWixDQUFuQjtBQUFBLFlBQXdDNEQsSUFBSSxFQUFDdEQsR0FBRzJFLEdBQUczRSxDQUFILEdBQUswRSxHQUFHMUUsQ0FBWixFQUFlUixHQUFHbUYsR0FBR25GLENBQUgsR0FBS2tGLEdBQUdsRixDQUExQixFQUE1QztBQUFBLFlBQTBFdUUsS0FBRyxDQUFDVCxFQUFFOUQsQ0FBSCxFQUFNLENBQUM4RCxFQUFFdEQsQ0FBVCxDQUE3RTtBQUFBLFlBQTBGZ0UsS0FBR1UsR0FBRzFFLENBQUgsR0FBS3NELEVBQUU5RCxDQUFQLEdBQVNrRixHQUFHbEYsQ0FBSCxHQUFLOEQsRUFBRXRELENBQTdHO0FBQUEsWUFDRTRFLEtBQUtqRyxjQUFjaUYsU0FBZCxDQUF3QkMsRUFBeEIsRUFBMkJDLEVBQTNCLEVBQThCQyxFQUE5QixFQUFpQ0MsRUFBakMsQ0FEUDtBQUVBLFlBQUdZLEVBQUgsRUFBTztBQUNMLGNBQUdqRyxjQUFjNEYsTUFBZCxDQUFxQkssRUFBckIsRUFBeUJGLEVBQXpCLElBQTZCL0YsY0FBY3VGLEdBQTNDLElBQWtEdkYsY0FBYzRGLE1BQWQsQ0FBcUJLLEVBQXJCLEVBQXlCRCxFQUF6QixJQUE2QmhHLGNBQWN1RixHQUFoRyxFQUFxRztBQUNuR0csbUJBQU8sS0FBUDtBQUNBO0FBQ0QsV0FIRCxNQUlLLElBQUdPLEdBQUc1RSxDQUFILEdBQUtnQyxLQUFLNkMsR0FBTCxDQUFTSCxHQUFHMUUsQ0FBWixFQUFjMkUsR0FBRzNFLENBQWpCLElBQW9CckIsY0FBY3VGLEdBQXZDLElBQTRDVSxHQUFHNUUsQ0FBSCxHQUFLZ0MsS0FBSzhDLEdBQUwsQ0FBU0osR0FBRzFFLENBQVosRUFBYzJFLEdBQUczRSxDQUFqQixJQUFvQnJCLGNBQWN1RixHQUFuRixJQUNBVSxHQUFHcEYsQ0FBSCxHQUFLd0MsS0FBSzZDLEdBQUwsQ0FBU0gsR0FBR2xGLENBQVosRUFBY21GLEdBQUduRixDQUFqQixJQUFvQmIsY0FBY3VGLEdBRHZDLElBQzRDVSxHQUFHcEYsQ0FBSCxHQUFLd0MsS0FBSzhDLEdBQUwsQ0FBU0osR0FBR2xGLENBQVosRUFBY21GLEdBQUduRixDQUFqQixJQUFvQmIsY0FBY3VGLEdBRHRGLEVBQzJGO0FBQzlGLGdCQUFHdkYsY0FBYzRGLE1BQWQsQ0FBcUJLLEVBQXJCLEVBQXlCOUMsQ0FBekIsSUFBNEJuRCxjQUFjdUYsR0FBN0MsRUFBa0Q7QUFDaERJLG1CQUFHLENBQUg7QUFDQTtBQUNELGFBSEQsTUFJSztBQUNILGtCQUFNUyxLQUFHLEVBQUMvRSxHQUFHNEUsR0FBRzVFLENBQUgsR0FBSzhCLEVBQUU5QixDQUFYLEVBQWNSLEdBQUdvRixHQUFHcEYsQ0FBSCxHQUFLc0MsRUFBRXRDLENBQXhCLEVBQVQ7QUFDQThFLG9CQUFNUyxHQUFHL0UsQ0FBSCxHQUFLeUUsR0FBR3pFLENBQVIsR0FBVStFLEdBQUd2RixDQUFILEdBQUtpRixHQUFHakYsQ0FBbEIsR0FBb0IsQ0FBMUI7QUFDRDtBQUNGO0FBQ0Y7QUFDRjtBQUNGO0FBQ0QsV0FBTzhFLEtBQUcsQ0FBVjtBQUNELEc7O2dCQUVNVSxnQiw2QkFBaUJuQyxFLEVBQUlmLEMsRUFBRztBQUM3QixRQUFJbUQsS0FBSyxDQUFDLENBQUQsRUFBSSxDQUFKLENBQVQ7QUFDQSxTQUFJLElBQUlyRSxJQUFFLENBQVYsRUFBYUEsSUFBRWlDLEdBQUduRCxNQUFsQixFQUEwQixFQUFFa0IsQ0FBNUIsRUFBK0I7QUFDN0IsVUFBTThELEtBQUc3QixHQUFHakMsQ0FBSCxDQUFUO0FBQUEsVUFBZ0IrRCxLQUFHOUIsR0FBRyxDQUFDakMsSUFBRSxDQUFILElBQU1pQyxHQUFHbkQsTUFBWixDQUFuQjtBQUFBLFVBQXdDWixJQUFFLEVBQUNrQixHQUFHMEUsR0FBRzFFLENBQUgsR0FBSzhCLEVBQUU5QixDQUFYLEVBQWNSLEdBQUdrRixHQUFHbEYsQ0FBSCxHQUFLc0MsRUFBRXRDLENBQXhCLEVBQTFDO0FBQUEsVUFBc0VSLElBQUUsRUFBQ2dCLEdBQUcyRSxHQUFHM0UsQ0FBSCxHQUFLOEIsRUFBRTlCLENBQVgsRUFBY1IsR0FBR21GLEdBQUduRixDQUFILEdBQUtzQyxFQUFFdEMsQ0FBeEIsRUFBeEU7QUFDQSxRQUFFeUYsR0FBRyxDQUFDbkcsRUFBRWtCLENBQUYsR0FBSWhCLEVBQUVRLENBQU4sR0FBUVYsRUFBRVUsQ0FBRixHQUFJUixFQUFFZ0IsQ0FBZCxHQUFnQixDQUFqQixJQUFvQixDQUF2QixDQUFGO0FBQ0Q7QUFDRCxXQUFPLENBQUNpRixHQUFHL0MsT0FBSCxDQUFXVyxHQUFHbkQsTUFBZCxDQUFSO0FBQ0QsRzs7Z0JBRU13RixLLGtCQUFNQyxFLEVBQUk7QUFDZixXQUFPbkQsS0FBS29ELElBQUwsQ0FBVUQsR0FBR25GLENBQUgsR0FBS21GLEdBQUduRixDQUFSLEdBQVVtRixHQUFHM0YsQ0FBSCxHQUFLMkYsR0FBRzNGLENBQTVCLENBQVA7QUFDRCxHOztnQkFFTStFLE0sbUJBQU9jLEcsRUFBS0MsRyxFQUFLO0FBQ3RCLFdBQU8zRyxjQUFjdUcsS0FBZCxDQUFvQjtBQUN6QmxGLFNBQUdzRixJQUFJdEYsQ0FBSixHQUFNcUYsSUFBSXJGLENBRFk7QUFFekJSLFNBQUc4RixJQUFJOUYsQ0FBSixHQUFNNkYsSUFBSTdGO0FBRlksS0FBcEIsQ0FBUDtBQUlELEc7O2dCQUVNK0YsYSwwQkFBYzFDLEUsRUFBSTtBQUN2QixRQUFNL0QsSUFBSSxFQUFWO0FBQ0EsUUFBSWdELElBQUksQ0FBUjtBQUNBLFNBQUksSUFBSWxCLElBQUUsQ0FBVixFQUFhQSxJQUFFaUMsR0FBR25ELE1BQWxCLEVBQTBCLEVBQUVrQixDQUE1QixFQUErQjtBQUM3QjlCLFFBQUUrQixJQUFGLENBQU9sQyxjQUFjNEYsTUFBZCxDQUFxQjFCLEdBQUdqQyxDQUFILENBQXJCLEVBQTRCaUMsR0FBRyxDQUFDakMsSUFBRSxDQUFILElBQU1pQyxHQUFHbkQsTUFBWixDQUE1QixDQUFQO0FBQ0FvQyxXQUFLLE1BQUloRCxFQUFFOEIsQ0FBRixDQUFUO0FBQ0Q7QUFDRCxXQUFPb0IsS0FBS29ELElBQUwsQ0FBVXRELEtBQUdBLElBQUVoRCxFQUFFLENBQUYsQ0FBTCxLQUFZZ0QsSUFBRWhELEVBQUUsQ0FBRixDQUFkLEtBQXFCZ0QsSUFBRWhELEVBQUUsQ0FBRixDQUF2QixDQUFWLENBQVA7QUFDRCxHOztnQkFFTTBHLGtCLCtCQUFtQkMsRyxFQUFLM0QsQyxFQUFHO0FBQ2hDLFFBQU0xRCxJQUFJTyxjQUFjNEcsYUFBZCxDQUE0QkUsR0FBNUIsQ0FBVjtBQUFBLFFBQTRDQyxRQUFNLEVBQWxEO0FBQUEsUUFBc0RsRSxJQUFJaUUsSUFBSS9GLE1BQTlEO0FBQ0EsU0FBSSxJQUFJa0IsSUFBRSxDQUFWLEVBQWFBLElBQUVZLENBQWYsRUFBa0IsRUFBRVosQ0FBcEIsRUFBdUI7QUFDckI4RSxZQUFNOUUsQ0FBTixJQUFXakMsY0FBYzRHLGFBQWQsQ0FBNEIsQ0FBQ3pELENBQUQsRUFBSTJELElBQUksQ0FBQzdFLElBQUUsQ0FBSCxJQUFNWSxDQUFWLENBQUosRUFBa0JpRSxJQUFJLENBQUM3RSxJQUFFLENBQUgsSUFBTVksQ0FBVixDQUFsQixDQUE1QixJQUE2RHBELENBQXhFO0FBQ0Q7QUFDRCxXQUFPc0gsS0FBUDtBQUNELEc7Ozs7O0FBalJrQi9HLGEsQ0FDWmMsRyxHQUFNLENBQUNkLGNBQWNDLElBQWYsRUFBcUJELGNBQWNNLElBQW5DLEVBQXlDTixjQUFjTyxJQUF2RCxFQUE2RFAsY0FBY1EsSUFBM0UsQztBQURNUixhLENBRVp1RixHLEdBQU0sSTtrQkFGTXZGLGE7Ozs7Ozs7Ozs7O0FDQXJCOztBQUNBOzs7Ozs7Ozs7Ozs7SUFFcUJnSCxTOzs7Ozs7Ozs7WUFHWkMsVyx3QkFBWWhELE0sRUFBUWlELEMsRUFBRztBQUM1QixRQUFNQyxJQUFJLEVBQUN6QyxLQUFLLENBQU4sRUFBU0QsSUFBSSxDQUFDLENBQUQsQ0FBYixFQUFWO0FBQUEsUUFBNkIyQyxLQUFHLElBQUVGLENBQWxDO0FBQ0EsU0FBSSxJQUFJakYsSUFBRSxDQUFWLEVBQWFBLEtBQUdpRixDQUFoQixFQUFtQixFQUFFakYsQ0FBckIsRUFBd0I7QUFDdEIsVUFBTWtCLElBQUljLE9BQU9vRCxRQUFQLENBQWdCcEYsSUFBRW1GLEVBQWxCLENBQVY7QUFDQSxVQUFHbkYsQ0FBSCxFQUFNO0FBQ0osWUFBTWlCLElBQUk4RCxVQUFVTSxFQUFWLENBQWFDLFVBQWIsQ0FBd0JwRSxDQUF4QixDQUFWO0FBQ0FnRSxVQUFFekMsR0FBRixJQUFTeEIsQ0FBVDtBQUNBaUUsVUFBRTFDLEVBQUYsQ0FBS3ZDLElBQUwsQ0FBVWdCLENBQVY7QUFDRDtBQUNEOEQsZ0JBQVVNLEVBQVYsQ0FBYUUsSUFBYixDQUFrQnJFLENBQWxCO0FBQ0Q7QUFDRCxXQUFPZ0UsQ0FBUDtBQUNELEc7O1lBRU1NLGdCLDZCQUFpQnhELE0sRUFBUVUsQyxFQUFHO0FBQ2pDLFFBQU0rQyxNQUFNLElBQVo7QUFBQSxRQUFrQkMsT0FBTyxJQUFFRCxHQUEzQjtBQUNBLFFBQU1qRCxLQUFHLENBQUMsQ0FBRCxDQUFUO0FBQ0EsUUFBSTVCLElBQUksQ0FBUjtBQUNBLFNBQUksSUFBSVosSUFBRSxDQUFWLEVBQWFBLEtBQUd5RixHQUFoQixFQUFxQixFQUFFekYsQ0FBdkIsRUFBMEI7QUFDeEIsVUFBTWtCLElBQUljLE9BQU9vRCxRQUFQLENBQWdCcEYsSUFBRTBGLElBQWxCLENBQVY7QUFDQSxVQUFHMUYsQ0FBSCxFQUFNO0FBQ0osWUFBTWlCLElBQUU4RCxVQUFVTSxFQUFWLENBQWFDLFVBQWIsQ0FBd0JwRSxDQUF4QixDQUFSO0FBQ0FOLGFBQUtLLENBQUw7QUFDQXVCLFdBQUd2QyxJQUFILENBQVFnQixDQUFSO0FBQ0Q7QUFDRDhELGdCQUFVTSxFQUFWLENBQWFFLElBQWIsQ0FBa0JyRSxDQUFsQjtBQUNEO0FBQ0RzQixPQUFHdkMsSUFBSCxDQUFRLEdBQVI7O0FBRUEsUUFBTW9ELE1BQU0sRUFBWjtBQUFBLFFBQWdCOEIsS0FBS3ZFLEtBQUc4QixJQUFFLENBQUwsQ0FBckI7QUFDQSxTQUFJLElBQUkxQyxLQUFFLENBQU4sRUFBUzZDLElBQUUsQ0FBWCxFQUFjNUIsS0FBRXVCLEdBQUcsQ0FBSCxDQUFwQixFQUEyQnhDLEtBQUV3QyxHQUFHMUQsTUFBSCxHQUFVLENBQXZDLEVBQTBDLEVBQUVrQixFQUFGLEVBQUtpQixNQUFHdUIsR0FBR3hDLEVBQUgsQ0FBbEQsRUFBeUQ7QUFDdkQsVUFBR29CLEtBQUtNLEdBQUwsQ0FBU21CLElBQUU1QixFQUFYLElBQWNHLEtBQUtNLEdBQUwsQ0FBU21CLElBQUU1QixFQUFGLEdBQUl1QixHQUFHeEMsS0FBRSxDQUFMLENBQWIsQ0FBakIsRUFBd0M7QUFDdENxRCxZQUFJcEQsSUFBSixDQUFTRCxLQUFFMEYsSUFBWDtBQUNBN0MsYUFBR3NDLEVBQUg7QUFDRDtBQUNGOztBQUVELFdBQU85QixHQUFQO0FBQ0QsRzs7WUFFTXNDLFUsdUJBQVdDLEksRUFBTUMsSyxFQUFPO0FBQzdCLFFBQU14QyxNQUFNLEVBQVo7QUFDQSxTQUFJLElBQUlyRCxJQUFFLENBQVYsRUFBYUEsSUFBRTRGLEtBQUs5RyxNQUFwQixFQUE0QixFQUFFa0IsQ0FBOUIsRUFBaUM7QUFDL0IsVUFBTThELEtBQUs4QixLQUFLNUYsQ0FBTCxDQUFYO0FBQUEsVUFBb0IrRCxLQUFLNkIsS0FBSyxDQUFDNUYsSUFBRSxDQUFILElBQU00RixLQUFLOUcsTUFBaEIsQ0FBekI7QUFBQSxVQUFrRDhCLElBQUk3Qyx3QkFBYzRGLE1BQWQsQ0FBcUJHLEVBQXJCLEVBQXlCQyxFQUF6QixDQUF0RDtBQUFBLFVBQW9GckIsSUFBSXRCLEtBQUtTLElBQUwsQ0FBVWpCLElBQUVpRixLQUFaLENBQXhGO0FBQUEsVUFBNEdWLEtBQUt2RSxJQUFFOEIsQ0FBbkg7QUFDQVcsVUFBSXBELElBQUosQ0FBUzZELEVBQVQ7QUFDQSxXQUFJLElBQUk1RCxJQUFFLENBQVYsRUFBYUEsSUFBRXdDLENBQWYsRUFBa0IsRUFBRXhDLENBQXBCLEVBQXVCO0FBQ3JCbUQsWUFBSXBELElBQUosQ0FBUyxJQUFJakQsWUFBTThJLE9BQVYsQ0FDUGhDLEdBQUcxRSxDQUFILEdBQUtjLElBQUVpRixFQUFGLElBQU1wQixHQUFHM0UsQ0FBSCxHQUFLMEUsR0FBRzFFLENBQWQsSUFBaUJ3QixDQURmLEVBRVBrRCxHQUFHbEYsQ0FBSCxHQUFLc0IsSUFBRWlGLEVBQUYsSUFBTXBCLEdBQUduRixDQUFILEdBQUtrRixHQUFHbEYsQ0FBZCxJQUFpQmdDLENBRmYsQ0FBVDtBQUlEO0FBQ0Y7QUFDRCxXQUFPeUMsR0FBUDtBQUNELEc7OztFQXhEb0N0Rix1Qjs7QUFBbEJnSCxTLENBQ1pNLEUsR0FBSyxJQUFJckksWUFBTStJLE9BQVYsRTtrQkFET2hCLFM7Ozs7Ozs7Ozs7Ozs7SUNIQWlCLEs7Ozs7O1FBRVpDLFkseUJBQWFDLEcsRUFBSztBQUN2QixhQUFTQyxLQUFULENBQWUzSSxDQUFmLEVBQWtCO0FBQ2hCLGFBQU9BLEVBQUU0SSxPQUFGLENBQVUsS0FBVixFQUFpQixHQUFqQixFQUFzQkQsS0FBdEIsQ0FBNEIsR0FBNUIsQ0FBUDtBQUNEO0FBQ0QsUUFBTUUsT0FBT0YsTUFBTXpKLE9BQU80SixRQUFQLENBQWdCQyxJQUF0QixDQUFiO0FBQ0FMLFVBQU1DLE1BQU1ELEdBQU4sQ0FBTjtBQUNBLFFBQUdHLEtBQUssQ0FBTCxNQUFVSCxJQUFJLENBQUosQ0FBYixFQUFxQjtBQUNuQkEsVUFBSSxDQUFKLElBQVNHLEtBQUssQ0FBTCxDQUFUO0FBQ0Q7QUFDRCxXQUFPSCxJQUFJTSxJQUFKLENBQVMsR0FBVCxDQUFQO0FBQ0QsRzs7UUFFTUMsTyxxQkFBUUMsRyxFQUFLTCxJLEVBQU07QUFDeEIsU0FBSSxJQUFJTSxJQUFSLElBQWdCTixJQUFoQixFQUFzQjtBQUNwQixVQUFHLENBQUNLLElBQUlFLGNBQUosQ0FBbUJELElBQW5CLENBQUosRUFBOEI7QUFDNUJELFlBQUlDLElBQUosSUFBWU4sS0FBS00sSUFBTCxDQUFaO0FBQ0Q7QUFDRjtBQUNGLEc7O1FBRU1FLFUsdUJBQVczSSxDLEVBQUdFLEMsRUFBRztBQUN0QixXQUFPRixJQUFFRSxDQUFUO0FBQ0QsRzs7UUFFTTBJLFUsdUJBQVc1SSxDLEVBQUdrQixDLEVBQUcySCxHLEVBQUs7QUFDM0JBLFVBQU1BLE9BQU9mLE1BQU1hLFVBQW5CO0FBQ0EsUUFBSWpHLElBQUksQ0FBUjtBQUFBLFFBQVdvRyxJQUFJOUksRUFBRVksTUFBRixHQUFTLENBQXhCO0FBQ0EsV0FBTWtJLElBQUVwRyxDQUFGLEdBQUksQ0FBVixFQUFhO0FBQ1gsVUFBSXFHLE1BQU03RixLQUFLOEYsS0FBTCxDQUFXLENBQUN0RyxJQUFJb0csQ0FBTCxJQUFVLENBQXJCLENBQVY7QUFDQSxVQUFHRCxJQUFJM0gsQ0FBSixFQUFPbEIsRUFBRStJLEdBQUYsQ0FBUCxJQUFlLENBQWxCLEVBQXFCO0FBQ25CRCxZQUFJQyxHQUFKO0FBQ0QsT0FGRCxNQUdLO0FBQ0hyRyxZQUFJcUcsR0FBSjtBQUNEO0FBQ0Y7QUFDRCxXQUFPRixJQUFJM0gsQ0FBSixFQUFPbEIsRUFBRThJLENBQUYsQ0FBUCxLQUFjLENBQWQsR0FBaUJBLENBQWpCLEdBQW9CcEcsQ0FBM0I7QUFDRCxHOzs7OztrQkF2Q2tCb0YsSzs7Ozs7Ozs7Ozs7QUNBckI7O0FBQ0E7Ozs7Ozs7O0lBRXFCbUIsUztBQUtuQixxQkFBWUMsT0FBWixFQUFxQkMsS0FBckIsRUFBNEJDLE1BQTVCLEVBQW9DQyxLQUFwQyxFQUEyQztBQUFBOztBQUN6QyxTQUFLSCxPQUFMLEdBQWVBLE9BQWY7QUFDQSxTQUFLSSxHQUFMLEdBQVdKLFFBQVFJLEdBQW5CO0FBQ0EsU0FBS0MsR0FBTCxHQUFXTCxRQUFRSyxHQUFuQjtBQUNBLFNBQUtDLE9BQUwsR0FBZU4sUUFBUU0sT0FBUixJQUFtQk4sUUFBUUssR0FBUixDQUFZRSxJQUE5QztBQUNBLFNBQUs1RSxDQUFMLEdBQVNxRSxRQUFRUSxZQUFSLElBQXdCVCxVQUFVUyxZQUEzQztBQUNBLFNBQUtDLEdBQUwsR0FBV1QsUUFBUVUsZUFBUixJQUEyQlgsVUFBVVcsZUFBaEQ7QUFDQSxTQUFLQyxJQUFMLEdBQVksS0FBS1YsS0FBTCxHQUFhQSxLQUF6QjtBQUNBLFNBQUtXLElBQUwsR0FBWSxLQUFLVixNQUFMLEdBQWNBLE1BQTFCO0FBQ0EsU0FBS0MsS0FBTCxHQUFhQSxLQUFiO0FBQ0Q7O3NCQUVEVSxlLDRCQUFnQmxGLEMsRUFBRzhFLEcsRUFBSztBQUN0QixTQUFLOUUsQ0FBTCxHQUFTQSxDQUFUO0FBQ0EsU0FBSzhFLEdBQUwsR0FBV0EsR0FBWDtBQUNELEc7O3NCQUVESyxhLDBCQUFjN0UsRyxFQUFLO0FBQ2pCLFFBQU1sRCxJQUFJa0QsSUFBSWdFLEtBQUosR0FBVSxLQUFLVSxJQUF6QjtBQUNBLFNBQUtBLElBQUwsR0FBWTFFLElBQUlnRSxLQUFoQjtBQUNBLFNBQUtXLElBQUwsR0FBWTdILElBQUUsS0FBSzZILElBQW5CLENBSGlCLENBR1E7QUFDMUIsRzs7c0JBRURHLE8sc0JBQVUsQ0FFVCxDOztzQkFFREMsZSw4QkFBa0I7QUFDaEIsU0FBS1AsR0FBTCxDQUFTUSxTQUFUO0FBQ0EsU0FBS1IsR0FBTCxDQUFTUyxTQUFULEdBQXFCQyxxQkFBV0MsVUFBWCxDQUFzQixLQUFLakIsS0FBM0IsRUFBa0MsQ0FBbEMsQ0FBckI7QUFDQSxTQUFLTSxHQUFMLENBQVNZLElBQVQsQ0FBYyxDQUFkLEVBQWlCLENBQWpCLEVBQW9CLEtBQUsxRixDQUFMLENBQU9zRSxLQUEzQixFQUFrQyxLQUFLdEUsQ0FBTCxDQUFPdUUsTUFBekM7QUFDQSxTQUFLTyxHQUFMLENBQVNhLElBQVQ7QUFDRCxHOztzQkFFREMsVyx3QkFBWUMsSyxFQUFPO0FBQ2pCLFNBQUtDLE9BQUw7QUFDQSxTQUFLaEIsR0FBTCxDQUFTaUIsU0FBVCxDQUFtQkYsS0FBbkIsRUFBMEIsQ0FBMUIsRUFBNkIsQ0FBN0I7QUFDQSxTQUFLRyxNQUFMO0FBQ0QsRzs7c0JBRURDLFUsdUJBQVc5SCxDLEVBQUc7QUFDWixXQUFPO0FBQ0w5QixTQUFHOEIsRUFBRTlCLENBQUYsR0FBSSxLQUFLMkQsQ0FBTCxDQUFPc0UsS0FEVDtBQUVMekksU0FBRyxDQUFDLElBQUVzQyxFQUFFdEMsQ0FBTCxJQUFRLEtBQUttRSxDQUFMLENBQU91RTtBQUZiLEtBQVA7QUFJRCxHOztzQkFFRDJCLFMsc0JBQVVyRCxJLEVBQU07QUFDZCxRQUFNaUMsTUFBTSxLQUFLQSxHQUFqQjtBQUNBQSxRQUFJUyxTQUFKLEdBQWdCLHFCQUFoQjtBQUNBVCxRQUFJUSxTQUFKO0FBQ0EsUUFBSW5ILElBQUksS0FBSzhILFVBQUwsQ0FBZ0JwRCxLQUFLLENBQUwsQ0FBaEIsQ0FBUjtBQUNBaUMsUUFBSXFCLE1BQUosQ0FBV2hJLEVBQUU5QixDQUFiLEVBQWdCOEIsRUFBRXRDLENBQWxCO0FBQ0EsU0FBSSxJQUFJb0IsSUFBRSxDQUFWLEVBQWFBLElBQUU0RixLQUFLOUcsTUFBcEIsRUFBNEIsRUFBRWtCLENBQTlCLEVBQWlDO0FBQy9Ca0IsVUFBSSxLQUFLOEgsVUFBTCxDQUFnQnBELEtBQUs1RixDQUFMLENBQWhCLENBQUo7QUFDQTZILFVBQUlzQixNQUFKLENBQVdqSSxFQUFFOUIsQ0FBYixFQUFnQjhCLEVBQUV0QyxDQUFsQjtBQUNEO0FBQ0RpSixRQUFJdUIsU0FBSjtBQUNBdkIsUUFBSWEsSUFBSjtBQUNELEc7O3NCQUVERyxPLHNCQUFVO0FBQ1IsUUFBRyxLQUFLZCxJQUFMLElBQVcsS0FBS2hGLENBQUwsQ0FBT3NFLEtBQXJCLEVBQTRCO0FBQzFCLFdBQUt0RSxDQUFMLENBQU9zRSxLQUFQLEdBQWUsS0FBS1UsSUFBcEI7QUFDRDtBQUNELFFBQUcsS0FBS0MsSUFBTCxJQUFXLEtBQUtqRixDQUFMLENBQU91RSxNQUFyQixFQUE2QjtBQUMzQixXQUFLdkUsQ0FBTCxDQUFPdUUsTUFBUCxHQUFnQixLQUFLVSxJQUFyQjtBQUNEO0FBQ0QsU0FBS0gsR0FBTCxDQUFTd0IsSUFBVDtBQUNBLFNBQUt4QixHQUFMLENBQVN5QixLQUFULENBQWUsS0FBS3ZHLENBQUwsQ0FBT3NFLEtBQVAsR0FBYSxLQUFLQSxLQUFqQyxFQUF3QyxLQUFLdEUsQ0FBTCxDQUFPdUUsTUFBUCxHQUFjLEtBQUtBLE1BQTNEO0FBQ0EsV0FBTyxLQUFLTyxHQUFaO0FBQ0QsRzs7c0JBRURrQixNLHFCQUFTO0FBQ1AsU0FBS2xCLEdBQUwsQ0FBUzBCLE9BQVQ7QUFDRCxHOztzQkFFREMsa0IsaUNBQXFCO0FBQ25CLFNBQUtwQixlQUFMO0FBQ0QsRzs7c0JBRURxQixZLDJCQUFlO0FBQ2IsUUFBRyxLQUFLQyxRQUFSLEVBQWtCO0FBQ2hCLFdBQUtBLFFBQUwsQ0FBYyxLQUFLM0csQ0FBbkI7QUFDRDtBQUNGLEc7O3NCQUVENEcsVSx5QkFBYTtBQUNYLFFBQUcsS0FBS0MsTUFBUixFQUFnQjtBQUNkLFdBQUtBLE1BQUw7QUFDRCxLQUZELE1BR0s7QUFDSCxXQUFLQyxXQUFMO0FBQ0Q7QUFDRixHOztzQkFFREMsZSw4QkFBa0I7QUFDaEIsV0FBT0MsU0FBUDtBQUNELEc7Ozs7O0FBdkdrQjVDLFMsQ0FFWlMsWSxHQUFnQixhQUFFLFVBQUYsRUFBYyxDQUFkLEM7QUFGSlQsUyxDQUdaVyxlLEdBQWtCWCxVQUFVUyxZQUFWLENBQXVCb0MsVUFBdkIsQ0FBa0MsSUFBbEMsQztrQkFITjdDLFM7Ozs7Ozs7Ozs7Ozs7QUNIckI7Ozs7SUFFcUI4QyxjOztBQUVuQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSwwQkFBWXpDLEdBQVosRUFBaUJDLEdBQWpCLEVBQXNCO0FBQUE7O0FBQ3BCLFNBQUtELEdBQUwsR0FBV0EsR0FBWDtBQUNBLFNBQUtDLEdBQUwsR0FBV0EsR0FBWDtBQUNBLFNBQUt5QyxPQUFMLEdBQWUsSUFBZjtBQUNEOzsyQkFFREMsUyxzQkFBVUMsRSxFQUFJO0FBQ1osUUFBRyxDQUFDQSxFQUFKLEVBQVE7QUFDTixVQUFHLEtBQUtDLFVBQVIsRUFBb0I7QUFDbEIsYUFBS0MsTUFBTCxDQUFZLEtBQUtELFVBQWpCLEVBQTZCMU0sUUFBRTRNLEtBQUYsQ0FBUSxTQUFSLENBQTdCLEVBQWlELFNBQWpEO0FBQ0EsYUFBS0YsVUFBTCxHQUFrQk4sU0FBbEI7QUFDRDtBQUNELFVBQUcsS0FBS1MsVUFBUixFQUFvQjtBQUNsQixhQUFLRixNQUFMLENBQVksS0FBS0UsVUFBakIsRUFBNkI3TSxRQUFFNE0sS0FBRixDQUFRLFVBQVIsQ0FBN0IsRUFBa0QsVUFBbEQ7QUFDQSxhQUFLQyxVQUFMLEdBQWtCVCxTQUFsQjtBQUNEO0FBQ0Y7QUFDRCxTQUFLRyxPQUFMLEdBQWVFLEVBQWY7QUFDRCxHOzsyQkFFREssVyx3QkFBWUMsTSxFQUFRO0FBQ2xCLFdBQU9YLFNBQVA7QUFDRCxHOzsyQkFFRE8sTSxtQkFBT0ksTSxFQUFRQyxDLEVBQUdDLEksRUFBTTtBQUN0QixRQUFNQyxXQUFXLEtBQUtKLFdBQUwsQ0FBaUJDLE1BQWpCLENBQWpCO0FBQ0EsUUFBR0csUUFBSCxFQUFhO0FBQ1gsVUFBTUMscUJBQ0RILENBREM7QUFFSkMsa0JBRkk7QUFHSkcsY0FBTSxLQUFLdkQ7QUFIUCxRQUFOO0FBS0EsVUFBTXdELEtBQUtyTixRQUFFNE0sS0FBRixDQUFRSyxJQUFSLEVBQWNFLEtBQWQsQ0FBWDtBQUNBRCxlQUFTRyxFQUFULEVBQWFOLE1BQWI7QUFDRDtBQUNGLEc7OzJCQUVETyxPLG9CQUFRTixDLEVBQUdwSyxJLEVBQU07QUFDZixRQUFHLENBQUMsS0FBSzJKLE9BQVQsRUFBa0I7O0FBRWxCLFFBQUcsS0FBS2dCLE1BQVIsRUFBZ0I7QUFDZFAsVUFBSSxLQUFLTyxNQUFMLENBQVksS0FBS3hELE9BQWpCLEVBQTBCaUQsQ0FBMUIsQ0FBSjtBQUNEOztBQUVELFFBQU1ELFNBQVMsS0FBS1MsU0FBTCxDQUFlUixDQUFmLEVBQWtCcEssSUFBbEIsQ0FBZjtBQUFBLFFBQ0UrSixTQUFTLENBQUNLLEVBQUVDLElBQUYsQ0FBT3RKLE9BQVAsQ0FBZSxPQUFmLENBQUQsR0FBMEIsS0FBSzhKLFlBQUwsQ0FBa0JULENBQWxCLEVBQXFCcEssSUFBckIsRUFBMkJtSyxNQUEzQixDQUExQixHQUE4RCxLQUFLVyxZQUFMLENBQWtCVixDQUFsQixFQUFxQnBLLElBQXJCLEVBQTJCbUssTUFBM0IsQ0FEekU7QUFFQSxRQUFHSixVQUFVSSxNQUFiLEVBQXFCO0FBQ25CLFdBQUtKLE1BQUwsQ0FBWUksTUFBWixFQUFvQkMsQ0FBcEIsRUFBdUJBLEVBQUVDLElBQXpCO0FBQ0Q7QUFDRixHOzsyQkFFRFEsWSx5QkFBYVQsQyxFQUFHcEssSSxFQUFNbUssTSxFQUFRO0FBQzVCLFFBQUlKLFNBQVMsSUFBYjtBQUNBLFlBQU9LLEVBQUVDLElBQVQ7QUFDRSxXQUFLLFlBQUw7QUFBbUI7QUFDakIsY0FBRyxLQUFLVSxVQUFSLEVBQW9CO0FBQ2xCLGlCQUFLaEIsTUFBTCxDQUFZLEtBQUtnQixVQUFqQixFQUE2QlgsQ0FBN0IsRUFBZ0MsVUFBaEM7QUFDRDtBQUNELGVBQUtXLFVBQUwsR0FBa0JaLE1BQWxCO0FBQ0E7QUFDRDtBQUNELFdBQUssVUFBTDtBQUFpQjtBQUNmLGNBQUcsS0FBS1ksVUFBTCxJQUFtQixDQUFDLEtBQUtDLElBQUwsQ0FBVSxLQUFLRCxVQUFmLEVBQTJCWixNQUEzQixDQUF2QixFQUEyRDtBQUN6RCxpQkFBS0osTUFBTCxDQUFZLEtBQUtnQixVQUFqQixFQUE2QlgsQ0FBN0IsRUFBZ0MsVUFBaEM7QUFDQUwscUJBQVMsS0FBVDtBQUNELFdBSEQsTUFJSyxJQUFHSSxVQUFVLEtBQUthLElBQUwsQ0FBVSxLQUFLRCxVQUFmLEVBQTJCWixNQUEzQixDQUFiLEVBQWlEO0FBQ3BELGlCQUFLSixNQUFMLENBQVlJLE1BQVosRUFBb0JDLENBQXBCLEVBQXVCLFVBQXZCO0FBQ0Q7QUFDRCxlQUFLVyxVQUFMLEdBQWtCdkIsU0FBbEI7QUFDQTtBQUNEO0FBQ0QsV0FBSyxVQUFMO0FBQWlCO0FBQ2ZPLG1CQUFTLEtBQVQ7QUFDQTtBQUNEO0FBdEJIO0FBd0JBLFdBQU9BLE1BQVA7QUFDRCxHOzsyQkFFRGUsWSx5QkFBYVYsQyxFQUFHcEssSSxFQUFNbUssTSxFQUFRO0FBQzVCLFFBQUlKLFNBQVMsSUFBYjtBQUNBLFlBQU9LLEVBQUVDLElBQVQ7QUFDRSxXQUFLLFdBQUw7QUFBa0I7QUFDaEIsY0FBRyxLQUFLUCxVQUFSLEVBQW9CO0FBQ2xCLGlCQUFLQyxNQUFMLENBQVksS0FBS0QsVUFBakIsRUFBNkJNLENBQTdCLEVBQWdDLFNBQWhDO0FBQ0Q7QUFDRCxlQUFLTixVQUFMLEdBQWtCSyxNQUFsQjtBQUNBO0FBQ0Q7QUFDRCxXQUFLLFNBQUw7QUFBZ0I7QUFDZCxjQUFHLEtBQUtMLFVBQUwsSUFBbUIsQ0FBQyxLQUFLa0IsSUFBTCxDQUFVLEtBQUtsQixVQUFmLEVBQTJCSyxNQUEzQixDQUF2QixFQUEyRDtBQUN6RCxpQkFBS0osTUFBTCxDQUFZLEtBQUtELFVBQWpCLEVBQTZCTSxDQUE3QixFQUFnQyxTQUFoQztBQUNBTCxxQkFBUyxLQUFUO0FBQ0Q7QUFDRDtBQUNEO0FBQ0QsV0FBSyxPQUFMO0FBQWM7QUFDWkEsbUJBQVMsS0FBS2lCLElBQUwsQ0FBVSxLQUFLbEIsVUFBZixFQUEyQkssTUFBM0IsQ0FBVDtBQUNBLGVBQUtMLFVBQUwsR0FBa0JOLFNBQWxCO0FBQ0E7QUFDRDtBQUNELFdBQUssWUFBTDtBQUNBLFdBQUssV0FBTDtBQUNBLFdBQUssV0FBTDtBQUFrQjtBQUNoQixjQUFHLENBQUMsS0FBS3dCLElBQUwsQ0FBVSxLQUFLZixVQUFmLEVBQTJCRSxNQUEzQixDQUFELElBQXVDLEtBQUtGLFVBQS9DLEVBQTJEO0FBQ3pELGlCQUFLRixNQUFMLENBQVksS0FBS0UsVUFBakIsRUFBNkJHLENBQTdCLEVBQWdDLFVBQWhDO0FBQ0EsaUJBQUtILFVBQUwsR0FBa0JULFNBQWxCO0FBQ0Q7QUFDRCxjQUFHLENBQUMsS0FBS1MsVUFBTixJQUFvQkUsTUFBdkIsRUFBK0I7QUFDN0IsaUJBQUtKLE1BQUwsQ0FBWUksTUFBWixFQUFvQkMsQ0FBcEIsRUFBdUIsV0FBdkI7QUFDQSxpQkFBS0gsVUFBTCxHQUFrQkUsTUFBbEI7QUFDRDtBQUNESixtQkFBU0ssRUFBRUMsSUFBRixLQUFXLFdBQXBCO0FBQ0E7QUFDRDtBQUNELFdBQUssWUFBTDtBQUNBLFdBQUssVUFBTDtBQUFpQjtBQUNmLGNBQUcsS0FBS0osVUFBUixFQUFvQjtBQUNsQixpQkFBS0YsTUFBTCxDQUFZLEtBQUtFLFVBQWpCLEVBQTZCRyxDQUE3QixFQUFnQyxVQUFoQztBQUNBLGlCQUFLSCxVQUFMLEdBQWtCVCxTQUFsQjtBQUNEO0FBQ0RPLG1CQUFTLEtBQVQ7QUFDQTtBQUNEO0FBMUNIO0FBNENBLFdBQU9BLE1BQVA7QUFDRCxHOzs7OztrQkF0SWtCTCxjOzs7Ozs7Ozs7Ozs7O0lDRkExQixVOzs7OzthQUVacEosaUIsOEJBQWtCQyxDLEVBQUVSLEMsRUFBRVMsRSxFQUFJO0FBQy9CLFdBQU9ULEVBQUUsQ0FBRixJQUFLLENBQUNBLEVBQUUsQ0FBRixJQUFLQSxFQUFFLENBQUYsQ0FBTixLQUFhUSxFQUFFLENBQUYsSUFBS0EsRUFBRSxDQUFGLENBQWxCLEtBQXlCQyxLQUFHRCxFQUFFLENBQUYsQ0FBNUIsQ0FBWjtBQUNELEc7O2FBRU1vTSxhLDBCQUFjQyxFLEVBQUdDLEUsRUFBR2hOLEMsRUFBRztBQUM1QixXQUFPNkosV0FBV3BKLGlCQUFYLENBQTZCLENBQUMsQ0FBRCxFQUFHLENBQUgsQ0FBN0IsRUFBbUMsQ0FBQ3NNLEVBQUQsRUFBSUMsRUFBSixDQUFuQyxFQUEyQ2hOLENBQTNDLENBQVA7QUFDRCxHOzthQUVNaU4sYSwwQkFBY3BFLEssRUFBTztBQUMxQixXQUFPLENBQUVBLFNBQU8sRUFBUixHQUFZLElBQWIsRUFBb0JBLFNBQU8sQ0FBUixHQUFXLElBQTlCLEVBQW9DQSxRQUFNLElBQTFDLENBQVA7QUFDRCxHOzthQUVNcUUsWSx5QkFBYXJFLEssRUFBWTtBQUFBLFFBQUw3SSxDQUFLLHVFQUFILENBQUc7O0FBQzlCLFFBQU1tTixLQUFHdEQsV0FBV29ELGFBQVgsQ0FBeUJwRSxLQUF6QixDQUFUO0FBQUEsUUFDTXVFLE1BQUksQ0FBQyxPQUFLRCxHQUFHLENBQUgsQ0FBTixFQUFZLE9BQUtBLEdBQUcsQ0FBSCxDQUFqQixFQUF1QixPQUFLQSxHQUFHLENBQUgsQ0FBNUIsQ0FEVjtBQUFBLFFBRU1FLE1BQUksQ0FBQzNLLEtBQUtDLEtBQUwsQ0FBV2tILFdBQVdpRCxhQUFYLENBQXlCSyxHQUFHLENBQUgsQ0FBekIsRUFBK0JDLElBQUksQ0FBSixDQUEvQixFQUFzQ3BOLENBQXRDLENBQVgsQ0FBRCxFQUFzRDBDLEtBQUtDLEtBQUwsQ0FBV2tILFdBQVdpRCxhQUFYLENBQXlCSyxHQUFHLENBQUgsQ0FBekIsRUFBK0JDLElBQUksQ0FBSixDQUEvQixFQUFzQ3BOLENBQXRDLENBQVgsQ0FBdEQsRUFBMkcwQyxLQUFLQyxLQUFMLENBQVdrSCxXQUFXaUQsYUFBWCxDQUF5QkssR0FBRyxDQUFILENBQXpCLEVBQStCQyxJQUFJLENBQUosQ0FBL0IsRUFBc0NwTixDQUF0QyxDQUFYLENBQTNHLENBRlY7QUFHQSxXQUFPNkosV0FBV3lELFdBQVgsQ0FBdUJELEdBQXZCLENBQVA7QUFDRCxHOzthQUVNdkQsVSx1QkFBV2pCLEssRUFBT3JKLEMsRUFBRztBQUMxQixXQUFPcUssV0FBVzBELFVBQVgsQ0FBc0IxRCxXQUFXb0QsYUFBWCxDQUF5QnBFLEtBQXpCLENBQXRCLEVBQXVEckosQ0FBdkQsQ0FBUDtBQUNELEc7O2FBRU0rTixVLHVCQUFXSixFLEVBQUkzTixDLEVBQUc7QUFDdkIsV0FBTyxVQUFRMk4sR0FBR3JGLElBQUgsQ0FBUSxHQUFSLENBQVIsR0FBcUIsR0FBckIsR0FBeUJ0SSxDQUF6QixHQUEyQixHQUFsQztBQUNELEc7O2FBRU04TixXLHdCQUFZSCxFLEVBQUk7QUFDckIsV0FBT0EsR0FBRyxDQUFILElBQU9BLEdBQUcsQ0FBSCxLQUFPLENBQWQsR0FBa0JBLEdBQUcsQ0FBSCxLQUFPLEVBQWhDO0FBQ0QsRzs7Ozs7a0JBL0JrQnRELFU7Ozs7Ozs7Ozs7O0FDQXJCOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7Ozs7O0lBRXFCMkQsWTtBQUVuQix3QkFBWTlFLE9BQVosRUFBcUIrRSxLQUFyQixFQUE0QjtBQUFBOztBQUMxQixTQUFLL0UsT0FBTCxHQUFlQSxPQUFmO0FBQ0EsU0FBSytFLEtBQUwsR0FBYUEsU0FBUyxJQUFJQyxlQUFKLEVBQXRCO0FBQ0Q7O3lCQUVEQyxLLGtCQUFNQyxJLEVBQWtGO0FBQUEsUUFBNUU1SixDQUE0RSx1RUFBMUUsQ0FBMEU7QUFBQSxRQUF2RTZKLFdBQXVFLHVFQUEzRCxHQUEyRDtBQUFBLFFBQXREQyxZQUFzRCx1RUFBekMsR0FBeUM7QUFBQSxRQUFwQ2pGLEtBQW9DLHVFQUE5QixRQUE4QjtBQUFBLFFBQXBCa0YsUUFBb0IsdUVBQVgxQyxTQUFXOztBQUN0RixRQUFJbkIsY0FBSjtBQUNBLFlBQU8wRCxLQUFLMUIsSUFBWjtBQUNFLFdBQUssTUFBTDtBQUFhO0FBQ1hoQyxrQkFBUSxJQUFJOEQsMEJBQUosQ0FBcUIsS0FBS3RGLE9BQTFCLEVBQW1DbUYsV0FBbkMsRUFBZ0RDLFlBQWhELEVBQThEakYsS0FBOUQsRUFBcUUrRSxLQUFLSyxHQUExRSxFQUErRSxLQUFLUixLQUFwRixFQUEyRk0sUUFBM0YsQ0FBUjtBQUNBO0FBQ0Q7QUFDRCxXQUFLLE9BQUw7QUFBYztBQUNaN0Qsa0JBQVEsSUFBSWdFLHFCQUFKLENBQWdCLEtBQUt4RixPQUFyQixFQUE4Qm1GLFdBQTlCLEVBQTJDQyxZQUEzQyxFQUF5RGpGLEtBQXpELEVBQWdFK0UsS0FBS0ssR0FBckUsQ0FBUjtBQUNBO0FBQ0Q7QUFDRCxXQUFLLEtBQUw7QUFBWTtBQUNWL0Qsa0JBQVEsSUFBSWlFLGtCQUFKLENBQWEsS0FBS3pGLE9BQWxCLEVBQTJCbUYsV0FBM0IsRUFBd0NDLFlBQXhDLEVBQXNEakYsS0FBdEQsRUFBNkQrRSxLQUFLSyxHQUFsRSxFQUF1RWpLLENBQXZFLENBQVI7QUFDQTtBQUNEO0FBQ0QsV0FBSyxPQUFMO0FBQ0E7QUFBUztBQUNQa0csa0JBQVEsSUFBSWtFLG9CQUFKLENBQWUsS0FBSzFGLE9BQXBCLEVBQTZCbUYsV0FBN0IsRUFBMENDLFlBQTFDLEVBQXdEakYsS0FBeEQsQ0FBUjtBQUNBO0FBQ0Q7QUFqQkg7QUFtQkEsV0FBT3FCLEtBQVA7QUFDRCxHOzs7OztrQkE3QmtCc0QsWTs7Ozs7Ozs7Ozs7OztBQ05yQjs7QUFDQTs7Ozs7Ozs7SUFFcUJhLGdCO0FBQ25CLDRCQUFZQyxPQUFaLEVBQXFCQyxLQUFyQixFQUE0QjtBQUFBOztBQUMxQixTQUFLRCxPQUFMLEdBQWVBLE9BQWY7QUFDQSxTQUFLRSxRQUFMLEdBQWdCLGlCQUFVRCxLQUFWLENBQWhCO0FBQ0Q7OzZCQUVEOUUsTyxzQkFBVSxDQUVULEM7OzZCQUVEZ0YsUSxxQkFBUzlGLEssRUFBT0MsTSxFQUFRO0FBQ3RCLFFBQU1nQyxRQUFRdkwsd0JBQWMwQixTQUFkLENBQXdCNEgsS0FBeEIsRUFBK0JDLE1BQS9CLEVBQXVDLEtBQUs0RixRQUFMLENBQWM3RixLQUFyRCxFQUE0RCxLQUFLNkYsUUFBTCxDQUFjNUYsTUFBMUUsQ0FBZDtBQUNBLFdBQU87QUFDTEQsYUFBT2lDLFFBQU1qQyxLQURSO0FBRUxDLGNBQVFnQyxRQUFNaEM7QUFGVCxLQUFQO0FBSUQsRzs7NkJBRUQ4RixVLHVCQUFXL0YsSyxFQUFPQyxNLEVBQVE7QUFDeEIsUUFBTStGLFFBQVEsS0FBS0gsUUFBTCxDQUFjRyxLQUE1QjtBQUFBLFFBQW1DL0QsUUFBUXZMLHdCQUFjMEIsU0FBZCxDQUF3QjRILEtBQXhCLEVBQStCQyxNQUEvQixFQUF1QytGLE1BQU1kLFdBQTdDLEVBQTBEYyxNQUFNYixZQUFoRSxDQUEzQztBQUNBLFdBQU87QUFDTEQsbUJBQWFqRCxRQUFNakMsS0FEZDtBQUVMbUYsb0JBQWNsRCxRQUFNaEM7QUFGZixLQUFQO0FBSUQsRzs7NkJBRURnRyxTLHNCQUFVakcsSyxFQUFPQyxNLEVBQVE7QUFDdkIsU0FBS3dELEtBQUwsZ0JBQ0ssS0FBS29DLFFBRFYsRUFFSyxLQUFLQyxRQUFMLENBQWM5RixLQUFkLEVBQXFCQyxNQUFyQixDQUZMO0FBR0UrRiwwQkFDSyxLQUFLSCxRQUFMLENBQWNHLEtBRG5CLEVBRUssS0FBS0QsVUFBTCxDQUFnQi9GLEtBQWhCLEVBQXVCQyxNQUF2QixDQUZMLENBSEY7QUFPRWlHLDBCQUNLLEtBQUtMLFFBQUwsQ0FBY0ssS0FEbkIsQ0FQRjtBQVVFQyx5QkFDSyxLQUFLTixRQUFMLENBQWNNLElBRG5CO0FBVkY7QUFjRCxHOzs2QkFFREMsVSx1QkFBV0MsSyxFQUFPO0FBQ2hCLFdBQU8sS0FBS0MsTUFBTCxHQUFjdk0sS0FBS1MsSUFBTCxDQUFVVCxLQUFLOEMsR0FBTCxDQUFTLENBQVQsRUFBWXdKLFFBQU0sQ0FBbEIsSUFBcUIsQ0FBL0IsQ0FBckI7QUFDRCxHOzs2QkFFREUsUyx3QkFBWTtBQUNWLFdBQU8sS0FBS0QsTUFBWjtBQUNELEc7OzZCQUVERSxRLHVCQUFXO0FBQ1QsV0FBTyxLQUFLL0MsS0FBWjtBQUNELEc7OzZCQUVEZ0QsZSw4QkFBa0I7QUFDaEIsV0FBTyxLQUFLQyxLQUFMLENBQVdDLFlBQWxCO0FBQ0QsRzs7NkJBRURDLEssb0JBQVE7QUFDTixRQUFHLEtBQUtqQixPQUFSLEVBQWlCO0FBQ2YsV0FBS0EsT0FBTCxDQUFhLEtBQUthLFFBQUwsRUFBYixFQUE4QixLQUFLRCxTQUFMLEVBQTlCLEVBQWdELEtBQUtFLGVBQUwsRUFBaEQ7QUFDRDtBQUNGLEc7Ozs7O2tCQS9Ea0JmLGdCOzs7Ozs7Ozs7Ozs7Ozs7QUNIckI7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7OztBQUNBOztJQUVxQm1CLFU7QUFFbkIsc0JBQVlDLE1BQVosRUFBb0JqTixDQUFwQixFQUF1QmtOLEtBQXZCLEVBQThCQyxJQUE5QixFQUF1RTtBQUFBLFFBQW5DQyxLQUFtQyx1RUFBN0IsQ0FBNkI7O0FBQUE7O0FBQUEsUUFBMUJDLEtBQTBCLHVFQUFwQixRQUFvQjtBQUFBLFFBQVZqSCxNQUFVLHVFQUFILENBQUc7O0FBQUE7O0FBQ3JFLFNBQUs2RyxNQUFMLEdBQWNBLE1BQWQ7QUFDQSxTQUFLak4sQ0FBTCxnQkFDS0EsQ0FETDtBQUVFa04sa0JBRkY7QUFHRUM7QUFIRjtBQUtBLFFBQU12RCxRQUFRLEtBQUsrQyxRQUFMLEVBQWQ7O0FBRUEsUUFBTVcsZUFBZSxLQUFLQyxVQUFMLEVBQXJCO0FBQ0FDLFdBQU9DLElBQVAsQ0FBWUgsWUFBWixFQUEwQkksR0FBMUIsQ0FBOEIsVUFBQ3pPLENBQUQsRUFBTTtBQUNsQyxZQUFLQSxDQUFMLElBQVVxTyxhQUFhck8sQ0FBYixFQUFnQjJLLE1BQU0rRCxLQUF0QixLQUFnQ0wsYUFBYXJPLENBQWIsRUFBZ0IsQ0FBaEIsQ0FBMUM7QUFDRCxLQUZEOztBQUlBLFNBQUsyTyxPQUFMLEdBQWUsSUFBSTlSLFlBQU0rUixnQkFBVixDQUEyQixFQUEzQixDQUFmO0FBQ0EsU0FBSSxJQUFJL08sSUFBRSxDQUFWLEVBQWFBLElBQUUsS0FBS2dQLG1CQUFMLENBQXlCNVAsQ0FBekIsQ0FBMkIsQ0FBM0IsRUFBOEJOLE1BQTdDLEVBQXFELEVBQUVrQixDQUF2RCxFQUEwRDtBQUN6RCxXQUFLOE8sT0FBTCxDQUFhNU0sTUFBYixDQUFvQmpDLElBQXBCLENBQXlCLElBQUlqRCxZQUFNK0ksT0FBVixFQUF6QjtBQUNBOztBQUVELFNBQUtrSixPQUFMLEdBQWUsSUFBSWpTLFlBQU0rUixnQkFBVixDQUEyQixFQUEzQixDQUFmO0FBQ0EsU0FBSSxJQUFJL08sS0FBRSxDQUFWLEVBQWFBLEtBQUVrUCxxQkFBV0MsSUFBMUIsRUFBZ0MsRUFBRW5QLEVBQWxDLEVBQXFDO0FBQ3BDLFdBQUtpUCxPQUFMLENBQWEvTSxNQUFiLENBQW9CakMsSUFBcEIsQ0FBeUIsSUFBSWpELFlBQU0rSSxPQUFWLEVBQXpCO0FBQ0E7O0FBRUQsU0FBS3FKLFFBQUwsR0FBZ0IsRUFBaEI7O0FBRUE7O0FBRUEsU0FBS0MsUUFBTCxHQUFnQkgscUJBQVdHLFFBQVgsQ0FBb0JDLEtBQXBCLEVBQWhCOztBQUVBLFNBQUtwTyxDQUFMLENBQU9xTyxTQUFQLEdBQW1CLENBQUM7QUFDaEJuQixhQUFPLENBRFM7QUFFaEJDLFlBQU1hLHFCQUFXTSxLQUFYLENBQWlCLENBQWpCO0FBRlUsS0FBRCxFQUdkO0FBQ0RwQixhQUFPYyxxQkFBV00sS0FBWCxDQUFpQixDQUFqQixDQUROO0FBRURuQixZQUFNYSxxQkFBV00sS0FBWCxDQUFpQixDQUFqQjtBQUZMLEtBSGMsQ0FBbkI7O0FBU0EsU0FBS0MsV0FBTCxHQUFtQixJQUFJelMsWUFBTTBTLE9BQVYsRUFBbkI7QUFDQSxTQUFLRCxXQUFMLENBQWlCRSxLQUFqQixHQUF5QjNTLFlBQU00UyxjQUEvQjtBQUNBLFNBQUtILFdBQUwsQ0FBaUJJLE1BQWpCLENBQXdCeE4sR0FBeEIsQ0FBNEIsQ0FBNUIsRUFBK0JnTSxPQUFLRCxLQUFwQztBQUNBLFNBQUtxQixXQUFMLENBQWlCN0csS0FBakIsR0FBeUJrQyxNQUFNMkUsV0FBL0I7QUFDQSxTQUFLQSxXQUFMLENBQWlCSyxXQUFqQixHQUErQixJQUEvQjs7QUFFQSxTQUFLQyxTQUFMLEdBQWlCLENBQ0QsSUFBSS9TLFlBQU1nVCxpQkFBVixFQURDLEVBRUQsSUFBSWhULFlBQU1nVCxpQkFBVixFQUZDLEVBR0QsSUFBSWhULFlBQU1nVCxpQkFBVixDQUE0QixFQUFDcEIsS0FBSyxLQUFLYSxXQUFYLEVBQTVCLENBSEMsRUFJRCxJQUFJelMsWUFBTWdULGlCQUFWLENBQTRCLEVBQUNwQixLQUFLLEtBQUthLFdBQVgsRUFBNUIsQ0FKQyxFQUtELElBQUl6UyxZQUFNZ1QsaUJBQVYsQ0FBNEIsRUFBQ3BCLEtBQUssS0FBS2EsV0FBWCxFQUE1QixDQUxDLEVBTUQsSUFBSXpTLFlBQU1nVCxpQkFBVixDQUE0QixFQUFDcEIsS0FBSyxLQUFLYSxXQUFYLEVBQTVCLENBTkMsQ0FBakI7O0FBU0EsU0FBS3ZPLENBQUwsQ0FBTytPLFVBQVAsQ0FBa0IsS0FBS0YsU0FBTCxDQUFlLENBQWYsQ0FBbEIsRUFBcUMsSUFBRTNCLEtBQXZDO0FBQ0EsU0FBS2xOLENBQUwsQ0FBTytPLFVBQVAsQ0FBa0IsS0FBS0YsU0FBTCxDQUFlLENBQWYsQ0FBbEIsRUFBcUMsSUFBRTFCLElBQUYsR0FBTyxDQUE1Qzs7QUFFQSxTQUFLNkIsSUFBTCxHQUFZLElBQUlsVCxZQUFNbVQsSUFBVixDQUFlLEtBQUtkLFFBQXBCLEVBQThCLEtBQUtVLFNBQW5DLENBQVo7QUFDQSxTQUFLRyxJQUFMLENBQVVFLFVBQVYsR0FBdUIsS0FBdkI7QUFDQSxTQUFLRixJQUFMLENBQVVHLGFBQVYsR0FBMEIsS0FBMUI7QUFDQTs7QUFFQTtBQUNBLFNBQUtDLEtBQUwsR0FBYSxLQUFLSixJQUFsQjtBQUNBLFNBQUtJLEtBQUwsQ0FBV0MsUUFBWCxDQUFvQkMsSUFBcEIsR0FBMkIsSUFBM0I7O0FBRUEsU0FBS0MsT0FBTCxHQUFlLEVBQWY7QUFDQSxRQUFHLEtBQUt2UCxDQUFMLENBQU93UCxNQUFQLENBQWNDLEdBQWpCLEVBQXNCO0FBQ3BCLFVBQU0vUCxJQUFFLEtBQUt5TyxRQUFMLENBQWN1QixRQUFkLENBQXVCOVIsTUFBL0I7QUFDQSxVQUFJK1IsV0FBSjtBQUNBO0FBQ0FBLFdBQUtDLE1BQU1DLEtBQU4sQ0FBWSxDQUFaLEVBQWVELE1BQU1sUSxDQUFOLENBQWYsRUFBeUJnTyxHQUF6QixDQUE2QixVQUFDb0MsQ0FBRCxFQUFJaFIsQ0FBSjtBQUFBLGVBQVNBLENBQVQ7QUFBQSxPQUE3QixDQUFMOztBQUVBLDJCQUFhNlEsRUFBYixtSEFBaUI7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBLFlBQVQ3USxHQUFTOztBQUNmLFlBQU0wUSxTQUFTTyxxQkFBV0MsWUFBWCxDQUF3QixLQUFLN0IsUUFBTCxDQUFjdUIsUUFBZCxDQUF1QjVRLEdBQXZCLENBQXhCLEVBQW1EQSxNQUFFWSxJQUFFLENBQUosR0FBTSxRQUFOLEdBQWUsUUFBbEUsRUFBNEUsS0FBS00sQ0FBTCxDQUFPd1AsTUFBUCxDQUFjUyxJQUExRixDQUFmO0FBQ0EsYUFBS1YsT0FBTCxDQUFheFEsSUFBYixDQUFrQjtBQUNoQnlRLHdCQURnQjtBQUVoQlUsa0JBQVFwUjtBQUZRLFNBQWxCO0FBSUEsYUFBS3NRLEtBQUwsQ0FBV2UsR0FBWCxDQUFlWCxNQUFmO0FBQ0Q7QUFDRjs7QUFFRCxTQUFLWSxNQUFMLEdBQWM7QUFDWlgsV0FBSyxJQURPO0FBRVpySixjQUFRLENBRkk7QUFHWmlLLG1CQUFhLENBSEQ7QUFJWnJQLGNBQVEsRUFKSTtBQUtac1AsVUFBSSxJQUFJeFUsWUFBTStJLE9BQVYsQ0FBa0IsQ0FBbEIsRUFBb0IsQ0FBcEIsRUFBc0IsQ0FBdEIsQ0FMUTtBQU1aMEwsWUFBTSxJQUFJelUsWUFBTStJLE9BQVY7QUFOTSxLQUFkO0FBUUEsU0FBSzFELEdBQUwsQ0FBUyxDQUFULEVBQVksUUFBWixFQUFzQmlGLE1BQXRCLEVBQThCOEcsS0FBOUIsRUFBcUNDLElBQXJDLEVBM0ZxRSxDQTJGekI7O0FBRTVDLFNBQUtoTSxHQUFMLENBQVNpTSxLQUFULEVBQWdCQyxLQUFoQixFQUF1QmpILE1BQXZCLEVBQStCOEcsS0FBL0IsRUFBc0NDLElBQXRDLEVBN0ZxRSxDQTZGeEI7O0FBRTdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUQ7O3VCQUVEbEcsTyxzQkFBVTtBQUNSLDBCQUFhLEtBQUs0SCxTQUFsQix5SEFBNkI7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBLFVBQXJCMVAsQ0FBcUI7O0FBQzNCLFVBQUdBLEVBQUV1TyxHQUFMLEVBQVU7QUFDUnZPLFVBQUV1TyxHQUFGLEdBQVEsSUFBUjtBQUNBdk8sVUFBRXlQLFdBQUYsR0FBZ0IsSUFBaEI7QUFDRDtBQUNEelAsUUFBRThILE9BQUY7QUFDRDtBQUNELFdBQU8sS0FBSzRILFNBQVo7QUFDQSxTQUFLVixRQUFMLENBQWNsSCxPQUFkO0FBQ0QsRzs7dUJBRUR1SixPLHNCQUFVO0FBQ1IsV0FBTyxLQUFLeFEsQ0FBTCxDQUFPbU4sSUFBUCxHQUFZLEtBQUtuTixDQUFMLENBQU9rTixLQUExQjtBQUNELEc7O3VCQUVEUCxRLHVCQUFXO0FBQ1Qsd0JBQ0ssS0FBSzNNLENBQUwsQ0FBT3NNLElBRFo7QUFFRUcsY0FBUSxLQUFLek0sQ0FBTCxDQUFPeU07QUFGakI7QUFJRCxHOzt1QkFFRGdFLGEsNEJBQWdCO0FBQ2QsUUFBTUMsTUFBTSxLQUFLdEQsS0FBTCxHQUFXbE4sS0FBS3lRLEVBQUwsR0FBUSxDQUFuQixHQUFzQixLQUFLeEMsUUFBTCxDQUFjdUIsUUFBZCxDQUF1QjlSLE1BQXZCLEdBQThCLENBQXBELEdBQXVELENBQW5FO0FBQ0EsV0FBTyxDQUNILEtBQUt1USxRQUFMLENBQWN1QixRQUFkLENBQXVCZ0IsR0FBdkIsQ0FERyxFQUVILEtBQUt2QyxRQUFMLENBQWN1QixRQUFkLENBQXVCMUIscUJBQVdDLElBQVgsR0FBZ0IsQ0FBaEIsR0FBa0J5QyxHQUF6QyxDQUZHLEVBR0gsS0FBS3ZDLFFBQUwsQ0FBY3VCLFFBQWQsQ0FBdUIsQ0FBQzFCLHFCQUFXNEMsSUFBWCxHQUFnQixDQUFqQixJQUFvQjVDLHFCQUFXQyxJQUEvQixHQUFvQ3lDLEdBQTNELENBSEcsRUFJSCxLQUFLdkMsUUFBTCxDQUFjdUIsUUFBZCxDQUF1QjFCLHFCQUFXNEMsSUFBWCxHQUFnQjVDLHFCQUFXQyxJQUEzQixHQUFnQyxDQUFoQyxHQUFrQ3lDLEdBQXpELENBSkcsQ0FBUDtBQU1ELEc7O3VCQUVERyxVLHlCQUFhO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFNQyxLQUFLLEtBQUtMLGFBQUwsRUFBWDtBQUNBLFdBQU87QUFDTHRLLGFBQU8ySyxHQUFHLENBQUgsRUFBTTFNLFVBQU4sQ0FBaUIwTSxHQUFHLENBQUgsQ0FBakIsQ0FERjtBQUVMMUssY0FBUTBLLEdBQUcsQ0FBSCxFQUFNMU0sVUFBTixDQUFpQjBNLEdBQUcsQ0FBSCxDQUFqQjtBQUZILEtBQVA7QUFJRCxHOzt1QkFFREMsbUIsZ0NBQW9CQyxDLEVBQUc7QUFDckJBLE1BQUU5UyxDQUFGLEdBQU0sQ0FBQ2dDLEtBQUt5USxFQUFOLEdBQVMsQ0FBZjtBQUNBLFdBQU9LLENBQVA7QUFDRCxHOzt1QkFFREMsbUIsZ0NBQW9CaFIsQyxFQUFHO0FBQ3JCLFFBQU1QLElBQUUsS0FBS3lPLFFBQUwsQ0FBY3VCLFFBQWQsQ0FBdUI5UixNQUEvQjtBQUFBLFFBQXVDOFMsTUFBTSxLQUFLdEQsS0FBTCxHQUFXbE4sS0FBS3lRLEVBQUwsR0FBUSxDQUFuQixHQUFzQmpSLElBQUUsQ0FBeEIsR0FBMkIsQ0FBeEU7QUFBQSxRQUEyRW9SLEtBQUssQ0FDNUUsS0FBSzNDLFFBQUwsQ0FBY3VCLFFBQWQsQ0FBdUJnQixHQUF2QixDQUQ0RSxFQUU1RSxLQUFLdkMsUUFBTCxDQUFjdUIsUUFBZCxDQUF1QjFCLHFCQUFXQyxJQUFYLEdBQWdCLENBQWhCLEdBQWtCeUMsR0FBekMsQ0FGNEUsRUFHNUUsS0FBS3ZDLFFBQUwsQ0FBY3VCLFFBQWQsQ0FBdUIsQ0FBQzFCLHFCQUFXNEMsSUFBWCxHQUFnQixDQUFqQixJQUFvQjVDLHFCQUFXQyxJQUEvQixHQUFvQ3lDLEdBQTNELENBSDRFLEVBSTVFLEtBQUt2QyxRQUFMLENBQWN1QixRQUFkLENBQXVCMUIscUJBQVc0QyxJQUFYLEdBQWdCNUMscUJBQVdDLElBQTNCLEdBQWdDLENBQWhDLEdBQWtDeUMsR0FBekQsQ0FKNEUsQ0FBaEY7QUFNQXpRLE1BQUVrQixHQUFGLENBQU0sQ0FBTixFQUFTLENBQVQsRUFBWSxDQUFaO0FBQ0EsMEJBQWMyUCxFQUFkLHlIQUFrQjtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQUEsVUFBVkksRUFBVTs7QUFDaEJqUixRQUFFL0IsQ0FBRixJQUFPLE9BQUtnVCxHQUFHaFQsQ0FBZjtBQUNBK0IsUUFBRXZDLENBQUYsSUFBTyxPQUFLd1QsR0FBR3hULENBQWY7QUFDQXVDLFFBQUVtQixDQUFGLElBQU8sT0FBSzhQLEdBQUc5UCxDQUFmO0FBQ0Q7QUFDRCxTQUFLZ08sS0FBTCxDQUFXK0IsWUFBWCxDQUF3QmxSLENBQXhCO0FBQ0EsV0FBT0EsQ0FBUDtBQUNELEc7O3VCQUVEbVIsc0IsbUNBQXVCQyxJLEVBQU1DLEcsRUFBSztBQUNoQyxRQUFNdlEsS0FBSyxFQUFDN0MsR0FBRyxFQUFKLEVBQVFSLEdBQUcsRUFBWCxFQUFYO0FBQUEsUUFBMkI2VCxJQUFJLEtBQUs1RSxRQUFMLEdBQWdCNkUsSUFBL0M7QUFDQSwwQkFBYUgsSUFBYix5SEFBbUI7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBLFVBQVh2UyxDQUFXOztBQUNqQmlDLFNBQUc3QyxDQUFILENBQUthLElBQUwsV0FBYyxLQUFLK08sbUJBQUwsQ0FBeUI1UCxDQUF6QixDQUEyQlksQ0FBM0IsQ0FBZDtBQUNBaUMsU0FBR3JELENBQUgsQ0FBS3FCLElBQUwsQ0FBVSxDQUFDdVMsSUFBSWxSLE9BQUosQ0FBWXRCLENBQVosQ0FBRCxHQUFpQixLQUFLZ1AsbUJBQUwsQ0FBeUJwUSxDQUF6QixDQUEyQm9CLENBQTNCLEVBQThCNE8sR0FBOUIsQ0FBa0MsVUFBQ2xNLENBQUQ7QUFBQSxlQUFNK1AsSUFBRS9QLENBQVI7QUFBQSxPQUFsQyxDQUFqQixhQUFtRSxLQUFLc00sbUJBQUwsQ0FBeUJwUSxDQUF6QixDQUEyQm9CLENBQTNCLENBQW5FLENBQVY7QUFDRDtBQUNELFdBQU9pQyxFQUFQO0FBQ0QsRzs7dUJBRURJLEcsZ0JBQUlpTSxLLEVBQTBGO0FBQUEsUUFBbkZDLEtBQW1GLHVFQUE3RSxLQUFLQSxLQUF3RTtBQUFBLFFBQWpFakgsTUFBaUUsdUVBQTFELEtBQUtnSyxNQUFMLENBQVloSyxNQUE4QztBQUFBLFFBQXRDOEcsS0FBc0MsdUVBQWhDLEtBQUtsTixDQUFMLENBQU9rTixLQUF5QjtBQUFBLFFBQWxCQyxJQUFrQix1RUFBYixLQUFLbk4sQ0FBTCxDQUFPbU4sSUFBTTs7QUFDNUYsUUFBTXdELEtBQUt6USxLQUFLeVEsRUFBaEI7QUFDQSxTQUFLdEQsS0FBTCxHQUFhQSxLQUFiO0FBQ0EsUUFBSW9FLG9CQUFKO0FBQUEsUUFBaUJDLG1CQUFqQjtBQUNBLFFBQUcsUUFBT3RFLEtBQVAseUNBQU9BLEtBQVAsT0FBZSxRQUFsQixFQUE0QjtBQUMxQixXQUFLQSxLQUFMLEdBQWFBLE1BQU11RSxXQUFuQjtBQUNBRixvQkFBY3JFLE1BQU1xRSxXQUFwQjtBQUNBQyxtQkFBYXRFLE1BQU1zRSxVQUFOLEdBQWlCZixLQUFHLENBQXBCLEdBQXNCQSxLQUFHdkQsTUFBTXNFLFVBQS9CLEdBQTBDdEUsTUFBTXNFLFVBQTdEO0FBQ0QsS0FKRCxNQUtLO0FBQ0gsV0FBS3RFLEtBQUwsR0FBYUEsS0FBYjtBQUNEO0FBQ0QsU0FBS2dELE1BQUwsQ0FBWWhLLE1BQVosR0FBcUJBLE1BQXJCO0FBQ0EsUUFBRyxLQUFLcEcsQ0FBTCxDQUFPa04sS0FBUCxLQUFlQSxLQUFmLElBQXdCLEtBQUtsTixDQUFMLENBQU9tTixJQUFQLEtBQWNBLElBQXpDLEVBQStDO0FBQzdDLFdBQUtvQixXQUFMLENBQWlCSSxNQUFqQixDQUF3QnhOLEdBQXhCLENBQTRCLENBQTVCLEVBQStCZ00sT0FBS0QsS0FBcEM7QUFDQSxXQUFLcUIsV0FBTCxDQUFpQkssV0FBakIsR0FBK0IsSUFBL0I7QUFDQSxVQUFHLEtBQUs1TyxDQUFMLENBQU9rTixLQUFQLEtBQWVBLEtBQWxCLEVBQXlCO0FBQ3ZCLGFBQUtsTixDQUFMLENBQU8rTyxVQUFQLENBQWtCLEtBQUtGLFNBQUwsQ0FBZSxDQUFmLENBQWxCLEVBQXFDLElBQUUzQixLQUF2QztBQUNEO0FBQ0QsVUFBRyxLQUFLbE4sQ0FBTCxDQUFPbU4sSUFBUCxLQUFjQSxJQUFqQixFQUF1QjtBQUNyQixhQUFLbk4sQ0FBTCxDQUFPK08sVUFBUCxDQUFrQixLQUFLRixTQUFMLENBQWUsQ0FBZixDQUFsQixFQUFxQyxJQUFFMUIsSUFBRixHQUFPLENBQTVDO0FBQ0Q7QUFDRjtBQUNELFNBQUtuTixDQUFMLENBQU9rTixLQUFQLEdBQWVBLEtBQWY7QUFDQSxTQUFLbE4sQ0FBTCxDQUFPbU4sSUFBUCxHQUFjQSxJQUFkO0FBQ0EsUUFBSW5NLGVBQUo7QUFDQSxRQUFNNEksUUFBUSxLQUFLK0MsUUFBTCxFQUFkO0FBQ0EsUUFBRyxLQUFLVSxLQUFMLEtBQWUsUUFBbEIsRUFBNEI7QUFDMUJyTSxlQUFTLEtBQUtvUSxzQkFBTCxDQUE0QixLQUFLUSwwQkFBakMsRUFBNkQsS0FBS0EsMEJBQWxFLENBQVQ7QUFDRCxLQUZELE1BR0ssSUFBRyxLQUFLdkUsS0FBTCxLQUFlLFFBQWxCLEVBQTRCO0FBQy9CLFVBQUdvRSxnQkFBYzVJLFNBQWQsSUFBMkIzSSxLQUFLTSxHQUFMLENBQVNpUixjQUFZZCxLQUFHLENBQXhCLElBQTJCLElBQXpELEVBQStEO0FBQzdEM1AsaUJBQVMsS0FBS29RLHNCQUFMLENBQTRCLEtBQUtTLHdCQUFqQyxFQUEyRCxFQUEzRCxDQUFUO0FBQ0EsWUFBTTlRLEtBQUssS0FBSytRLGdCQUFMLENBQXNCLEtBQUtWLHNCQUFMLENBQTRCLEtBQUtRLDBCQUFqQyxFQUE2RCxLQUFLQSwwQkFBbEUsQ0FBdEIsRUFBcUhILGNBQVlkLEtBQUcsQ0FBZixHQUFpQkEsS0FBR2MsV0FBcEIsR0FBZ0NBLFdBQXJKLENBQVg7QUFDQXpRLGVBQU85QyxDQUFQLElBQVk2QyxHQUFHN0MsQ0FBZixTQUFvQjhDLE9BQU85QyxDQUEzQjtBQUNBOEMsZUFBT3RELENBQVAsSUFBWXFELEdBQUdyRCxDQUFmLFNBQW9Cc0QsT0FBT3RELENBQTNCO0FBQ0E7QUFDRCxPQU5ELE1BT0s7QUFDSHNELGlCQUFTLEtBQUtvUSxzQkFBTCxDQUE0QixLQUFLVywwQkFBakMsRUFBNkQsS0FBS0gsMEJBQWxFLENBQVQ7QUFDRDtBQUNGO0FBQ0QsUUFBSUksV0FBSjtBQUFBLFFBQVFDLFdBQVI7QUFBQSxRQUFZQyxTQUFTLE1BQUl0SSxNQUFNNkMsTUFBVixHQUFpQjdDLE1BQU11SSxLQUE1QztBQUNBLFFBQUcsS0FBSzlFLEtBQUwsS0FBYSxRQUFoQixFQUEwQjtBQUN4QjZFLGdCQUFVLE9BQUssS0FBS2xTLENBQUwsQ0FBT29JLEtBQXRCO0FBQ0Q7QUFDRCxRQUFHLEtBQUtnRixLQUFMLElBQVl1RCxLQUFHLENBQWxCLEVBQXFCO0FBQ25CcUIsV0FBSyxDQUFDcEksTUFBTTZDLE1BQU4sR0FBYVMsS0FBZCxJQUFxQnRELE1BQU11SSxLQUFoQztBQUNBRixXQUFLLENBQUNySSxNQUFNNkMsTUFBTixHQUFhVSxJQUFkLElBQW9CdkQsTUFBTXVJLEtBQS9CO0FBQ0QsS0FIRCxNQUlLO0FBQ0hILFdBQUs5RSxRQUFNdEQsTUFBTXVJLEtBQWpCO0FBQ0FGLFdBQUs5RSxPQUFLdkQsTUFBTXVJLEtBQWhCO0FBQ0Q7O0FBRUQsUUFBTUMsVUFBVSxLQUFLaEYsS0FBTCxHQUFXdUQsS0FBRyxDQUFkLEdBQWdCQSxLQUFHLEtBQUt2RCxLQUF4QixHQUE4QixLQUFLQSxLQUFuRDtBQUFBLFFBQTBEaUYsU0FBUyxLQUFLaEYsS0FBTCxLQUFlLFFBQWYsR0FBeUIrRSxPQUF6QixHQUFtQ1YsZUFBYTdJLFNBQWIsR0FBd0I4SCxLQUFHLENBQTNCLEdBQThCZSxVQUFwSTs7QUF2RDRGLGdDQXdEdEUsS0FBS1kscUJBQUwsQ0FBMkJ0UixNQUEzQixFQUFtQ29SLE9BQW5DLEVBQTRDQyxNQUE1QyxFQUFvRCxDQUFDTCxLQUFHcEksTUFBTXpELEtBQVYsRUFBaUI4TCxLQUFHckksTUFBTXpELEtBQTFCLENBQXBELENBeERzRTtBQUFBLFFBd0RyRm9NLElBeERxRjtBQUFBLFFBd0QvRUMsS0F4RCtFOztBQXlENUYsUUFBRyxLQUFLcEYsS0FBTCxHQUFXdUQsS0FBRyxDQUFqQixFQUFvQjtBQUNsQixXQUFLOEIsT0FBTCxDQUFhRixJQUFiO0FBQ0EsV0FBS0UsT0FBTCxDQUFhRCxLQUFiO0FBQ0FOLGVBQVMsQ0FBQ0EsTUFBVjtBQUNEO0FBQ0QsU0FBS1EsU0FBTCxDQUFlSCxJQUFmLEVBQXFCQyxLQUFyQixFQUE0Qk4sTUFBNUI7QUFDRCxHOzt1QkFFRFEsUyxzQkFBVUgsSSxFQUFNQyxLLEVBQU9OLE0sRUFBUTtBQUFBOztBQUM3QixRQUFNbFMsSUFBSSxLQUFLMk0sUUFBTCxFQUFWO0FBQ0EsUUFBSTdOLElBQUksQ0FBUjs7QUFFQSxRQUFNNlQsS0FBSyxDQUFDSCxLQUFELEVBQVFELElBQVIsQ0FBWDtBQUNBLFNBQUksSUFBSTdVLElBQUksQ0FBWixFQUFlQSxJQUFFc1EscUJBQVc0RSxJQUE1QixFQUFrQyxFQUFFbFYsQ0FBcEMsRUFBdUM7QUFDckMsV0FBSSxJQUFJMEQsSUFBSSxDQUFaLEVBQWVBLElBQUU0TSxxQkFBVzRDLElBQTVCLEVBQWtDLEVBQUV4UCxDQUFwQyxFQUF1QztBQUNyQyxhQUFJLElBQUlsRCxJQUFJLENBQVosRUFBZUEsSUFBRThQLHFCQUFXQyxJQUE1QixFQUFrQyxFQUFFL1AsQ0FBcEMsRUFBdUM7QUFDckMsZUFBS2lRLFFBQUwsQ0FBY3VCLFFBQWQsQ0FBdUI1USxHQUF2QixFQUE0QnFDLEdBQTVCLENBQ0V3UixHQUFHalYsQ0FBSCxFQUFNUSxDQUFOLENBQVFBLENBQVIsSUFBVzhCLEVBQUVtRyxLQUFiLEdBQW1CK0wsTUFEckIsRUFFRVMsR0FBR2pWLENBQUgsRUFBTUEsQ0FBTixDQUFRUSxDQUFSLElBQVc4QixFQUFFbUcsS0FGZixFQUdFL0UsSUFBRXBCLEVBQUVvRyxNQUFKLElBQVk0SCxxQkFBVzRDLElBQVgsR0FBZ0IsQ0FBNUIsSUFBK0IsTUFBSTVRLEVBQUVvRyxNQUh2QztBQUtEO0FBQ0Y7QUFDRjtBQUNELFFBQUd0SCxNQUFJLEtBQUtxUCxRQUFMLENBQWN1QixRQUFkLENBQXVCOVIsTUFBOUIsRUFBc0M7QUFDcENxRCxjQUFRQyxJQUFSLENBQWEseUJBQWI7QUFDRDs7QUFFRCxRQUFHLEtBQUtrUCxNQUFMLENBQVlYLEdBQVosSUFBbUIsQ0FBQyxLQUFLVyxNQUFMLENBQVlwUCxNQUFaLENBQW1CcEQsTUFBMUMsRUFBa0Q7QUFDaEQsVUFBTWlWLFFBQVEsSUFBSS9XLFlBQU1nWCxLQUFWLEVBQWQ7QUFBQSxVQUFpQ0MsU0FBU0YsTUFBTUUsTUFBaEQ7QUFBQSxVQUF3REMsY0FBYyxDQUFDLElBQUUsS0FBS3JHLFFBQUwsR0FBZ0JzRyxjQUFuQixJQUFtQy9TLEtBQUs2QyxHQUFMLENBQVMvQyxFQUFFbUcsS0FBWCxFQUFrQm5HLEVBQUVvRyxNQUFwQixDQUF6RztBQUFBLFVBQXNJOE0sT0FBTyxJQUFJcFgsWUFBTStJLE9BQVYsRUFBN0k7QUFDQWdPLFlBQU1NLDZCQUFOLENBQW9DLElBQUlyWCxZQUFNK0ksT0FBVixDQUFrQixDQUFDLENBQW5CLEVBQXFCLENBQXJCLEVBQXVCLENBQUMsQ0FBeEIsRUFBMkJ1TyxTQUEzQixFQUFwQyxFQUE0RSxJQUFJdFgsWUFBTStJLE9BQVYsQ0FBa0JtTyxjQUFZZCxNQUE5QixFQUFzQyxDQUF0QyxFQUF5QyxNQUFJbFMsRUFBRW9HLE1BQS9DLENBQTVFO0FBQ0EsV0FBSSxJQUFJdEgsTUFBRSxDQUFOLEVBQVNZLElBQUUsS0FBS3lPLFFBQUwsQ0FBY3VCLFFBQWQsQ0FBdUI5UixNQUF0QyxFQUE2Q2tCLE1BQUVZLENBQS9DLEVBQWlELEVBQUVaLEdBQW5ELEVBQXNEO0FBQ3BEK1QsY0FBTVEsWUFBTixDQUFtQixLQUFLbEYsUUFBTCxDQUFjdUIsUUFBZCxDQUF1QjVRLEdBQXZCLENBQW5CLEVBQThDb1UsSUFBOUM7QUFDQUEsYUFBS0ksR0FBTCxDQUFTLEtBQUtuRixRQUFMLENBQWN1QixRQUFkLENBQXVCNVEsR0FBdkIsQ0FBVDtBQUNBLFlBQUdvVSxLQUFLaFYsQ0FBTCxHQUFPNlUsT0FBTzdVLENBQWQsR0FBZ0JnVixLQUFLeFYsQ0FBTCxHQUFPcVYsT0FBT3JWLENBQTlCLEdBQWdDd1YsS0FBSzlSLENBQUwsR0FBTzJSLE9BQU8zUixDQUE5QyxHQUFnRCxDQUFuRCxFQUFzRDtBQUNwRCxjQUFNckIsSUFBSW1ULEtBQUt0VixNQUFMLEtBQWNvVixXQUF4QjtBQUNBLGVBQUs1QyxNQUFMLENBQVlDLFdBQVosR0FBMEJuUSxLQUFLOEMsR0FBTCxDQUFTLEtBQUtvTixNQUFMLENBQVlDLFdBQXJCLEVBQWtDdFEsQ0FBbEMsQ0FBMUI7QUFDQSxlQUFLcVEsTUFBTCxDQUFZcFAsTUFBWixDQUFtQmpDLElBQW5CLENBQXdCLEVBQUNtUixRQUFRcFIsR0FBVCxFQUFZeVUsVUFBVXhULENBQXRCLEVBQXhCO0FBQ0Q7QUFDRjtBQUNGOztBQUVELFFBQUcsS0FBS3FRLE1BQUwsQ0FBWVgsR0FBWixJQUFtQnZQLEtBQUtNLEdBQUwsQ0FBUyxLQUFLNFAsTUFBTCxDQUFZaEssTUFBckIsSUFBNkIsSUFBbkQsRUFBeUQ7QUFDdkQsVUFBTW9OLFVBQVUsU0FBVkEsT0FBVSxDQUFDelQsQ0FBRDtBQUFBLGVBQU1DLEVBQUV5VCxlQUFGLEdBQWtCLE9BQUtyRCxNQUFMLENBQVloSyxNQUE5QixJQUFzQyxJQUFFbEcsS0FBS3dULEdBQUwsQ0FBUyxDQUFDMVQsRUFBRTJULE9BQUgsSUFBWTVULElBQUUsTUFBSSxPQUFLcVEsTUFBTCxDQUFZQyxXQUE5QixDQUFULENBQXhDLENBQU47QUFBQSxPQUFoQjtBQUNBLFdBQUtELE1BQUwsQ0FBWUcsSUFBWixDQUFpQnBQLEdBQWpCLENBQXFCLENBQUMsQ0FBdEIsRUFBd0IsQ0FBeEIsRUFBMEIsQ0FBMUIsRUFBNkJpUyxTQUE3QjtBQUNBLFdBQUtoRCxNQUFMLENBQVlHLElBQVosQ0FBaUJxRCxjQUFqQixDQUFnQyxLQUFLeEQsTUFBTCxDQUFZRSxFQUE1QyxFQUFnRCxLQUFLbEQsS0FBckQ7QUFDQSw0QkFBaUIsS0FBS2dELE1BQUwsQ0FBWXBQLE1BQTdCLHlIQUFxQztBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQUEsWUFBN0I2UyxLQUE2Qjs7QUFDbkMsYUFBSzFGLFFBQUwsQ0FBY3VCLFFBQWQsQ0FBdUJtRSxNQUFNM0QsTUFBN0IsRUFBcUMwRCxjQUFyQyxDQUFvRCxLQUFLeEQsTUFBTCxDQUFZRyxJQUFoRSxFQUFzRWlELFFBQVFLLE1BQU1OLFFBQWQsQ0FBdEU7QUFDRDtBQUNGOztBQUVELDBCQUFhLEtBQUtoRSxPQUFsQix5SEFBMkI7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBLFVBQW5CcFEsQ0FBbUI7O0FBQ3pCQSxRQUFFcVEsTUFBRixDQUFTc0UsUUFBVCxDQUFrQnpQLElBQWxCLENBQXVCLEtBQUs4SixRQUFMLENBQWN1QixRQUFkLENBQXVCdlEsRUFBRStRLE1BQXpCLENBQXZCO0FBQ0Q7O0FBRUQsU0FBSy9CLFFBQUwsQ0FBYzRGLG9CQUFkO0FBQ0E7QUFDQSxTQUFLNUYsUUFBTCxDQUFjNkYscUJBQWQ7QUFDQTtBQUNBLFNBQUs3RixRQUFMLENBQWM4RixrQkFBZCxHQUFtQyxJQUFuQzs7QUFFQSxRQUFHLEtBQUtDLE1BQVIsRUFBZ0I7QUFDZCxXQUFLQSxNQUFMLENBQVlDLGVBQVo7QUFDRDtBQUNGLEc7O3VCQUVEMUIsTyxvQkFBUTFSLEUsRUFBSTtBQUNWLFNBQUksSUFBSWpDLElBQUksQ0FBWixFQUFjQSxJQUFFaUMsR0FBRzdDLENBQUgsQ0FBS04sTUFBckIsRUFBNkIsRUFBRWtCLENBQS9CLEVBQWtDO0FBQ2hDaUMsU0FBRzdDLENBQUgsQ0FBS1ksQ0FBTCxJQUFRLENBQUNpQyxHQUFHN0MsQ0FBSCxDQUFLWSxDQUFMLENBQVQ7QUFDRDtBQUNELFdBQU9pQyxFQUFQO0FBQ0QsRzs7dUJBRURxVCxhLDBCQUFjclQsRSxFQUFJcU0sSyxFQUFPaUgsRSxFQUFJO0FBQUE7O0FBQzNCLFFBQU10USxJQUFJLElBQVY7QUFDQUYsd0JBQVVoRCxlQUFWLENBQTBCLEtBQUsrTSxPQUEvQixFQUF3QzdNLEVBQXhDO0FBQ0EsUUFBSXVULEtBQUt6USxvQkFBVUMsV0FBVixDQUFzQixLQUFLOEosT0FBM0IsRUFBb0M3SixDQUFwQyxDQUFUO0FBQUEsUUFBaURsRixJQUFFLEVBQW5EO0FBQ0E7QUFDRSxVQUFNZ0Usa0JBQVMsS0FBSytLLE9BQUwsQ0FBYTFKLFFBQWIsQ0FBc0IsQ0FBQ0gsSUFBRSxDQUFILElBQU1BLENBQTVCLENBQVQsQ0FBTjtBQUFBLFVBQWdEd1Esa0JBQVMsS0FBSzNHLE9BQUwsQ0FBYTFKLFFBQWIsQ0FBc0IsQ0FBdEIsQ0FBVCxDQUFoRDtBQUFBLFVBQ0VzUSxLQUFLLEVBQUN0VyxHQUFHcVcsR0FBR3JXLENBQUgsR0FBSzJFLEdBQUczRSxDQUFaLEVBQWVSLEdBQUc2VyxHQUFHN1csQ0FBSCxHQUFLbUYsR0FBR25GLENBQTFCLEVBRFA7QUFBQSxVQUNxQytXLEtBQUt2VSxLQUFLb0QsSUFBTCxDQUFVa1IsR0FBR3RXLENBQUgsR0FBS3NXLEdBQUd0VyxDQUFSLEdBQVVzVyxHQUFHOVcsQ0FBSCxHQUFLOFcsR0FBRzlXLENBQTVCLENBRDFDO0FBQUEsVUFFRWdYLEtBQUssS0FBSzlHLE9BQUwsQ0FBYTVNLE1BQWIsQ0FBb0IsS0FBSzRNLE9BQUwsQ0FBYTVNLE1BQWIsQ0FBb0JwRCxNQUFwQixHQUEyQixDQUEvQyxDQUZQO0FBR0E4VyxTQUFHdlQsR0FBSCxDQUFPdVQsR0FBR3hXLENBQUgsR0FBSyxNQUFJc1csR0FBR3RXLENBQVAsR0FBU3VXLEVBQXJCLEVBQXlCQyxHQUFHaFgsQ0FBSCxHQUFLLE1BQUk4VyxHQUFHOVcsQ0FBUCxHQUFTK1csRUFBdkMsRUFBMkMsQ0FBM0M7QUFDQUgsV0FBS3pRLG9CQUFVQyxXQUFWLENBQXNCLEtBQUs4SixPQUEzQixFQUFvQzdKLENBQXBDLENBQUw7QUFDRDtBQUNEdVEsT0FBR2hULEVBQUgsQ0FBTXZDLElBQU4sQ0FBVyxHQUFYO0FBQ0E4RSx3QkFBVXhDLE1BQVYsQ0FBaUJpVCxHQUFHaFQsRUFBcEIsRUFBd0JnVCxHQUFHL1MsR0FBM0IsRUFBZ0N5TSxxQkFBV0MsSUFBM0MsRUFBaUQsVUFBQ25QLENBQUQsRUFBTTtBQUNyRCxXQUFJLElBQUlFLElBQUUsQ0FBVixFQUFhQSxJQUFFcVYsR0FBR3pXLE1BQWxCLEVBQTBCLEVBQUVvQixDQUE1QixFQUErQjtBQUM3QixZQUFHLENBQUNGLENBQUosRUFBTztBQUNMRCxZQUFFRyxDQUFGLElBQU8sRUFBQ2QsR0FBRyxDQUFDLENBQUNtVyxHQUFHclYsQ0FBSCxDQUFELEdBQU9rQixLQUFLeVUsR0FBTCxDQUFTdkgsS0FBVCxDQUFSLENBQUosRUFBOEIxUCxHQUFHLENBQUMyVyxHQUFHclYsQ0FBSCxJQUFNa0IsS0FBSzBVLEdBQUwsQ0FBU3hILEtBQVQsQ0FBUCxDQUFqQyxFQUFQO0FBQ0QsU0FGRCxNQUdLO0FBQ0gsY0FBTXhLLGtCQUFTLE9BQUtnTCxPQUFMLENBQWExSixRQUFiLENBQXNCLENBQUNwRixJQUFFLENBQUgsSUFBTWlGLENBQTVCLENBQVQsQ0FBTjtBQUFBLGNBQ01sQixLQUFLLE9BQUsrSyxPQUFMLENBQWExSixRQUFiLENBQXNCcEYsSUFBRWlGLENBQXhCLENBRFg7QUFBQSxjQUVNN0YsSUFBRSxFQUFFMkUsR0FBR25GLENBQUgsR0FBS2tGLEdBQUdsRixDQUFWLENBRlI7QUFBQSxjQUVzQkEsSUFBR21GLEdBQUczRSxDQUFILEdBQUswRSxHQUFHMUUsQ0FGakM7QUFBQSxjQUVxQ3dCLElBQUVRLEtBQUtvRCxJQUFMLENBQVVwRixJQUFFQSxDQUFGLEdBQUlSLElBQUVBLENBQWhCLENBRnZDO0FBR0FtQixZQUFFRyxDQUFGLEVBQUtkLENBQUwsQ0FBT2EsSUFBUCxDQUFZOEQsR0FBRzNFLENBQUgsR0FBS0EsSUFBRXdCLENBQUYsR0FBSTJVLEdBQUdyVixDQUFILENBQXJCO0FBQ0FILFlBQUVHLENBQUYsRUFBS3RCLENBQUwsQ0FBT3FCLElBQVAsQ0FBWThELEdBQUduRixDQUFILEdBQUtBLElBQUVnQyxDQUFGLEdBQUkyVSxHQUFHclYsQ0FBSCxDQUFyQjtBQUNEO0FBQ0Y7QUFDRixLQWJEOztBQWVBLFFBQU02VixNQUFJLEVBQVY7O0FBM0IyQiwrQkE0Qm5CN1YsQ0E1Qm1CO0FBNkJ6QjZWLFVBQUk3VixDQUFKLElBQU8sRUFBQ2QsR0FBRSxFQUFILEVBQU1SLEdBQUUsRUFBUixFQUFQO0FBQ0FtRywwQkFBVWhELGVBQVYsQ0FBMEIsT0FBS2tOLE9BQS9CLEVBQXdDbFAsRUFBRUcsQ0FBRixDQUF4QztBQUNBLFVBQU1VLElBQUltRSxvQkFBVUMsV0FBVixDQUFzQixPQUFLaUssT0FBM0IsRUFBb0NoSyxDQUFwQyxDQUFWO0FBQ0FyRSxRQUFFNEIsRUFBRixDQUFLdkMsSUFBTCxDQUFVLEdBQVY7QUFDQThFLDBCQUFVeEMsTUFBVixDQUFpQjNCLEVBQUU0QixFQUFuQixFQUF1QixDQUF2QixFQUEwQjBNLHFCQUFXQyxJQUFyQyxFQUEyQyxVQUFDblAsQ0FBRCxFQUFNO0FBQy9DLFlBQU1rQixJQUFJLE9BQUsrTixPQUFMLENBQWE3SixRQUFiLENBQXNCcEYsSUFBRWlGLENBQXhCLENBQVY7QUFDQThRLFlBQUk3VixDQUFKLEVBQU9kLENBQVAsQ0FBU2EsSUFBVCxDQUFjaUIsRUFBRTlCLENBQWhCO0FBQ0EyVyxZQUFJN1YsQ0FBSixFQUFPdEIsQ0FBUCxDQUFTcUIsSUFBVCxDQUFjaUIsRUFBRXRDLENBQWhCO0FBQ0QsT0FKRDtBQWpDeUI7O0FBNEIzQixTQUFJLElBQUlzQixJQUFFLENBQVYsRUFBYUEsSUFBRXFWLEdBQUd6VyxNQUFsQixFQUEwQixFQUFFb0IsQ0FBNUIsRUFBK0I7QUFBQSxZQUF2QkEsQ0FBdUI7QUFVOUI7QUFDRCxXQUFPNlYsR0FBUDtBQUNELEc7O3VCQUVEdkMscUIsa0NBQXNCdFIsTSxFQUFRb00sSyxFQUFPaUYsTSxFQUFRZ0MsRSxFQUFJO0FBQy9DLFFBQU10VCxLQUFLLEtBQUsrUSxnQkFBTCxDQUFzQjlRLE1BQXRCLEVBQThCb00sS0FBOUIsQ0FBWDtBQUNBLFdBQU8sS0FBS2dILGFBQUwsQ0FBbUJyVCxFQUFuQixFQUF1QnNSLE1BQXZCLEVBQStCZ0MsRUFBL0IsQ0FBUDtBQUNELEc7O3VCQUVEdkMsZ0IsNkJBQWlCOVEsTSxFQUFRb00sSyxFQUFPO0FBQzlCLFFBQU1yTSxLQUFHLEVBQUM3QyxHQUFHLEVBQUosRUFBUVIsR0FBRSxFQUFWLEVBQVQ7QUFBQSxRQUF3Qm9YLFNBQU8sRUFBL0I7QUFDQTFILGFBQU9sTixLQUFLeVEsRUFBTCxHQUFRLENBQWY7QUFDQSxTQUFJLElBQUkzUixJQUFJLENBQVosRUFBZUEsSUFBRWdDLE9BQU85QyxDQUFQLENBQVNOLE1BQTFCLEVBQWtDLEVBQUVvQixDQUFwQyxFQUF1QztBQUNyQzhWLGFBQU8vVixJQUFQLENBQVlDLEtBQUdnQyxPQUFPOUMsQ0FBUCxDQUFTTixNQUFULEdBQWdCLENBQW5CLENBQVo7QUFDRDtBQUNELFNBQUksSUFBSWtCLElBQUksQ0FBWixFQUFlQSxJQUFFa0MsT0FBTzlDLENBQVAsQ0FBUyxDQUFULEVBQVlOLE1BQTdCLEVBQXFDLEVBQUVrQixDQUF2QyxFQUEwQztBQUN4QyxVQUFNaVcsTUFBTSxFQUFaO0FBQUEsVUFBZ0JDLE1BQU0sRUFBdEI7QUFDQSxXQUFJLElBQUloVyxLQUFJLENBQVosRUFBZUEsS0FBRWdDLE9BQU85QyxDQUFQLENBQVNOLE1BQTFCLEVBQWtDLEVBQUVvQixFQUFwQyxFQUF1QztBQUNyQytWLFlBQUloVyxJQUFKLENBQVNpQyxPQUFPOUMsQ0FBUCxDQUFTYyxFQUFULEVBQVlGLENBQVosQ0FBVDtBQUNBa1csWUFBSWpXLElBQUosQ0FBU2lDLE9BQU90RCxDQUFQLENBQVNzQixFQUFULEVBQVlGLENBQVosQ0FBVDtBQUNEO0FBQ0RpQyxTQUFHN0MsQ0FBSCxDQUFLYSxJQUFMLENBQVUsS0FBS2tXLFdBQUwsQ0FBaUJILE1BQWpCLEVBQXdCQyxHQUF4QixFQUE0QjNILEtBQTVCLENBQVY7QUFDQXJNLFNBQUdyRCxDQUFILENBQUtxQixJQUFMLENBQVUsS0FBS2tXLFdBQUwsQ0FBaUJILE1BQWpCLEVBQXdCRSxHQUF4QixFQUE0QjVILEtBQTVCLENBQVY7QUFDRDtBQUNELFdBQU9yTSxFQUFQO0FBQ0QsRzs7dUJBRURrVSxXLHdCQUFZL1csQyxFQUFFUixDLEVBQUVTLEUsRUFBSTtBQUNsQixRQUFHLENBQUMsS0FBSytQLFFBQUwsQ0FBY2hRLEVBQUVOLE1BQWhCLENBQUosRUFBNkI7QUFDM0IsV0FBS3NRLFFBQUwsQ0FBY2hRLEVBQUVOLE1BQWhCLElBQTBCLElBQUk5QixZQUFNK1IsZ0JBQVYsQ0FBMkIsRUFBM0IsQ0FBMUI7QUFDQSxVQUFNOU0sS0FBSyxLQUFLbU4sUUFBTCxDQUFjaFEsRUFBRU4sTUFBaEIsRUFBd0JvRCxNQUFuQztBQUNBLFdBQUksSUFBSWxDLElBQUUsQ0FBVixFQUFZQSxJQUFFWixFQUFFTixNQUFoQixFQUF1QixFQUFFa0IsQ0FBekIsRUFBNEI7QUFDMUJpQyxXQUFHaEMsSUFBSCxDQUFRLElBQUlqRCxZQUFNK0ksT0FBVixFQUFSO0FBQ0Q7QUFDRjtBQUNELFFBQU0vRCxTQUFTLEtBQUtvTixRQUFMLENBQWNoUSxFQUFFTixNQUFoQixDQUFmO0FBQ0EsU0FBSSxJQUFJa0IsT0FBRSxDQUFWLEVBQVlBLE9BQUVaLEVBQUVOLE1BQWhCLEVBQXVCLEVBQUVrQixJQUF6QixFQUE0QjtBQUMxQmdDLGFBQU9FLE1BQVAsQ0FBY2xDLElBQWQsRUFBaUJxQyxHQUFqQixDQUFxQmpELEVBQUVZLElBQUYsQ0FBckIsRUFBMkJwQixFQUFFb0IsSUFBRixDQUEzQixFQUFpQyxDQUFqQztBQUNEO0FBQ0QsV0FBT2dDLE9BQU9vRCxRQUFQLENBQWdCaEUsS0FBSzZDLEdBQUwsQ0FBUyxDQUFULEVBQVk3QyxLQUFLOEMsR0FBTCxDQUFTN0UsRUFBVCxFQUFhLENBQWIsQ0FBWixDQUFoQixFQUE4Q1QsQ0FBckQ7QUFDRCxHOzt1QkFFRDZQLFUseUJBQWE7QUFDWCxRQUFNclAsSUFBRSxFQUFSO0FBQUEsUUFBV1IsSUFBRSxFQUFiO0FBRFcsZUFFRSxDQUFDLENBQUQsRUFBSSxNQUFKLEVBQVksTUFBWixFQUFvQixNQUFwQixFQUE0QixNQUE1QixDQUZGO0FBRVgsbURBQWtEO0FBQTlDLFVBQUltQixjQUFKO0FBQ0ZYLFFBQUVhLElBQUYsQ0FBT0YsSUFBRXFCLEtBQUswVSxHQUFMLENBQVMsTUFBSTFVLEtBQUt5USxFQUFULEdBQVksQ0FBckIsQ0FBVDtBQUNBalQsUUFBRXFCLElBQUYsQ0FBT0YsSUFBRXFCLEtBQUt5VSxHQUFMLENBQVMsTUFBSXpVLEtBQUt5USxFQUFULEdBQVksQ0FBckIsQ0FBVDtBQUNEOztBQUVELFFBQU1vQiw2QkFBNkIsQ0FDakMsQ0FBQyxDQUFELEVBQUcsQ0FBSCxFQUFLLENBQUwsQ0FEaUMsRUFFakMsQ0FBQyxDQUFELEVBQUcsQ0FBSCxFQUFLLENBQUwsRUFBTyxDQUFQLEVBQVMsQ0FBVCxDQUZpQyxDQUFuQztBQUFBLFFBSUFILDZCQUE2QixDQUMzQixDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssQ0FBTCxDQUQyQixFQUUzQixDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssQ0FBTCxDQUYyQixDQUo3QjtBQUFBLFFBUUFDLDJCQUEyQixDQUN6QixDQUFDLENBQUQsRUFBRyxDQUFILENBRHlCLEVBRXpCLENBQUMsQ0FBRCxFQUFHLENBQUgsQ0FGeUIsQ0FSM0I7QUFBQSxRQVlBL0Qsc0JBQXNCLENBQ3BCO0FBQ0U1UCxTQUFHLENBQ0QsQ0FBQyxDQUFELEVBQUcsTUFBSCxFQUFVLE1BQVYsRUFBaUIsTUFBakIsRUFBd0IsTUFBeEIsQ0FEQyxFQUVELENBQUMsS0FBRCxFQUFPLEtBQVAsRUFBYSxLQUFiLEVBQW1CLEtBQW5CLEVBQXlCLEtBQXpCLENBRkMsRUFHRCxDQUFDLEtBQUQsRUFBTyxLQUFQLEVBQWEsS0FBYixFQUFtQixLQUFuQixFQUF5QixLQUF6QixDQUhDLEVBSUQsQ0FBQyxLQUFELEVBQU8sS0FBUCxFQUFhLEtBQWIsRUFBbUIsS0FBbkIsRUFBeUIsS0FBekIsQ0FKQyxFQUtELENBQUMsQ0FBRCxFQUFHLENBQUgsRUFBSyxDQUFMLEVBQU8sQ0FBUCxFQUFTLENBQVQsQ0FMQyxFQU1EQSxDQU5DLENBREw7QUFTRVIsU0FBRyxDQUNELENBQUMsQ0FBRCxFQUFHLENBQUgsRUFBSyxDQUFMLEVBQU8sQ0FBUCxFQUFTLENBQVQsQ0FEQyxFQUVELENBQUMsS0FBRCxFQUFPLEtBQVAsRUFBYSxLQUFiLEVBQW1CLEtBQW5CLEVBQXlCLEtBQXpCLENBRkMsRUFHRCxDQUFDLEtBQUQsRUFBTyxLQUFQLEVBQWEsS0FBYixFQUFtQixLQUFuQixFQUF5QixLQUF6QixDQUhDLEVBSUQsQ0FBQyxLQUFELEVBQU8sS0FBUCxFQUFhLEtBQWIsRUFBbUIsS0FBbkIsRUFBeUIsS0FBekIsQ0FKQyxFQUtELENBQUMsQ0FBRCxFQUFJLE1BQUosRUFBWSxNQUFaLEVBQW9CLE1BQXBCLEVBQTRCLE1BQTVCLENBTEMsRUFNREEsQ0FOQztBQVRMLEtBRG9CLEVBbUJwQjtBQUNFUSxTQUFHLENBQ0QsQ0FBQyxDQUFELEVBQUcsTUFBSCxFQUFVLE1BQVYsRUFBaUIsTUFBakIsRUFBd0IsTUFBeEIsQ0FEQyxFQUVELENBQUMsS0FBRCxFQUFPLEtBQVAsRUFBYSxLQUFiLEVBQW1CLEtBQW5CLEVBQXlCLEtBQXpCLENBRkMsRUFHRCxDQUFDLEtBQUQsRUFBTyxLQUFQLEVBQWEsS0FBYixFQUFtQixLQUFuQixFQUF5QixLQUF6QixDQUhDLEVBSUQsQ0FBQyxLQUFELEVBQU8sS0FBUCxFQUFhLEtBQWIsRUFBbUIsS0FBbkIsRUFBeUIsS0FBekIsQ0FKQyxFQUtELENBQUMsS0FBRCxFQUFPLEtBQVAsRUFBYSxLQUFiLEVBQW1CLEtBQW5CLEVBQXlCLEtBQXpCLENBTEMsRUFNRCxDQUFDLEtBQUQsRUFBTyxLQUFQLEVBQWEsS0FBYixFQUFtQixLQUFuQixFQUF5QixLQUF6QixDQU5DLEVBT0QsQ0FBQyxDQUFELEVBQUcsQ0FBSCxFQUFLLENBQUwsRUFBTyxDQUFQLEVBQVMsQ0FBVCxDQVBDLEVBUURBLENBUkMsQ0FETDtBQVdFUixTQUFHLENBQ0QsQ0FBQyxDQUFELEVBQUcsQ0FBSCxFQUFLLENBQUwsRUFBTyxDQUFQLEVBQVMsQ0FBVCxDQURDLEVBRUQsQ0FBQyxLQUFELEVBQU8sS0FBUCxFQUFhLEtBQWIsRUFBbUIsS0FBbkIsRUFBeUIsS0FBekIsQ0FGQyxFQUdELENBQUMsS0FBRCxFQUFPLEtBQVAsRUFBYSxLQUFiLEVBQW1CLEtBQW5CLEVBQXlCLEtBQXpCLENBSEMsRUFJRCxDQUFDLEtBQUQsRUFBTyxLQUFQLEVBQWEsS0FBYixFQUFtQixLQUFuQixFQUF5QixLQUF6QixDQUpDLEVBS0QsQ0FBQyxLQUFELEVBQU8sS0FBUCxFQUFhLEtBQWIsRUFBbUIsS0FBbkIsRUFBeUIsS0FBekIsQ0FMQyxFQU1ELENBQUMsS0FBRCxFQUFPLEtBQVAsRUFBYSxLQUFiLEVBQW1CLEtBQW5CLEVBQXlCLEtBQXpCLENBTkMsRUFPRCxDQUFDLENBQUQsRUFBSSxNQUFKLEVBQVksTUFBWixFQUFvQixNQUFwQixFQUE0QixNQUE1QixDQVBDLEVBUURBLENBUkM7QUFYTCxLQW5Cb0IsQ0FadEI7O0FBdURBLFdBQU87QUFDTG9RLDhDQURLO0FBRUxpRSw0REFGSztBQUdMSCw0REFISztBQUlMQztBQUpLLEtBQVA7QUFNRCxHOzs7OztrQkF0ZGtCN0UsVTs7Ozs7Ozs7Ozs7OztRQ0xMcEQsSyxHQUFBQSxLO0FBQVQsU0FBU0EsS0FBVCxHQUFpQztBQUFBLE1BQWxCbUMsS0FBa0IsdUVBQVYsUUFBVTs7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE1BQU1tSixNQUFNO0FBQ1Y5TyxZQUFRLEtBREU7QUFFVkQsV0FBTyxJQUZHO0FBR1ZnUCxhQUFTLENBSEM7QUFJVkMsaUJBQWEsRUFKSDtBQUtWQyx5QkFBcUIsSUFMWDtBQU1WQyxpQ0FBNkIsSUFObkI7QUFPVkMseUJBQXFCLEtBUFg7QUFRVkMsd0JBQW9CLENBUlY7QUFTVkMsa0JBQWMsQ0FUSjtBQVVWQyxTQUFLLEtBVks7QUFXVnZKLFdBQU87QUFDTHdKLHFCQUFlLEdBRFY7QUFFTGxDLHVCQUFpQixJQUZaO0FBR0xtQyxtQkFBYSxFQUhSO0FBSUwzQyxzQkFBZ0IsR0FKWDtBQUtMVSxlQUFTLEVBTEo7QUFNTG5DLFlBQU0sR0FORDtBQU9MN0QsYUFBTyxDQVBGO0FBUUx0QyxtQkFBYSxJQUFFLEdBUlY7QUFTTEMsb0JBQWMsSUFBRSxHQVRYO0FBVUxqRixhQUFPLFFBVkY7QUFXTHdQLFlBQU07QUFYRCxLQVhHO0FBd0JWeEosV0FBTztBQUNMeUoscUJBQWUsRUFEVjtBQUVMM0QsYUFBTyxNQUZGO0FBR0w0RCxlQUFTLENBSEo7QUFJTEMsWUFBTTtBQUpELEtBeEJHO0FBOEJWMUosVUFBTTtBQUNKNkYsYUFBTyxNQURIO0FBRUo2RCxZQUFNO0FBRkYsS0E5Qkk7QUFrQ1ZDLG1CQUFlO0FBQ2I5UCxhQUFPO0FBRE07QUFsQ0wsR0FBWjtBQUFBLE1Bc0NBK1AsU0FBUztBQUNQQyxZQUFRakIsR0FERDtBQUVQa0IsdUJBQ0tsQixHQURMO0FBRUUvSSwwQkFDSytJLElBQUkvSSxLQURUO0FBRUVxRixjQUFNLElBRlI7QUFHRXFFLGNBQU07QUFIUixRQUZGO0FBT0V4SiwwQkFDSzZJLElBQUk3SSxLQURUO0FBRUU4RixlQUFPO0FBRlQsUUFQRjtBQVdFN0YseUJBQ0s0SSxJQUFJNUksSUFEVDtBQUVFNkYsZUFBTztBQUZUO0FBWEYsTUFGTztBQWtCUCxvQ0FDSytDLEdBREw7QUFFRTdJLDBCQUNLNkksSUFBSTdJLEtBRFQ7QUFFRTBKLGlCQUFTO0FBRlg7QUFGRjtBQWxCTyxHQXRDVDtBQWdFQSxTQUFPRyxPQUFPbkssS0FBUCxLQUFpQm1KLEdBQXhCO0FBQ0QsRTs7Ozs7Ozs7Ozs7O0FDeEdEOzs7Ozs7OztBQUVBcFosWUFBTXVhLFdBQU47QUFBQTs7QUFDRSx5QkFBK0I7QUFBQSxRQUFuQjdQLE9BQW1CLHVFQUFYcUMsU0FBVzs7QUFBQTs7QUFBQSxpREFDN0IsMEJBRDZCOztBQUc3QixRQUFHckMsT0FBSCxFQUFZO0FBQ1YsWUFBS3JGLEdBQUwsQ0FBU3FGLE9BQVQ7QUFDRDtBQUw0QjtBQU05Qjs7QUFQSCx3QkFTRXJGLEdBVEYsZ0JBU01xRixPQVROLEVBU2U7QUFDWCxTQUFLQSxPQUFMLEdBQWVBLE9BQWY7QUFDRCxTQUFLQSxPQUFMLENBQWF1RixLQUFiLENBQW1CK0gsUUFBbkIsR0FBOEIsVUFBOUI7O0FBRUEsU0FBS3dDLGdCQUFMLENBQXNCLFNBQXRCLEVBQWlDLFlBQVc7QUFDM0MsVUFBSSxLQUFLOVAsT0FBTCxDQUFhK1AsVUFBYixLQUE0QixJQUFoQyxFQUFzQztBQUNyQyxhQUFLL1AsT0FBTCxDQUFhK1AsVUFBYixDQUF3QkMsV0FBeEIsQ0FBb0MsS0FBS2hRLE9BQXpDO0FBQ0E7QUFDRCxLQUpEO0FBS0EsR0FsQkg7O0FBQUE7QUFBQSxFQUE4QzFLLFlBQU0yYSxRQUFwRDs7QUFxQkEzYSxZQUFNNGEsV0FBTjtBQUFBOztBQUNFLHVCQUFZbFEsT0FBWixFQUFxQjtBQUFBOztBQUFBLDRDQUNuQiw4QkFBTUEsT0FBTixDQURtQjtBQUVwQjs7QUFISDtBQUFBLEVBQThDMUssWUFBTXVhLFdBQXBEOztBQU1BdmEsWUFBTTZhLGFBQU4sR0FDRSx5QkFBYztBQUFBOztBQUViLE1BQUlDLE1BQUosRUFBWUMsT0FBWjtBQUNBLE1BQUlDLFVBQUosRUFBZ0JDLFdBQWhCOztBQUVBLE1BQUlDLFNBQVMsSUFBSWxiLFlBQU1tYixPQUFWLEVBQWI7O0FBRUEsTUFBSWhNLFFBQVE7QUFDWGlNLFlBQVEsRUFBRUMsS0FBSyxDQUFQLEVBQVVwTCxPQUFPLEVBQWpCLEVBREc7QUFFWHFMLGFBQVM7QUFGRSxHQUFaOztBQUtBLE1BQUlDLGFBQWFDLFNBQVNDLGFBQVQsQ0FBd0IsS0FBeEIsQ0FBakI7QUFDQUYsYUFBV3RMLEtBQVgsQ0FBaUJ5TCxRQUFqQixHQUE0QixRQUE1Qjs7QUFFQSxPQUFLSCxVQUFMLEdBQWtCQSxVQUFsQjs7QUFFQSxNQUFJSSxnQkFBZ0JILFNBQVNDLGFBQVQsQ0FBd0IsS0FBeEIsQ0FBcEI7O0FBRUFFLGdCQUFjMUwsS0FBZCxDQUFvQjJMLG9CQUFwQixHQUEyQyxhQUEzQztBQUNBRCxnQkFBYzFMLEtBQWQsQ0FBb0I0TCxpQkFBcEIsR0FBd0MsYUFBeEM7QUFDQUYsZ0JBQWMxTCxLQUFkLENBQW9CNkwsY0FBcEIsR0FBcUMsYUFBckM7O0FBRUFQLGFBQVdRLFdBQVgsQ0FBd0JKLGFBQXhCOztBQUVBLE1BQUlLLE9BQU8sV0FBV3pOLElBQVgsQ0FBaUIwTixVQUFVQyxTQUEzQixDQUFYOztBQUVBLE9BQUtDLGFBQUwsR0FBcUIsWUFBWSxDQUFFLENBQW5DOztBQUVBLE9BQUt6SCxPQUFMLEdBQWUsWUFBWTs7QUFFMUIsV0FBTztBQUNOckssYUFBT3lRLE1BREQ7QUFFTnhRLGNBQVF5UTtBQUZGLEtBQVA7QUFLQSxHQVBEOztBQVNBLE9BQUtxQixPQUFMLEdBQWUsVUFBUy9SLEtBQVQsRUFBZ0JDLE1BQWhCLEVBQXdCOztBQUV0Q3dRLGFBQVN6USxLQUFUO0FBQ0EwUSxjQUFVelEsTUFBVjtBQUNBMFEsaUJBQWFGLFNBQVMsQ0FBdEI7QUFDQUcsa0JBQWNGLFVBQVUsQ0FBeEI7O0FBRUFRLGVBQVd0TCxLQUFYLENBQWlCNUYsS0FBakIsR0FBeUJBLFFBQVEsSUFBakM7QUFDQWtSLGVBQVd0TCxLQUFYLENBQWlCM0YsTUFBakIsR0FBMEJBLFNBQVMsSUFBbkM7O0FBRUFxUixrQkFBYzFMLEtBQWQsQ0FBb0I1RixLQUFwQixHQUE0QkEsUUFBUSxJQUFwQztBQUNBc1Isa0JBQWMxTCxLQUFkLENBQW9CM0YsTUFBcEIsR0FBNkJBLFNBQVMsSUFBdEM7QUFFQSxHQWJEOztBQWVBLFdBQVMrUixPQUFULENBQWtCQyxLQUFsQixFQUF5QjtBQUN4QixXQUFPbFksS0FBS00sR0FBTCxDQUFVNFgsS0FBVixJQUFtQixJQUFuQixHQUEwQixDQUExQixHQUE4QkEsS0FBckM7QUFFQTs7QUFFRCxXQUFTQyxrQkFBVCxDQUE2QnJCLE1BQTdCLEVBQXFDOztBQUVwQyxRQUFJc0IsV0FBV3RCLE9BQU9zQixRQUF0Qjs7QUFFQSxXQUFPLGNBQ05ILFFBQVNHLFNBQVUsQ0FBVixDQUFULENBRE0sR0FDb0IsR0FEcEIsR0FFTkgsUUFBUyxDQUFFRyxTQUFVLENBQVYsQ0FBWCxDQUZNLEdBRXNCLEdBRnRCLEdBR05ILFFBQVNHLFNBQVUsQ0FBVixDQUFULENBSE0sR0FHb0IsR0FIcEIsR0FJTkgsUUFBU0csU0FBVSxDQUFWLENBQVQsQ0FKTSxHQUlvQixHQUpwQixHQUtOSCxRQUFTRyxTQUFVLENBQVYsQ0FBVCxDQUxNLEdBS29CLEdBTHBCLEdBTU5ILFFBQVMsQ0FBRUcsU0FBVSxDQUFWLENBQVgsQ0FOTSxHQU1zQixHQU50QixHQU9OSCxRQUFTRyxTQUFVLENBQVYsQ0FBVCxDQVBNLEdBT29CLEdBUHBCLEdBUU5ILFFBQVNHLFNBQVUsQ0FBVixDQUFULENBUk0sR0FRb0IsR0FScEIsR0FTTkgsUUFBU0csU0FBVSxDQUFWLENBQVQsQ0FUTSxHQVNvQixHQVRwQixHQVVOSCxRQUFTLENBQUVHLFNBQVUsQ0FBVixDQUFYLENBVk0sR0FVc0IsR0FWdEIsR0FXTkgsUUFBU0csU0FBVSxFQUFWLENBQVQsQ0FYTSxHQVdxQixHQVhyQixHQVlOSCxRQUFTRyxTQUFVLEVBQVYsQ0FBVCxDQVpNLEdBWXFCLEdBWnJCLEdBYU5ILFFBQVNHLFNBQVUsRUFBVixDQUFULENBYk0sR0FhcUIsR0FickIsR0FjTkgsUUFBUyxDQUFFRyxTQUFVLEVBQVYsQ0FBWCxDQWRNLEdBY3VCLEdBZHZCLEdBZU5ILFFBQVNHLFNBQVUsRUFBVixDQUFULENBZk0sR0FlcUIsR0FmckIsR0FnQk5ILFFBQVNHLFNBQVUsRUFBVixDQUFULENBaEJNLEdBaUJQLEdBakJBO0FBbUJBOztBQUVELFdBQVNDLGtCQUFULENBQTZCdkIsTUFBN0IsRUFBcUN3QixlQUFyQyxFQUFzRDs7QUFFckQsUUFBSUYsV0FBV3RCLE9BQU9zQixRQUF0QjtBQUNBLFFBQUlHLFdBQVcsY0FDZE4sUUFBU0csU0FBVSxDQUFWLENBQVQsQ0FEYyxHQUNZLEdBRFosR0FFZEgsUUFBU0csU0FBVSxDQUFWLENBQVQsQ0FGYyxHQUVZLEdBRlosR0FHZEgsUUFBU0csU0FBVSxDQUFWLENBQVQsQ0FIYyxHQUdZLEdBSFosR0FJZEgsUUFBU0csU0FBVSxDQUFWLENBQVQsQ0FKYyxHQUlZLEdBSlosR0FLZEgsUUFBUyxDQUFFRyxTQUFVLENBQVYsQ0FBWCxDQUxjLEdBS2MsR0FMZCxHQU1kSCxRQUFTLENBQUVHLFNBQVUsQ0FBVixDQUFYLENBTmMsR0FNYyxHQU5kLEdBT2RILFFBQVMsQ0FBRUcsU0FBVSxDQUFWLENBQVgsQ0FQYyxHQU9jLEdBUGQsR0FRZEgsUUFBUyxDQUFFRyxTQUFVLENBQVYsQ0FBWCxDQVJjLEdBUWMsR0FSZCxHQVNkSCxRQUFTRyxTQUFVLENBQVYsQ0FBVCxDQVRjLEdBU1ksR0FUWixHQVVkSCxRQUFTRyxTQUFVLENBQVYsQ0FBVCxDQVZjLEdBVVksR0FWWixHQVdkSCxRQUFTRyxTQUFVLEVBQVYsQ0FBVCxDQVhjLEdBV2EsR0FYYixHQVlkSCxRQUFTRyxTQUFVLEVBQVYsQ0FBVCxDQVpjLEdBWWEsR0FaYixHQWFkSCxRQUFTRyxTQUFVLEVBQVYsQ0FBVCxDQWJjLEdBYWEsR0FiYixHQWNkSCxRQUFTRyxTQUFVLEVBQVYsQ0FBVCxDQWRjLEdBY2EsR0FkYixHQWVkSCxRQUFTRyxTQUFVLEVBQVYsQ0FBVCxDQWZjLEdBZWEsR0FmYixHQWdCZEgsUUFBU0csU0FBVSxFQUFWLENBQVQsQ0FoQmMsR0FpQmYsR0FqQkE7O0FBbUJBLFFBQUdSLElBQUgsRUFBUzs7QUFFUixhQUFPLHlCQUNOLFlBRE0sR0FDU2hCLFVBRFQsR0FDc0IsS0FEdEIsR0FDOEJDLFdBRDlCLEdBQzRDLEtBRDVDLEdBRU55QixlQUZNLEdBR05DLFFBSEQ7QUFLQTs7QUFFRCxXQUFPLHlCQUF5QkEsUUFBaEM7QUFFQTs7QUFFRCxXQUFTQyxZQUFULENBQXVCbFAsTUFBdkIsRUFBK0IwTixNQUEvQixFQUF1Q3NCLGVBQXZDLEVBQXdEOztBQUV2RCxRQUFHaFAsa0JBQWtCMU4sWUFBTXVhLFdBQTNCLEVBQXdDOztBQUV2QyxVQUFJdEssS0FBSjs7QUFFQSxVQUFHdkMsa0JBQWtCMU4sWUFBTTRhLFdBQTNCLEVBQXdDO0FBQ3ZDTSxlQUFPM1MsSUFBUCxDQUFhNlMsT0FBT3lCLGtCQUFwQjtBQUNBM0IsZUFBTzRCLFNBQVA7QUFDQTVCLGVBQU82QixZQUFQLENBQXFCclAsT0FBT3NQLFdBQTVCO0FBQ0E5QixlQUFPNU8sS0FBUCxDQUFjb0IsT0FBT3BCLEtBQXJCOztBQUVBNE8sZUFBT3NCLFFBQVAsQ0FBaUIsQ0FBakIsSUFBdUIsQ0FBdkI7QUFDQXRCLGVBQU9zQixRQUFQLENBQWlCLENBQWpCLElBQXVCLENBQXZCO0FBQ0F0QixlQUFPc0IsUUFBUCxDQUFpQixFQUFqQixJQUF3QixDQUF4QjtBQUNBdEIsZUFBT3NCLFFBQVAsQ0FBaUIsRUFBakIsSUFBd0IsQ0FBeEI7O0FBRUF2TSxnQkFBUXdNLG1CQUFvQnZCLE1BQXBCLEVBQTRCd0IsZUFBNUIsQ0FBUjtBQUVBLE9BYkQsTUFhTzs7QUFFTnpNLGdCQUFRd00sbUJBQW9CL08sT0FBT3NQLFdBQTNCLEVBQXdDTixlQUF4QyxDQUFSO0FBRUE7O0FBRUQsVUFBSWhTLFVBQVVnRCxPQUFPaEQsT0FBckI7QUFDQSxVQUFJdVMsY0FBYzlOLE1BQU1tTSxPQUFOLENBQWU1TixPQUFPd1AsRUFBdEIsS0FBOEIvTixNQUFNbU0sT0FBTixDQUFlNU4sT0FBT3dQLEVBQXRCLEVBQTJCak4sS0FBM0U7O0FBRUEsVUFBR2dOLGdCQUFnQmxRLFNBQWhCLElBQTZCa1EsZ0JBQWdCaE4sS0FBaEQsRUFBdUQ7QUFDdER2RixnQkFBUXVGLEtBQVIsQ0FBY2tOLGVBQWQsR0FBZ0NsTixLQUFoQztBQUNBdkYsZ0JBQVF1RixLQUFSLENBQWNtTixZQUFkLEdBQTZCbk4sS0FBN0I7QUFDQXZGLGdCQUFRdUYsS0FBUixDQUFjb04sU0FBZCxHQUEwQnBOLEtBQTFCOztBQUVBZCxjQUFNbU0sT0FBTixDQUFlNU4sT0FBT3dQLEVBQXRCLElBQTZCLEVBQUVqTixPQUFPQSxLQUFULEVBQTdCO0FBQ0EsWUFBRytMLElBQUgsRUFBUztBQUNSN00sZ0JBQU1tTSxPQUFOLENBQWU1TixPQUFPd1AsRUFBdEIsRUFBMkJJLHVCQUEzQixHQUFxREMscUJBQXNCbkMsTUFBdEIsRUFBOEIxTixNQUE5QixDQUFyRDtBQUNBO0FBQ0Q7O0FBRUQsVUFBR2hELFFBQVErUCxVQUFSLEtBQXVCa0IsYUFBMUIsRUFBeUM7QUFDeENBLHNCQUFjSSxXQUFkLENBQTJCclIsT0FBM0I7QUFDQTtBQUNEOztBQUVELFNBQUksSUFBSTFILElBQUksQ0FBUixFQUFXWSxJQUFJOEosT0FBTzhQLFFBQVAsQ0FBZ0IxYixNQUFuQyxFQUEyQ2tCLElBQUlZLENBQS9DLEVBQWtEWixHQUFsRCxFQUF3RDs7QUFFdkQ0WixtQkFBY2xQLE9BQU84UCxRQUFQLENBQWlCeGEsQ0FBakIsQ0FBZCxFQUFvQ29ZLE1BQXBDLEVBQTRDc0IsZUFBNUM7QUFFQTtBQUVEOztBQUVELE1BQUlhLHVCQUF1QixZQUFZOztBQUV0QyxRQUFJcmMsSUFBSSxJQUFJbEIsWUFBTStJLE9BQVYsRUFBUjtBQUNBLFFBQUkzSCxJQUFJLElBQUlwQixZQUFNK0ksT0FBVixFQUFSOztBQUVBLFdBQU8sVUFBUzBVLE9BQVQsRUFBa0JDLE9BQWxCLEVBQTJCOztBQUVqQ3hjLFFBQUV5YyxxQkFBRixDQUF5QkYsUUFBUVQsV0FBakM7QUFDQTViLFFBQUV1YyxxQkFBRixDQUF5QkQsUUFBUVYsV0FBakM7O0FBRUEsYUFBTzliLEVBQUUwYyxpQkFBRixDQUFxQnhjLENBQXJCLENBQVA7QUFFQSxLQVBEO0FBU0EsR0FkMEIsRUFBM0I7O0FBZ0JBLFdBQVN5YyxNQUFULENBQWlCQyxLQUFqQixFQUF3Qjs7QUFFdkIsUUFBSUMsUUFBUXJNLE9BQU9DLElBQVAsQ0FBYXhDLE1BQU1tTSxPQUFuQixFQUE0QjBDLElBQTVCLENBQWtDLFVBQVM5YyxDQUFULEVBQVlFLENBQVosRUFBZTs7QUFFNUQsYUFBTytOLE1BQU1tTSxPQUFOLENBQWVwYSxDQUFmLEVBQW1Cb2MsdUJBQW5CLEdBQTZDbk8sTUFBTW1NLE9BQU4sQ0FBZWxhLENBQWYsRUFBbUJrYyx1QkFBdkU7QUFFQSxLQUpXLENBQVo7QUFLQSxRQUFJVyxPQUFPRixNQUFNamMsTUFBakI7O0FBRUFnYyxVQUFNSSxRQUFOLENBQWdCLFVBQVN4USxNQUFULEVBQWlCOztBQUVoQyxVQUFJeVEsUUFBUUosTUFBTXpaLE9BQU4sQ0FBZW9KLE9BQU93UCxFQUFQLEdBQVksRUFBM0IsQ0FBWjs7QUFFQSxVQUFHaUIsVUFBVSxDQUFFLENBQWYsRUFBa0I7O0FBRWpCelEsZUFBT2hELE9BQVAsQ0FBZXVGLEtBQWYsQ0FBcUJtTyxNQUFyQixHQUE4QkgsT0FBT0UsS0FBckM7QUFFQTtBQUVELEtBVkQ7QUFZQTs7QUFFRCxPQUFLRSxNQUFMLEdBQWMsVUFBU1AsS0FBVCxFQUFnQjFDLE1BQWhCLEVBQXdCOztBQUVyQyxRQUFJQyxNQUFNRCxPQUFPa0QsZ0JBQVAsQ0FBd0I5QixRQUF4QixDQUFrQyxDQUFsQyxJQUF3Q3ZCLFdBQWxEOztBQUVBLFFBQUc5TCxNQUFNaU0sTUFBTixDQUFhQyxHQUFiLEtBQXFCQSxHQUF4QixFQUE2Qjs7QUFFNUJFLGlCQUFXdEwsS0FBWCxDQUFpQnNPLGlCQUFqQixHQUFxQ2xELE1BQU0sSUFBM0M7QUFDQUUsaUJBQVd0TCxLQUFYLENBQWlCdU8sY0FBakIsR0FBa0NuRCxNQUFNLElBQXhDO0FBQ0FFLGlCQUFXdEwsS0FBWCxDQUFpQndPLFdBQWpCLEdBQStCcEQsTUFBTSxJQUFyQzs7QUFFQWxNLFlBQU1pTSxNQUFOLENBQWFDLEdBQWIsR0FBbUJBLEdBQW5CO0FBRUE7O0FBRUR5QyxVQUFNWSxpQkFBTjs7QUFFQSxRQUFHdEQsT0FBT3VELE1BQVAsS0FBa0IsSUFBckIsRUFBMkJ2RCxPQUFPc0QsaUJBQVA7O0FBRTNCLFFBQUloQyxrQkFBa0IsZ0JBQWdCckIsR0FBaEIsR0FBc0IsS0FBdEIsR0FDckJrQixtQkFBb0JuQixPQUFPeUIsa0JBQTNCLENBREQ7O0FBR0EsUUFBSTVNLFFBQVF5TSxrQkFDWCxZQURXLEdBQ0kxQixVQURKLEdBQ2lCLEtBRGpCLEdBQ3lCQyxXQUR6QixHQUN1QyxLQURuRDs7QUFHQSxRQUFHOUwsTUFBTWlNLE1BQU4sQ0FBYW5MLEtBQWIsS0FBdUJBLEtBQXZCLElBQWdDLENBQUUrTCxJQUFyQyxFQUEyQzs7QUFFMUNMLG9CQUFjMUwsS0FBZCxDQUFvQmtOLGVBQXBCLEdBQXNDbE4sS0FBdEM7QUFDQTBMLG9CQUFjMUwsS0FBZCxDQUFvQm1OLFlBQXBCLEdBQW1Dbk4sS0FBbkM7QUFDQTBMLG9CQUFjMUwsS0FBZCxDQUFvQm9OLFNBQXBCLEdBQWdDcE4sS0FBaEM7O0FBRUFkLFlBQU1pTSxNQUFOLENBQWFuTCxLQUFiLEdBQXFCQSxLQUFyQjtBQUVBOztBQUVEMk0saUJBQWNrQixLQUFkLEVBQXFCMUMsTUFBckIsRUFBNkJzQixlQUE3Qjs7QUFFQSxRQUFHVixJQUFILEVBQVM7O0FBRVI7QUFDQTtBQUNBO0FBQ0E7QUFDQTZCLGFBQVFDLEtBQVI7QUFFQTtBQUVELEdBOUNEO0FBK0NBLENBalFIOztrQkFvUWU5ZCxZQUFNNmEsYTs7O0FBRXJCLElBQU0rRCxlQUFlNWUsWUFBTXVhLFdBQTNCO0FBQUEsSUFBd0NzRSxlQUFlN2UsWUFBTTRhLFdBQTdEO1FBRWtCTCxXLEdBQWhCcUUsWTtRQUNnQmhFLFcsR0FBaEJpRSxZOzs7Ozs7Ozs7OztBQ3RTRjs7QUFDQTs7Ozs7Ozs7SUFFcUJDLFE7OztXQUlaQyxJLGlCQUFLdFUsRyxFQUFnQjtBQUFBLFFBQVh1VSxLQUFXLHVFQUFMLEdBQUs7O0FBQzFCRixhQUFTRSxLQUFULEdBQWlCQSxLQUFqQjtBQUNBRixhQUFTN08sS0FBVCxHQUFpQixhQUFFLGtHQUdLK08sS0FITCwrSUFRS0EsS0FSTCwrQkFRb0NBLEtBUnBDLDRGQVlUQyxXQVpTLEVBQUYsRUFZUUMsUUFaUixDQVlpQnpVLElBQUkwVSxJQVpyQixDQUFqQjtBQWFELEc7O1dBQ01oVSxPLHNCQUFVO0FBQ2YyVCxhQUFTN08sS0FBVCxDQUFlbVAsTUFBZjtBQUNELEc7O0FBRUQsb0JBQVkvVSxLQUFaLEVBQW1CQyxNQUFuQixFQUEyQndELEtBQTNCLEVBQWtDO0FBQUE7O0FBQUEsaURBQ2hDLHVCQURnQzs7QUFFaEMsVUFBS0EsS0FBTCxHQUFhQSxLQUFiO0FBQ0EsVUFBS3VSLFVBQUwsR0FBa0IsYUFBRSxzQ0FBRixDQUFsQjtBQUNELFFBQU1DLFdBQVd4UixNQUFNekQsS0FBdkI7QUFBQSxRQUE4QmtWLFlBQVlqVixTQUFPRCxLQUFQLEdBQWFpVixRQUF2RDtBQUNDLFVBQUtELFVBQUwsQ0FBZ0JoVixLQUFoQixDQUFzQmlWLFFBQXRCLEVBQWdDaFYsTUFBaEMsQ0FBdUNpVixTQUF2QztBQUNELFVBQUtqVCxLQUFMLENBQVdsSyxDQUFYLElBQWdCa2QsV0FBU2pWLEtBQXpCO0FBQ0EsVUFBS2lDLEtBQUwsQ0FBVzFLLENBQVgsSUFBZ0IwZCxXQUFTalYsS0FBekI7O0FBRUMsVUFBS21WLE9BQUw7QUFDQSxVQUFLbmEsR0FBTCxDQUFTLE1BQUtnYSxVQUFMLENBQWdCLENBQWhCLENBQVQ7QUFWZ0M7QUFXakM7O3FCQUVESSxZLHlCQUFhOVYsSSxFQUFNO0FBQ2pCLFFBQUcsS0FBSytELE1BQUwsSUFBZSxLQUFLQSxNQUFMLENBQVkvRCxJQUFaLENBQWxCLEVBQXFDO0FBQ25DLFVBQUk7QUFDRixhQUFLK0QsTUFBTCxDQUFZL0QsSUFBWjtBQUNELE9BRkQsQ0FHQSxPQUFNZ0UsQ0FBTixFQUFTO0FBQ1B4SSxnQkFBUXVhLEtBQVIsQ0FBYy9SLENBQWQ7QUFDRDtBQUNGO0FBQ0YsRzs7cUJBRUR4QyxPLHNCQUFVO0FBQ1IsU0FBS3dVLGNBQUw7QUFDRCxHOztxQkFFREEsYyw2QkFBaUI7QUFDZixTQUFLRixZQUFMLENBQWtCLFNBQWxCO0FBQ0EsS0FBQyxLQUFLRyxHQUFOLElBQWEsS0FBS0EsR0FBTCxDQUFTUixNQUFULEVBQWI7QUFDQSxLQUFDLEtBQUtTLElBQU4sSUFBYyxLQUFLQSxJQUFMLENBQVVULE1BQVYsRUFBZDtBQUNELEc7O3FCQUVESSxPLHNCQUFnQztBQUFBLFFBQXhCSSxHQUF3Qix1RUFBcEIsRUFBb0I7QUFBQSxRQUFoQkMsSUFBZ0IsdUVBQVgsRUFBVztBQUFBLFFBQVBDLEVBQU8sdUVBQUosRUFBSTs7QUFDOUIsU0FBS0gsY0FBTDs7QUFFQSxTQUFLQyxHQUFMLEdBQVcseUNBQTRCQSxHQUE1QixlQUEyQ1YsUUFBM0MsQ0FBb0QsS0FBS0csVUFBekQsQ0FBWDtBQUNBLFNBQUtRLElBQUwsR0FBWSxhQUFFQSxJQUFGLEVBQVFYLFFBQVIsQ0FBaUIsS0FBS0csVUFBdEIsQ0FBWjtBQUNBLFFBQU1OLE9BQU9nQixLQUFLRCxFQUFMLENBQWI7QUFDQSxRQUFHZixJQUFILEVBQVM7QUFDUCxXQUFLclIsTUFBTCxHQUFjcVIsS0FBSyxLQUFLTSxVQUFWLEVBQXNCLEtBQUt2UixLQUEzQixLQUFxQyxFQUFuRDtBQUNEO0FBQ0YsRzs7cUJBRURrUyxVLHVCQUFXQyxHLEVBQUs7QUFBQTs7QUFDZCxRQUFNQyxZQUFZLEtBQUtBLFNBQUwsR0FBaUJDLEtBQUtDLEdBQUwsRUFBbkM7QUFDQUMsZUFBVyxZQUFLO0FBQ2QsVUFBR0gsY0FBWSxPQUFLQSxTQUFwQixFQUErQjtBQUM3QkQ7QUFDRDtBQUNGLEtBSkQsRUFJR25CLFNBQVNFLEtBSlo7QUFLRCxHOztxQkFFRHNCLFEsdUJBQVc7QUFDVCxXQUFPLEtBQUtqQixVQUFMLENBQWdCa0IsUUFBaEIsQ0FBeUIsUUFBekIsQ0FBUDtBQUNELEc7O3FCQUVEQyxJLG1CQUFPO0FBQUE7O0FBQ0wsUUFBSW5hLFlBQUo7QUFDQSxRQUFHLENBQUMsS0FBS2lhLFFBQUwsRUFBSixFQUFxQjtBQUNuQixXQUFLakIsVUFBTCxDQUFnQm9CLFFBQWhCLENBQXlCLFFBQXpCO0FBQ0EsV0FBS2hCLFlBQUwsQ0FBa0IsTUFBbEI7QUFDQXBaLFlBQU0sSUFBSXFhLE9BQUosQ0FBWSxVQUFDQyxPQUFELEVBQVk7QUFDNUIsZUFBS1gsVUFBTCxDQUFnQixZQUFLO0FBQ25CLGlCQUFLUCxZQUFMLENBQWtCLFFBQWxCO0FBQ0FrQjtBQUNELFNBSEQ7QUFJRCxPQUxLLENBQU47QUFNRCxLQVRELE1BVUs7QUFDSHRhLFlBQU1xYSxRQUFRQyxPQUFSLEVBQU47QUFDRDtBQUNELFdBQU90YSxHQUFQO0FBQ0QsRzs7cUJBRUR1YSxJLG1CQUFPO0FBQUE7O0FBQ0wsUUFBSXZhLFlBQUo7QUFDQSxRQUFHLEtBQUtpYSxRQUFMLEVBQUgsRUFBb0I7QUFDbEIsV0FBS2pCLFVBQUwsQ0FBZ0J3QixXQUFoQixDQUE0QixRQUE1QjtBQUNBLFdBQUtwQixZQUFMLENBQWtCLE1BQWxCO0FBQ0FwWixZQUFNLElBQUlxYSxPQUFKLENBQVksVUFBQ0MsT0FBRCxFQUFZO0FBQzVCLGVBQUtYLFVBQUwsQ0FBZ0IsWUFBSztBQUNuQixpQkFBS1AsWUFBTCxDQUFrQixPQUFsQjtBQUNBa0I7QUFDRCxTQUhEO0FBSUQsT0FMSyxDQUFOO0FBTUQsS0FURCxNQVVLO0FBQ0h0YSxZQUFNcWEsUUFBUUMsT0FBUixFQUFOO0FBQ0Q7QUFDRCxXQUFPdGEsR0FBUDtBQUNELEc7OztFQXBIbUNrVSwwQjs7a0JBQWpCdUUsUTs7Ozs7Ozs7Ozs7OztJQ0hBMVAsSztBQUVuQixtQkFBd0Q7QUFBQSxRQUE1QzBSLE9BQTRDLHVFQUFwQ0MsUUFBb0M7QUFBQSxRQUExQkMsTUFBMEIsdUVBQW5CNVIsTUFBTTZSLFdBQWE7O0FBQUE7O0FBQ3RELFNBQUtDLEVBQUwsR0FBVSxJQUFJQyxHQUFKLEVBQVY7QUFDQSxTQUFLSCxNQUFMLEdBQWNBLE1BQWQ7QUFDQSxTQUFLRixPQUFMLEdBQWVBLE9BQWY7QUFDQSxTQUFLM00sSUFBTCxHQUFZLENBQVo7QUFDRDs7a0JBRURpTixPLG9CQUFRbkIsRyxFQUFLO0FBQ1gsU0FBS2lCLEVBQUwsQ0FBUUUsT0FBUixDQUFnQixVQUFDamQsQ0FBRCxFQUFJaEIsQ0FBSjtBQUFBLGFBQVM4YyxJQUFJLENBQUM5YyxDQUFELEVBQUdnQixDQUFILENBQUosQ0FBVDtBQUFBLEtBQWhCO0FBQ0QsRzs7UUFFTThjLFcsd0JBQVkzRSxLLEVBQU87QUFDeEIsV0FBTyxDQUFQO0FBQ0QsRzs7a0JBRUQ4QyxNLG1CQUFPamMsQyxFQUFHO0FBQ1IsUUFBSWtELE1BQU0sS0FBVjtBQUNBLFFBQU1sQyxJQUFJLEtBQUsrYyxFQUFMLENBQVFHLEdBQVIsQ0FBWWxlLENBQVosQ0FBVjtBQUNBLFFBQUcsQ0FBQ2dCLEVBQUVtZCxNQUFILElBQWEsQ0FBQ25kLEVBQUVtZCxNQUFGLENBQVNuZSxDQUFULENBQWpCLEVBQThCO0FBQzVCLFdBQUtnUixJQUFMLElBQWEsS0FBSzZNLE1BQUwsQ0FBWTdjLENBQVosQ0FBYjtBQUNBLFVBQUdBLEVBQUVnSCxPQUFMLEVBQWM7QUFDWmhILFVBQUVnSCxPQUFGO0FBQ0Q7QUFDRCxXQUFLK1YsRUFBTCxDQUFRSyxNQUFSLENBQWVwZSxDQUFmO0FBQ0FrRCxZQUFNLElBQU47QUFDRDtBQUNELFdBQU9BLEdBQVA7QUFDRCxHOztrQkFFRG1iLFMsd0JBQVk7QUFDVixRQUFNQyxNQUFNLEVBQVo7QUFDQSx5QkFBYSxLQUFLUCxFQUFsQixrSEFBc0I7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBLFVBQWRoZCxDQUFjOztBQUNwQnVkLFVBQUl4ZSxJQUFKLENBQVMsRUFBQ2lkLFdBQVdoYyxFQUFFLENBQUYsRUFBS2djLFNBQWpCLEVBQTRCd0IsS0FBS3hkLEVBQUUsQ0FBRixDQUFqQyxFQUFUO0FBQ0Q7QUFDRHVkLFFBQUl6RCxJQUFKLENBQVMsVUFBQzljLENBQUQsRUFBSUUsQ0FBSjtBQUFBLGFBQVNGLEVBQUVnZixTQUFGLEdBQVk5ZSxFQUFFOGUsU0FBdkI7QUFBQSxLQUFUO0FBQ0EsU0FBSSxJQUFJbGQsSUFBRSxDQUFWLEVBQWFBLElBQUV5ZSxJQUFJM2YsTUFBTixJQUFnQixLQUFLcVMsSUFBTCxHQUFVLElBQUUsS0FBSzJNLE9BQVAsR0FBZSxDQUF0RCxFQUF5RCxFQUFFOWQsQ0FBM0QsRUFBOEQ7QUFDNUQsV0FBS29jLE1BQUwsQ0FBWXFDLElBQUl6ZSxDQUFKLEVBQU8wZSxHQUFuQjtBQUNEO0FBQ0YsRzs7a0JBRUR2VyxPLHNCQUFVO0FBQ1IsUUFBTXNXLE1BQU0sRUFBWjtBQUNBLDBCQUFhLEtBQUtQLEVBQWxCLHlIQUFzQjtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQUEsVUFBZGhkLENBQWM7O0FBQ3BCdWQsVUFBSXhlLElBQUosQ0FBUyxFQUFDa0IsR0FBR0QsRUFBRSxDQUFGLENBQUosRUFBVWYsR0FBR2UsRUFBRSxDQUFGLENBQWIsRUFBVDtBQUNEO0FBQ0QsMEJBQWF1ZCxHQUFiLHlIQUFrQjtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQUEsVUFBVnZaLENBQVU7O0FBQ2hCLFVBQUdBLEVBQUUvRCxDQUFGLENBQUlnSCxPQUFQLEVBQWdCO0FBQ2RqRCxVQUFFL0QsQ0FBRixDQUFJZ0gsT0FBSjtBQUNEO0FBQ0QsV0FBSytWLEVBQUwsQ0FBUUssTUFBUixDQUFlclosRUFBRS9FLENBQWpCO0FBQ0Q7QUFDRixHOztRQUVNd2UsZSw0QkFBZ0JyRixLLEVBQU87QUFDNUIsUUFBSW5JLE9BQU8sQ0FBWDtBQUNBLFFBQUdtSSxLQUFILEVBQVU7QUFDUixRQUFFbkksSUFBRjtBQUNBLFVBQU0xTyxNQUFNNlcsTUFBTXhhLE1BQWxCO0FBQ0EsVUFBRzJELFFBQU1zSCxTQUFULEVBQW9CO0FBQ2xCLGFBQUssSUFBSTdJLENBQVQsSUFBY29ZLEtBQWQsRUFBcUI7QUFDbkIsY0FBR0EsTUFBTTFTLGNBQU4sQ0FBcUIxRixDQUFyQixDQUFILEVBQTRCO0FBQzFCaVEsb0JBQU0vRSxNQUFNdVMsZUFBTixDQUFzQnJGLE1BQU1wWSxDQUFOLENBQXRCLENBQU47QUFDRDtBQUNGO0FBQ0YsT0FORCxNQU9LO0FBQ0hpUSxnQkFBTTFPLEdBQU47QUFDRDtBQUNGO0FBQ0QsV0FBTzBPLElBQVA7QUFDRCxHOztrQkFFRHlOLFksMkJBQWU7QUFDYixXQUFPekIsS0FBS0MsR0FBTCxFQUFQO0FBQ0QsRzs7a0JBR0RpQixHLGdCQUFJSyxHLEVBQUs7QUFDUCxRQUFNcEYsUUFBUSxLQUFLNEUsRUFBTCxDQUFRRyxHQUFSLENBQVlLLEdBQVosQ0FBZDtBQUNBLFFBQUdwRixLQUFILEVBQVU7QUFDUkEsWUFBTTRELFNBQU4sR0FBa0IsS0FBSzBCLFlBQUwsRUFBbEI7QUFDRDtBQUNELFdBQU90RixLQUFQO0FBQ0QsRzs7a0JBRUR1RixHLGdCQUFJSCxHLEVBQUtwRixLLEVBQU87QUFDZEEsVUFBTTRELFNBQU4sR0FBa0IsS0FBSzBCLFlBQUwsRUFBbEI7QUFDQSxTQUFLVixFQUFMLENBQVE3YixHQUFSLENBQVlxYyxHQUFaLEVBQWlCcEYsS0FBakI7QUFDQSxTQUFLbkksSUFBTCxJQUFXLEtBQUs2TSxNQUFMLENBQVkxRSxLQUFaLENBQVg7QUFDQSxRQUFHLEtBQUtuSSxJQUFMLEdBQVUsS0FBSzJNLE9BQWxCLEVBQTJCO0FBQ3pCLFdBQUtVLFNBQUw7QUFDRDtBQUNELFdBQU9sRixLQUFQO0FBQ0QsRzs7Ozs7a0JBL0ZrQmxOLEs7Ozs7Ozs7Ozs7O0FDQXJCOzs7Ozs7OztJQUVxQjBTLFU7Ozs7Ozs7Ozt1QkFFbkJDLGEsMEJBQWM3RSxFLEVBQUl2UCxDLEVBQUdwSyxJLEVBQU07QUFDekI7QUFDRCxHOzt1QkFFRHllLGEsMEJBQWNyVSxDLEVBQUc7QUFBQTs7QUFDZitTLFlBQVFDLE9BQVIsR0FBa0JzQixJQUFsQixDQUF1QjtBQUFBLGFBQUssT0FBS0MsYUFBTCxDQUFtQnZVLENBQW5CLENBQUw7QUFBQSxLQUF2QjtBQUNELEc7O3VCQUVEeEMsTyxzQkFBVSxDQUVULEM7OztFQVpxQ25MLFlBQU1taUIsZTs7a0JBQXpCTCxVOzs7Ozs7Ozs7OztBQ0ZyQjs7Ozs7Ozs7Ozs7O0lBRXFCTSxvQjs7O0FBRW5CO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGdDQUFZNVgsR0FBWixFQUFpQkMsR0FBakIsRUFBbUQ7QUFBQSxRQUE3QjRYLFVBQTZCLHVFQUFsQjtBQUFBLGFBQUssS0FBTDtBQUFBLEtBQWtCO0FBQUEsUUFBTkMsSUFBTTs7QUFBQTs7QUFBQSxpREFDakQsMkJBQU05WCxHQUFOLEVBQVdDLEdBQVgsQ0FEaUQ7O0FBR2pELFVBQUs2WCxJQUFMLEdBQVlBLElBQVo7QUFDQSxVQUFLRCxVQUFMLEdBQWtCQSxVQUFsQjtBQUNBLFVBQUtFLE9BQUwsR0FBZSxFQUFmO0FBTGlEO0FBTWxEOztpQ0FFRGhVLEksaUJBQUtrUCxPLEVBQVNDLE8sRUFBUztBQUNyQixXQUFPRCxXQUFXQyxPQUFYLEdBQW9CLEtBQUsyRSxVQUFMLENBQWdCNUUsT0FBaEIsRUFBeUJDLE9BQXpCLENBQXBCLEdBQXVELEtBQTlEO0FBQ0QsRzs7aUNBRURqUSxXLHdCQUFZQyxNLEVBQVE7QUFDbEIsV0FBT0EsT0FBTzhVLE1BQVAsQ0FBYzNVLFFBQXJCO0FBQ0QsRzs7aUNBRUQ0VSxTLHNCQUFVQyxNLEVBQVE7QUFDaEIsU0FBS0gsT0FBTCxDQUFhdGYsSUFBYixDQUFrQnlmLE1BQWxCO0FBQ0QsRzs7aUNBRUR2VSxTLHNCQUFVUixDLEVBQUdwSyxJLEVBQU07QUFDakIsUUFBSW1LLGVBQUo7QUFDQSxRQUFHbkssS0FBS2tILEdBQUwsS0FBVyxLQUFLNlgsSUFBbkIsRUFBeUI7QUFDdkIsMkJBQWtCLEtBQUtDLE9BQXZCLGtIQUFnQztBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQUEsWUFBeEJHLE1BQXdCOztBQUM5QmhWLGlCQUFTZ1YsT0FBT0MsZ0JBQVAsQ0FBd0JoVixDQUF4QixFQUEyQnBLLElBQTNCLENBQVQ7QUFDQSxZQUFHbUssTUFBSCxFQUFXO0FBQ1Q7QUFDRDtBQUNGO0FBQ0Y7QUFDRCxXQUFPQSxNQUFQO0FBQ0QsRzs7O0VBdEMrQ1Qsd0I7O2tCQUE3Qm1WLG9COzs7Ozs7Ozs7Ozs7O0FDRnJCOzs7Ozs7OztJQUVxQlEsTTtTQUlaQyxVLHVCQUFXcmlCLEMsRUFBRztBQUNuQixXQUFPQSxNQUFJb2lCLE9BQU9FLFNBQWxCO0FBQ0QsRzs7bUJBRURDLEssb0JBQVE7QUFDTixRQUFNQyxLQUFLLEVBQVg7QUFBQSxRQUFlcFIsTUFBTSxFQUFyQjtBQUFBLFFBQXlCcVIsT0FBTyxLQUFLQSxJQUFyQztBQUNBLFFBQUkvZSxJQUFJLENBQVI7QUFDQSxTQUFJLElBQUlsQixJQUFFLENBQVYsRUFBYUEsSUFBRWlnQixLQUFLbmhCLE1BQXBCLEVBQTRCLEVBQUVrQixDQUE5QixFQUFpQztBQUMvQixVQUFHaWdCLEtBQUtqZ0IsQ0FBTCxFQUFRbEIsTUFBWCxFQUFtQjtBQUNqQjhQLFlBQUkzTyxJQUFKLENBQVM7QUFDUG9HLGdCQUFNckcsQ0FEQztBQUVQb1Qsa0JBQVFsUztBQUZELFNBQVQ7QUFJQThlLFdBQUcvZixJQUFILENBQVFnZ0IsS0FBS2pnQixDQUFMLENBQVI7QUFDQWtCLGFBQUsrZSxLQUFLamdCLENBQUwsRUFBUWxCLE1BQWI7QUFDQSxZQUFHa0IsSUFBRWlnQixLQUFLbmhCLE1BQUwsR0FBWSxDQUFkLElBQW1CLENBQUM4Z0IsT0FBT0MsVUFBUCxDQUFrQkksS0FBS2pnQixDQUFMLEVBQVFrZ0IsTUFBUixDQUFlRCxLQUFLamdCLENBQUwsRUFBUWxCLE1BQVIsR0FBZSxDQUE5QixDQUFsQixDQUFwQixJQUEyRSxDQUFDOGdCLE9BQU9DLFVBQVAsQ0FBa0JJLEtBQUtqZ0IsSUFBRSxDQUFQLEVBQVVrZ0IsTUFBVixDQUFpQixDQUFqQixDQUFsQixDQUEvRSxFQUF1SDtBQUNySEYsYUFBRy9mLElBQUgsQ0FBUTJmLE9BQU9FLFNBQWY7QUFDQSxZQUFFNWUsQ0FBRjtBQUNEO0FBQ0Y7QUFDRjtBQUNELFNBQUswTixHQUFMLEdBQVdBLEdBQVg7QUFDQSxTQUFLdVIsR0FBTCxHQUFXSCxHQUFHeFosSUFBSCxDQUFRLEVBQVIsQ0FBWDtBQUNELEc7O21CQUVENFosTyxvQkFBUWxmLEMsRUFBRztBQUNULFFBQU1vTCxPQUFPLEtBQUtzQyxHQUFMLENBQVM1SSxnQkFBTWMsVUFBTixDQUFpQixLQUFLOEgsR0FBdEIsRUFBMkIsRUFBQ3dFLFFBQVFsUyxDQUFULEVBQTNCLEVBQXdDLFVBQUNoRCxDQUFELEVBQUlFLENBQUo7QUFBQSxhQUFTRixFQUFFa1YsTUFBRixHQUFTaFYsRUFBRWdWLE1BQXBCO0FBQUEsS0FBeEMsQ0FBVCxDQUFiO0FBQ0EsUUFBSWlOLFFBQVEsS0FBS0MsT0FBTCxDQUFheGhCLE1BQXpCO0FBQUEsUUFBaUNrQixJQUFJc00sS0FBS2pHLElBQTFDO0FBQ0FuRixTQUFLb0wsS0FBSzhHLE1BQVY7QUFDQSxXQUFNaU4sS0FBTixFQUFhO0FBQ1gsVUFBRyxLQUFLSixJQUFMLENBQVVqZ0IsQ0FBVixFQUFhbEIsTUFBaEIsRUFBd0I7QUFDdEIsWUFBTXloQixZQUFZdmdCLElBQUUsS0FBS2lnQixJQUFMLENBQVVuaEIsTUFBVixHQUFpQixDQUFuQixJQUF3QixDQUFDOGdCLE9BQU9DLFVBQVAsQ0FBa0IsS0FBS0ksSUFBTCxDQUFVamdCLENBQVYsRUFBYWtnQixNQUFiLENBQW9CLEtBQUtELElBQUwsQ0FBVWpnQixDQUFWLEVBQWFsQixNQUFiLEdBQW9CLENBQXhDLENBQWxCLENBQXpCLElBQTBGLENBQUM4Z0IsT0FBT0MsVUFBUCxDQUFrQixLQUFLSSxJQUFMLENBQVVqZ0IsSUFBRSxDQUFaLEVBQWVrZ0IsTUFBZixDQUFzQixDQUF0QixDQUFsQixDQUE3RztBQUFBLFlBQ01waEIsU0FBU3NDLEtBQUs2QyxHQUFMLENBQVMsS0FBS2djLElBQUwsQ0FBVWpnQixDQUFWLEVBQWFsQixNQUFiLElBQXFCeWhCLFlBQVcsQ0FBWCxHQUFjLENBQW5DLElBQXNDcmYsQ0FBL0MsRUFBa0RtZixLQUFsRCxDQURmO0FBRUEsWUFBR25mLElBQUUsS0FBSytlLElBQUwsQ0FBVWpnQixDQUFWLEVBQWFsQixNQUFsQixFQUEwQjtBQUN4QixlQUFLMGhCLElBQUwsQ0FBVXZnQixJQUFWLENBQWU7QUFDYmtiLG1CQUFPbmIsQ0FETTtBQUVib1Qsb0JBQVFsUyxDQUZLO0FBR2JwQyxvQkFBUXNDLEtBQUs2QyxHQUFMLENBQVNuRixNQUFULEVBQWlCLEtBQUttaEIsSUFBTCxDQUFVamdCLENBQVYsRUFBYWxCLE1BQWIsR0FBb0JvQyxDQUFyQztBQUhLLFdBQWY7QUFLRDtBQUNEbWYsaUJBQVN2aEIsTUFBVDtBQUNBLFVBQUVrQixDQUFGO0FBQ0FrQixZQUFJLENBQUo7QUFDRDtBQUNGO0FBQ0YsRzs7bUJBRUR1ZixVLHVCQUFXdmYsQyxFQUFHO0FBQ1osUUFBSXlCLElBQUl6QixDQUFSO0FBQUEsUUFBV04sSUFBSU0sSUFBRSxLQUFLb2YsT0FBTCxDQUFheGhCLE1BQWYsR0FBc0IsQ0FBckM7QUFBQSxRQUF3QzRoQixPQUFPLEtBQUs1VixLQUFMLENBQVc2VixhQUExRDtBQUFBLFFBQXlFQyxXQUFXRixPQUFLLENBQXpGO0FBQ0EsV0FBTUEsUUFBUUUsV0FBU0YsSUFBdkIsRUFBNkI7QUFDM0JFLGlCQUFXRixJQUFYO0FBQ0EsVUFBR0EsT0FBSyxDQUFSLEVBQVc7QUFDVCxhQUFJLElBQUkxZ0IsSUFBRTJDLElBQUUsQ0FBWixFQUFlM0MsS0FBRyxDQUFsQixFQUFxQixFQUFFQSxDQUF2QixFQUEwQjtBQUN4QixjQUFHNGYsT0FBT0MsVUFBUCxDQUFrQixLQUFLTSxHQUFMLENBQVNuZ0IsQ0FBVCxDQUFsQixLQUFrQ0EsTUFBSSxDQUF6QyxFQUE0QztBQUMxQzJDLGdCQUFJM0MsTUFBSSxDQUFKLEdBQU8sQ0FBUCxHQUFVQSxJQUFFLENBQWhCO0FBQ0EsY0FBRTBnQixJQUFGO0FBQ0E7QUFDRDtBQUNGO0FBQ0YsT0FSRCxNQVNLO0FBQ0gsYUFBSSxJQUFJMWdCLEtBQUVZLElBQUUsQ0FBWixFQUFlWixLQUFFLEtBQUttZ0IsR0FBTCxDQUFTcmhCLE1BQTFCLEVBQWtDLEVBQUVrQixFQUFwQyxFQUF1QztBQUNyQyxjQUFHNGYsT0FBT0MsVUFBUCxDQUFrQixLQUFLTSxHQUFMLENBQVNuZ0IsRUFBVCxDQUFsQixLQUFrQ0EsT0FBSSxLQUFLbWdCLEdBQUwsQ0FBU3JoQixNQUFULEdBQWdCLENBQXpELEVBQTREO0FBQzFEOEIsZ0JBQUlaLE9BQUksS0FBS21nQixHQUFMLENBQVNyaEIsTUFBVCxHQUFnQixDQUFwQixHQUF1QmtCLE9BQUksS0FBS21nQixHQUFMLENBQVNyaEIsTUFBVCxHQUFnQixDQUEzQyxHQUE4Q2tCLEtBQUUsQ0FBcEQ7QUFDQSxjQUFFMGdCLElBQUY7QUFDQTtBQUNEO0FBQ0Y7QUFDRjtBQUNGO0FBQ0QsU0FBS0csUUFBTCxDQUFjNWdCLElBQWQsQ0FBbUIsS0FBS2tnQixHQUFMLENBQVNXLE1BQVQsQ0FBZ0JuZSxDQUFoQixFQUFtQi9CLElBQUUrQixDQUFGLEdBQUksQ0FBdkIsQ0FBbkI7QUFDRCxHOzttQkFFRG9lLE8sc0JBQVU7QUFDUixXQUFPLEtBQUtQLElBQVo7QUFDRCxHOzttQkFFRFEsVywwQkFBYztBQUNaLFdBQU8sS0FBS0gsUUFBWjtBQUNELEc7O0FBUUQsa0JBQVlaLElBQVosRUFBa0JLLE9BQWxCLEVBQTJCeFYsS0FBM0IsRUFBa0M7QUFBQTs7QUFDaEMsU0FBS0EsS0FBTCxnQkFDSzhVLE9BQU8xUyxRQURaLEVBRUtwQyxLQUZMO0FBSUEsU0FBS21WLElBQUwsR0FBWUEsSUFBWjtBQUNBLFFBQU0xZixPQUFPLEtBQUt3ZixLQUFMLENBQVdFLElBQVgsQ0FBYjtBQUNBLFNBQUtPLElBQUwsR0FBWSxFQUFaO0FBQ0EsU0FBS0ssUUFBTCxHQUFnQixFQUFoQjtBQUNBLFNBQUtQLE9BQUwsR0FBZUEsUUFBUVcsV0FBUixFQUFmO0FBQ0EsU0FBS0MsSUFBTCxHQUFZLEtBQUtmLEdBQUwsQ0FBU2MsV0FBVCxFQUFaO0FBQ0EsUUFBSS9mLElBQUksQ0FBUjtBQUNBLFdBQU0sSUFBTixFQUFZO0FBQ1ZBLFVBQUksS0FBS2dnQixJQUFMLENBQVU1ZixPQUFWLENBQWtCLEtBQUtnZixPQUF2QixFQUFnQ3BmLENBQWhDLENBQUo7QUFDQSxVQUFHQSxNQUFJLENBQUMsQ0FBUixFQUFXO0FBQ1Q7QUFDRCxPQUZELE1BR0s7QUFDSCxhQUFLa2YsT0FBTCxDQUFhbGYsQ0FBYjtBQUNBLGFBQUt1ZixVQUFMLENBQWdCdmYsQ0FBaEI7QUFDQUEsYUFBSyxLQUFLb2YsT0FBTCxDQUFheGhCLE1BQWxCO0FBQ0Q7QUFDRjtBQUNGOzs7OztBQWxIa0I4Z0IsTSxDQUVaRSxTLEdBQVksRztBQUZBRixNLENBcUZaMVMsUSxHQUFXO0FBQ2hCeVQsaUJBQWUsQ0FEQztBQUVoQkgsUUFBTSxJQUZVO0FBR2hCSyxZQUFVO0FBSE0sQztrQkFyRkNqQixNOzs7Ozs7Ozs7OztBQ0ZyQjs7QUFDQTs7Ozs7Ozs7Ozs7O0lBRXFCdUIsVzs7Ozs7Ozs7O2FBRWJDLFMsd0JBQVk7QUFDbEIsU0FBTyxJQUFQO0FBQ0EsRTs7YUF1Qk1DLFMsd0JBQVk7QUFDbEIsU0FBTyxZQUFNRCxTQUFOLGNBQW1CLFlBQU1DLFNBQU4sV0FBbkIsR0FBc0NGLFlBQVlHLElBQVosQ0FBaUIvRCxRQUFqQixDQUEwQjRELFlBQVlJLE1BQXRDLENBQTdDO0FBQ0EsRTs7YUFFTS9KLGdCLDZCQUFpQjlQLE8sRUFBUzhaLE8sRUFBUztBQUN6QyxNQUFHLFlBQU1KLFNBQU4sV0FBSCxFQUFzQjtBQUNyQixlQUFNNUosZ0JBQU4sWUFBdUI5UCxPQUF2QixFQUFnQzhaLE9BQWhDO0FBQ0EsR0FGRCxNQUdLO0FBQ0pMLGVBQVlLLE9BQVosR0FBc0JBLE9BQXRCO0FBQ0E7QUFDRCxFOzthQUVNQyxtQixnQ0FBb0IvWixPLEVBQVM4WixPLEVBQVM7QUFDNUMsTUFBRyxZQUFNSixTQUFOLFdBQUgsRUFBc0I7QUFDckIsZUFBTUssbUJBQU4sWUFBMEIvWixPQUExQixFQUFtQzhaLE9BQW5DO0FBQ0EsR0FGRCxNQUdLO0FBQ0pMLGVBQVlLLE9BQVosR0FBc0JMLFlBQVlPLFVBQWxDO0FBQ0E7QUFDRCxFOzthQUVNQyxPLG9CQUFRamEsTyxFQUFTO0FBQ3ZCLE1BQUcsWUFBTTBaLFNBQU4sV0FBSCxFQUFzQjtBQUNyQixlQUFNTyxPQUFOLFlBQWNqYSxPQUFkO0FBQ0EsR0FGRCxNQUdLO0FBQ0osT0FBRyxDQUFDeVosWUFBWUcsSUFBWixDQUFpQi9ELFFBQWpCLENBQTBCNEQsWUFBWUksTUFBdEMsQ0FBSixFQUFtRDtBQUNsREosZ0JBQVlHLElBQVosR0FBbUIsYUFBRTVaLFdBQVc4USxTQUFTN1EsSUFBdEIsQ0FBbkI7QUFDQXdaLGdCQUFZRyxJQUFaLENBQWlCN0QsUUFBakIsQ0FBMEIwRCxZQUFZSSxNQUF0QztBQUNBN0QsWUFBUUMsT0FBUixHQUFrQnNCLElBQWxCLENBQXVCa0MsWUFBWUssT0FBbkM7QUFDQTtBQUNEO0FBQ0QsRTs7YUFFTUksTSxxQkFBUztBQUNmLE1BQUcsWUFBTVIsU0FBTixXQUFILEVBQXNCO0FBQ3JCLGVBQU1RLE1BQU47QUFDQSxHQUZELE1BR0s7QUFDSixPQUFHVCxZQUFZRyxJQUFaLENBQWlCL0QsUUFBakIsQ0FBMEI0RCxZQUFZSSxNQUF0QyxDQUFILEVBQWtEO0FBQ2pESixnQkFBWUcsSUFBWixDQUFpQnpELFdBQWpCLENBQTZCc0QsWUFBWUksTUFBekM7QUFDQUosZ0JBQVlHLElBQVosR0FBbUJILFlBQVlVLE9BQS9CO0FBQ0FuRSxZQUFRQyxPQUFSLEdBQWtCc0IsSUFBbEIsQ0FBdUJrQyxZQUFZSyxPQUFuQztBQUNBO0FBQ0Q7QUFDRCxFOzs7RUF6RXVDTSxvQjs7QUFBcEJYLFcsQ0FNYlUsTyxHQUFVLGM7QUFOR1YsVyxDQU9iRyxJLEdBQU9ILFlBQVlVLE87O0FBUE5WLFcsQ0FRYk8sVSxHQUFhO0FBQUEsUUFBSzNYLFNBQUw7QUFBQSxDOztBQVJBb1gsVyxDQVNiSyxPLEdBQVVMLFlBQVlPLFU7QUFUVFAsVyxDQVViSSxNLEdBQVMsa0I7QUFWSUosVyxDQVdibFUsSyxHQUFRLGFBQUUsNENBRVRrVSxZQUFZSSxNQUZILDBWQWNmdEYsV0FkZSxFQUFGLEVBY0VDLFFBZEYsQ0FjVyxNQWRYLEM7a0JBWEtpRixXOzs7Ozs7Ozs7OztBQ0hyQjs7QUFDQTs7Ozs7Ozs7QUFFQXZqQixZQUFNbWtCLG1CQUFOLENBQTBCQyxTQUExQixHQUFzQyxDQUFDdGxCLE9BQU91bEIsWUFBUCxHQUFxQkEsWUFBckIsR0FBbUNDLGlGQUFwQyxFQUFrREMsV0FBeEY7QUFDQXZrQixZQUFNd2tCLE9BQU4sR0FBZ0IsQ0FBQzFsQixPQUFPdWxCLFlBQVAsR0FBcUJBLFlBQXJCLEdBQW1DQyxpRkFBcEMsRUFBa0RHLFlBQWxFO0FBQ0F6a0IsWUFBTTBrQixVQUFOLEdBQW1CLElBQW5CO0FBQ0Exa0IsWUFBTTJrQixnQkFBTixHQUF5QixJQUF6QjtBQUNBM2tCLFlBQU00a0IsYUFBTixHQUFzQixJQUF0QjtBQUNBNWtCLFlBQU02a0Isa0JBQU4sR0FBMkIsZUFBM0I7QUFDQTdrQixZQUFNOGtCLGtCQUFOLEdBQTJCOWtCLFlBQU0ra0IsVUFBTixDQUFpQkMsS0FBNUM7QUFDQTs7SUFFcUJDLEc7QUFFbkIsZUFBWWxXLEdBQVosRUFBaUJtVyxlQUFqQixFQUFrQztBQUFBOztBQUFBOztBQUNoQyxTQUFLblcsR0FBTCxHQUFXM0csZ0JBQU1DLFlBQU4sQ0FBbUIwRyxHQUFuQixDQUFYO0FBQ0EsU0FBS29XLFlBQUwsR0FBb0IsRUFBcEI7QUFDQSxTQUFLQyxXQUFMLEdBQW1CLEVBQUNDLFFBQVEsQ0FBQyxDQUFWLEVBQWFDLE9BQU8sQ0FBcEIsRUFBbkI7QUFDQSxTQUFLSixlQUFMLEdBQXVCQSxlQUF2Qjs7QUFFQSxTQUFLSyxJQUFMLEdBQVl2bEIsWUFBTXdsQixXQUFOLENBQWtCO0FBQzVCbGQsV0FBSyxLQUFLeUcsR0FEa0I7QUFFNUIwVyxzQkFBZ0IsTUFBSSxJQUZRO0FBRzVCakIsZUFBU3hrQixZQUFNd2tCLE9BSGE7QUFJNUJFLGtCQUFZMWtCLFlBQU0wa0IsVUFKVTtBQUs1QkMsd0JBQWtCM2tCLFlBQU0ya0IsZ0JBTEk7QUFNNUJDLHFCQUFlNWtCLFlBQU00a0IsYUFOTztBQU81QkMsMEJBQW9CN2tCLFlBQU02a0Isa0JBUEU7QUFRNUJDLDBCQUFvQjlrQixZQUFNOGtCO0FBQzFCO0FBVDRCLEtBQWxCLENBQVo7QUFXQSxTQUFLUyxJQUFMLENBQVVHLFVBQVYsR0FBdUIsVUFBQy9pQixJQUFELEVBQVM7QUFDOUIsVUFBRyxNQUFLdWlCLGVBQVIsRUFBeUI7QUFDdkIsWUFBSW5oQixNQUFNUCxLQUFLOEYsS0FBTCxDQUFXLE1BQUkzRyxLQUFLMGlCLE1BQVQsR0FBZ0IxaUIsS0FBSzJpQixLQUFoQyxDQUFWO0FBQUEsWUFDTUssTUFBTW5pQixLQUFLOEYsS0FBTCxDQUFXLE1BQUksTUFBSzhiLFdBQUwsQ0FBaUJDLE1BQXJCLEdBQTRCLE1BQUtELFdBQUwsQ0FBaUJFLEtBQXhELENBRFo7QUFFQSxZQUFHdmhCLFFBQU00aEIsR0FBVCxFQUFjO0FBQ1o1aEIsZ0JBQU02aEIsTUFBTTdoQixHQUFOLElBQVksQ0FBWixHQUFlQSxHQUFyQjtBQUNBQSxnQkFBTUEsTUFBSSxHQUFKLEdBQVMsR0FBVCxHQUFjQSxHQUFwQjtBQUNBK2Isa0JBQVFDLE9BQVIsR0FBa0JzQixJQUFsQixDQUF1QixZQUFLO0FBQzFCLGtCQUFLNkQsZUFBTCxDQUFxQm5oQixHQUFyQjtBQUNELFdBRkQ7QUFHRDtBQUNGO0FBQ0QsWUFBS3FoQixXQUFMLEdBQW1CemlCLElBQW5CO0FBQ0QsS0FiRDtBQWNBLFNBQUs0aUIsSUFBTCxDQUFVTSxPQUFWLENBQWtCeEUsSUFBbEIsQ0FBdUIsVUFBQ3VDLE9BQUQsRUFBWTtBQUNqQyxVQUFHQSxRQUFRa0MsUUFBUixHQUFpQixDQUFwQixFQUF1QjtBQUNyQmhHLGdCQUFRaUcsR0FBUixDQUFZLENBQUNuQyxRQUFRb0MsT0FBUixDQUFnQixDQUFoQixDQUFELEVBQXFCcEMsUUFBUW9DLE9BQVIsQ0FBZ0IsQ0FBaEIsQ0FBckIsQ0FBWixFQUNBM0UsSUFEQSxDQUNLLFVBQUN2UixLQUFELEVBQVU7QUFDYixnQkFBS3FPLElBQUwsQ0FBVXlGLE9BQVYsRUFBbUI5VCxLQUFuQjtBQUNELFNBSEQ7QUFJRCxPQUxELE1BTUs7QUFDSCxjQUFLcU8sSUFBTCxDQUFVeUYsT0FBVjtBQUNEO0FBQ0YsS0FWRCxFQVdBcUMsS0FYQSxDQVdNLFVBQUNsWixDQUFELEVBQU07QUFDVnhJLGNBQVF1YSxLQUFSLENBQWMvUixDQUFkO0FBQ0EsVUFBRyxNQUFLbVosWUFBUixFQUFzQjtBQUNwQixjQUFLQSxZQUFMLENBQWtCblosQ0FBbEI7QUFDRDtBQUNGLEtBaEJEO0FBaUJEOztnQkFFRG9SLEksaUJBQUt5RixPLEVBQVM5VCxLLEVBQU87QUFDbkIsU0FBSzhULE9BQUwsR0FBZUEsT0FBZjtBQUNBLFNBQUt1QyxZQUFMLEdBQW9CclcsUUFBUXRNLEtBQUtNLEdBQUwsQ0FBUyxJQUFFbWhCLElBQUltQixXQUFKLENBQWdCdFcsTUFBTSxDQUFOLENBQWhCLEVBQTBCckcsS0FBNUIsR0FBa0N3YixJQUFJbUIsV0FBSixDQUFnQnRXLE1BQU0sQ0FBTixDQUFoQixFQUEwQnJHLEtBQXJFLElBQTRFd2IsSUFBSW1CLFdBQUosQ0FBZ0J0VyxNQUFNLENBQU4sQ0FBaEIsRUFBMEJyRyxLQUF0RyxHQUE0RyxJQUFwSCxHQUEySCxLQUEvSTtBQUNBLFFBQUk1RCxPQUFPaWEsUUFBUUMsT0FBUixDQUFnQjZELE9BQWhCLENBQVg7O0FBSG1CO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQSxVQUlYdkUsR0FKVzs7QUFLakJ4WixhQUFPQSxLQUFLd2IsSUFBTCxDQUFVLFVBQUN1QyxPQUFELEVBQVk7QUFDM0J2RSxZQUFJdUUsT0FBSjtBQUNBLGVBQU9BLE9BQVA7QUFDRCxPQUhNLENBQVA7QUFMaUI7O0FBSW5CLHlCQUFlLEtBQUt1QixZQUFMLENBQWtCdmpCLE9BQWxCLEVBQWYsa0hBQTRDO0FBQUE7O0FBQUE7O0FBQUE7QUFLM0M7QUFDRixHOztnQkFFRHlrQixXLHdCQUFZdmhCLEMsRUFBRztBQUNiLFdBQU8sQ0FBQyxLQUFLcWhCLFlBQU4sSUFBc0JyaEIsTUFBSSxDQUExQixJQUErQkEsTUFBSSxLQUFLd2hCLFdBQUwsS0FBbUIsQ0FBdEQsR0FBeUQsTUFBekQsR0FBa0V4aEIsSUFBRSxDQUFGLEdBQUssTUFBTCxHQUFhLE9BQXRGO0FBQ0QsRzs7Z0JBRURraEIsTyxvQkFBUWxoQixDLEVBQUc7QUFDVCxXQUFPLEtBQUs4ZSxPQUFMLENBQWFvQyxPQUFiLENBQXFCLEtBQUtHLFlBQUwsR0FBbUIzaUIsS0FBS1MsSUFBTCxDQUFVYSxJQUFFLENBQVosSUFBZSxDQUFsQyxHQUFxQ0EsSUFBRSxDQUE1RCxDQUFQO0FBQ0QsRzs7Z0JBRUR5aEIsYywyQkFBZUMsSSxFQUFNO0FBQUE7O0FBQ25CLFFBQUlDLG9CQUFKO0FBQ0EsUUFBRyxPQUFPRCxJQUFQLEtBQWMsUUFBakIsRUFBMkI7QUFDekJDLG9CQUFjLEtBQUs3QyxPQUFMLENBQWEyQyxjQUFiLENBQTRCQyxJQUE1QixDQUFkO0FBQ0QsS0FGRCxNQUdLO0FBQ0hDLG9CQUFjM0csUUFBUUMsT0FBUixDQUFnQnlHLElBQWhCLENBQWQ7QUFDRDtBQUNEQyxrQkFBY0EsWUFDWnBGLElBRFksQ0FDUCxVQUFDbUYsSUFBRDtBQUFBLGFBQVMsT0FBSzVDLE9BQUwsQ0FBYThDLFlBQWIsQ0FBMEJGLEtBQUssQ0FBTCxDQUExQixDQUFUO0FBQUEsS0FETyxFQUVabkYsSUFGWSxDQUVQLFVBQUNzRixNQUFEO0FBQUEsYUFBVyxPQUFLUixZQUFMLEdBQW9CUSxTQUFPLENBQVAsR0FBVUEsTUFBVixHQUFrQixJQUFFLEtBQUdBLFNBQU8sQ0FBVixDQUF4QyxHQUF1REEsTUFBbEU7QUFBQSxLQUZPLEVBR1pWLEtBSFksQ0FHTjtBQUFBLGFBQUsxaEIsUUFBUXVhLEtBQVIsQ0FBYyxjQUFkLENBQUw7QUFBQSxLQUhNLENBQWQ7QUFJQSxXQUFPMkgsV0FBUDtBQUNELEc7O2dCQUVEbGMsTyxzQkFBVTtBQUNSLFNBQUs0YSxZQUFMLENBQWtCeUIsTUFBbEIsQ0FBeUIsQ0FBekIsRUFBNEIsS0FBS3pCLFlBQUwsQ0FBa0Jqa0IsTUFBOUM7QUFDQSxXQUFPLEtBQUswaUIsT0FBWjtBQUNELEc7O2dCQUVEaUQscUIsa0NBQXNCeEgsRyxFQUFLO0FBQ3pCLFNBQUs2RixlQUFMLEdBQXVCN0YsR0FBdkI7QUFDRCxHOztnQkFFRHlILGUsNEJBQWdCQyxFLEVBQUk7QUFDbEIsU0FBS2IsWUFBTCxHQUFvQmEsRUFBcEI7QUFDRCxHOztnQkFFRFQsVywwQkFBYztBQUNaLFdBQU8sS0FBSzFDLE9BQUwsR0FBZSxLQUFLdUMsWUFBTCxHQUFtQixLQUFHLEtBQUt2QyxPQUFMLENBQWFrQyxRQUFiLEdBQXNCLENBQXpCLENBQW5CLEdBQWdELEtBQUtsQyxPQUFMLENBQWFrQyxRQUE1RSxHQUF1RjNaLFNBQTlGO0FBQ0QsRzs7TUFFTWlhLFcsd0JBQVl4VyxJLEVBQU07QUFDdkIsV0FBTztBQUNMbkcsYUFBT21HLEtBQUt6QyxJQUFMLENBQVUsQ0FBVixJQUFheUMsS0FBS3pDLElBQUwsQ0FBVSxDQUFWLENBRGY7QUFFTHpELGNBQVFrRyxLQUFLekMsSUFBTCxDQUFVLENBQVYsSUFBYXlDLEtBQUt6QyxJQUFMLENBQVUsQ0FBVjtBQUZoQixLQUFQO0FBSUQsRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Z0JBRUU2WixVLHVCQUFXM0gsRyxFQUFLO0FBQ2QsUUFBRyxLQUFLdUUsT0FBUixFQUFpQjtBQUNmdkUsVUFBSSxLQUFLdUUsT0FBVDtBQUNELEtBRkQsTUFHSztBQUNILFdBQUt1QixZQUFMLENBQWtCOWlCLElBQWxCLENBQXVCZ2QsR0FBdkI7QUFDRDtBQUNGLEc7Ozs7O2tCQWpJa0I0RixHOzs7Ozs7Ozs7OztBQ1pyQjs7OztJQUVxQmdDLHFCO3dCQUVaQyxXLHdCQUFZckssTyxFQUFTQyxPLEVBQVM7QUFDbkMsV0FBT0QsV0FBV0MsT0FBWCxHQUFvQkQsUUFBUS9QLE1BQVIsS0FBaUJnUSxRQUFRaFEsTUFBN0MsR0FBcUQsS0FBNUQ7QUFDRCxHOzt3QkFFTXFhLG1CLGdDQUFvQnRLLE8sRUFBU0MsTyxFQUFTO0FBQzNDLFdBQU9ELFdBQVdDLE9BQVgsR0FBb0JELFFBQVEvUCxNQUFSLEtBQWlCZ1EsUUFBUWhRLE1BQXpCLElBQW1DK1AsUUFBUXVLLElBQVIsQ0FBYUMsYUFBYixLQUE2QnZLLFFBQVFzSyxJQUFSLENBQWFDLGFBQWpHLEdBQWdILEtBQXZIO0FBQ0QsRzs7QUFFRCxpQ0FBWUMsV0FBWixFQUF5RTtBQUFBLFFBQWhEM1osSUFBZ0QsdUVBQTNDc1osc0JBQXNCRSxtQkFBcUI7O0FBQUE7O0FBQ3ZFLFNBQUs1VyxNQUFMLEdBQWMrVyxXQUFkO0FBQ0EsU0FBS0MsTUFBTCxHQUFjLElBQUlub0IsWUFBTThJLE9BQVYsRUFBZDtBQUNBLFNBQUtzZixTQUFMLEdBQWlCLEtBQUtqWCxNQUFMLENBQVlpWCxTQUE3QjtBQUNBLFNBQUtoTixNQUFMLEdBQWMsS0FBS2pLLE1BQUwsQ0FBWWlLLE1BQTFCO0FBQ0EsU0FBS2lOLE1BQUwsR0FBYyxFQUFkO0FBQ0EsU0FBSzlaLElBQUwsR0FBWUEsSUFBWjtBQUNEOztrQ0FFRCtaLFEscUJBQVNoVixLLEVBQU87QUFDZCxTQUFLK1UsTUFBTCxDQUFZcGxCLElBQVosQ0FBaUJxUSxLQUFqQjtBQUNELEc7O2tDQUVEaVYsVyx3QkFBWWpWLEssRUFBTztBQUNqQixRQUFNdFEsSUFBSSxLQUFLcWxCLE1BQUwsQ0FBWS9qQixPQUFaLENBQW9CZ1AsS0FBcEIsQ0FBVjtBQUNBLFFBQUcsQ0FBQ3RRLENBQUosRUFBTztBQUNMLFdBQUtxbEIsTUFBTCxDQUFZYixNQUFaLENBQW1CeGtCLENBQW5CLEVBQXNCLENBQXRCO0FBQ0Q7QUFDRixHOztrQ0FFRG1MLFMsc0JBQVVSLEMsRUFBRztBQUNYLFNBQUs2YSxrQkFBTCxDQUF3QjdhLENBQXhCO0FBQ0EsU0FBS3lhLFNBQUwsQ0FBZUssYUFBZixDQUE2QixLQUFLTixNQUFsQyxFQUEwQyxLQUFLL00sTUFBL0M7QUFDQSxRQUFNc04sYUFBYSxLQUFLTixTQUFMLENBQWVPLGdCQUFmLENBQWdDLEtBQUtOLE1BQXJDLENBQW5CO0FBQ0EsV0FBT0ssV0FBVyxDQUFYLENBQVA7QUFDRCxHOzs7OztrQkFuQ2tCYixxQjs7Ozs7Ozs7Ozs7QUNGckI7Ozs7Ozs7O0lBRXFCNVQsVTs7Ozs7YUFFWjJVLFkseUJBQWFoVixRLEVBQVVpVixPLEVBQVN6WCxLLEVBQU9DLEksRUFBTXlYLFMsRUFBVztBQUM3RCxRQUFNL2xCLElBQUksRUFBVjtBQUNBLFNBQUksSUFBSUMsSUFBSW9PLEtBQVosRUFBbUJwTyxJQUFFcU8sSUFBckIsRUFBMkIsRUFBRXJPLENBQTdCLEVBQWdDO0FBQzlCLFVBQU0rbEIsTUFBTSxDQUFDRixRQUFRN2xCLENBQVIsRUFBVzlCLENBQVosRUFBYzJuQixRQUFRN2xCLENBQVIsRUFBVzVCLENBQXpCLEVBQTJCeW5CLFFBQVE3bEIsQ0FBUixFQUFXK0MsQ0FBdEMsQ0FBWjtBQUNBLFdBQUksSUFBSTdDLElBQUksQ0FBWixFQUFlQSxJQUFFNmxCLElBQUlqbkIsTUFBckIsRUFBNkIsRUFBRW9CLENBQS9CLEVBQWtDO0FBQ2hDLFlBQUcsQ0FBQ0gsRUFBRWdtQixJQUFJN2xCLENBQUosQ0FBRixDQUFKLEVBQWU7QUFDYkgsWUFBRWdtQixJQUFJN2xCLENBQUosQ0FBRixJQUFZNGxCLFVBQVVsVixTQUFTbVYsSUFBSTdsQixDQUFKLENBQVQsQ0FBVixDQUFaO0FBQ0Q7QUFDRjtBQUNGO0FBQ0QsV0FBT0gsQ0FBUDtBQUNELEc7O2FBRU1pbUIsb0IsaUNBQXFCM1csUSxFQUFVRyxLLEVBQU87QUFDM0MsUUFBTXlXLE1BQU0sQ0FDQWhWLFdBQVcyVSxZQUFYLENBQXdCdlcsU0FBU3VCLFFBQWpDLEVBQTJDdkIsU0FBU0csS0FBcEQsRUFBMkQsQ0FBM0QsRUFBOERBLE1BQU0sQ0FBTixDQUE5RCxFQUF3RSxVQUFDdE8sQ0FBRDtBQUFBLGFBQUssSUFBSWxFLE1BQU04SSxPQUFWLENBQWtCNUUsRUFBRTlCLENBQXBCLEVBQXVCLElBQUU4QixFQUFFb0IsQ0FBM0IsQ0FBTDtBQUFBLEtBQXhFLENBREEsRUFFQTJPLFdBQVcyVSxZQUFYLENBQXdCdlcsU0FBU3VCLFFBQWpDLEVBQTJDdkIsU0FBU0csS0FBcEQsRUFBMkRBLE1BQU0sQ0FBTixDQUEzRCxFQUFxRUEsTUFBTSxDQUFOLENBQXJFLEVBQStFLFVBQUN0TyxDQUFEO0FBQUEsYUFBSyxJQUFJbEUsTUFBTThJLE9BQVYsQ0FBa0IsSUFBRTVFLEVBQUU5QixDQUF0QixFQUF5QixJQUFFOEIsRUFBRW9CLENBQTdCLENBQUw7QUFBQSxLQUEvRSxDQUZBLEVBR0EyTyxXQUFXMlUsWUFBWCxDQUF3QnZXLFNBQVN1QixRQUFqQyxFQUEyQ3ZCLFNBQVNHLEtBQXBELEVBQTJEQSxNQUFNLENBQU4sQ0FBM0QsRUFBcUVBLE1BQU0sQ0FBTixDQUFyRSxFQUErRSxVQUFDdE8sQ0FBRDtBQUFBLGFBQUssSUFBSWxFLE1BQU04SSxPQUFWLENBQWtCNUUsRUFBRTlCLENBQXBCLEVBQXVCOEIsRUFBRXRDLENBQXpCLENBQUw7QUFBQSxLQUEvRSxDQUhBLEVBSUFxUyxXQUFXMlUsWUFBWCxDQUF3QnZXLFNBQVN1QixRQUFqQyxFQUEyQ3ZCLFNBQVNHLEtBQXBELEVBQTJEQSxNQUFNLENBQU4sQ0FBM0QsRUFBcUVBLE1BQU0sQ0FBTixDQUFyRSxFQUErRSxVQUFDdE8sQ0FBRDtBQUFBLGFBQUssSUFBSWxFLE1BQU04SSxPQUFWLENBQWtCLElBQUU1RSxFQUFFOUIsQ0FBdEIsRUFBeUI4QixFQUFFdEMsQ0FBM0IsQ0FBTDtBQUFBLEtBQS9FLENBSkEsRUFLQXFTLFdBQVcyVSxZQUFYLENBQXdCdlcsU0FBU3VCLFFBQWpDLEVBQTJDdkIsU0FBU0csS0FBcEQsRUFBMkRBLE1BQU0sQ0FBTixDQUEzRCxFQUFxRUEsTUFBTSxDQUFOLENBQXJFLEVBQStFLFVBQUN0TyxDQUFEO0FBQUEsYUFBSyxJQUFJbEUsTUFBTThJLE9BQVYsQ0FBa0I1RSxFQUFFb0IsQ0FBcEIsRUFBdUJwQixFQUFFdEMsQ0FBekIsQ0FBTDtBQUFBLEtBQS9FLENBTEEsRUFNQXFTLFdBQVcyVSxZQUFYLENBQXdCdlcsU0FBU3VCLFFBQWpDLEVBQTJDdkIsU0FBU0csS0FBcEQsRUFBMkRBLE1BQU0sQ0FBTixDQUEzRCxFQUFxRUgsU0FBU0csS0FBVCxDQUFlMVEsTUFBcEYsRUFBNEYsVUFBQ29DLENBQUQ7QUFBQSxhQUFLLElBQUlsRSxNQUFNOEksT0FBVixDQUFrQixJQUFFNUUsRUFBRW9CLENBQXRCLEVBQXlCcEIsRUFBRXRDLENBQTNCLENBQUw7QUFBQSxLQUE1RixDQU5BLENBQVo7O0FBU0EsUUFBSXNuQixPQUFPLENBQVg7QUFDQSxTQUFJLElBQUlsbUIsSUFBSSxDQUFaLEVBQWVBLElBQUVxUCxTQUFTRyxLQUFULENBQWUxUSxNQUFoQyxFQUF3QyxFQUFFa0IsQ0FBMUMsRUFBNkM7QUFDM0NrbUIsY0FBUTFXLE1BQU0wVyxJQUFOLE1BQWdCbG1CLENBQXhCO0FBQ0EsVUFBTTJDLElBQUkwTSxTQUFTRyxLQUFULENBQWV4UCxDQUFmLENBQVY7QUFDQTJDLFFBQUVzaUIsYUFBRixHQUFrQmlCLElBQWxCO0FBQ0E3VyxlQUFTOFcsYUFBVCxDQUF1QixDQUF2QixFQUEwQm5tQixDQUExQixJQUErQixDQUFDaW1CLElBQUlDLElBQUosRUFBVXZqQixFQUFFekUsQ0FBWixDQUFELEVBQWlCK25CLElBQUlDLElBQUosRUFBVXZqQixFQUFFdkUsQ0FBWixDQUFqQixFQUFpQzZuQixJQUFJQyxJQUFKLEVBQVV2akIsRUFBRUksQ0FBWixDQUFqQyxDQUEvQjtBQUNEO0FBQ0YsRzs7YUFFTW1PLFkseUJBQWFoUSxDLEVBQUc2QixDLEVBQUdvTyxJLEVBQU07QUFDOUIsUUFBTVQsU0FBUyxJQUFJMVQsTUFBTW1ULElBQVYsQ0FBZSxJQUFJblQsTUFBTW9wQixjQUFWLENBQXlCalYsSUFBekIsQ0FBZixFQUErQyxJQUFJblUsTUFBTWdULGlCQUFWLENBQTRCLEVBQUV6SSxPQUFPeEUsQ0FBVCxFQUE1QixDQUEvQyxDQUFmO0FBQ0EyTixXQUFPc0UsUUFBUCxDQUFnQjNTLEdBQWhCLENBQW9CbkIsRUFBRTlCLENBQXRCLEVBQXdCOEIsRUFBRXRDLENBQTFCLEVBQTRCc0MsRUFBRW9CLENBQTlCO0FBQ0EsV0FBT29PLE1BQVA7QUFDRCxHOzthQUVNMlYsVSx1QkFBV2hYLFEsRUFBVXBOLEUsRUFBSW1NLEssRUFBT0MsSSxFQUFNO0FBQzNDLFFBQU1oTCxNQUFNLEVBQVo7QUFDQSx5QkFBYXBCLEVBQWIsa0hBQWlCO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQSxVQUFUZixDQUFTOztBQUNmLFVBQUlvbEIsUUFBUSxLQUFaO0FBQ0EsV0FBSSxJQUFJdG1CLElBQUVvTyxLQUFWLEVBQWlCcE8sSUFBRXFPLElBQUYsSUFBVSxDQUFDaVksS0FBNUIsRUFBbUMsRUFBRXRtQixDQUFyQyxFQUF3QztBQUN0QyxZQUFNNkUsTUFBTXdLLFNBQVM4VyxhQUFULENBQXVCLENBQXZCLEVBQTBCbm1CLENBQTFCLENBQVo7QUFDQSxZQUFHakMsd0JBQWNxRyxnQkFBZCxDQUErQlMsR0FBL0IsRUFBb0MzRCxDQUFwQyxDQUFILEVBQTJDO0FBQ3pDbUMsY0FBSXBELElBQUosQ0FBUztBQUNQNkUsbUJBQU8vRyx3QkFBYzZHLGtCQUFkLENBQWlDQyxHQUFqQyxFQUFzQzNELENBQXRDLENBREE7QUFFUGxCO0FBRk8sV0FBVDtBQUlBc21CLGtCQUFRLElBQVI7QUFDRDtBQUNGO0FBQ0QsVUFBRyxDQUFDQSxLQUFKLEVBQVc7QUFDVG5rQixnQkFBUXVhLEtBQVIsQ0FBYyxXQUFkO0FBQ0FyWixZQUFJcEQsSUFBSixDQUFTOEosU0FBVDtBQUNEO0FBQ0Y7QUFDRCxXQUFPMUcsR0FBUDtBQUNELEc7O2FBRU1rakIsb0IsaUNBQXFCbFgsUSxFQUFVcE4sRSxFQUFJbU0sSyxFQUFPQyxJLEVBQU07QUFDckQsUUFBTWhMLE1BQU0sRUFBWjtBQUNBLFNBQUksSUFBSXJELElBQUVvTyxLQUFWLEVBQWlCcE8sSUFBRXFPLElBQW5CLEVBQXlCLEVBQUVyTyxDQUEzQixFQUE4QjtBQUM1QixVQUFNNkUsTUFBTXdLLFNBQVM4VyxhQUFULENBQXVCLENBQXZCLEVBQTBCbm1CLENBQTFCLENBQVo7QUFBQSxVQUEwQzJDLElBQUkwTSxTQUFTRyxLQUFULENBQWV4UCxDQUFmLENBQTlDO0FBQUEsVUFBaUVnUyxLQUFLLENBQUNyUCxFQUFFekUsQ0FBSCxFQUFNeUUsRUFBRXZFLENBQVIsRUFBV3VFLEVBQUVJLENBQWIsQ0FBdEU7QUFDQSxXQUFJLElBQUk3QyxJQUFFLENBQVYsRUFBYUEsSUFBRTJFLElBQUkvRixNQUFuQixFQUEyQixFQUFFb0IsQ0FBN0IsRUFBZ0M7QUFDOUIsWUFBR21ELElBQUkyTyxHQUFHOVIsQ0FBSCxDQUFKLE1BQWE2SixTQUFiLElBQTBCaE0sd0JBQWN5RixZQUFkLENBQTJCdkIsRUFBM0IsRUFBK0I0QyxJQUFJM0UsQ0FBSixDQUEvQixDQUE3QixFQUFxRTtBQUNuRW1ELGNBQUkyTyxHQUFHOVIsQ0FBSCxDQUFKLElBQWE7QUFDWGdCLGVBQUcyRCxJQUFJM0UsQ0FBSixDQURRO0FBRVhGLGVBQUdnUyxHQUFHOVIsQ0FBSCxDQUZRO0FBR1h3QyxlQUFHQyxFQUFFNmpCLGFBQUYsQ0FBZ0J0bUIsQ0FBaEI7QUFIUSxXQUFiO0FBS0Q7QUFDRjtBQUNGO0FBQ0QsV0FBT3dPLE9BQU8rWCxNQUFQLENBQWNwakIsR0FBZCxDQUFQO0FBQ0QsRzs7Ozs7a0JBN0VrQjROLFU7Ozs7Ozs7Ozs7Ozs7SUNEQXlWLE07Ozs7O1NBRVpuYixJLGlCQUFLa1AsTyxFQUFTQyxPLEVBQVM7QUFDNUIsV0FBT0QsUUFBUStFLE1BQVIsS0FBaUI5RSxRQUFROEUsTUFBaEM7QUFDRCxHOzs7OztrQkFKa0JrSCxNOzs7Ozs7Ozs7OztBQ0RyQjs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7QUFFQS9vQixRQUFFZ3BCLEVBQUYsQ0FBS0MsUUFBTCxHQUFnQixVQUFTQyxPQUFULEVBQWtCO0FBQ2hDLE1BQU0vTCxRQUFRO0FBQ1ozUyxXQURZLHFCQUNGO0FBQ1IsVUFBRyxLQUFLOEYsS0FBUixFQUFlO0FBQ2IsU0FBQzZNLE1BQU1nTSxlQUFQLElBQTBCaE0sTUFBTWdNLGVBQU4sQ0FBc0IzZSxPQUF0QixFQUExQjtBQUNBLGVBQU8yUyxNQUFNZ00sZUFBYjtBQUNBaE0sY0FBTWlNLE1BQU4sQ0FBYTVlLE9BQWI7QUFDQSxlQUFPMlMsTUFBTWlNLE1BQWI7QUFDQWpNLGNBQU1rTSxPQUFOLENBQWM3ZSxPQUFkO0FBQ0EsZUFBTzJTLE1BQU1rTSxPQUFiO0FBQ0FsTSxjQUFNbU0sVUFBTixDQUFpQjllLE9BQWpCO0FBQ0EsZUFBTzJTLE1BQU1tTSxVQUFiO0FBQ0EsU0FBQ25NLE1BQU1vTSxTQUFQLElBQW9CcE0sTUFBTW9NLFNBQU4sQ0FBZ0IvZSxPQUFoQixFQUFwQjtBQUNBLGVBQU8yUyxNQUFNb00sU0FBYjtBQUNBcE0sY0FBTXFNLElBQU4sQ0FBV2hmLE9BQVg7QUFDQSxlQUFPMlMsTUFBTXFNLElBQWI7QUFDQXJNLGNBQU1zTSxXQUFOLENBQWtCamYsT0FBbEI7QUFDQSxlQUFPMlMsTUFBTXNNLFdBQWI7QUFDQXRNLGNBQU11TSxJQUFOLENBQVdsZixPQUFYO0FBQ0EsZUFBTzJTLE1BQU11TSxJQUFiO0FBQ0F2TSxjQUFNd00sWUFBTixDQUFtQm5mLE9BQW5CO0FBQ0EsZUFBTzJTLE1BQU13TSxZQUFiO0FBQ0EsZUFBT3hNLE1BQU15TSxXQUFiO0FBQ0F6TSxjQUFNM00sTUFBTixDQUFhaEcsT0FBYjtBQUNBLGVBQU8yUyxNQUFNM00sTUFBYjtBQUNBMk0sY0FBTS9QLElBQU4sQ0FBVzVDLE9BQVg7QUFDQSxlQUFPMlMsTUFBTS9QLElBQWI7QUFDQSxlQUFPK1AsTUFBTTNTLE9BQWI7QUFDRCxPQXpCRCxNQTBCSztBQUNILGFBQUtxZixjQUFMLEdBQXNCLElBQXRCO0FBQ0Q7QUFDRjtBQS9CVyxHQUFkO0FBaUNBWCx5QkFBY0EsT0FBZDtBQUNBLE1BQU1ZLGtCQUFrQixLQUFLM29CLE1BQUwsR0FBYSxLQUFLLENBQUwsQ0FBYixHQUFzQixhQUFFLE9BQUYsRUFBV29kLFFBQVgsQ0FBb0IsTUFBcEIsQ0FBOUM7QUFDQSxNQUFHMkssUUFBUWEsa0JBQVgsRUFBK0I7QUFDN0J2RywwQkFBWVEsT0FBWixDQUFvQjhGLGVBQXBCO0FBQ0Q7QUFDRDNNLFFBQU0vUCxJQUFOLEdBQWEsSUFBSTRjLGtCQUFKLENBQWFGLGVBQWIsRUFBOEIsWUFBSztBQUM5QyxRQUFHLENBQUNHLG1CQUFTQyxLQUFiLEVBQW9CO0FBQ2xCRCx5QkFBU0Usa0JBQVQsQ0FBNEIsRUFBQ25NLFFBQVFiLE1BQU0vUCxJQUFOLENBQVdnZCxPQUFYLEVBQVQsRUFBNUI7QUFDRCxLQUZELE1BR0s7QUFDSGpOLFlBQU1rTixXQUFOLEdBQW9CLElBQUlDLDJCQUFKLENBQXNCbk4sTUFBTS9QLElBQTVCLEVBQWtDLElBQWxDLEVBQXdDLFVBQUNtZCxRQUFEO0FBQUEsZUFBYUEsYUFBVyxDQUFYLEdBQWMsY0FBRywyQ0FBSCxDQUFkLEdBQStELGNBQUcsaUJBQUgsSUFBc0IsR0FBdEIsR0FBMEJBLFFBQTFCLEdBQW1DLEdBQS9HO0FBQUEsT0FBeEMsQ0FBcEI7QUFDQXBOLFlBQU0zTSxNQUFOLEdBQWUsSUFBSWdhLHFCQUFKLENBQWdCck4sTUFBTS9QLElBQU4sQ0FBV3FkLFlBQVgsR0FBMEJDLGFBQTFCLENBQXdDQyxXQUF4RCxFQUFxRXhOLE1BQU0vUCxJQUFOLENBQVdxZCxZQUFYLEdBQTBCQyxhQUEvRixFQUE4R3ZOLE1BQU0vUCxJQUFOLENBQVdnZCxPQUFYLEVBQTlHLENBQWY7QUFDQWpOLFlBQU15TSxXQUFOLEdBQW9CLFVBQUN6YyxLQUFELEVBQVE2QyxNQUFSLEVBQWdCSyxZQUFoQixFQUFnQztBQUNsRGxELGNBQU1xTSxhQUFOLGdCQUNLck0sTUFBTXFNLGFBRFg7QUFFRTJEO0FBRkY7QUFJQSxZQUFHK0wsUUFBUTBCLGtCQUFYLEVBQStCO0FBQzdCemQsa0JBQVErYixRQUFRMEIsa0JBQVIsQ0FBMkJ6ZCxLQUEzQixDQUFSO0FBQ0Q7QUFDRGdRLGNBQU11TSxJQUFOLEdBQWEsSUFBSW1CLGNBQUosQ0FBUzFOLE1BQU0zTSxNQUFmLEVBQXVCUixNQUF2QixFQUErQkssWUFBL0IsRUFBNkNsRCxLQUE3QyxDQUFiO0FBQ0FnUSxjQUFNc00sV0FBTixHQUFvQixJQUFJcUIscUJBQUosQ0FBZ0IzTixNQUFNM00sTUFBdEIsRUFBOEIyTSxNQUFNdU0sSUFBcEMsRUFBMEMsQ0FBQ1IsUUFBUTZCLFFBQVIsSUFBb0IsRUFBckIsRUFBeUJDLFVBQW5FLENBQXBCO0FBQ0E3TixjQUFNa04sV0FBTixDQUFrQjdmLE9BQWxCO0FBQ0EsZUFBTzJTLE1BQU1rTixXQUFiO0FBQ0FsTixjQUFNcU0sSUFBTixHQUFhLElBQUl5Qix3QkFBSixDQUFtQjlOLE1BQU11TSxJQUF6QixFQUErQnZNLE1BQU0vUCxJQUFyQyxFQUEyQzhiLFFBQVFnQyxhQUFuRCxDQUFiO0FBQ0EvTixjQUFNdU0sSUFBTixDQUFXeUIsV0FBWCxDQUF1QixVQUFDQyxDQUFELEVBQU07QUFDM0JBLFlBQUVwc0IsTUFBRixHQUFXb3NCLEVBQUVwckIsQ0FBRixHQUFNQSxPQUFqQjtBQUNBb3JCLFlBQUUxQixJQUFGLEdBQVN2TSxNQUFNdU0sSUFBZjtBQUNBMEIsWUFBRUMsUUFBRixHQUFhbE8sTUFBTXFNLElBQW5CO0FBQ0EsY0FBR3JjLE1BQU0yQixRQUFULEVBQW1CO0FBQ2pCM0Isa0JBQU0yQixRQUFOLENBQWVzYyxDQUFmO0FBQ0Q7QUFDRixTQVBEO0FBUUFqTyxjQUFNL1AsSUFBTixDQUFXa2UsVUFBWCxDQUFzQm5PLE1BQU1xTSxJQUE1QjtBQUNBck0sY0FBTXFNLElBQU4sQ0FBVytCLFVBQVgsQ0FBc0JwTyxNQUFNc00sV0FBNUI7QUFDQSxZQUFNN2IsT0FBT3lDLGFBQWEsQ0FBYixDQUFiOztBQUVBOE0sY0FBTXFPLE1BQU4sR0FBZSxJQUFJQyxnQkFBSixDQUFXdE8sTUFBTS9QLElBQU4sQ0FBV3NlLGFBQVgsRUFBWCxFQUF1Q3ZPLE1BQU11TSxJQUFOLENBQVdpQyxRQUFYLEVBQXZDLENBQWY7QUFDQXhPLGNBQU1xTyxNQUFOLENBQWFJLE9BQWIsR0FBdUJ6TyxNQUFNdU0sSUFBTixDQUFXbUMsUUFBWCxDQUFvQkMsSUFBcEIsQ0FBeUIzTyxNQUFNdU0sSUFBL0IsQ0FBdkI7QUFDQXZNLGNBQU11TSxJQUFOLENBQVc3UCxnQkFBWCxDQUE0QixlQUE1QixFQUE2QyxVQUFDN00sQ0FBRCxFQUFNO0FBQ2pEbVEsZ0JBQU1xTyxNQUFOLENBQWFPLFVBQWIsQ0FBd0IvZSxFQUFFZ2YsT0FBMUIsRUFBbUNoZixFQUFFaWYsUUFBckM7QUFDRCxTQUZEOztBQUlBOU8sY0FBTW1NLFVBQU4sR0FBbUIsSUFBSTRDLG9CQUFKLENBQWUvTyxNQUFNM00sTUFBckIsRUFBNkIyTSxNQUFNL1AsSUFBTixDQUFXK2UsaUJBQVgsRUFBN0IsRUFBNkQ5YixZQUE3RCxFQUEyRSxLQUFHTCxTQUFPLENBQVYsQ0FBM0UsRUFBeUYsRUFBQ29jLE9BQU9qZixNQUFNekQsS0FBTixHQUFZeUQsTUFBTXhELE1BQTFCLEVBQXpGLENBQW5CO0FBQ0F3VCxjQUFNa00sT0FBTixHQUFnQixJQUFJZ0QsdUJBQUosQ0FBa0JsUCxNQUFNL1AsSUFBeEIsRUFBOEIrUCxNQUFNcU0sSUFBcEMsQ0FBaEI7QUFDQXJNLGNBQU1rTSxPQUFOLENBQWNpRCxhQUFkLENBQTRCblAsTUFBTW1NLFVBQWxDO0FBQ0FuTSxjQUFNa00sT0FBTixDQUFja0QsU0FBZCxDQUF3QnBQLE1BQU1xTyxNQUE5QjtBQUNBck8sY0FBTXFNLElBQU4sQ0FBV2dELFVBQVgsQ0FBc0JyUCxNQUFNa00sT0FBNUI7QUFDQWxNLGNBQU0vUCxJQUFOLENBQVdrZSxVQUFYLENBQXNCbk8sTUFBTWtNLE9BQTVCOztBQUVBLFlBQUd6YixLQUFLWCxJQUFMLEtBQVksS0FBZixFQUFzQjtBQUNwQmtRLGdCQUFNZ00sZUFBTixHQUF3QixJQUFJc0QseUJBQUosQ0FBb0I3ZSxLQUFLb0IsR0FBekIsRUFBOEJtTyxNQUFNcU0sSUFBcEMsRUFBMENyTSxNQUFNM00sTUFBTixDQUFhekcsT0FBdkQsQ0FBeEI7QUFDQW9ULGdCQUFNdU0sSUFBTixDQUFXN1AsZ0JBQVgsQ0FBNEIsZUFBNUIsRUFBNkNzRCxNQUFNZ00sZUFBTixDQUFzQnVELFdBQXRCLENBQWtDWixJQUFsQyxDQUF1QzNPLE1BQU1nTSxlQUE3QyxDQUE3QztBQUNBdmIsZUFBS29CLEdBQUwsQ0FBU2lZLFVBQVQsQ0FBb0IsVUFBQ3BELE9BQUQsRUFBWTtBQUM5QkEsb0JBQVE4SSxVQUFSLEdBQ0VyTCxJQURGLENBQ08sVUFBQ3NMLE9BQUQsRUFBWTtBQUNmelAsb0JBQU1vTSxTQUFOLEdBQWtCLElBQUlzRCxtQkFBSixDQUFjMVAsTUFBTS9QLElBQU4sQ0FBVzBmLGdCQUFYLEVBQWQsRUFBNkNGLE9BQTdDLENBQWxCO0FBQ0F6UCxvQkFBTWtNLE9BQU4sQ0FBYzBELFlBQWQsQ0FBMkI1UCxNQUFNb00sU0FBakMsRUFBNEMzYixLQUFLb0IsR0FBakQ7QUFDRCxhQUpIO0FBS0QsV0FORDtBQU9BLGNBQUdrYSxRQUFROEQsUUFBUixJQUFvQjlELFFBQVE4RCxRQUFSLENBQWlCbkosT0FBeEMsRUFBaUQ7QUFDL0MxRyxrQkFBTWdNLGVBQU4sQ0FBc0I4RCxVQUF0QixDQUFpQy9ELFFBQVE4RCxRQUFSLENBQWlCbkosT0FBbEQ7QUFDRDtBQUNGOztBQUVEMUcsY0FBTWlNLE1BQU4sR0FBZSxJQUFJOEQsMEJBQUosQ0FBcUJoRSxRQUFRNkIsUUFBN0IsQ0FBZjtBQUNBNU4sY0FBTXFNLElBQU4sQ0FBVzJELFNBQVgsQ0FBcUJoUSxNQUFNaU0sTUFBM0I7QUFDQWpNLGNBQU1pTSxNQUFOLENBQWFnRSxjQUFiLENBQTRCalEsTUFBTXFNLElBQWxDOztBQUVBck0sY0FBTTdNLEtBQU4sR0FBYyxJQUFkO0FBQ0EsWUFBSStjLHVCQUFKLENBQWtCbFEsTUFBTTNNLE1BQXhCLEVBQWdDMk0sTUFBTXFNLElBQXRDLEVBQTRDTixRQUFRb0UsY0FBcEQsRUFBb0U5aUIsT0FBcEU7QUFDQSxZQUFHMGUsUUFBUTVZLEtBQVgsRUFBa0I7QUFDaEI0WSxrQkFBUTVZLEtBQVIsQ0FBYzZNLEtBQWQ7QUFDRDtBQUNELFlBQUdBLE1BQU0wTSxjQUFULEVBQXlCO0FBQ3ZCMU0sZ0JBQU0zUyxPQUFOO0FBQ0Q7QUFDRixPQWpFRDtBQWtFQSxVQUFHMGUsUUFBUXFFLEdBQVgsRUFBZ0I7QUFDZHBRLGNBQU13TSxZQUFOLEdBQXFCLElBQUk2RCw2QkFBSixDQUF3QnRFLFFBQVFxRSxHQUFoQyxFQUFxQ3BRLE1BQU15TSxXQUEzQyxFQUF3RFYsUUFBUXVFLFNBQWhFLENBQXJCO0FBQ0F0USxjQUFNd00sWUFBTixDQUFtQjRELEdBQW5CLENBQXVCekcscUJBQXZCLENBQTZDM0osTUFBTWtOLFdBQU4sQ0FBa0JxRCxXQUFsQixDQUE4QjVCLElBQTlCLENBQW1DM08sTUFBTWtOLFdBQXpDLENBQTdDO0FBQ0EsWUFBR25CLFFBQVFuSyxLQUFYLEVBQWtCO0FBQ2hCNUIsZ0JBQU13TSxZQUFOLENBQW1CNEQsR0FBbkIsQ0FBdUJ4RyxlQUF2QixDQUF1Q21DLFFBQVFuSyxLQUEvQztBQUNEO0FBQ0YsT0FORCxNQU9LLElBQUdtSyxRQUFRN1ksWUFBWCxFQUF5QjtBQUM1QjhNLGNBQU13TSxZQUFOLEdBQXFCLElBQUlnRSw2QkFBSixDQUF3QnhRLE1BQU0zTSxNQUE5QixFQUFzQzBZLFFBQVE3WSxZQUE5QyxFQUE0RDZZLFFBQVFuWixLQUFwRSxFQUEyRW9OLE1BQU15TSxXQUFqRixFQUE4RlYsUUFBUXVFLFNBQXRHLENBQXJCO0FBQ0QsT0FGSSxNQUdBO0FBQ0h0USxjQUFNd00sWUFBTixHQUFxQixJQUFJZ0UsNkJBQUosQ0FBd0J4USxNQUFNM00sTUFBOUIsRUFBc0NxYSxlQUFLeGEsWUFBM0MsRUFBeUQsQ0FBekQsRUFBNEQ4TSxNQUFNeU0sV0FBbEUsRUFBK0VWLFFBQVF1RSxTQUF2RixDQUFyQjtBQUNEO0FBQ0Y7QUFDRixHQXZGWSxFQXVGVnZFLFFBQVE2QixRQXZGRSxDQUFiO0FBd0ZBLFNBQU81TixLQUFQO0FBQ0QsQ0FoSUQ7O0FBa0lBLGFBQUUsWUFBSztBQUNMLE1BQUl5USxhQUFhLGFBQUUsc0JBQUYsQ0FBakI7QUFDQSxPQUFJLElBQUl2ckIsSUFBSSxDQUFaLEVBQWVBLElBQUV1ckIsV0FBV3pzQixNQUE1QixFQUFvQyxFQUFFa0IsQ0FBdEMsRUFBeUM7QUFDdkMsUUFBTXFjLGFBQWEsYUFBRWtQLFdBQVd2ckIsQ0FBWCxDQUFGLENBQW5CO0FBQUEsUUFBcUMyTSxNQUFNMFAsV0FBV21QLElBQVgsQ0FBZ0IsS0FBaEIsQ0FBM0M7QUFDQSxRQUFHLENBQUMsQ0FBQzdlLEdBQUwsRUFBVTtBQUNSMFAsaUJBQVd1SyxRQUFYLENBQW9CLEVBQUNzRSxLQUFLdmUsR0FBTixFQUFwQjtBQUNEO0FBQ0Y7QUFDRixDQVJEOztBQVVBalEsT0FBT0MsTUFBUCxHQUFnQkQsT0FBT2lCLENBQVAsR0FBV0EsT0FBM0IsQzs7Ozs7Ozs7O0FDL0pBLElBQUksQ0FBQ21ULE1BQU0yYSxTQUFOLENBQWdCL2lCLElBQXJCLEVBQTJCO0FBQ3pCb0ksUUFBTTJhLFNBQU4sQ0FBZ0IvaUIsSUFBaEIsR0FBdUIsVUFBUzRRLEtBQVQsRUFBZ0I7O0FBRXJDO0FBQ0EsUUFBSSxRQUFRLElBQVosRUFBa0I7QUFDaEIsWUFBTSxJQUFJb1MsU0FBSixDQUFjLDZCQUFkLENBQU47QUFDRDs7QUFFRCxRQUFJQyxJQUFJamQsT0FBTyxJQUFQLENBQVI7O0FBRUE7QUFDQSxRQUFJak0sTUFBTWtwQixFQUFFN3NCLE1BQUYsS0FBYSxDQUF2Qjs7QUFFQTtBQUNBLFFBQUk4c0IsUUFBUUMsVUFBVSxDQUFWLENBQVo7QUFDQSxRQUFJQyxnQkFBZ0JGLFNBQVMsQ0FBN0I7O0FBRUE7QUFDQSxRQUFJenJCLElBQUkyckIsZ0JBQWdCLENBQWhCLEdBQ04xcUIsS0FBSzhDLEdBQUwsQ0FBU3pCLE1BQU1xcEIsYUFBZixFQUE4QixDQUE5QixDQURNLEdBRU4xcUIsS0FBSzZDLEdBQUwsQ0FBUzZuQixhQUFULEVBQXdCcnBCLEdBQXhCLENBRkY7O0FBSUE7QUFDQSxRQUFJc3BCLE1BQU1GLFVBQVUsQ0FBVixDQUFWO0FBQ0EsUUFBSUcsY0FBY0QsUUFBUWhpQixTQUFSLEdBQ2hCdEgsR0FEZ0IsR0FDVnNwQixPQUFPLENBRGY7O0FBR0E7QUFDQSxRQUFJRSxRQUFRRCxjQUFjLENBQWQsR0FDVjVxQixLQUFLOEMsR0FBTCxDQUFTekIsTUFBTXVwQixXQUFmLEVBQTRCLENBQTVCLENBRFUsR0FFVjVxQixLQUFLNkMsR0FBTCxDQUFTK25CLFdBQVQsRUFBc0J2cEIsR0FBdEIsQ0FGRjs7QUFJQTtBQUNBLFdBQU90QyxJQUFJOHJCLEtBQVgsRUFBa0I7QUFDaEJOLFFBQUV4ckIsQ0FBRixJQUFPbVosS0FBUDtBQUNBblo7QUFDRDs7QUFFRDtBQUNBLFdBQU93ckIsQ0FBUDtBQUNELEdBdkNEO0FBd0NEOztBQUVELElBQUksQ0FBQzdhLE1BQU0yYSxTQUFOLENBQWdCUyxJQUFyQixFQUEyQjtBQUN6QnhkLFNBQU95ZCxjQUFQLENBQXNCcmIsTUFBTTJhLFNBQTVCLEVBQXVDLE1BQXZDLEVBQStDO0FBQzdDblMsV0FBTyxlQUFTOFMsU0FBVCxFQUFvQjtBQUMxQjs7QUFDQSxVQUFJLFFBQVEsSUFBWixFQUFrQjtBQUNoQixjQUFNLElBQUlWLFNBQUosQ0FBYyxrREFBZCxDQUFOO0FBQ0Q7QUFDRCxVQUFJLE9BQU9VLFNBQVAsS0FBcUIsVUFBekIsRUFBcUM7QUFDbkMsY0FBTSxJQUFJVixTQUFKLENBQWMsOEJBQWQsQ0FBTjtBQUNEO0FBQ0QsVUFBSVcsT0FBTzNkLE9BQU8sSUFBUCxDQUFYO0FBQ0EsVUFBSTVQLFNBQVN1dEIsS0FBS3Z0QixNQUFMLEtBQWdCLENBQTdCO0FBQ0EsVUFBSXd0QixVQUFVVCxVQUFVLENBQVYsQ0FBZDtBQUNBLFVBQUl2UyxLQUFKOztBQUVBLFdBQUssSUFBSXRaLElBQUksQ0FBYixFQUFnQkEsSUFBSWxCLE1BQXBCLEVBQTRCa0IsR0FBNUIsRUFBaUM7QUFDL0JzWixnQkFBUStTLEtBQUtyc0IsQ0FBTCxDQUFSO0FBQ0EsWUFBSW9zQixVQUFVRyxJQUFWLENBQWVELE9BQWYsRUFBd0JoVCxLQUF4QixFQUErQnRaLENBQS9CLEVBQWtDcXNCLElBQWxDLENBQUosRUFBNkM7QUFDM0MsaUJBQU8vUyxLQUFQO0FBQ0Q7QUFDRjtBQUNELGFBQU92UCxTQUFQO0FBQ0E7QUFyQjRDLEdBQS9DO0FBdUJEOztBQUVELElBQUksQ0FBQytHLE1BQU0yYSxTQUFOLENBQWdCZSxTQUFyQixFQUFnQztBQUM5QjFiLFFBQU0yYSxTQUFOLENBQWdCZSxTQUFoQixHQUE0QixVQUFTSixTQUFULEVBQW9CO0FBQzlDLFFBQUksUUFBUSxJQUFaLEVBQWtCO0FBQ2hCLFlBQU0sSUFBSVYsU0FBSixDQUFjLHVEQUFkLENBQU47QUFDRDtBQUNELFFBQUksT0FBT1UsU0FBUCxLQUFxQixVQUF6QixFQUFxQztBQUNuQyxZQUFNLElBQUlWLFNBQUosQ0FBYyw4QkFBZCxDQUFOO0FBQ0Q7QUFDRCxRQUFJVyxPQUFPM2QsT0FBTyxJQUFQLENBQVg7QUFDQSxRQUFJNVAsU0FBU3V0QixLQUFLdnRCLE1BQUwsS0FBZ0IsQ0FBN0I7QUFDQSxRQUFJd3RCLFVBQVVULFVBQVUsQ0FBVixDQUFkO0FBQ0EsUUFBSXZTLEtBQUo7O0FBRUEsU0FBSyxJQUFJdFosSUFBSSxDQUFiLEVBQWdCQSxJQUFJbEIsTUFBcEIsRUFBNEJrQixHQUE1QixFQUFpQztBQUMvQnNaLGNBQVErUyxLQUFLcnNCLENBQUwsQ0FBUjtBQUNBLFVBQUlvc0IsVUFBVUcsSUFBVixDQUFlRCxPQUFmLEVBQXdCaFQsS0FBeEIsRUFBK0J0WixDQUEvQixFQUFrQ3FzQixJQUFsQyxDQUFKLEVBQTZDO0FBQzNDLGVBQU9yc0IsQ0FBUDtBQUNEO0FBQ0Y7QUFDRCxXQUFPLENBQUMsQ0FBUjtBQUNELEdBbkJEO0FBb0JEOztBQUVELElBQUksQ0FBQzBPLE9BQU8rWCxNQUFaLEVBQW9CO0FBQ25CL1gsU0FBTytYLE1BQVAsR0FBZ0IsU0FBU0EsTUFBVCxDQUFnQmtGLENBQWhCLEVBQW1CO0FBQ2xDLFdBQU9qZCxPQUFPQyxJQUFQLENBQVlnZCxDQUFaLEVBQWUvYyxHQUFmLENBQW1CLFVBQUNqSSxJQUFEO0FBQUEsYUFBUWdsQixFQUFFaGxCLElBQUYsQ0FBUjtBQUFBLEtBQW5CLEtBQXVDLEVBQTlDO0FBQ0EsR0FGRDtBQUdBOztBQUVELElBQUcsQ0FBQzhsQixPQUFPQyxNQUFYLEVBQW1CO0FBQ2pCRCxTQUFPQyxNQUFQLEdBQWdCLFVBQVNsdkIsQ0FBVCxFQUFZO0FBQzFCLFdBQU9BLEVBQUU0SSxPQUFGLENBQVUsd0JBQVYsRUFBb0MsTUFBcEMsQ0FBUDtBQUNELEdBRkQ7QUFHRDs7QUFFRCxJQUFHLENBQUN1bUIsT0FBT2xCLFNBQVAsQ0FBaUJtQixVQUFyQixFQUFpQztBQUMvQkQsU0FBT2xCLFNBQVAsQ0FBaUJtQixVQUFqQixHQUE4QixVQUFTekQsTUFBVCxFQUFpQi9pQixPQUFqQixFQUEwQjtBQUN0RCxXQUFPLEtBQUtBLE9BQUwsQ0FBYSxJQUFJcW1CLE1BQUosQ0FBV0EsT0FBT0MsTUFBUCxDQUFjdkQsTUFBZCxDQUFYLEVBQWtDLEdBQWxDLENBQWIsRUFBcUQvaUIsT0FBckQsQ0FBUDtBQUNELEdBRkQ7QUFHRDs7QUFFRCxJQUFHLENBQUN1bUIsT0FBT2xCLFNBQVAsQ0FBaUJ4UCxXQUFyQixFQUFrQztBQUNoQzBRLFNBQU9sQixTQUFQLENBQWlCeFAsV0FBakIsR0FBK0IsWUFBVztBQUN4QyxXQUFPLEtBQUs3VixPQUFMLENBQWEsYUFBYixFQUE0QixFQUE1QixDQUFQO0FBQ0QsR0FGRDtBQUdELEM7Ozs7Ozs7Ozs7Ozs7OztJQ2pIb0I0a0IsYTtBQUVuQix5QkFBWTVqQixPQUFaLEVBQXFCNGhCLFFBQXJCLEVBQXlDO0FBQUEsUUFBVmxlLEtBQVUsdUVBQUosRUFBSTs7QUFBQTs7QUFDdkNBLHlCQUNLQSxLQURMO0FBRUUraEIsZ0JBQVUvaEIsTUFBTStoQixRQUFOLElBQWtCLFdBRjlCO0FBR0VDLGlCQUFXaGlCLE1BQU1naUIsU0FBTixLQUFrQi9pQixTQUFsQixHQUE2QixDQUE3QixHQUFnQ2UsTUFBTWdpQixTQUhuRDtBQUlFQyxhQUFPamlCLE1BQU1paUIsS0FBTixJQUFlO0FBSnhCO0FBTUEsU0FBS2ppQixLQUFMLEdBQWFBLEtBQWI7QUFDQSxTQUFLMUQsT0FBTCxHQUFlQSxPQUFmO0FBQ0EsU0FBSzRoQixRQUFMLEdBQWdCQSxRQUFoQjtBQUNBLFNBQUs2RCxRQUFMLEdBQWdCL2hCLE1BQU0raEIsUUFBdEI7QUFDQSxTQUFLRSxLQUFMLEdBQWFqaUIsTUFBTWlpQixLQUFuQjtBQUNBLFNBQUt2bEIsR0FBTCxHQUFXSixRQUFRSSxHQUFuQjs7QUFFQSxTQUFLQSxHQUFMLENBQVN3bEIsSUFBVCxnQkFDSyxLQUFLeGxCLEdBQUwsQ0FBU3dsQixJQURkO0FBR0EsU0FBS3hsQixHQUFMLENBQVN3bEIsSUFBVCxDQUFjL1QsU0FBZCxnQkFDSyxLQUFLelIsR0FBTCxDQUFTd2xCLElBQVQsQ0FBYy9ULFNBRG5CO0FBR0EsU0FBS0EsU0FBTCxHQUFpQixLQUFLelIsR0FBTCxDQUFTd2xCLElBQVQsQ0FBYy9ULFNBQWQsQ0FBd0IsS0FBSzRULFFBQTdCLGlCQUNaLEtBQUtybEIsR0FBTCxDQUFTd2xCLElBQVQsQ0FBYy9ULFNBQWQsQ0FBd0IsS0FBSzRULFFBQTdCLENBRFksQ0FBakI7QUFHQSxTQUFLNVQsU0FBTCxDQUFlZ1UsU0FBZixHQUEyQixDQUFDLEtBQUtoVSxTQUFMLENBQWVnVSxTQUFmLElBQTRCLENBQTdCLElBQWdDLENBQTNEOztBQUVBLFFBQUcsS0FBS2hVLFNBQUwsQ0FBZWdVLFNBQWYsSUFBMEIsS0FBS25pQixLQUFMLENBQVdnaUIsU0FBeEMsRUFBbUQ7QUFDakQsV0FBSzlELFFBQUwsQ0FBY2tFLFFBQWQsQ0FBdUIsS0FBS0MsYUFBTCxFQUF2QjtBQUNEO0FBQ0Y7OzBCQUVEaGxCLE8sc0JBQVUsQ0FFVCxDOzswQkFFRGlsQixrQiwrQkFBbUJ6bUIsSSxFQUFNVCxHLEVBQUs7QUFDNUIsUUFBSSxDQUFDQSxHQUFMLEVBQVU7QUFDUkEsWUFBTXhKLE9BQU80SixRQUFQLENBQWdCQyxJQUF0QjtBQUNEO0FBQ0RJLFdBQU9BLEtBQUtQLE9BQUwsQ0FBYSxTQUFiLEVBQXdCLE1BQXhCLENBQVA7QUFDQSxRQUFNaW5CLFFBQVEsSUFBSVosTUFBSixDQUFXLFNBQVM5bEIsSUFBVCxHQUFnQixpQkFBM0IsQ0FBZDtBQUFBLFFBQ0FnakIsVUFBVTBELE1BQU1DLElBQU4sQ0FBV3BuQixHQUFYLENBRFY7QUFFQSxRQUFJLENBQUN5akIsT0FBTCxFQUFjLE9BQU8sSUFBUDtBQUNkLFFBQUksQ0FBQ0EsUUFBUSxDQUFSLENBQUwsRUFBaUIsT0FBTyxFQUFQO0FBQ2pCLFdBQU80RCxtQkFBbUI1RCxRQUFRLENBQVIsRUFBV3ZqQixPQUFYLENBQW1CLEtBQW5CLEVBQTBCLEdBQTFCLENBQW5CLENBQVA7QUFDRCxHOzswQkFFRCttQixhLDRCQUFnQjtBQUNkLFFBQUk1SSxTQUFTaUosU0FBUyxLQUFLVCxLQUFkLENBQWI7QUFDQSxRQUFHdkosTUFBTWUsTUFBTixLQUFlQSxXQUFTLENBQTNCLEVBQThCO0FBQzVCQSxlQUFTLEtBQUs2SSxrQkFBTCxDQUF3QixLQUFLUCxRQUE3QixDQUFUO0FBQ0F0SSxlQUFTaUosU0FBU2pKLE1BQVQsQ0FBVDtBQUNBLFVBQUdmLE1BQU1lLE1BQU4sQ0FBSCxFQUFrQjtBQUNoQkEsaUJBQVMsQ0FBVDtBQUNEO0FBQ0Y7QUFDRCxXQUFPQSxTQUFPLENBQWQ7QUFDRCxHOzs7OztrQkExRGtCeUcsYTs7Ozs7Ozs7Ozs7OztBQ0RyQjs7QUFDQTs7Ozs7Ozs7SUFFcUJ5QyxNO0FBRW5CLGtCQUFZdGYsTUFBWixFQUFvQmpOLENBQXBCLEVBQXVCO0FBQUE7O0FBQUE7O0FBQ3JCLFNBQUtpTixNQUFMLEdBQWNBLE1BQWQ7QUFDQSxTQUFLak4sQ0FBTCxnQkFDS0EsQ0FETDtBQUVFd3NCLGdCQUFVLElBQUV4c0IsRUFBRXFNLEtBQUYsQ0FBUThGLEtBQVYsR0FBZ0JuUyxFQUFFeU0sTUFBRixHQUFTek0sRUFBRXNNLElBQUYsQ0FBTzZGO0FBRjVDO0FBSUEsU0FBSzdCLEVBQUwsR0FBVSxJQUFJeFUsWUFBTStJLE9BQVYsQ0FBa0IsQ0FBbEIsRUFBb0IsQ0FBcEIsRUFBc0IsQ0FBdEIsQ0FBVjs7QUFFQSxTQUFLNG5CLEtBQUwsR0FBYSxJQUFJM3dCLFlBQU00d0IsV0FBVixDQUFzQjFzQixFQUFFcU0sS0FBRixDQUFROEYsS0FBOUIsRUFBcUMsS0FBS25TLENBQUwsQ0FBT3dzQixRQUE1QyxFQUFzRHhzQixFQUFFcU0sS0FBRixDQUFRakcsTUFBOUQsQ0FBYjs7QUFFQSxRQUFNQyxRQUFRLEtBQUtyRyxDQUFMLENBQU9xTSxLQUFQLENBQWF3SixJQUFiLEtBQW9CLE9BQXBCLEdBQTZCLEVBQUN4UCxPQUFPckcsRUFBRXFNLEtBQUYsQ0FBUWhHLEtBQWhCLEVBQTdCLEdBQXFEO0FBQ2pFQSxhQUFPckcsRUFBRXFNLEtBQUYsQ0FBUWhHLEtBRGtEO0FBRWpFc21CLGVBQVMsQ0FGd0Q7QUFHakVDLG1CQUFhO0FBSG9ELEtBQW5FOztBQU1BLFNBQUsvZCxTQUFMLEdBQWlCLENBQ0MsSUFBSS9TLFlBQU1nVCxpQkFBVixDQUE0QnpJLEtBQTVCLENBREQsRUFFQyxJQUFJdkssWUFBTWdULGlCQUFWLENBQTRCekksS0FBNUIsQ0FGRCxFQUdDLElBQUl2SyxZQUFNZ1QsaUJBQVYsQ0FBNEJ6SSxLQUE1QixDQUhELEVBSUMsSUFBSXZLLFlBQU1nVCxpQkFBVixDQUE0QnpJLEtBQTVCLENBSkQsRUFLQyxJQUFJdkssWUFBTWdULGlCQUFWLENBQTRCekksS0FBNUIsQ0FMRCxFQU1DLElBQUl2SyxZQUFNZ1QsaUJBQVYsQ0FBNEJ6SSxLQUE1QixDQU5ELENBQWpCOztBQVNBLFFBQU13bUIsUUFBUSxJQUFJL3dCLFlBQU1tVCxJQUFWLENBQWUsS0FBS3dkLEtBQXBCLEVBQTJCLEtBQUs1ZCxTQUFoQyxDQUFkOztBQUVBLFFBQUc3TyxFQUFFcU0sS0FBRixDQUFReUosYUFBUixLQUF3QixFQUEzQixFQUErQjtBQUM3QixXQUFLN0ksTUFBTCxDQUFZNmYsYUFBWixDQUEwQkMsSUFBMUIsQ0FBK0Ivc0IsRUFBRXFNLEtBQUYsQ0FBUXlKLGFBQXZDLEVBQXNELFVBQUNrWCxPQUFELEVBQVk7QUFDaEUsY0FBS25lLFNBQUwsQ0FBZSxDQUFmLEVBQWtCeEksS0FBbEIsQ0FBd0I0bUIsTUFBeEIsQ0FBK0IsUUFBL0I7QUFDQSxjQUFLcGUsU0FBTCxDQUFlLENBQWYsRUFBa0JuQixHQUFsQixHQUF3QnNmLE9BQXhCO0FBQ0FBLGdCQUFRRSxTQUFSLEdBQW9CcHhCLFlBQU1xeEIsWUFBMUI7QUFDQUgsZ0JBQVFwZSxXQUFSLEdBQXNCLElBQXRCO0FBQ0EsY0FBS0MsU0FBTCxDQUFlLENBQWYsRUFBa0JELFdBQWxCLEdBQWdDLElBQWhDO0FBQ0QsT0FORDtBQU9EOztBQUVELFNBQUtRLEtBQUwsR0FBYSxJQUFJdFQsWUFBTTJhLFFBQVYsRUFBYjtBQUNBLFNBQUsyVyxJQUFMLEdBQVksSUFBSXR4QixZQUFNMmEsUUFBVixFQUFaO0FBQ0EsU0FBSzRXLE1BQUwsR0FBYyxJQUFJdnhCLFlBQU0yYSxRQUFWLEVBQWQ7QUFDQSxTQUFLNlcsTUFBTCxHQUFjLElBQUl4eEIsWUFBTTJhLFFBQVYsRUFBZDtBQUNBLFNBQUs4VyxNQUFMLEdBQWMsSUFBSXp4QixZQUFNMmEsUUFBVixFQUFkO0FBQ0EsU0FBSytXLE1BQUwsR0FBYyxJQUFJMXhCLFlBQU0yYSxRQUFWLEVBQWQ7QUFDQSxTQUFLZ1gsU0FBTCxHQUFpQixJQUFJM3hCLFlBQU0yYSxRQUFWLEVBQWpCO0FBQ0EsU0FBS2lYLFVBQUwsR0FBa0IsSUFBSTV4QixZQUFNMmEsUUFBVixFQUFsQjs7QUFFQSxTQUFLMlcsSUFBTCxDQUFVamQsR0FBVixDQUFjMGMsS0FBZDtBQUNBLFNBQUtPLElBQUwsQ0FBVWpkLEdBQVYsQ0FBYyxLQUFLc2QsU0FBbkI7QUFDQSxTQUFLTCxJQUFMLENBQVVqZCxHQUFWLENBQWMsS0FBS3VkLFVBQW5CO0FBQ0EsU0FBS0wsTUFBTCxDQUFZbGQsR0FBWixDQUFnQixLQUFLaWQsSUFBckI7QUFDQSxTQUFLRSxNQUFMLENBQVluZCxHQUFaLENBQWdCLEtBQUtrZCxNQUFyQjtBQUNBLFNBQUtFLE1BQUwsQ0FBWXBkLEdBQVosQ0FBZ0IsS0FBS21kLE1BQXJCO0FBQ0EsU0FBS0UsTUFBTCxDQUFZcmQsR0FBWixDQUFnQixLQUFLb2QsTUFBckI7QUFDQSxTQUFLbmUsS0FBTCxDQUFXZSxHQUFYLENBQWUsS0FBS3FkLE1BQXBCO0FBQ0Q7O21CQUVEdm1CLE8sc0JBQVU7QUFDUix5QkFBYSxLQUFLNEgsU0FBbEIsa0hBQTZCO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQSxVQUFyQjFQLENBQXFCOztBQUMzQixVQUFHQSxFQUFFdU8sR0FBTCxFQUFVO0FBQ1J2TyxVQUFFdU8sR0FBRixHQUFRLElBQVI7QUFDQXZPLFVBQUV5UCxXQUFGLEdBQWdCLElBQWhCO0FBQ0Q7QUFDRHpQLFFBQUU4SCxPQUFGO0FBQ0Q7QUFDRCxXQUFPLEtBQUs0SCxTQUFaO0FBQ0EsU0FBSzRkLEtBQUwsQ0FBV3hsQixPQUFYO0FBQ0QsRzs7bUJBRUQ5RixHLGdCQUFJaU0sSyxFQUFPO0FBQ1QsUUFBSW9GLGNBQUo7QUFBQSxRQUFXRCxhQUFYO0FBQ0EsUUFBR25GLFFBQU1sTixLQUFLeVEsRUFBTCxHQUFRLENBQWpCLEVBQW9CO0FBQ2xCNkIsY0FBUXRTLEtBQUt5USxFQUFMLEdBQVEsQ0FBaEI7QUFDQTRCLGFBQU9uRixRQUFNbE4sS0FBS3lRLEVBQUwsR0FBUSxDQUFyQjtBQUNELEtBSEQsTUFJSztBQUNINkIsY0FBUXBGLEtBQVI7QUFDQW1GLGFBQU8sQ0FBUDtBQUNEO0FBQ0QsUUFBTXZTLElBQUksS0FBS0EsQ0FBZjtBQUFBLFFBQWlCMnRCLE1BQUksRUFBQ3p2QixHQUFFLENBQUMsR0FBRCxHQUFLOEIsRUFBRXFNLEtBQUYsQ0FBUThGLEtBQWhCLEVBQXNCelUsR0FBRSxNQUFJc0MsRUFBRXdzQixRQUFOLEdBQWV4c0IsRUFBRXFNLEtBQUYsQ0FBUThGLEtBQS9DLEVBQXJCO0FBQ0EsU0FBS2tiLE1BQUwsQ0FBWXZaLFFBQVosQ0FBcUIzUyxHQUFyQixDQUF5QndzQixJQUFJenZCLENBQTdCLEVBQStCeXZCLElBQUlqd0IsQ0FBbkMsRUFBcUMsQ0FBckM7QUFDQSxTQUFLNHZCLE1BQUwsQ0FBWXhaLFFBQVosQ0FBcUIzUyxHQUFyQixDQUF5QixDQUFDd3NCLElBQUl6dkIsQ0FBOUIsRUFBZ0MsQ0FBQ3l2QixJQUFJandCLENBQXJDLEVBQXVDLENBQXZDO0FBQ0EsU0FBSzR2QixNQUFMLENBQVlNLFVBQVosQ0FBdUJDLGdCQUF2QixDQUF3QyxLQUFLdmQsRUFBN0MsRUFBaURrQyxLQUFqRDs7QUFFQSxRQUFNc2IsTUFBSSxFQUFDNXZCLEdBQUU4QixFQUFFd3NCLFFBQUYsR0FBVyxJQUFFeHNCLEVBQUVxTSxLQUFGLENBQVE4RixLQUFyQixHQUEyQixNQUFJblMsRUFBRXFNLEtBQUYsQ0FBUThGLEtBQTFDLEVBQWdEelUsR0FBRSxNQUFJc0MsRUFBRXdzQixRQUFOLEdBQWV4c0IsRUFBRXFNLEtBQUYsQ0FBUThGLEtBQXpFLEVBQVY7QUFDQSxTQUFLb2IsTUFBTCxDQUFZelosUUFBWixDQUFxQjNTLEdBQXJCLENBQXlCMnNCLElBQUk1dkIsQ0FBN0IsRUFBK0I0dkIsSUFBSXB3QixDQUFuQyxFQUFxQyxDQUFyQztBQUNBLFNBQUs4dkIsTUFBTCxDQUFZMVosUUFBWixDQUFxQjNTLEdBQXJCLENBQXlCLENBQUMyc0IsSUFBSTV2QixDQUE5QixFQUFnQyxDQUFDNHZCLElBQUlwd0IsQ0FBckMsRUFBdUMsQ0FBdkM7QUFDQSxTQUFLOHZCLE1BQUwsQ0FBWUksVUFBWixDQUF1QkMsZ0JBQXZCLENBQXdDLEtBQUt2ZCxFQUE3QyxFQUFpRGlDLElBQWpEO0FBQ0QsRzs7bUJBRUR3YixPLG9CQUFRM2dCLEssRUFBTztBQUNiLFFBQU11RCxLQUFLelEsS0FBS3lRLEVBQWhCO0FBQ0EsU0FBSzhjLFNBQUwsQ0FBZTNaLFFBQWYsQ0FBd0IzUyxHQUF4QixDQUE0QjBDLG9CQUFVekYsaUJBQVYsQ0FBNEIsQ0FBQyxDQUFDdVMsRUFBRixFQUFLLENBQUNBLEVBQUQsR0FBSSxDQUFULENBQTVCLEVBQXdDLENBQUMsQ0FBRCxFQUFHLEtBQUszUSxDQUFMLENBQU9xTSxLQUFQLENBQWE4RixLQUFoQixDQUF4QyxFQUErRC9FLEtBQS9ELENBQTVCLEVBQWtHLE1BQUksS0FBS3BOLENBQUwsQ0FBT3dzQixRQUFYLEdBQW9CLE1BQUksS0FBS3hzQixDQUFMLENBQU9xTSxLQUFQLENBQWE4RixLQUF2SSxFQUE2SSxDQUE3STtBQUNBLFNBQUtzYixTQUFMLENBQWVHLFVBQWYsQ0FBMEJDLGdCQUExQixDQUEyQyxLQUFLdmQsRUFBaEQsRUFBb0RsRCxLQUFwRDtBQUNELEc7O21CQUVENGdCLFEscUJBQVM1Z0IsSyxFQUFPO0FBQ2QsUUFBTXVELEtBQUt6USxLQUFLeVEsRUFBaEI7QUFDRSxTQUFLK2MsVUFBTCxDQUFnQjVaLFFBQWhCLENBQXlCM1MsR0FBekIsQ0FBNkIwQyxvQkFBVXpGLGlCQUFWLENBQTRCLENBQUMsQ0FBQ3VTLEVBQUQsR0FBSSxDQUFMLEVBQU8sQ0FBUCxDQUE1QixFQUFzQyxDQUFDLEtBQUszUSxDQUFMLENBQU9xTSxLQUFQLENBQWE4RixLQUFkLEVBQW9CLENBQXBCLENBQXRDLEVBQTZEL0UsS0FBN0QsQ0FBN0IsRUFBaUcsQ0FBQyxHQUFELEdBQUssS0FBS3BOLENBQUwsQ0FBT3dzQixRQUFaLEdBQXFCLE1BQUksS0FBS3hzQixDQUFMLENBQU9xTSxLQUFQLENBQWE4RixLQUF2SSxFQUE2SSxDQUE3STtBQUNBLFNBQUt1YixVQUFMLENBQWdCRSxVQUFoQixDQUEyQkMsZ0JBQTNCLENBQTRDLEtBQUt2ZCxFQUFqRCxFQUFxRGxELEtBQXJEO0FBQ0gsRzs7bUJBRUQ2Z0IsYSwwQkFBYzVoQixLLEVBQU87QUFDbkJBLFVBQU0rQyxLQUFOLENBQVkwRSxRQUFaLENBQXFCM1MsR0FBckIsQ0FBeUIsQ0FBekIsRUFBMkIsQ0FBQyxHQUFELEdBQUssS0FBS25CLENBQUwsQ0FBT3FNLEtBQVAsQ0FBYThGLEtBQTdDLEVBQW1ELENBQW5EO0FBQ0EsU0FBS3NiLFNBQUwsQ0FBZXRkLEdBQWYsQ0FBbUI5RCxNQUFNK0MsS0FBekI7QUFDRCxHOzttQkFFRDhlLG1CLGdDQUFvQjdoQixLLEVBQU87QUFDekIsU0FBS29oQixTQUFMLENBQWV2UyxNQUFmLENBQXNCN08sTUFBTStDLEtBQTVCO0FBQ0QsRzs7bUJBRUQrZSxjLDJCQUFlOWhCLEssRUFBTztBQUNwQkEsVUFBTStDLEtBQU4sQ0FBWTBFLFFBQVosQ0FBcUIzUyxHQUFyQixDQUF5QixDQUF6QixFQUEyQixDQUFDLEdBQUQsR0FBSyxLQUFLbkIsQ0FBTCxDQUFPcU0sS0FBUCxDQUFhOEYsS0FBN0MsRUFBbUQsQ0FBbkQ7QUFDQSxTQUFLdWIsVUFBTCxDQUFnQnZkLEdBQWhCLENBQW9COUQsTUFBTStDLEtBQTFCO0FBQ0QsRzs7bUJBRURnZixvQixpQ0FBcUIvaEIsSyxFQUFPO0FBQzFCLFNBQUtxaEIsVUFBTCxDQUFnQnhTLE1BQWhCLENBQXVCN08sTUFBTStDLEtBQTdCO0FBQ0QsRzs7Ozs7a0JBdkhrQm1kLE07Ozs7Ozs7Ozs7Ozs7QUNIckI7O0FBQ0E7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7Ozs7Ozs7SUFFcUJqRixJOzs7QUFDbkI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGdCQUFZcmEsTUFBWixFQUFvQlIsTUFBcEIsRUFBNEJLLFlBQTVCLEVBQTBDbEQsS0FBMUMsRUFBaUQ7QUFBQTs7QUFBQSxpREFDL0MsZ0NBRCtDOztBQUFBLFVBK2xDakR5a0IsS0EvbENpRCxHQStsQ3pDO0FBQ05DLFlBQU0sY0FBQ0MsTUFBRCxFQUFXO0FBQ2YsWUFBR0EsT0FBT0QsSUFBVixFQUFnQjtBQUNkQyxpQkFBT0MsVUFBUCxHQUFvQixLQUFwQjtBQUNBLFdBQUNELE9BQU9ELElBQVAsTUFBZSxFQUFDM0wsT0FBTztBQUFBLHFCQUFLOVosU0FBTDtBQUFBLGFBQVIsRUFBaEIsRUFBeUM4WixLQUF6QyxDQUErQyxVQUFDbFosQ0FBRCxFQUFNO0FBQ25ELGdCQUFHLENBQUM4a0IsT0FBT0MsVUFBUixJQUFzQi9rQixFQUFFaEUsSUFBRixLQUFTLGlCQUFsQyxFQUFxRDtBQUNuRCxvQkFBS2dwQixjQUFMLENBQW9CMXZCLElBQXBCLENBQXlCd3ZCLE1BQXpCO0FBQ0Esb0JBQUt2USxhQUFMLENBQW1CO0FBQ2pCdFUsc0JBQU07QUFEVyxlQUFuQjtBQUdEO0FBQ0YsV0FQRDtBQVFELFNBVkQsTUFXSyxJQUFHLGFBQUU2a0IsTUFBRixFQUFVbFMsUUFBVixDQUFtQixTQUFuQixDQUFILEVBQWtDO0FBQ3JDLGNBQU1yYyxJQUFJdXVCLE9BQU9BLE1BQWpCO0FBQ0FBLGlCQUFPQyxVQUFQLEdBQW9CLEtBQXBCO0FBQ0EsY0FBR3h1QixLQUFLQSxFQUFFMHVCLFNBQVYsRUFBcUI7QUFDbkIxdUIsY0FBRTB1QixTQUFGO0FBQ0QsV0FGRCxNQUdLO0FBQ0h2Uyx1QkFBVyxZQUFLO0FBQ2Qsa0JBQUcsQ0FBQ29TLE9BQU9DLFVBQVgsRUFBdUI7QUFDckIsc0JBQUtILEtBQUwsQ0FBV0MsSUFBWCxDQUFnQkMsTUFBaEI7QUFDRDtBQUNGLGFBSkQsRUFJRyxHQUpIO0FBS0Q7QUFDRjtBQUNGLE9BM0JLO0FBNEJOSSxhQUFPLGVBQUNKLE1BQUQsRUFBVztBQUNoQixZQUFHQSxPQUFPSSxLQUFWLEVBQWlCO0FBQ2ZKLGlCQUFPQyxVQUFQLEdBQW9CLElBQXBCO0FBQ0FELGlCQUFPSSxLQUFQO0FBQ0QsU0FIRCxNQUlLLElBQUcsYUFBRUosTUFBRixFQUFVbFMsUUFBVixDQUFtQixTQUFuQixDQUFILEVBQWtDO0FBQ3JDLGNBQU1yYyxJQUFJdXVCLE9BQU9BLE1BQWpCO0FBQ0FBLGlCQUFPQyxVQUFQLEdBQW9CLElBQXBCO0FBQ0EsY0FBR3h1QixLQUFLQSxFQUFFNHVCLFVBQVYsRUFBc0I7QUFDcEI1dUIsY0FBRTR1QixVQUFGO0FBQ0Q7QUFDRjtBQUNGO0FBeENLLEtBL2xDeUM7O0FBRS9DLFVBQUszaEIsTUFBTCxHQUFjQSxNQUFkO0FBQ0EsVUFBSzRoQixlQUFMLEdBQXVCLElBQXZCO0FBQ0EsVUFBSzd1QixDQUFMLGdCQUNLLE1BQUs4dUIsWUFBTCxDQUFrQmxsQixLQUFsQixDQURMO0FBRUU2QyxvQkFGRjtBQUdFSyxnQ0FIRjtBQUlFaWlCLFlBQU0sQ0FKUjtBQUtFQyxrQkFBWSxLQUxkO0FBTUVDLHNCQUFnQjtBQUNkQyxnQkFBUSxLQURNO0FBRWRqd0IsV0FBRztBQUZXO0FBTmxCO0FBV0EsVUFBS2t3QixhQUFMLEdBQXFCO0FBQ25CQyxtQkFBYSxDQURNO0FBRW5CQyxpQkFBVztBQUZRLEtBQXJCO0FBSUEsVUFBS0MsV0FBTCxHQUFtQixJQUFJQyxxQkFBSixDQUFnQnRpQixNQUFoQixTQUE4QixNQUFLak4sQ0FBbkMsQ0FBbkI7QUFDQTRhLHVCQUFTQyxJQUFULENBQWM1TixPQUFPMUcsR0FBckI7QUFDQSxVQUFLaXBCLFlBQUwsR0FBb0IsSUFBSUMsMEJBQUosT0FBcEI7QUFDQSxVQUFLQyxZQUFMLEdBQW9CLElBQUlDLHNCQUFKLENBQWlCN2lCLFlBQWpCLEVBQStCLEtBQUdMLFNBQU8sQ0FBVixDQUEvQixDQUFwQjtBQUNBLFVBQUtpakIsWUFBTCxDQUFrQkUsaUJBQWxCLEdBQXNDLFVBQUN0akIsSUFBRCxFQUFPdWpCLEtBQVAsRUFBZ0I7QUFDcEQsWUFBS1AsV0FBTCxDQUFpQlEsZ0JBQWpCLENBQWtDeGpCLElBQWxDLEVBQXdDdWpCLEtBQXhDO0FBQ0EsWUFBSzdSLGFBQUwsQ0FBbUI7QUFDakJ0VSxjQUFNLGVBRFc7QUFFakIrZSxpQkFBUyxNQUFLaUgsWUFBTCxDQUFrQmpILE9BRlY7QUFHakJDLGtCQUFVcGMsSUFITztBQUlqQnVqQjtBQUppQixPQUFuQjtBQU1ELEtBUkQ7O0FBVUEsVUFBS3pnQixLQUFMLEdBQWEsSUFBSXRULFlBQU0yYSxRQUFWLEVBQWI7O0FBRUEsVUFBS3NaLE1BQUwsR0FBYyxJQUFJeEQsZ0JBQUosQ0FBV3RmLE1BQVgsRUFBbUIsTUFBS2pOLENBQXhCLENBQWQ7QUFDQSxVQUFLb1AsS0FBTCxDQUFXZSxHQUFYLENBQWUsTUFBSzRmLE1BQUwsQ0FBWTNnQixLQUEzQjs7QUFFQSxVQUFLNGdCLFNBQUwsR0FBaUIsSUFBSUMsZUFBSixDQUFVaGpCLE1BQVYsZUFBc0IsTUFBS2pOLENBQTNCLElBQThCK08sWUFBWSxNQUFLbWhCLG1CQUFMLENBQXlCM0gsSUFBekIsT0FBMUMsS0FBZ0Zyb0IsS0FBS3lRLEVBQUwsR0FBUSxDQUF4RixFQUEyRixRQUEzRixDQUFqQjtBQUNBLFVBQUtvZixNQUFMLENBQVk5QixhQUFaLENBQTBCLE1BQUsrQixTQUEvQjtBQUNBLFVBQUtHLG1CQUFMLENBQXlCLE1BQUtILFNBQTlCLEVBQXlDLENBQXpDO0FBQ0EsVUFBS0ksVUFBTCxHQUFrQixJQUFJSCxlQUFKLENBQVVoakIsTUFBVixlQUFzQixNQUFLak4sQ0FBM0IsSUFBOEIrTyxZQUFZLE1BQUtzaEIsb0JBQUwsQ0FBMEI5SCxJQUExQixPQUExQyxLQUFpRixDQUFqRixFQUFvRixRQUFwRixDQUFsQjtBQUNBLFVBQUt3SCxNQUFMLENBQVk1QixjQUFaLENBQTJCLE1BQUtpQyxVQUFoQztBQUNBLFVBQUtELG1CQUFMLENBQXlCLE1BQUtDLFVBQTlCLEVBQTBDLEtBQUcsTUFBS3B3QixDQUFMLENBQU95TSxNQUFQLEdBQWMsQ0FBakIsQ0FBMUM7O0FBRUEsVUFBSzZqQixnQkFBTCxHQUF3QixJQUFJeDBCLFlBQU0yYSxRQUFWLEVBQXhCO0FBQ0EsVUFBS3JILEtBQUwsQ0FBV2UsR0FBWCxDQUFlLE1BQUttZ0IsZ0JBQXBCO0FBQ0EsVUFBS0EsZ0JBQUwsQ0FBc0J4YyxRQUF0QixDQUErQjNTLEdBQS9CLENBQW1DLE1BQUksTUFBS25CLENBQUwsQ0FBT3FNLEtBQVAsQ0FBYThGLEtBQWpCLEdBQXVCLE1BQUkxRixNQUFKLEdBQVcsTUFBS3pNLENBQUwsQ0FBT3NNLElBQVAsQ0FBWTZGLEtBQWpGLEVBQXVGLENBQUMsR0FBRCxHQUFLMUYsTUFBTCxHQUFZLE1BQUt6TSxDQUFMLENBQU9zTSxJQUFQLENBQVk2RixLQUEvRyxFQUFxSCxDQUFySDs7QUFFQSxVQUFLb2UsV0FBTCxHQUFtQixFQUFuQjtBQUNBLFFBQUc5akIsU0FBTyxDQUFWLEVBQWE7QUFDWCxZQUFLK2pCLGFBQUwsQ0FBbUIsQ0FBbkIsRUFBc0IsSUFBSXhqQixvQkFBSixDQUFlQyxNQUFmLGVBQTJCLE1BQUtqTixDQUFoQyxJQUFtQytPLFlBQVksTUFBSzBoQixjQUFMLENBQW9CbEksSUFBcEIsT0FBL0MsS0FBZ0YsQ0FBaEYsRUFBbUY5YixNQUFuRixFQUEyRixDQUEzRixFQUE4RixRQUE5RixDQUF0QjtBQUNEOztBQUVELFVBQUtXLEtBQUwsR0FBYSxNQUFLcE4sQ0FBTCxDQUFPMFYsR0FBUCxHQUFZeFYsS0FBS3lRLEVBQWpCLEdBQXFCLENBQWxDO0FBQ0EsVUFBS2MsV0FBTCxHQUFtQixDQUFuQjtBQUNBLFVBQUt0USxHQUFMLENBQVMsTUFBS2lNLEtBQWQsRUFBb0IsQ0FBcEI7QUFDQSxVQUFLc2pCLFlBQUwsR0FBb0I7QUFDbEJsekIsU0FBRztBQURlLEtBQXBCOztBQUlBLFVBQUtpeEIsY0FBTCxHQUFzQixFQUF0Qjs7QUFFQSxVQUFLcmYsS0FBTCxDQUFXMEUsUUFBWCxDQUFvQjNTLEdBQXBCLENBQXdCLENBQUMsR0FBRCxHQUFLLE1BQUtuQixDQUFMLENBQU9xTSxLQUFQLENBQWE4RixLQUFsQixHQUF3QixNQUFJMUYsTUFBSixHQUFXLE1BQUt6TSxDQUFMLENBQU9zTSxJQUFQLENBQVk2RixLQUF2RSxFQUE2RSxDQUE3RSxFQUErRSxDQUEvRTtBQUNBLFVBQUt3ZSxZQUFMLEdBQW9CLElBQUlDLHNCQUFKLENBQWlCLE1BQUs1d0IsQ0FBTCxDQUFPc00sSUFBUCxDQUFZbkcsS0FBWixHQUFrQixNQUFLbkcsQ0FBTCxDQUFPb0ksS0FBMUMsRUFBaUQsTUFBS3BJLENBQUwsQ0FBT21WLE9BQXhELEVBQWlFLE1BQUtuVixDQUFMLENBQU9zTSxJQUFQLENBQVltSCxlQUE3RSxDQUFwQjs7QUFFQSxVQUFLNUcsS0FBTCxHQUFhO0FBQ1hna0IsY0FBUSxNQUFLQSxNQUFMLENBQVl0SSxJQUFaLE9BREc7QUFFWG1JLG9CQUFjLHNCQUFDam5CLENBQUQsRUFBTTtBQUNsQixjQUFLaW5CLFlBQUwsZ0JBQ0ssTUFBS0EsWUFEVjtBQUVFSSxpQkFBT3JuQixFQUFFcW5CLEtBRlg7QUFHRUMsaUJBQU90bkIsRUFBRXNuQjtBQUhYO0FBS0Q7QUFSVSxLQUFiO0FBVUEsVUFBSzlqQixNQUFMLENBQVkrakIsaUJBQVosQ0FBOEIsTUFBS25rQixLQUFMLENBQVdna0IsTUFBekM7QUFDQSxpQkFBRSxNQUFLNWpCLE1BQUwsQ0FBWXpHLE9BQWQsRUFBdUJ5cUIsRUFBdkIsQ0FBMEIsV0FBMUIsRUFBdUMsTUFBS3BrQixLQUFMLENBQVc2akIsWUFBbEQ7O0FBRUEsVUFBSzdqQixLQUFMLENBQVdxa0IsY0FBWCxHQUE0QixNQUFLQSxjQUFMLENBQW9CM0ksSUFBcEIsT0FBNUI7QUFDQSxVQUFLdGIsTUFBTCxDQUFZa2tCLElBQVosQ0FBaUJELGNBQWpCLEdBQWtDLE1BQUtya0IsS0FBTCxDQUFXcWtCLGNBQTdDO0FBQ0EsVUFBS3JrQixLQUFMLENBQVd1a0IsY0FBWCxHQUE0QixNQUFLQSxjQUFMLENBQW9CN0ksSUFBcEIsT0FBNUI7QUFDQSxVQUFLdGIsTUFBTCxDQUFZa2tCLElBQVosQ0FBaUJDLGNBQWpCLEdBQWtDLE1BQUt2a0IsS0FBTCxDQUFXdWtCLGNBQTdDO0FBQ0EsVUFBS3ZrQixLQUFMLENBQVd3a0IsaUJBQVgsR0FBK0IsTUFBS0EsaUJBQUwsQ0FBdUI5SSxJQUF2QixPQUEvQjtBQUNBLFVBQUt0YixNQUFMLENBQVlra0IsSUFBWixDQUFpQkUsaUJBQWpCLEdBQXFDLE1BQUt4a0IsS0FBTCxDQUFXd2tCLGlCQUFoRDs7QUFFQSxVQUFLQyxTQUFMLEdBQWlCLElBQWpCO0FBQ0EsVUFBS0MsR0FBTCxHQUFXO0FBQ1RDLFlBQU0sQ0FDSixJQUFJMTFCLFlBQU0yMUIsSUFBVixFQURJLEVBRUosSUFBSTMxQixZQUFNMjFCLElBQVYsRUFGSTtBQURHLEtBQVg7O0FBT0EsVUFBS3hrQixNQUFMLENBQVl5a0IsU0FBWixDQUFzQixNQUFLdGlCLEtBQTNCO0FBQ0EsVUFBS25DLE1BQUwsQ0FBWXFKLGdCQUFaLENBQTZCLFFBQTdCLEVBQXVDLE1BQUtnWixXQUFMLENBQWlCcUMsV0FBakIsQ0FBNkJwSixJQUE3QixDQUFrQyxNQUFLK0csV0FBdkMsQ0FBdkM7O0FBRUFuVCxlQUFXLFlBQUs7QUFDZCxVQUFHLENBQUMsTUFBS3lWLFlBQUwsRUFBSixFQUF5QjtBQUN2QixjQUFLQyxxQkFBTDtBQUNBLGNBQUtDLG9CQUFMO0FBQ0Q7QUFDRixLQUxELEVBS0csR0FMSDs7QUFPQSxVQUFLQyxXQUFMO0FBeEcrQztBQXlHaEQ7O2lCQUVEOXFCLE8sc0JBQVU7QUFDUixTQUFLZ0csTUFBTCxDQUFZK2tCLFlBQVosQ0FBeUIsS0FBSzVpQixLQUE5QjtBQUNBLFNBQUt1aEIsWUFBTCxDQUFrQjFwQixPQUFsQjtBQUNBLFdBQU8sS0FBS2dHLE1BQUwsQ0FBWWtrQixJQUFaLENBQWlCRCxjQUF4QjtBQUNBLFdBQU8sS0FBS2prQixNQUFMLENBQVlra0IsSUFBWixDQUFpQkMsY0FBeEI7QUFDQSxXQUFPLEtBQUtua0IsTUFBTCxDQUFZa2tCLElBQVosQ0FBaUJFLGlCQUF4QjtBQUNBLGlCQUFFLEtBQUtwa0IsTUFBTCxDQUFZekcsT0FBZCxFQUF1QmtLLEdBQXZCLENBQTJCLFdBQTNCLEVBQXdDLEtBQUs3RCxLQUFMLENBQVc2akIsWUFBbkQ7QUFDQSxTQUFLempCLE1BQUwsQ0FBWWdsQixvQkFBWixDQUFpQyxLQUFLcGxCLEtBQUwsQ0FBV2drQixNQUE1QztBQUNBLFNBQUtxQixpQkFBTCxDQUF1QixDQUF2QixFQUEwQixLQUFLM0IsV0FBTCxDQUFpQjN5QixNQUEzQztBQUNBLFNBQUtteUIsTUFBTCxDQUFZN0IsbUJBQVosQ0FBZ0MsS0FBSzhCLFNBQXJDO0FBQ0EsU0FBS21DLGdCQUFMLENBQXNCLEtBQUtuQyxTQUEzQjtBQUNBLFNBQUtELE1BQUwsQ0FBWTNCLG9CQUFaLENBQWlDLEtBQUtnQyxVQUF0QztBQUNBLFNBQUsrQixnQkFBTCxDQUFzQixLQUFLL0IsVUFBM0I7QUFDQSxTQUFLTCxNQUFMLENBQVk5b0IsT0FBWjtBQUNBLFNBQUt1b0IsWUFBTCxDQUFrQnZvQixPQUFsQjtBQUNBMlQsdUJBQVMzVCxPQUFUO0FBQ0EsU0FBS3FvQixXQUFMLENBQWlCcm9CLE9BQWpCO0FBQ0QsRzs7QUFFRDs7aUJBRUFtckIsaUIsZ0NBQW9CO0FBQ2xCLFdBQU8sS0FBSzNELGNBQUwsQ0FBb0I3d0IsTUFBcEIsR0FBMkIsQ0FBbEM7QUFDRCxHOztpQkFFRHkwQixxQixvQ0FBd0I7QUFDdEIseUJBQWEsS0FBSzVELGNBQWxCLGtIQUFrQztBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQUEsVUFBMUJ6dUIsQ0FBMEI7O0FBQ2hDQSxRQUFFc3VCLElBQUY7QUFDRDtBQUNELFNBQUtHLGNBQUwsR0FBc0IsRUFBdEI7QUFDQSxTQUFLelEsYUFBTCxDQUFtQjtBQUNqQnRVLFlBQU07QUFEVyxLQUFuQjtBQUdELEc7O2lCQUVEcW9CLFcsMEJBQWM7QUFDWixTQUFLM2lCLEtBQUwsQ0FBV0MsUUFBWCxDQUFvQlQsV0FBcEIsR0FBa0MsSUFBbEM7QUFDRCxHOztpQkFFRDBqQixpQiw4QkFBa0JwRCxNLEVBQWU7QUFBQSxRQUFQandCLENBQU8sdUVBQUwsR0FBSzs7QUFDL0IsU0FBS2UsQ0FBTCxDQUFPaXZCLGNBQVAsZ0JBQ0ssS0FBS2p2QixDQUFMLENBQU9pdkIsY0FEWjtBQUVFQyxvQkFGRjtBQUdFandCO0FBSEY7QUFLRCxHOztpQkFFRHN6QixPLG9CQUFReEQsSSxFQUFNQyxVLEVBQVk7QUFDeEIsUUFBRzl1QixLQUFLTSxHQUFMLENBQVMsS0FBS1IsQ0FBTCxDQUFPK3VCLElBQVAsR0FBWUEsSUFBckIsSUFBMkIsSUFBM0IsSUFBbUNDLGVBQWEsS0FBS2h2QixDQUFMLENBQU9ndkIsVUFBMUQsRUFBc0U7QUFDcEUsV0FBS2h2QixDQUFMLENBQU8rdUIsSUFBUCxHQUFjQSxJQUFkO0FBQ0EsV0FBSy91QixDQUFMLENBQU9ndkIsVUFBUCxHQUFvQkEsVUFBcEI7QUFDQSxXQUFLTSxXQUFMLENBQWlCcUMsV0FBakI7QUFDRDtBQUNGLEc7O2lCQUVEL2tCLGUsOEJBQWtCO0FBQ2hCLFdBQU8sS0FBSzVNLENBQUwsQ0FBTzhNLFlBQWQ7QUFDRCxHOztpQkFFRHdiLFEscUJBQVN1SCxLLEVBQU87QUFDZCxTQUFLSCxZQUFMLENBQWtCcEgsUUFBbEIsQ0FBMkJ1SCxLQUEzQjtBQUNELEc7O2lCQUVEK0IsWSwyQkFBZTtBQUNiLFdBQU8sS0FBS2pCLFlBQUwsQ0FBa0JuZ0IsT0FBbEIsT0FBOEIsQ0FBckM7QUFDRCxHOztpQkFFRDRYLFEsdUJBQVc7QUFDVCxXQUFPLElBQUUsSUFBRSxLQUFLcG9CLENBQUwsQ0FBT3lNLE1BQWxCO0FBQ0QsRzs7aUJBRUQrbEIsa0IsK0JBQW1CelcsRyxFQUFLO0FBQ3RCLFNBQUsvYixDQUFMLENBQU95eUIsZUFBUCxHQUF5QjFXLEdBQXpCO0FBQ0QsRzs7aUJBRUQ2TCxXLHdCQUFZcmMsUSxFQUFVO0FBQ3BCLFNBQUt2TCxDQUFMLENBQU91TCxRQUFQLEdBQWtCQSxRQUFsQjtBQUNELEc7O2lCQUVEbW5CLFkseUJBQWFseEIsQyxFQUFHO0FBQ2QsUUFBSVcsTUFBTSxJQUFWO0FBQ0EsUUFBR1gsSUFBRSxDQUFGLElBQU9BLElBQUUsS0FBSzRtQixRQUFMLEtBQWdCLENBQTVCLEVBQStCO0FBQzdCLDRCQUFhLEtBQUttSSxXQUFsQix5SEFBK0I7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBLFlBQXZCcnpCLENBQXVCOztBQUM3QixZQUFHc0UsSUFBRSxDQUFGLEdBQUksSUFBRXRFLEVBQUU4QyxDQUFGLENBQUlrTixLQUFWLElBQW1CMUwsSUFBRSxDQUFGLEdBQUksSUFBRXRFLEVBQUU4QyxDQUFGLENBQUltTixJQUFOLEdBQVcsQ0FBckMsRUFBd0M7QUFDdENoTCxnQkFBTSxLQUFOO0FBQ0E7QUFDRDtBQUNGO0FBQ0Y7QUFDRCxXQUFPQSxHQUFQO0FBQ0QsRzs7aUJBRUR3d0IsYywyQkFBZW54QixDLEVBQUc7QUFDaEIsUUFBSW94QixjQUFKO0FBQ0EsUUFBR3B4QixJQUFFLENBQUwsRUFBUTtBQUNOb3hCLGNBQVEsS0FBSzVDLFNBQWI7QUFDRCxLQUZELE1BR0ssSUFBR3h1QixJQUFFLEtBQUcsS0FBS3hCLENBQUwsQ0FBT3lNLE1BQVAsR0FBYyxDQUFqQixDQUFMLEVBQTBCO0FBQzdCLDRCQUFhLEtBQUs4akIsV0FBbEIseUhBQStCO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQSxZQUF2QnJ6QixDQUF1Qjs7QUFDN0IsWUFBR3NFLElBQUUsQ0FBRixJQUFLLElBQUV0RSxFQUFFOEMsQ0FBRixDQUFJa04sS0FBWCxJQUFvQjFMLElBQUUsQ0FBRixHQUFJLElBQUV0RSxFQUFFOEMsQ0FBRixDQUFJbU4sSUFBakMsRUFBdUM7QUFDckN5bEIsa0JBQVExMUIsQ0FBUjtBQUNBO0FBQ0Q7QUFDRjtBQUNGLEtBUEksTUFRQTtBQUNIMDFCLGNBQVEsS0FBS3hDLFVBQWI7QUFDRDtBQUNELFdBQU93QyxLQUFQO0FBQ0QsRzs7aUJBRURDLGEsMEJBQWNELEssRUFBTztBQUNuQixRQUFJRSxjQUFKO0FBQ0EsWUFBUUYsS0FBUjtBQUNFLFdBQUssS0FBSzVDLFNBQVY7QUFBcUI7QUFDakI4QyxrQkFBUSxDQUFDLENBQUQsRUFBSSxDQUFKLENBQVI7QUFDRjtBQUNEO0FBQ0QsV0FBSyxLQUFLMUMsVUFBVjtBQUFzQjtBQUNwQjBDLGtCQUFRLENBQUMsS0FBRyxLQUFLOXlCLENBQUwsQ0FBT3lNLE1BQVAsR0FBYyxDQUFqQixDQUFELEVBQXNCLEtBQUcsS0FBS3pNLENBQUwsQ0FBT3lNLE1BQVAsR0FBYyxDQUFqQixJQUFvQixDQUExQyxDQUFSO0FBQ0E7QUFDRDtBQUNEO0FBQVM7QUFDUHFtQixrQkFBUUYsUUFBTyxDQUFDLEtBQUdBLE1BQU01eUIsQ0FBTixDQUFRa04sS0FBUixHQUFjLENBQWpCLENBQUQsRUFBc0IsS0FBRzBsQixNQUFNNXlCLENBQU4sQ0FBUW1OLElBQVIsR0FBYSxDQUFoQixJQUFtQixDQUF6QyxDQUFQLEdBQW9EdEUsU0FBNUQ7QUFDRDtBQVhIO0FBYUEsV0FBT2lxQixLQUFQO0FBQ0QsRzs7aUJBRURwUSxPLHNCQUFVO0FBQ1IsUUFBTS9SLEtBQUt6USxLQUFLeVEsRUFBaEI7QUFDQSxRQUFJM1EsVUFBSjtBQUNBLFFBQUcsS0FBS29OLEtBQUwsS0FBZXVELEtBQUcsQ0FBbEIsSUFBdUIsS0FBS3ZELEtBQUwsS0FBZSxJQUFFdUQsRUFBRixHQUFLLENBQTlDLEVBQWlEO0FBQy9DLDRCQUFpQixLQUFLNGYsV0FBdEIseUhBQW1DO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQSxZQUEzQnFDLEtBQTJCOztBQUNqQyxZQUFHQSxNQUFNeGxCLEtBQU4sSUFBYXVELEtBQUcsQ0FBbkIsRUFBc0I7QUFDcEIzUSxjQUFJLEtBQUs2eUIsYUFBTCxDQUFtQkQsS0FBbkIsRUFBMEIsQ0FBMUIsSUFBNkIsQ0FBakM7QUFDQTtBQUNEO0FBQ0Y7QUFDRCxVQUFHLENBQUM1eUIsQ0FBSixFQUFPO0FBQ0xBLFlBQUksS0FBS29vQixRQUFMLEtBQWdCLENBQXBCO0FBQ0Q7QUFDRixLQVZELE1BV0ssSUFBRyxLQUFLaGIsS0FBTCxHQUFXdUQsS0FBRyxDQUFqQixFQUFvQjtBQUN2QjNRLFVBQUksQ0FBSjtBQUNELEtBRkksTUFHQSxJQUFHLEtBQUtvTixLQUFMLEdBQVcsSUFBRXVELEVBQUYsR0FBSyxDQUFuQixFQUFzQjtBQUN6QjNRLFVBQUksQ0FBSjtBQUNELEtBRkksTUFHQSxJQUFHLEtBQUtvTixLQUFMLEdBQVd1RCxFQUFkLEVBQWtCO0FBQ3JCM1EsVUFBSSxLQUFLb29CLFFBQUwsS0FBZ0IsQ0FBcEI7QUFDRCxLQUZJLE1BR0EsSUFBRyxLQUFLaGIsS0FBTCxJQUFZdUQsRUFBZixFQUFtQjtBQUN0QjNRLFVBQUksS0FBS29vQixRQUFMLEtBQWdCLENBQXBCO0FBQ0Q7QUFDRCxXQUFPcG9CLENBQVA7QUFDRCxHOztpQkFFRCt5QixXLDBCQUFjO0FBQ1osUUFBTS95QixJQUFJLEtBQUswaUIsT0FBTCxFQUFWO0FBQ0EsV0FBTzFpQixNQUFJLENBQUosSUFBU0EsTUFBSSxLQUFLb29CLFFBQUwsS0FBZ0IsQ0FBN0IsR0FBZ0MsQ0FBQ3BvQixDQUFELENBQWhDLEdBQXFDLENBQUNBLENBQUQsRUFBSUEsSUFBRSxDQUFOLENBQTVDO0FBQ0QsRzs7aUJBRURnekIsWSx5QkFBYXh4QixDLEVBQUc7QUFDZCxXQUFPLEtBQUs4dEIsV0FBTCxDQUFpQjBELFlBQWpCLENBQThCeHhCLENBQTlCLENBQVA7QUFDRCxHOztpQkFFRHl4QixzQixtQ0FBdUIvRCxNLEVBQVE7QUFDN0IsU0FBS0ksV0FBTCxDQUFpQjJELHNCQUFqQixDQUF3Qy9ELE1BQXhDO0FBQ0QsRzs7aUJBRURnRSxlLDhCQUFrQjtBQUNoQixRQUFJTixjQUFKO0FBQ0EsUUFBTXJnQixPQUFPLEtBQUtnZSxXQUFMLENBQWlCLENBQWpCLENBQWI7QUFBQSxRQUFrQzVmLEtBQUt6USxLQUFLeVEsRUFBNUM7QUFDQSxRQUFHLEtBQUt2RCxLQUFMLEtBQWF1RCxFQUFoQixFQUFvQjtBQUNsQmlpQixjQUFRLEtBQUt4QyxVQUFiO0FBQ0QsS0FGRCxNQUdLO0FBQ0gsVUFBRzdkLFFBQVFBLEtBQUtsRixLQUFMLEtBQWEsUUFBckIsSUFBaUNrRixLQUFLbkYsS0FBTCxHQUFXdUQsS0FBRyxDQUFsRCxFQUFxRDtBQUNuRGlpQixnQkFBUXJnQixJQUFSO0FBQ0QsT0FGRCxNQUdLLElBQUcsS0FBS25GLEtBQUwsS0FBZXVELEtBQUcsQ0FBbEIsSUFBdUIsS0FBS3ZELEtBQUwsS0FBZSxJQUFFdUQsRUFBRixHQUFLLENBQTlDLEVBQWlEO0FBQ3BEaWlCLGdCQUFRLEtBQUs1QyxTQUFiO0FBQ0Q7QUFDRjtBQUNELFdBQU80QyxLQUFQO0FBQ0QsRzs7aUJBRURPLGdCLCtCQUFtQjtBQUNqQixRQUFJUCxjQUFKO0FBQ0EsUUFBTXBnQixRQUFRLEtBQUsrZCxXQUFMLENBQWlCLEtBQUtBLFdBQUwsQ0FBaUIzeUIsTUFBakIsR0FBd0IsQ0FBekMsQ0FBZDtBQUFBLFFBQTJEK1MsS0FBS3pRLEtBQUt5USxFQUFyRTtBQUNBLFFBQUcsS0FBS3ZELEtBQUwsS0FBYSxDQUFoQixFQUFtQjtBQUNqQndsQixjQUFRLEtBQUs1QyxTQUFiO0FBQ0QsS0FGRCxNQUdLO0FBQ0gsVUFBR3hkLFNBQVNBLE1BQU1uRixLQUFOLEtBQWMsUUFBdkIsSUFBbUNtRixNQUFNcEYsS0FBTixJQUFhdUQsS0FBRyxDQUF0RCxFQUF5RDtBQUN2RGlpQixnQkFBUXBnQixLQUFSO0FBQ0QsT0FGRCxNQUdLLElBQUcsS0FBS3BGLEtBQUwsS0FBYXVELEtBQUcsQ0FBaEIsSUFBcUIsS0FBS3ZELEtBQUwsS0FBZSxJQUFFdUQsRUFBRixHQUFLLENBQTVDLEVBQStDO0FBQ2xEaWlCLGdCQUFRLEtBQUt4QyxVQUFiO0FBQ0Q7QUFDRjtBQUNELFdBQU93QyxLQUFQO0FBQ0QsRzs7aUJBRURRLG1CLGdDQUFvQmhtQixLLEVBQU87QUFDckI7QUFBQSxRQUFjdUQsRUFBZCxHQUFvQnpRLElBQXBCLENBQWN5USxFQUFkOztBQUVKLFFBQUcsS0FBS3FmLFNBQUwsQ0FBZXFELFFBQWxCLEVBQTRCO0FBQzFCLFVBQUlocEIsYUFBSjtBQUNBLFVBQUk7QUFDRkEsZUFBT25LLEtBQUtNLEdBQUwsQ0FBUyxLQUFLbXdCLFlBQUwsQ0FBa0IyQyxXQUFsQixDQUE4QixLQUFLdEQsU0FBTCxDQUFlcUQsUUFBN0MsRUFBdUQsT0FBdkQsSUFBZ0VqbUIsS0FBekUsQ0FBUDtBQUNELE9BRkQsQ0FHQSxPQUFNM0QsQ0FBTixFQUFTO0FBQ1BZLGVBQU8sQ0FBUDtBQUNEO0FBQ0RvSCxvQkFBY3JFLFFBQU11RCxLQUFHLENBQVQsSUFBY3RHLE9BQUtzRyxLQUFHLENBQXRCLEdBQXlCQSxLQUFHLENBQTVCLEdBQStCLEtBQUtjLFdBQWxEO0FBQ0QsS0FURCxNQVVLLElBQUcsS0FBSzJlLFVBQUwsQ0FBZ0JpRCxRQUFuQixFQUE2QjtBQUNoQyxVQUFJaHBCLGNBQUo7QUFDQSxVQUFJO0FBQ0ZBLGdCQUFPbkssS0FBS00sR0FBTCxDQUFTLEtBQUttd0IsWUFBTCxDQUFrQjJDLFdBQWxCLENBQThCLEtBQUtsRCxVQUFMLENBQWdCaUQsUUFBOUMsRUFBd0QsT0FBeEQsSUFBaUVqbUIsS0FBMUUsQ0FBUDtBQUNELE9BRkQsQ0FHQSxPQUFNM0QsQ0FBTixFQUFTO0FBQ1BZLGdCQUFPLENBQVA7QUFDRDtBQUNEb0gsb0JBQWNyRSxRQUFNdUQsS0FBRyxDQUFULElBQWN0RyxRQUFLc0csS0FBRyxDQUF0QixHQUF5QkEsS0FBRyxDQUFILEdBQUssSUFBOUIsR0FBb0MsS0FBS2MsV0FBdkQ7QUFDRCxLQVRJLE1BVUE7QUFDSEEsb0JBQWNkLEtBQUcsQ0FBSCxHQUFLLENBQUN2RCxVQUFRLENBQVQsSUFBWSxJQUEvQjtBQUNEOztBQUVELFdBQU87QUFDTHVFLG1CQUFhdkUsS0FEUjtBQUVMcUUsOEJBRks7QUFHTEMsa0JBQVksS0FBS0Q7QUFIWixLQUFQO0FBS0QsRzs7aUJBRUQ4aEIsUSx1QkFBcUQ7QUFBQTs7QUFBQSxRQUE1Q3RqQixJQUE0Qyx1RUFBdkMsQ0FBdUM7QUFBQSxRQUFwQ3VqQixXQUFvQyx1RUFBeEIsS0FBS3h6QixDQUFMLENBQU95eUIsZUFBaUI7O0FBQ25ELFFBQUlHLGNBQUo7QUFBQSxRQUFXendCLFlBQVg7QUFDQSxRQUFHLEtBQUt3dUIsWUFBTCxDQUFrQm5nQixPQUFsQixLQUE0QixFQUEvQixFQUFtQztBQUNqQyxVQUFNK0IsT0FBTyxLQUFLZ2UsV0FBTCxDQUFpQixDQUFqQixDQUFiO0FBQUEsVUFBa0M1ZixLQUFLelEsS0FBS3lRLEVBQTVDO0FBQ0EsVUFBRyxLQUFLdkQsS0FBTCxLQUFhdUQsRUFBaEIsRUFBb0I7QUFDbEJ4TyxjQUFNLEtBQUtzeEIsY0FBTCxDQUNKYixRQUFNLEtBQUt4QyxVQURQLEVBRUosS0FBS3B3QixDQUFMLENBQU9xTSxLQUFQLENBQWEySixJQUZULEVBR0pyRixFQUhJLEVBSUosQ0FBQyxLQUFLM1EsQ0FBTCxDQUFPcU0sS0FBUCxDQUFhc0osYUFKVixFQUtKLEtBQUszVixDQUFMLENBQU9xTSxLQUFQLENBQWF1SixXQUxULEVBTUosQ0FOSSxFQU9KLFVBQUN4SSxLQUFELEVBQU9oSCxNQUFQO0FBQUEsaUJBQWdCLE9BQUtqRixHQUFMLENBQVMsSUFBRXdQLEVBQUYsR0FBSyxDQUFMLEdBQU92RCxRQUFNLENBQXRCLEVBQXdCaEgsTUFBeEIsQ0FBaEI7QUFBQSxTQVBJLEVBUUosVUFBQ2dILEtBQUQsRUFBT2hILE1BQVAsRUFBaUI7QUFDZixpQkFBS2pGLEdBQUwsQ0FBUyxJQUFFd1AsRUFBRixHQUFLLENBQUwsR0FBT3ZELFFBQU0sQ0FBdEIsRUFBd0IsQ0FBeEI7QUFDQSxpQkFBS3NtQixjQUFMLENBQW9CdG1CLFFBQU91RCxFQUFQLEdBQVdBLEtBQUcsQ0FBSCxHQUFLLElBQXBDLEVBQXlDLFFBQXpDO0FBQ0QsU0FYRyxFQVlKNmlCLFdBWkksQ0FBTjtBQWNELE9BZkQsTUFnQks7QUFDSCxZQUFHamhCLFFBQVFBLEtBQUtsRixLQUFMLEtBQWEsUUFBckIsSUFBaUNrRixLQUFLbkYsS0FBTCxHQUFXdUQsS0FBRyxDQUFsRCxFQUFxRDtBQUNuRGlpQixrQkFBUTNpQixPQUFLc0MsS0FBSy9CLE9BQUwsRUFBTCxHQUFxQixLQUFLbWpCLGVBQUwsQ0FBcUIsQ0FBckIsRUFBd0JwaEIsS0FBSy9CLE9BQUwsS0FBZVAsSUFBdkMsRUFBNkMsQ0FBN0MsQ0FBckIsR0FBc0VzQyxJQUE5RTtBQUNBcFEsZ0JBQU0sS0FBS3N4QixjQUFMLENBQ0piLEtBREksRUFFSixLQUFLNXlCLENBQUwsQ0FBT3NNLElBQVAsQ0FBWTBKLElBQVosR0FBaUI0YyxNQUFNcGlCLE9BQU4sRUFGYixFQUdKRyxFQUhJLEVBSUosQ0FBQyxLQUFLM1EsQ0FBTCxDQUFPc00sSUFBUCxDQUFZcUosYUFKVCxFQUtKLEtBQUszVixDQUFMLENBQU9zTSxJQUFQLENBQVlzSixXQUxSLEVBTUosQ0FOSSxFQU9KLFVBQUN4SSxLQUFELEVBQU9oSCxNQUFQO0FBQUEsbUJBQWdCd3NCLE1BQU16eEIsR0FBTixDQUFVLE9BQUtpeUIsbUJBQUwsQ0FBeUJobUIsS0FBekIsQ0FBVixFQUEwQyxRQUExQyxFQUFtRGhILE1BQW5ELENBQWhCO0FBQUEsV0FQSSxFQVFKa2hCLEtBQUtzTSxrQkFBTCxDQUF3QnJMLElBQXhCLENBQTZCLEVBQUNwQyxNQUFNLElBQVAsRUFBYXlNLFlBQWIsRUFBN0IsQ0FSSSxFQVNKWSxXQVRJLENBQU47QUFXRCxTQWJELE1BY0ssSUFBRyxLQUFLcG1CLEtBQUwsS0FBZXVELEtBQUcsQ0FBbEIsSUFBdUIsS0FBS3ZELEtBQUwsS0FBZSxJQUFFdUQsRUFBRixHQUFLLENBQTlDLEVBQWlEO0FBQ3BEeE8sZ0JBQU0sS0FBS3N4QixjQUFMLENBQ0piLFFBQU0sS0FBSzVDLFNBRFAsRUFFSixLQUFLaHdCLENBQUwsQ0FBT3FNLEtBQVAsQ0FBYTJKLElBRlQsRUFHSnJGLEVBSEksRUFJSixDQUFDLEtBQUszUSxDQUFMLENBQU9xTSxLQUFQLENBQWFzSixhQUpWLEVBS0osS0FBSzNWLENBQUwsQ0FBT3FNLEtBQVAsQ0FBYXVKLFdBTFQsRUFNSixDQU5JLEVBT0osVUFBQ3hJLEtBQUQsRUFBT2hILE1BQVAsRUFBaUI7QUFDZixtQkFBS2pGLEdBQUwsQ0FBUyxJQUFFd1AsRUFBRixHQUFLdkQsUUFBTSxDQUFwQixFQUFzQmhILE1BQXRCO0FBQ0EsZ0JBQUdnSCxRQUFNdUQsS0FBRyxDQUFaLEVBQWU7QUFDYixxQkFBSytpQixjQUFMLENBQW9CdG1CLFFBQU91RCxLQUFHLENBQVYsR0FBYSxDQUFqQyxFQUFtQyxRQUFuQztBQUNEO0FBQ0YsV0FaRyxFQWFKLFVBQUN2RCxLQUFELEVBQU9oSCxNQUFQO0FBQUEsbUJBQWlCLE9BQUtqRixHQUFMLENBQVNpTSxVQUFRLENBQVIsR0FBVyxDQUFYLEdBQWMsSUFBRXVELEVBQUYsR0FBS3ZELFFBQU0sQ0FBbEMsRUFBb0MsQ0FBcEMsQ0FBakI7QUFBQSxXQWJJLEVBY0pvbUIsV0FkSSxDQUFOO0FBZ0JEO0FBQ0Y7QUFDRjtBQUNELFdBQU9yeEIsR0FBUDtBQUNELEc7O2lCQUVEMHhCLFMsd0JBQXNEO0FBQUE7O0FBQUEsUUFBNUM1akIsSUFBNEMsdUVBQXZDLENBQXVDO0FBQUEsUUFBcEN1akIsV0FBb0MsdUVBQXhCLEtBQUt4ekIsQ0FBTCxDQUFPeXlCLGVBQWlCOztBQUNwRCxRQUFJRyxjQUFKO0FBQUEsUUFBV3p3QixZQUFYO0FBQ0EsUUFBRyxLQUFLd3VCLFlBQUwsQ0FBa0JuZ0IsT0FBbEIsS0FBNEIsRUFBL0IsRUFBbUM7QUFDakMsVUFBTWdDLFFBQVEsS0FBSytkLFdBQUwsQ0FBaUIsS0FBS0EsV0FBTCxDQUFpQjN5QixNQUFqQixHQUF3QixDQUF6QyxDQUFkO0FBQUEsVUFBMkQrUyxLQUFLelEsS0FBS3lRLEVBQXJFO0FBQ0EsVUFBRyxLQUFLdkQsS0FBTCxLQUFhLENBQWhCLEVBQW1CO0FBQ2pCakwsY0FBTSxLQUFLc3hCLGNBQUwsQ0FDSmIsUUFBTSxLQUFLNUMsU0FEUCxFQUVKLEtBQUtod0IsQ0FBTCxDQUFPcU0sS0FBUCxDQUFhMkosSUFGVCxFQUdKLENBSEksRUFJSixLQUFLaFcsQ0FBTCxDQUFPcU0sS0FBUCxDQUFhc0osYUFKVCxFQUtKLEtBQUszVixDQUFMLENBQU9xTSxLQUFQLENBQWF1SixXQUxULEVBTUosQ0FOSSxFQU9KLFVBQUN4SSxLQUFELEVBQU9oSCxNQUFQO0FBQUEsaUJBQWdCLE9BQUtqRixHQUFMLENBQVNpTSxRQUFNLENBQWYsRUFBaUJoSCxNQUFqQixDQUFoQjtBQUFBLFNBUEksRUFRSixVQUFDZ0gsS0FBRCxFQUFPaEgsTUFBUCxFQUFpQjtBQUNmLGlCQUFLakYsR0FBTCxDQUFTaU0sUUFBTSxDQUFmLEVBQWlCLENBQWpCO0FBQ0EsaUJBQUtzbUIsY0FBTCxDQUFvQnRtQixRQUFPdUQsS0FBRyxDQUFWLEdBQWEsQ0FBakMsRUFBbUMsUUFBbkM7QUFDRCxTQVhHLEVBWUo2aUIsV0FaSSxDQUFOO0FBY0QsT0FmRCxNQWdCSztBQUNILFlBQUdoaEIsU0FBU0EsTUFBTW5GLEtBQU4sS0FBYyxRQUF2QixJQUFtQ21GLE1BQU1wRixLQUFOLElBQWF1RCxLQUFHLENBQXRELEVBQXlEO0FBQ3ZEaWlCLGtCQUFRM2lCLE9BQUt1QyxNQUFNaEMsT0FBTixFQUFMLEdBQXNCLEtBQUttakIsZUFBTCxDQUFxQixLQUFLcEQsV0FBTCxDQUFpQjN5QixNQUFqQixHQUF3QixDQUE3QyxFQUFnRHFTLElBQWhELEVBQXNELENBQXRELENBQXRCLEdBQWdGdUMsS0FBeEY7QUFDQXJRLGdCQUFNLEtBQUtzeEIsY0FBTCxDQUNKYixLQURJLEVBRUosS0FBSzV5QixDQUFMLENBQU9zTSxJQUFQLENBQVkwSixJQUFaLEdBQWlCNGMsTUFBTXBpQixPQUFOLEVBRmIsRUFHSixDQUhJLEVBSUosS0FBS3hRLENBQUwsQ0FBT3NNLElBQVAsQ0FBWXFKLGFBSlIsRUFLSixLQUFLM1YsQ0FBTCxDQUFPc00sSUFBUCxDQUFZc0osV0FMUixFQU1KLENBTkksRUFPSixVQUFDeEksS0FBRCxFQUFPaEgsTUFBUDtBQUFBLG1CQUFnQndzQixNQUFNenhCLEdBQU4sQ0FBVSxPQUFLaXlCLG1CQUFMLENBQXlCaG1CLEtBQXpCLENBQVYsRUFBMEMsUUFBMUMsRUFBbURoSCxNQUFuRCxDQUFoQjtBQUFBLFdBUEksRUFRSmtoQixLQUFLc00sa0JBQUwsQ0FBd0JyTCxJQUF4QixDQUE2QixFQUFDcEMsTUFBTSxJQUFQLEVBQWF5TSxZQUFiLEVBQTdCLENBUkksRUFTSlksV0FUSSxDQUFOO0FBV0QsU0FiRCxNQWNLLElBQUcsS0FBS3BtQixLQUFMLEtBQWF1RCxLQUFHLENBQWhCLElBQXFCLEtBQUt2RCxLQUFMLEtBQWUsSUFBRXVELEVBQUYsR0FBSyxDQUE1QyxFQUErQztBQUNsRHhPLGdCQUFNLEtBQUtzeEIsY0FBTCxDQUNKYixRQUFNLEtBQUt4QyxVQURQLEVBRUosS0FBS3B3QixDQUFMLENBQU9xTSxLQUFQLENBQWEySixJQUZULEVBR0osQ0FISSxFQUlKLEtBQUtoVyxDQUFMLENBQU9xTSxLQUFQLENBQWFzSixhQUpULEVBS0osS0FBSzNWLENBQUwsQ0FBT3FNLEtBQVAsQ0FBYXVKLFdBTFQsRUFNSixDQU5JLEVBT0osVUFBQ3hJLEtBQUQsRUFBT2hILE1BQVAsRUFBaUI7QUFDZixtQkFBS2pGLEdBQUwsQ0FBU3dQLEtBQUcsQ0FBSCxHQUFLdkQsUUFBTSxDQUFwQixFQUFzQmhILE1BQXRCO0FBQ0EsZ0JBQUdnSCxRQUFNdUQsS0FBRyxDQUFaLEVBQWU7QUFDYixxQkFBSytpQixjQUFMLENBQW9CL2lCLEtBQUcsQ0FBSCxHQUFLLElBQXpCLEVBQThCLFFBQTlCO0FBQ0Q7QUFDRixXQVpHLEVBYUosVUFBQ3ZELEtBQUQsRUFBT2hILE1BQVA7QUFBQSxtQkFBZ0IsT0FBS2pGLEdBQUwsQ0FBU3dQLEtBQUcsQ0FBSCxHQUFLdkQsUUFBTSxDQUFwQixFQUFzQixDQUF0QixDQUFoQjtBQUFBLFdBYkksRUFjSm9tQixXQWRJLENBQU47QUFnQkQ7QUFDRjtBQUNGO0FBQ0QsV0FBT3J4QixHQUFQO0FBQ0QsRzs7QUFFRDs7aUJBRUEyeEIsYyw2QkFBaUI7QUFDZixTQUFLeEUsV0FBTCxDQUFpQnlFLFlBQWpCO0FBQ0EsV0FBTyxLQUFLQyxTQUFMLENBQWVwQixLQUFmLENBQXFCcUIsS0FBNUI7QUFDQSxXQUFPLEtBQUtELFNBQUwsQ0FBZXBCLEtBQWYsQ0FBcUJzQixXQUE1QjtBQUNBLFdBQU8sS0FBS0YsU0FBWjtBQUNELEc7O2lCQUVERyxRLHVCQUFXO0FBQ1QsUUFBTTNDLE9BQU8sS0FBS0QsR0FBTCxDQUFTQyxJQUF0QjtBQUFBLFFBQTRCcnZCLE1BQU0sRUFBbEM7QUFDQSxRQUFHLEtBQUs2dEIsU0FBTCxDQUFlcUQsUUFBbEIsRUFBNEI7QUFDMUI3QixXQUFLLENBQUwsRUFBUTRDLGFBQVIsQ0FBc0IsS0FBS2hFLFVBQUwsQ0FBZ0JoaEIsS0FBdEM7QUFDQWpOLFVBQUlZLEdBQUosR0FBVSxFQUFFWixJQUFJYSxHQUFKLEdBQVV3dUIsS0FBSyxDQUFMLEVBQVF4dUIsR0FBUixDQUFZOUUsQ0FBeEIsQ0FBVjtBQUNELEtBSEQsTUFJSyxJQUFHLEtBQUtreUIsVUFBTCxDQUFnQmlELFFBQW5CLEVBQTZCO0FBQ2hDN0IsV0FBSyxDQUFMLEVBQVE0QyxhQUFSLENBQXNCLEtBQUtwRSxTQUFMLENBQWU1Z0IsS0FBckM7QUFDQWpOLFVBQUlhLEdBQUosR0FBVSxFQUFFYixJQUFJWSxHQUFKLEdBQVV5dUIsS0FBSyxDQUFMLEVBQVF6dUIsR0FBUixDQUFZN0UsQ0FBeEIsQ0FBVjtBQUNELEtBSEksTUFJQTtBQUNIc3pCLFdBQUssQ0FBTCxFQUFRNEMsYUFBUixDQUFzQixLQUFLcEUsU0FBTCxDQUFlNWdCLEtBQXJDO0FBQ0FvaUIsV0FBSyxDQUFMLEVBQVE0QyxhQUFSLENBQXNCLEtBQUtoRSxVQUFMLENBQWdCaGhCLEtBQXRDO0FBQ0FvaUIsV0FBSyxDQUFMLEVBQVE2QyxLQUFSLENBQWM3QyxLQUFLLENBQUwsQ0FBZDtBQUNBcnZCLFVBQUlZLEdBQUosR0FBVXl1QixLQUFLLENBQUwsRUFBUXp1QixHQUFSLENBQVk3RSxDQUF0QjtBQUNBaUUsVUFBSWEsR0FBSixHQUFVd3VCLEtBQUssQ0FBTCxFQUFReHVCLEdBQVIsQ0FBWTlFLENBQXRCO0FBQ0Q7QUFDRCxXQUFPaUUsR0FBUDtBQUNELEc7O2lCQUVEbXlCLGEsMEJBQWN6Z0IsSyxFQUFPO0FBQUEsUUFDZDNWLENBRGMsR0FDTjJWLEtBRE0sQ0FDZDNWLENBRGM7QUFBQSxRQUNYUixDQURXLEdBQ05tVyxLQURNLENBQ1huVyxDQURXO0FBQUEsUUFDQzYyQixHQURELEdBQ08sS0FBS0osUUFBTCxFQURQO0FBQUEsUUFDd0IvbUIsS0FEeEI7O0FBRW5CQSxZQUFRLENBQUNtbkIsSUFBSXZ4QixHQUFKLEdBQVE5RSxDQUFULEtBQWFxMkIsSUFBSXZ4QixHQUFKLEdBQVF1eEIsSUFBSXh4QixHQUF6QixJQUE4QjdDLEtBQUt5USxFQUEzQztBQUNBO0FBQ0EsV0FBT3pRLEtBQUs4QyxHQUFMLENBQVMsS0FBS3N1QixTQUFkLEVBQXlCcHhCLEtBQUs2QyxHQUFMLENBQVM3QyxLQUFLeVEsRUFBTCxHQUFRLEtBQUsyZ0IsU0FBdEIsRUFBaUNsa0IsS0FBakMsQ0FBekIsQ0FBUDtBQUNELEc7O2lCQUVEOGpCLGMsMkJBQWUxbkIsTSxFQUFRO0FBQ3JCLFFBQUlySCxNQUFNLEtBQVY7QUFDQSxRQUFNeXdCLFFBQVFwcEIsT0FBT0EsTUFBUCxDQUFjNkYsUUFBZCxDQUF1QkMsSUFBckM7QUFBQSxRQUNNdFAsaUJBQVF3SixPQUFPZ3JCLEVBQWYsQ0FETjtBQUFBLFFBQzBCMTFCLElBQUkwSyxPQUFPc2EsSUFBUCxDQUFZQyxhQUQxQztBQUVBLFFBQUdqbEIsSUFBRSxDQUFMLEVBQVE7QUFDTmtCLFFBQUU5QixDQUFGLEdBQU1ZLE1BQUksQ0FBSixHQUFPa0IsRUFBRTlCLENBQVQsR0FBWSxJQUFFOEIsRUFBRTlCLENBQXRCO0FBQ0EsVUFBRzAwQixNQUFNNkIsWUFBTixDQUFtQmhXLGdCQUFuQixDQUFvQyxJQUFwQyxFQUEwQ3plLENBQTFDLEtBQWdENHlCLE1BQU1TLFFBQXpELEVBQW1FO0FBQ2pFLFlBQUcsS0FBS1csU0FBUixFQUFtQjtBQUNqQixlQUFLRixjQUFMO0FBQ0Q7QUFDRGxCLGNBQU1xQixLQUFOLEdBQWNyRCx1QkFBYThELFlBQTNCO0FBQ0E5QixjQUFNc0IsV0FBTixHQUFvQnRELHVCQUFhK0QscUJBQWIsQ0FBbUMsS0FBS0wsYUFBTCxDQUFtQjlxQixPQUFPcUssS0FBMUIsQ0FBbkMsQ0FBcEI7QUFDQSxhQUFLK2dCLFFBQUwsR0FBZ0I7QUFDZHByQix3QkFEYztBQUVkb3BCO0FBRmMsU0FBaEI7QUFJQXp3QixjQUFNLElBQU47QUFDQSxhQUFLbXRCLFdBQUwsQ0FBaUJ1RixhQUFqQjtBQUNEO0FBQ0Y7QUFDRCxXQUFPMXlCLEdBQVA7QUFDRCxHOztpQkFFRGl2QixjLDJCQUFldmQsSyxFQUFPO0FBQ3BCLFFBQU0rZSxRQUFRLEtBQUtnQyxRQUFMLENBQWNoQyxLQUE1QjtBQUFBLFFBQW1DNXlCLElBQUk0eUIsTUFBTWptQixRQUFOLEVBQXZDO0FBQ0FpbUIsVUFBTXFCLEtBQU4sR0FBY3JELHVCQUFhOEQsWUFBM0I7QUFDQTlCLFVBQU1zQixXQUFOLEdBQW9CdEQsdUJBQWErRCxxQkFBYixDQUFtQyxLQUFLTCxhQUFMLENBQW1CemdCLEtBQW5CLENBQW5DLENBQXBCO0FBQ0EsV0FBTyxJQUFQO0FBQ0QsRzs7aUJBRUR3ZCxpQixnQ0FBb0I7QUFDbEIsV0FBTyxLQUFLdUQsUUFBTCxDQUFjaEMsS0FBZCxDQUFvQnFCLEtBQTNCO0FBQ0EsV0FBTyxLQUFLVyxRQUFMLENBQWNoQyxLQUFkLENBQW9Cc0IsV0FBM0I7QUFDQSxXQUFPLEtBQUtVLFFBQVo7QUFDQSxTQUFLdEYsV0FBTCxDQUFpQnlFLFlBQWpCO0FBQ0QsRzs7aUJBRURlLFcsd0JBQVloMkIsQyxFQUFHO0FBQ2IsV0FBT0EsSUFBRyxLQUFLbzBCLGVBQUwsRUFBSCxHQUEyQixLQUFLQyxnQkFBTCxFQUFsQztBQUNELEc7O2lCQUVENEIsSSxpQkFBS2oyQixDLEVBQVc7QUFBQSxRQUFSbVIsSUFBUSx1RUFBSCxDQUFHOztBQUNkLFdBQU9uUixJQUFHLEtBQUt5MEIsUUFBTCxDQUFjdGpCLElBQWQsQ0FBSCxHQUF3QixLQUFLNGpCLFNBQUwsQ0FBZTVqQixJQUFmLENBQS9CO0FBQ0QsRzs7aUJBRUQra0IsVyx3QkFBWTlGLE0sRUFBUTtBQUNsQixTQUFLTCxlQUFMLEdBQXVCSyxNQUF2QjtBQUNELEc7O2lCQUVEK0YsYywyQkFBZXhyQixDLEVBQUdwSyxJLEVBQU07QUFBQTs7QUFDdEIsUUFBRyxLQUFLd3ZCLGVBQVIsRUFBeUI7QUFBQSx1QkFDUnh2QixLQUFLQSxJQURHO0FBQUEsVUFDaEJQLENBRGdCLGNBQ2hCQSxDQURnQjtBQUFBLFVBQ2IwQyxDQURhLGNBQ2JBLENBRGE7O0FBRXZCLFVBQUdpSSxFQUFFQyxJQUFGLEtBQVMsV0FBWixFQUF5QjtBQUN2QixZQUFHLEtBQUtzcUIsU0FBTCxJQUFrQixLQUFLQSxTQUFMLENBQWVrQixRQUFmLEtBQTBCcnNCLFNBQS9DLEVBQTBEO0FBQ3hELFlBQUUsS0FBS21yQixTQUFMLENBQWVrQixRQUFqQjtBQUNELFNBRkQsTUFHSztBQUNILGNBQUcsS0FBS2xCLFNBQVIsRUFBbUI7QUFDakIveUIsb0JBQVFDLElBQVIsQ0FBYSx1Q0FBYjtBQUNBLGdCQUFHLEtBQUs4eUIsU0FBTCxDQUFleHlCLENBQWYsS0FBbUJBLENBQXRCLEVBQXlCO0FBQ3ZCLG1CQUFLc3lCLGNBQUw7QUFDRDtBQUNGO0FBQ0QsY0FBRyxDQUFDLEtBQUtFLFNBQU4sSUFBbUIsQ0FBQyxLQUFLWSxRQUE1QixFQUFzQztBQUNwQyxnQkFBSXp5QixNQUFNcWEsUUFBUUMsT0FBUixDQUFnQjVULFNBQWhCLENBQVY7QUFDQSxnQkFBTXNzQixhQUFhLElBQW5CO0FBQUEsZ0JBQ01DLFFBQVEsS0FBS3pDLGNBQUwsQ0FBb0JueEIsQ0FBcEIsQ0FEZDtBQUFBLGdCQUVNNnpCLFdBQVcsS0FBS1AsV0FBTCxDQUFpQmgyQixDQUFqQixDQUZqQjtBQUdBLGdCQUFHMEMsSUFBRSxDQUFGLElBQU9BLElBQUUsS0FBRyxLQUFLeEIsQ0FBTCxDQUFPeU0sTUFBUCxHQUFjLENBQWpCLENBQVQsSUFBZ0Myb0IsTUFBTS9CLFFBQXRDLEtBQW1EK0IsTUFBTWhvQixLQUFOLEdBQVkrbkIsVUFBWixJQUEwQkMsTUFBTWhvQixLQUFOLEdBQVlsTixLQUFLeVEsRUFBTCxHQUFRd2tCLFVBQWpHLENBQUgsRUFBaUg7QUFDL0doekIsb0JBQU1xYSxRQUFRQyxPQUFSLENBQWdCMlksS0FBaEIsQ0FBTjtBQUNELGFBRkQsTUFHSyxJQUFHQSxVQUFRQyxRQUFYLEVBQXFCO0FBQ3hCLGtCQUFNOUUsZUFDSixLQUFLUCxTQURELFNBRUQsS0FBS08sV0FGSixHQUdKLEtBQUtILFVBSEQsRUFBTjtBQUtBLGtCQUFNcHhCLElBQUl1eEIsWUFBWW53QixPQUFaLENBQW9CZzFCLEtBQXBCLENBQVY7QUFBQSxrQkFBc0NFLFlBQVksQ0FBQ3QyQixDQUFELEdBQUl1eEIsWUFBWXZ4QixJQUFFLElBQUVGLENBQUosR0FBTSxDQUFsQixDQUFKLEdBQTBCK0osU0FBNUU7QUFDQSxrQkFBRyxDQUFDeXNCLFNBQUQsSUFBYyxDQUFDQSxVQUFVakMsUUFBekIsSUFBcUNpQyxVQUFVbG9CLEtBQVYsR0FBZ0IrbkIsVUFBaEIsSUFBOEJHLFVBQVVsb0IsS0FBVixHQUFnQmxOLEtBQUt5USxFQUFMLEdBQVF3a0IsVUFBOUYsRUFBMEc7QUFDeEdoekIsc0JBQU0sS0FBSzR5QixJQUFMLENBQVVqMkIsQ0FBVixFQUFhLENBQWIsRUFBZ0JpZixJQUFoQixDQUFxQixVQUFDNlUsS0FBRCxFQUFVO0FBQ25DLHNCQUFHLENBQUNBLEtBQUosRUFBVztBQUNULDJCQUFPLE9BQUtvQixTQUFaO0FBQ0QsbUJBRkQsTUFHSztBQUNILDJCQUFLckQsWUFBTCxDQUFrQjRFLFdBQWxCLENBQThCM0MsTUFBTVMsUUFBcEMsRUFBOEMsVUFBOUMsRUFBMEQsQ0FBMUQ7QUFDRDtBQUNELHlCQUFPVCxLQUFQO0FBQ0QsaUJBUkssQ0FBTjtBQVNBLHFCQUFLb0IsU0FBTCxHQUFpQjtBQUNma0IsNEJBQVU7QUFESyxpQkFBakI7QUFHRDtBQUNGO0FBQ0QveUIsZ0JBQUk0YixJQUFKLENBQVMsVUFBQzZVLEtBQUQsRUFBVTtBQUNqQixrQkFBRyxPQUFLb0IsU0FBTCxJQUFrQixPQUFLQSxTQUFMLENBQWVrQixRQUFmLEdBQXdCLENBQTdDLEVBQWdEO0FBQzlDdEMsd0JBQVEvcEIsU0FBUjtBQUNBLHVCQUFPLE9BQUttckIsU0FBWjtBQUNEO0FBQ0Qsa0JBQUdwQixLQUFILEVBQVU7QUFDUix1QkFBS3RELFdBQUwsQ0FBaUJ1RixhQUFqQjtBQUNBLG9CQUFPNzBCLElBQUk0eUIsTUFBTWptQixRQUFOLEVBQVg7QUFDQWltQixzQkFBTXFCLEtBQU4sR0FBYyxPQUFLdEQsWUFBTCxDQUFrQjZFLGlCQUFsQixDQUFvQ3gxQixFQUFFZ1csSUFBRixHQUFPNGMsTUFBTXBpQixPQUFOLEVBQTNDLEVBQTREMVIsSUFBR29CLEtBQUt5USxFQUFMLEdBQVF3a0IsVUFBWCxHQUF1QkEsVUFBbkYsQ0FBZDtBQUNBdkMsc0JBQU1zQixXQUFOLEdBQW9CO0FBQUEseUJBQUssQ0FBQ3AxQixJQUFHLENBQUMsQ0FBSixHQUFPLENBQVIsSUFBVzh4Qix1QkFBYTZFLG1CQUFiLEVBQWhCO0FBQUEsaUJBQXBCO0FBQ0EsdUJBQUs5RSxZQUFMLENBQWtCNEUsV0FBbEIsQ0FBOEIzQyxNQUFNUyxRQUFwQyxFQUE4QyxPQUE5QyxFQUF1RHYwQixJQUFHb0IsS0FBS3lRLEVBQUwsR0FBUSxNQUFJd2tCLFVBQWYsR0FBMkIsTUFBSUEsVUFBdEY7QUFDQSx1QkFBS25CLFNBQUwsR0FBaUI7QUFDZnh5QixzQkFEZTtBQUVmb3hCO0FBRmUsaUJBQWpCO0FBSUEsdUJBQUsvQixNQUFMLENBQVksSUFBRSxFQUFkO0FBQ0Q7QUFDRixhQWpCRDtBQWtCRDtBQUNGO0FBRUYsT0E5REQsTUErREssSUFBRyxLQUFLbUQsU0FBTCxJQUFrQnZxQixFQUFFQyxJQUFGLEtBQVMsVUFBOUIsRUFBMEM7QUFDN0MsWUFBRyxLQUFLc3FCLFNBQUwsQ0FBZWtCLFFBQWYsS0FBMEJyc0IsU0FBN0IsRUFBd0M7QUFDdEMsWUFBRSxLQUFLbXJCLFNBQUwsQ0FBZWtCLFFBQWpCO0FBQ0QsU0FGRCxNQUdLLElBQUcxekIsTUFBSSxLQUFLd3lCLFNBQUwsQ0FBZXh5QixDQUF0QixFQUF5QjtBQUM1QixlQUFLc3lCLGNBQUw7QUFDRDtBQUNGLE9BUEksTUFRQSxJQUFHcnFCLEVBQUVDLElBQUYsS0FBUyxXQUFaLEVBQXlCO0FBQzVCLGFBQUtnc0IsZUFBTCxHQUF1QjtBQUNyQngzQixhQUFHdUwsRUFBRXFuQixLQURnQjtBQUVyQnB6QixhQUFHK0wsRUFBRXNuQjtBQUZnQixTQUF2QjtBQUlELE9BTEksTUFNQSxJQUFHdG5CLEVBQUVDLElBQUYsS0FBUyxPQUFaLEVBQXFCO0FBQ3hCLFlBQUd4SixLQUFLb0QsSUFBTCxDQUFVcEQsS0FBS3kxQixHQUFMLENBQVMsS0FBS0QsZUFBTCxDQUFxQngzQixDQUFyQixHQUF1QnVMLEVBQUVxbkIsS0FBbEMsRUFBd0MsQ0FBeEMsSUFBMkM1d0IsS0FBS3kxQixHQUFMLENBQVMsS0FBS0QsZUFBTCxDQUFxQmg0QixDQUFyQixHQUF1QitMLEVBQUVzbkIsS0FBbEMsRUFBd0MsQ0FBeEMsQ0FBckQsSUFBaUcsQ0FBcEcsRUFBdUc7QUFDckcsY0FBTXFFLFNBQVEsS0FBS3pDLGNBQUwsQ0FBb0JueEIsQ0FBcEIsQ0FBZDtBQUNBLGNBQUc0ekIsT0FBTS9CLFFBQVQsRUFBbUI7QUFDakIsZ0JBQU1yYSxLQUFLb2MsT0FBTS9CLFFBQWpCO0FBQUEsZ0JBQ016cEIsUUFBUXdyQixPQUFNem9CLFFBQU4sRUFEZDtBQUVBLGlCQUFLZ2tCLFlBQUwsQ0FBa0I0RSxXQUFsQixDQUE4QnZjLEVBQTlCLEVBQWtDLFVBQWxDLEVBQThDLENBQUNsYSxJQUFHLENBQUMsQ0FBSixHQUFPLENBQVIsSUFBVzhLLE1BQU0rTCxhQUEvRDtBQUNEO0FBQ0Y7QUFDRCxlQUFPLEtBQUsrZixlQUFaO0FBQ0Q7QUFDRjtBQUNGLEc7O2lCQUVEbEYsYSwwQkFBY3h3QixDLEVBQUc0eUIsSyxFQUFPO0FBQ3RCLFNBQUtyQyxXQUFMLENBQWlCak4sTUFBakIsQ0FBd0J0akIsQ0FBeEIsRUFBMkIsQ0FBM0IsRUFBOEI0eUIsS0FBOUI7QUFDQSxTQUFLekMsbUJBQUwsQ0FBeUJ5QyxLQUF6QixFQUFnQyxDQUFoQztBQUNBLFNBQUt0QyxnQkFBTCxDQUFzQm5nQixHQUF0QixDQUEwQnlpQixNQUFNeGpCLEtBQWhDO0FBQ0QsRzs7aUJBRUQrZ0IsbUIsZ0NBQW9CeUMsSyxFQUFPMWdCLE0sRUFBUTtBQUFBOztBQUNqQyxRQUFNMGpCLGlCQUFpQixJQUFJMVgsOEJBQUosQ0FBeUIsS0FBS2pSLE1BQUwsQ0FBWTNHLEdBQXJDLEVBQTBDLEtBQUsyRyxNQUFMLENBQVkxRyxHQUF0RCxFQUEyRHN2Qix1QkFBYXhyQixJQUF4RSxDQUF2QjtBQUFBLFFBQ014TCxJQUFJLElBRFY7QUFBQSxRQUVNeWYsU0FBUyxJQUFJdVgsc0JBQUosQ0FBaUIsSUFBRSxNQUFJaDNCLENBQXZCLEVBQTBCLE1BQUlBLENBQTlCLEVBQWlDQSxDQUFqQyxDQUZmO0FBR0F5ZixXQUFPc1UsS0FBUCxHQUFlQSxLQUFmO0FBQ0F0VSxXQUFPM1UsUUFBUCxHQUFrQixLQUFLc3JCLGNBQUwsQ0FBb0IxTSxJQUFwQixDQUF5QixJQUF6QixDQUFsQjtBQUNBcU4sbUJBQWVyWCxTQUFmLENBQXlCRCxNQUF6QjtBQUNBc1UsVUFBTTZCLFlBQU4sR0FBcUJuVyxNQUFyQjtBQUNBc1UsVUFBTXhqQixLQUFOLENBQVlDLFFBQVosQ0FBcUJ5bUIsYUFBckIsR0FBcUMsVUFBQ3JzQixDQUFELEVBQUlwSyxJQUFKLEVBQVk7QUFDL0MsVUFBTVAsSUFBSU8sS0FBS3lrQixJQUFMLENBQVVDLGFBQXBCO0FBQ0EsVUFBR2psQixJQUFFLENBQUwsRUFBUTtBQUNOLFlBQU0wQyxJQUFJMUMsTUFBSSxDQUFKLEdBQU9vVCxTQUFPLElBQUUwZ0IsTUFBTTV5QixDQUFOLENBQVFrTixLQUF4QixHQUErQmdGLFNBQU8sSUFBRTBnQixNQUFNNXlCLENBQU4sQ0FBUW1OLElBQWpCLEdBQXNCLENBQS9EO0FBQ0F5b0IsdUJBQWU3ckIsT0FBZixDQUF1Qk4sQ0FBdkIsRUFBMEIsRUFBQ3ZMLEdBQUdZLE1BQUksQ0FBSixHQUFPTyxLQUFLbTFCLEVBQUwsQ0FBUXQyQixDQUFmLEdBQWtCLElBQUVtQixLQUFLbTFCLEVBQUwsQ0FBUXQyQixDQUFoQyxFQUFtQ1IsR0FBRzJCLEtBQUttMUIsRUFBTCxDQUFROTJCLENBQTlDLEVBQWlEb0IsSUFBakQsRUFBb0QwQyxJQUFwRCxFQUExQjtBQUNBLGVBQUs4dEIsV0FBTCxDQUFpQnlHLHNCQUFqQixDQUF3Q3YwQixDQUF4QyxFQUEyQ2lJLENBQTNDLEVBQThDcEssSUFBOUM7QUFDRDtBQUNGLEtBUEQ7QUFRQXV6QixVQUFNeGpCLEtBQU4sQ0FBWUMsUUFBWixDQUFxQjJtQixhQUFyQixHQUFxQyxVQUFDdnNCLENBQUQsRUFBSXBLLElBQUosRUFBWTtBQUMvQyxVQUFNUCxJQUFJTyxLQUFLeWtCLElBQUwsQ0FBVUMsYUFBcEI7QUFDQSxVQUFHamxCLElBQUUsQ0FBTCxFQUFRO0FBQ04sWUFBTTBDLElBQUkxQyxNQUFJLENBQUosR0FBT29ULFNBQU8sSUFBRTBnQixNQUFNNXlCLENBQU4sQ0FBUWtOLEtBQXhCLEdBQStCZ0YsU0FBTyxJQUFFMGdCLE1BQU01eUIsQ0FBTixDQUFRbU4sSUFBakIsR0FBc0IsQ0FBL0Q7QUFDQSxlQUFLbWlCLFdBQUwsQ0FBaUJ5RyxzQkFBakIsQ0FBd0N2MEIsQ0FBeEMsRUFBMkNpSSxDQUEzQyxFQUE4Q3BLLElBQTlDO0FBQ0Q7QUFDRixLQU5EO0FBT0EsU0FBSzROLE1BQUwsQ0FBWWtrQixJQUFaLENBQWlCL00sUUFBakIsQ0FBMEJ3TyxNQUFNeGpCLEtBQWhDO0FBQ0EsU0FBS25DLE1BQUwsQ0FBWWdwQixXQUFaLENBQXdCN1IsUUFBeEIsQ0FBaUN3TyxNQUFNeGpCLEtBQXZDO0FBQ0EsU0FBS25DLE1BQUwsQ0FBWWlwQixXQUFaLENBQXdCOVIsUUFBeEIsQ0FBaUN3TyxNQUFNeGpCLEtBQXZDO0FBQ0QsRzs7aUJBRUQraUIsZ0IsNkJBQWlCUyxLLEVBQU87QUFDdEIsU0FBSzNsQixNQUFMLENBQVlncEIsV0FBWixDQUF3QjVSLFdBQXhCLENBQW9DdU8sTUFBTXhqQixLQUExQztBQUNBLFNBQUtuQyxNQUFMLENBQVlpcEIsV0FBWixDQUF3QjdSLFdBQXhCLENBQW9DdU8sTUFBTXhqQixLQUExQztBQUNBLFNBQUtuQyxNQUFMLENBQVlra0IsSUFBWixDQUFpQjlNLFdBQWpCLENBQTZCdU8sTUFBTXhqQixLQUFuQztBQUNBLFNBQUtraEIsZ0JBQUwsQ0FBc0JwVixNQUF0QixDQUE2QjBYLE1BQU14akIsS0FBbkM7QUFDQXdqQixVQUFNM3JCLE9BQU47QUFDRCxHOztpQkFFRGlyQixpQiw4QkFBa0JobEIsSyxFQUFPK0MsSSxFQUFNO0FBQzdCLFFBQU1rbUIsU0FBUyxLQUFLNUYsV0FBTCxDQUFpQmpOLE1BQWpCLENBQXdCcFcsS0FBeEIsRUFBK0IrQyxJQUEvQixDQUFmO0FBQ0EsMEJBQWlCa21CLE1BQWpCLHlIQUF5QjtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQUEsVUFBakJ2RCxLQUFpQjs7QUFDdkIsV0FBS1QsZ0JBQUwsQ0FBc0JTLEtBQXRCO0FBQ0Q7QUFDRixHOztpQkFFRDdqQixVLHVCQUFXcW5CLFEsRUFBVTUwQixDLEVBQUc7QUFDdEIsU0FBSzh0QixXQUFMLENBQWlCdmdCLFVBQWpCLENBQTRCcW5CLFFBQTVCLEVBQXNDNTBCLENBQXRDO0FBQ0QsRzs7aUJBRURpdkIsYywyQkFBZTJGLFEsRUFBVTUwQixDLEVBQUc7QUFDMUIsU0FBS3VOLFVBQUwsQ0FBZ0JxbkIsUUFBaEIsRUFBMEI1MEIsSUFBRSxDQUE1QjtBQUNELEc7O2lCQUVEMHVCLG1CLGdDQUFvQmtHLFEsRUFBVTUwQixDLEVBQUc7QUFDL0IsU0FBS3VOLFVBQUwsQ0FBZ0JxbkIsUUFBaEIsRUFBMEI1MEIsQ0FBMUI7QUFDRCxHOztpQkFFRDZ1QixvQixpQ0FBcUIrRixRLEVBQVU1MEIsQyxFQUFHO0FBQ2hDLFNBQUt1TixVQUFMLENBQWdCcW5CLFFBQWhCLEVBQTBCNTBCLElBQUUsS0FBRyxLQUFLeEIsQ0FBTCxDQUFPeU0sTUFBUCxHQUFjLENBQWpCLENBQTVCO0FBQ0QsRzs7T0FFTW1uQixrQiwrQkFBbUJ4bUIsSyxFQUFPO0FBQy9CLFNBQUt3bEIsS0FBTCxDQUFXenhCLEdBQVgsQ0FBZSxLQUFLZ2xCLElBQUwsQ0FBVWlOLG1CQUFWLENBQThCaG1CLEtBQTlCLEVBQXFDcUUsV0FBcEQsRUFBZ0UsUUFBaEUsRUFBeUUsQ0FBekU7QUFDQSxRQUFNM1MsSUFBSSxLQUFLcW5CLElBQUwsQ0FBVW9LLFdBQVYsQ0FBc0Jud0IsT0FBdEIsQ0FBOEIsS0FBS3d5QixLQUFuQyxDQUFWO0FBQ0EsUUFBRyxDQUFDOXpCLENBQUosRUFBTztBQUNMLFVBQUdzTyxVQUFRLENBQVgsRUFBYztBQUNaLGFBQUsrWSxJQUFMLENBQVVrUSxnQkFBVixDQUEyQnYzQixDQUEzQixFQUE4QixLQUFLcW5CLElBQUwsQ0FBVW9LLFdBQVYsQ0FBc0IzeUIsTUFBdEIsR0FBNkJrQixDQUEzRDtBQUNELE9BRkQsTUFHSztBQUNILGFBQUtxbkIsSUFBTCxDQUFVa1EsZ0JBQVYsQ0FBMkIsQ0FBM0IsRUFBOEJ2M0IsSUFBRSxDQUFoQztBQUNEO0FBQ0Y7QUFDRixHOztpQkFFRHczQixjLDJCQUFlMUQsSyxFQUFPcHBCLE0sRUFBUTRELEssRUFBT21wQixRLEVBQVVDLFksRUFBYztBQUMzRCxXQUFPNUQsTUFBTXFCLEtBQU4sR0FBYXJCLE1BQU1xQixLQUFOLENBQVl6cUIsTUFBWixFQUFvQjRELEtBQXBCLEVBQTJCbXBCLFFBQTNCLEVBQXFDQyxZQUFyQyxDQUFiLEdBQWlFLENBQXhFO0FBQ0QsRzs7aUJBRURDLG9CLGlDQUFxQjdELEssRUFBT3BwQixNLEVBQVE0RCxLLEVBQU9tcEIsUSxFQUFVQyxZLEVBQWM7QUFDakUsV0FBTzVELE1BQU1zQixXQUFOLEdBQW1CdEIsTUFBTXNCLFdBQU4sQ0FBa0IxcUIsTUFBbEIsRUFBMEI0RCxLQUExQixFQUFpQ21wQixRQUFqQyxFQUEyQ0MsWUFBM0MsQ0FBbkIsR0FBNkUsQ0FBcEY7QUFDRCxHOztpQkFFRDNFLHFCLG9DQUF3QjtBQUN0QixRQUFJMXZCLFlBQUo7QUFDQSxRQUFHLEtBQUt1MEIscUJBQVIsRUFBK0I7QUFDN0J2MEIsWUFBTXFhLFFBQVFtYSxNQUFSLEVBQU47QUFDRCxLQUZELE1BR0s7QUFDSCxXQUFLRCxxQkFBTCxHQUE2QixJQUE3QjtBQUNBLFdBQUsxWSxhQUFMLENBQW1CO0FBQ2pCdFUsY0FBTTtBQURXLE9BQW5CO0FBR0F2SCxZQUFNLEtBQUtxdEIsWUFBTCxDQUFrQmxULElBQWxCLEVBQU47QUFDRDtBQUNELFdBQU9uYSxHQUFQO0FBQ0QsRzs7aUJBRUQydkIsb0IsbUNBQXVCO0FBQ3JCLFFBQUcsS0FBSzRFLHFCQUFSLEVBQStCO0FBQzdCLFVBQU0xMkIsSUFBSSxLQUFLMGlCLE9BQUwsRUFBVjtBQUNBLFVBQUcsS0FBS3lNLGFBQUwsQ0FBbUJDLFdBQW5CLEtBQWlDcHZCLENBQXBDLEVBQXVDO0FBQ3JDLGFBQUttdkIsYUFBTCxDQUFtQkUsU0FBbkIsR0FBK0JudkIsS0FBS0ssSUFBTCxDQUFVUCxJQUFFLEtBQUttdkIsYUFBTCxDQUFtQkMsV0FBL0IsQ0FBL0I7QUFDQSxhQUFLRCxhQUFMLENBQW1CQyxXQUFuQixHQUFpQ3B2QixDQUFqQztBQUNEO0FBQ0QsYUFBTyxLQUFLMDJCLHFCQUFaO0FBQ0EsV0FBS2xILFlBQUwsQ0FBa0I5UyxJQUFsQjtBQUNBLFdBQUtzQixhQUFMLENBQW1CO0FBQ2pCdFUsY0FBTTtBQURXLE9BQW5CO0FBR0Q7QUFDRixHOztpQkFFRGt0QixnQiwrQkFBbUI7QUFDakIsV0FBTyxLQUFLekgsYUFBWjtBQUNELEc7O2lCQUVEc0UsYywyQkFBZWIsSyxFQUFPNWMsSSxFQUFNNUksSyxFQUFPbXBCLFEsRUFBVTNnQixXLEVBQWFpaEIsVyxFQUFhQyxXLEVBQWFDLFMsRUFBV3ZELFcsRUFBYTtBQUFBOztBQUMxRyxRQUFNOXBCLE9BQU8sU0FBUEEsSUFBTztBQUFBLGFBQUssT0FBS3NxQixTQUFMLEdBQWdCLE9BQWhCLEdBQTBCLE9BQUtZLFFBQUwsR0FBZSxNQUFmLEdBQXVCLE1BQXREO0FBQUEsS0FBYjtBQUFBLFFBQ0V6eUIsTUFBTSxLQUFLd3VCLFlBQUwsQ0FBa0JuZ0IsT0FBbEIsS0FBNkJnTSxRQUFRQyxPQUFSLEVBQTdCLEdBQWdELEtBQUtvVixxQkFBTCxFQUR4RDtBQUVBLFdBQU8xdkIsSUFBSTRiLElBQUosQ0FBUyxZQUFLO0FBQ25CNlUsWUFBTVMsUUFBTixHQUFpQixPQUFLMUMsWUFBTCxDQUFrQmUsU0FBbEIsQ0FDZjFiLElBRGUsRUFFZjVJLEtBRmUsRUFHZm1wQixRQUhlLEVBSWYzZ0IsV0FKZSxFQUtmaWhCLFdBTGUsRUFNZixVQUFDRyxJQUFELEVBQU9DLEVBQVAsRUFBYTtBQUNYSCxvQkFBWUUsSUFBWixFQUFrQkMsRUFBbEI7QUFDQXpELG9CQUFZWixLQUFaLEVBQW1CMXlCLEtBQUtNLEdBQUwsQ0FBUzRNLFFBQU00cEIsSUFBZixJQUFxQjkyQixLQUFLeVEsRUFBN0MsRUFBaUQsU0FBakQsRUFBNERqSCxNQUE1RDtBQUNBLGVBQUtxb0IsV0FBTDtBQUNELE9BVmMsRUFXZixVQUFDaUYsSUFBRCxFQUFPQyxFQUFQLEVBQWE7QUFDWEYsa0JBQVVDLElBQVYsRUFBZ0JDLEVBQWhCO0FBQ0EsZUFBT3JFLE1BQU1TLFFBQWI7QUFDQUcsb0JBQVlaLEtBQVosRUFBbUIxeUIsS0FBS00sR0FBTCxDQUFTNE0sUUFBTTRwQixJQUFmLElBQXFCOTJCLEtBQUt5USxFQUE3QyxFQUFpRCxRQUFqRCxFQUEyRGpILE1BQTNEO0FBQ0E4UyxnQkFBUUMsT0FBUixHQUFrQnNCLElBQWxCLENBQXVCLFlBQUs7QUFDMUIsY0FBRyxDQUFDLE9BQUs0UyxZQUFMLENBQWtCbmdCLE9BQWxCLEVBQUosRUFBaUM7QUFDL0IsbUJBQUtzaEIsb0JBQUw7QUFDRDtBQUNGLFNBSkQ7QUFLQSxlQUFLQyxXQUFMO0FBQ0QsT0FyQmMsRUFzQmYsVUFBQ3ZvQixNQUFELEVBQVM0RCxLQUFULEVBQWdCbXBCLFFBQWhCLEVBQTBCQyxZQUExQjtBQUFBLGVBQTBDLE9BQUtGLGNBQUwsQ0FBb0IxRCxLQUFwQixFQUEyQnBwQixNQUEzQixFQUFtQzRELEtBQW5DLEVBQTBDbXBCLFFBQTFDLEVBQW9EQyxZQUFwRCxDQUExQztBQUFBLE9BdEJlLEVBdUJmLFVBQUNodEIsTUFBRCxFQUFTNEQsS0FBVCxFQUFnQm1wQixRQUFoQixFQUEwQkMsWUFBMUI7QUFBQSxlQUEwQyxPQUFLQyxvQkFBTCxDQUEwQjdELEtBQTFCLEVBQWlDcHBCLE1BQWpDLEVBQXlDNEQsS0FBekMsRUFBZ0RtcEIsUUFBaEQsRUFBMERDLFlBQTFELENBQTFDO0FBQUEsT0F2QmUsQ0FBakI7QUF5QkFoRCxrQkFBWVosS0FBWixFQUFtQixDQUFuQixFQUFzQixNQUF0QixFQUE4QmxwQixNQUE5QjtBQUNBLGFBQU9rcEIsS0FBUDtBQUNELEtBNUJNLEVBNEJKalEsS0E1QkksQ0E0QkU7QUFBQSxhQUFLOVosU0FBTDtBQUFBLEtBNUJGLENBQVA7QUE2QkQsRzs7aUJBRURnb0IsTSxtQkFBT3B6QixFLEVBQUk7QUFBQTs7QUFDVCxTQUFLaXpCLFlBQUwsQ0FBa0JsekIsQ0FBbEIsSUFBcUJDLEVBQXJCO0FBQ0EsUUFBRyxLQUFLbTBCLFlBQUwsTUFBdUIsS0FBS2xCLFlBQUwsQ0FBa0JJLEtBQWxCLEtBQTBCam9CLFNBQWpELElBQThELEtBQUs2bkIsWUFBTCxDQUFrQmx6QixDQUFsQixJQUFxQixLQUFLa3pCLFlBQUwsQ0FBa0J3RyxLQUFsQixJQUEyQixDQUFoRCxJQUFtRCxJQUFqSCxJQUF5SCxDQUFDLEtBQUtsRCxTQUEvSCxJQUE0SSxDQUFDLEtBQUtZLFFBQXJKLEVBQStKO0FBQzdKLFdBQUtsRSxZQUFMLENBQWtCd0csS0FBbEIsR0FBMEIsS0FBS3hHLFlBQUwsQ0FBa0JsekIsQ0FBNUM7QUFDQWdmLGNBQVFDLE9BQVIsR0FBa0JzQixJQUFsQixDQUF1QixZQUFLO0FBQzFCLHFCQUFFLE9BQUs5USxNQUFMLENBQVl6RyxPQUFkLEVBQXVCMndCLE9BQXZCLENBQStCMTZCLFFBQUU0TSxLQUFGLENBQVEsV0FBUixFQUFxQixPQUFLcW5CLFlBQTFCLENBQS9CO0FBQ0QsT0FGRDtBQUdEO0FBQ0QsU0FBS0MsWUFBTCxDQUFrQnlHLFFBQWxCLENBQTJCMzVCLEVBQTNCO0FBQ0QsRzs7aUJBRURrMkIsZSw0QkFBZ0I3MEIsQyxFQUFHdTRCLFEsRUFBVTtBQUMzQixRQUFNekUsUUFBUSxLQUFLckMsV0FBTCxDQUFpQnp4QixDQUFqQixDQUFkO0FBQ0EsUUFBRzh6QixTQUFTeUUsV0FBU3pFLE1BQU1waUIsT0FBTixFQUFyQixFQUFzQztBQUNwQyxVQUFNOG1CLFdBQVcsSUFBSXRxQixvQkFBSixDQUFlLEtBQUtDLE1BQXBCLGVBQWdDLEtBQUtqTixDQUFyQyxJQUF3QytPLFlBQVksS0FBSzBoQixjQUFMLENBQW9CbEksSUFBcEIsQ0FBeUIsSUFBekIsQ0FBcEQsS0FBcUZxSyxNQUFNNXlCLENBQU4sQ0FBUWtOLEtBQTdGLEVBQW9HMGxCLE1BQU01eUIsQ0FBTixDQUFRa04sS0FBUixHQUFjbXFCLFFBQWxILEVBQTRIekUsTUFBTXhsQixLQUFsSSxFQUF5SXdsQixNQUFNdmxCLEtBQS9JLENBQWpCO0FBQ0F1bEIsWUFBTXp4QixHQUFOLENBQVV5eEIsTUFBTXhsQixLQUFoQixFQUF1QndsQixNQUFNdmxCLEtBQTdCLEVBQW9DdWxCLE1BQU14aUIsTUFBTixDQUFhaEssTUFBakQsRUFBeUR3c0IsTUFBTTV5QixDQUFOLENBQVFrTixLQUFSLEdBQWNtcUIsUUFBdkUsRUFBaUZ6RSxNQUFNNXlCLENBQU4sQ0FBUW1OLElBQXpGO0FBQ0EsV0FBS3FqQixhQUFMLENBQW1CMXhCLENBQW5CLEVBQXNCdzRCLFFBQXRCO0FBQ0EsYUFBTyxDQUFDQSxRQUFELEVBQVcxRSxLQUFYLENBQVA7QUFDRDtBQUNGLEc7O2lCQUVEeUQsZ0IsNkJBQWlCbnBCLEssRUFBTytDLEksRUFBTTtBQUM1QixRQUFHL0MsUUFBTSxLQUFLcWpCLFdBQUwsQ0FBaUIzeUIsTUFBMUIsRUFBa0M7QUFDaENxUyxhQUFPL1AsS0FBSzZDLEdBQUwsQ0FBUyxLQUFLd3RCLFdBQUwsQ0FBaUIzeUIsTUFBakIsR0FBd0JzUCxLQUFqQyxFQUF3QytDLElBQXhDLENBQVA7QUFDQSxVQUFNc25CLGFBQWEsS0FBS2hILFdBQUwsQ0FBaUJyakIsS0FBakIsQ0FBbkI7QUFBQSxVQUE0Q3NxQixZQUFZLEtBQUtqSCxXQUFMLENBQWlCcmpCLFFBQU0rQyxJQUFOLEdBQVcsQ0FBNUIsQ0FBeEQ7QUFDQXNuQixpQkFBV3AyQixHQUFYLENBQWVvMkIsV0FBV25xQixLQUExQixFQUFpQ21xQixXQUFXbHFCLEtBQTVDLEVBQW1Ea3FCLFdBQVdubkIsTUFBWCxDQUFrQmhLLE1BQXJFLEVBQTZFbXhCLFdBQVd2M0IsQ0FBWCxDQUFha04sS0FBMUYsRUFBaUdzcUIsVUFBVXgzQixDQUFWLENBQVltTixJQUE3RztBQUNBLFdBQUsra0IsaUJBQUwsQ0FBdUJobEIsUUFBTSxDQUE3QixFQUFnQytDLE9BQUssQ0FBckM7QUFDRDtBQUNGLEc7O2lCQUVEeWpCLGMsMkJBQWV0bUIsSyxFQUFPQyxLLEVBQU87QUFDM0IsUUFBR0EsVUFBUSxRQUFYLEVBQXFCO0FBQ25CLFdBQUtvRSxXQUFMLEdBQW1CckUsS0FBbkI7QUFDRDtBQUNELFNBQUttakIsV0FBTCxDQUFpQnJULE9BQWpCLENBQXlCLFVBQUM1Z0IsQ0FBRCxFQUFNO0FBQzdCLFVBQUcsQ0FBQ0EsRUFBRSsyQixRQUFOLEVBQWdCO0FBQ2QvMkIsVUFBRTZFLEdBQUYsQ0FBTWlNLEtBQU4sRUFBYUMsS0FBYjtBQUNEO0FBQ0YsS0FKRDtBQUtELEc7O2lCQUVEbE0sRyxnQkFBSWlNLEssRUFBaUI7QUFBQSxRQUFWaEgsTUFBVSx1RUFBSCxDQUFHOztBQUNuQixTQUFLZ0gsS0FBTCxHQUFhQSxLQUFiO0FBQ0EsUUFBTXVELEtBQUt6USxLQUFLeVEsRUFBaEI7QUFDQSxRQUFHdkQsUUFBTXVELEtBQUcsQ0FBWixFQUFlO0FBQ2IsV0FBS29mLE1BQUwsQ0FBWTV1QixHQUFaLENBQWdCLENBQWhCOztBQUVBLFdBQUs0dUIsTUFBTCxDQUFZaEMsT0FBWixDQUFvQixDQUFDcGQsRUFBRCxHQUFJLENBQUosR0FBTSxJQUFFdkQsS0FBNUI7QUFDQSxXQUFLNGlCLFNBQUwsQ0FBZTd1QixHQUFmLENBQW1Cd1AsS0FBRyxDQUF0QixFQUF3QixRQUF4QixFQUFpQ3ZLLE1BQWpDOztBQUVBLFdBQUtzdEIsY0FBTCxDQUFvQixDQUFwQixFQUFzQixRQUF0Qjs7QUFFQSxXQUFLM0QsTUFBTCxDQUFZL0IsUUFBWixDQUFxQixDQUFyQjtBQUNBLFdBQUtvQyxVQUFMLENBQWdCanZCLEdBQWhCLENBQW9CLENBQXBCLEVBQXNCLFFBQXRCLEVBQStCLENBQS9CO0FBQ0QsS0FWRCxNQVdLLElBQUdpTSxRQUFNLElBQUV1RCxFQUFGLEdBQUssQ0FBZCxFQUFpQjtBQUNwQixVQUFNM1QsSUFBRSxLQUFHb1EsUUFBTXVELEtBQUcsQ0FBWixDQUFSO0FBQ0EsV0FBS29mLE1BQUwsQ0FBWTV1QixHQUFaLENBQWdCbkUsQ0FBaEI7O0FBRUEsV0FBSyt5QixNQUFMLENBQVloQyxPQUFaLENBQW9CLENBQUMvd0IsQ0FBckI7QUFDQSxXQUFLZ3pCLFNBQUwsQ0FBZTd1QixHQUFmLENBQW1Cd1AsS0FBRyxDQUFILEdBQUszVCxDQUF4QixFQUEwQixRQUExQixFQUFtQ29KLE1BQW5DOztBQUVBLFdBQUtzdEIsY0FBTCxDQUFvQjEyQixDQUFwQixFQUFzQixRQUF0Qjs7QUFFQSxXQUFLK3lCLE1BQUwsQ0FBWS9CLFFBQVosQ0FBcUIsQ0FBQ2h4QixDQUF0QjtBQUNBLFdBQUtvekIsVUFBTCxDQUFnQmp2QixHQUFoQixDQUFvQm5FLENBQXBCLEVBQXNCLFFBQXRCLEVBQStCLENBQS9CO0FBQ0QsS0FYSSxNQVlBLElBQUdvUSxRQUFNLElBQUV1RCxFQUFGLEdBQUssQ0FBZCxFQUFpQjtBQUNwQixVQUFNM1QsS0FBRSxLQUFHb1EsUUFBTXVELEtBQUcsQ0FBWixDQUFSO0FBQ0EsV0FBS29mLE1BQUwsQ0FBWTV1QixHQUFaLENBQWdCd1AsS0FBRyxDQUFuQjs7QUFFQSxXQUFLb2YsTUFBTCxDQUFZaEMsT0FBWixDQUFvQixDQUFDcGQsRUFBRCxHQUFJLENBQXhCO0FBQ0EsV0FBS3FmLFNBQUwsQ0FBZTd1QixHQUFmLENBQW1Cd1AsRUFBbkIsRUFBc0IsUUFBdEIsRUFBK0IsQ0FBL0I7O0FBRUEsV0FBS29mLE1BQUwsQ0FBWS9CLFFBQVosQ0FBcUIsQ0FBQ3JkLEVBQUQsR0FBSSxDQUF6QjtBQUNBLFdBQUt5ZixVQUFMLENBQWdCanZCLEdBQWhCLENBQW9CbkUsRUFBcEIsRUFBc0IsUUFBdEIsRUFBK0JvSixNQUEvQjtBQUNELEtBVEksTUFVQSxJQUFHZ0gsUUFBTSxJQUFFdUQsRUFBRixHQUFLLENBQWQsRUFBaUI7QUFDcEIsVUFBTTNULE1BQUUsS0FBR29RLFFBQU0sSUFBRXVELEVBQUYsR0FBSyxDQUFkLElBQWlCQSxLQUFHLENBQTVCO0FBQ0EsV0FBS29mLE1BQUwsQ0FBWTV1QixHQUFaLENBQWdCbkUsR0FBaEI7O0FBRUEsV0FBSyt5QixNQUFMLENBQVloQyxPQUFaLENBQW9CLENBQUMvd0IsR0FBckI7QUFDQSxXQUFLZ3pCLFNBQUwsQ0FBZTd1QixHQUFmLENBQW1CbkUsR0FBbkIsRUFBcUIsUUFBckIsRUFBOEIsQ0FBOUI7O0FBRUEsV0FBSzAyQixjQUFMLENBQW9CMTJCLEdBQXBCLEVBQXNCLFFBQXRCOztBQUVBLFdBQUsreUIsTUFBTCxDQUFZL0IsUUFBWixDQUFxQixDQUFDcmQsRUFBRCxHQUFJLENBQXpCO0FBQ0EsV0FBS3lmLFVBQUwsQ0FBZ0JqdkIsR0FBaEIsQ0FBb0J3UCxLQUFHLENBQXZCLEVBQXlCLFFBQXpCLEVBQWtDdkssTUFBbEM7QUFDRCxLQVhJLE1BWUEsSUFBR2dILFFBQU0sSUFBRXVELEVBQUYsR0FBSyxDQUFkLEVBQWlCO0FBQ3BCLFdBQUtvZixNQUFMLENBQVk1dUIsR0FBWixDQUFnQndQLEVBQWhCOztBQUVBLFdBQUtvZixNQUFMLENBQVloQyxPQUFaLENBQW9CLENBQUNwZCxFQUFyQjtBQUNBLFdBQUtxZixTQUFMLENBQWU3dUIsR0FBZixDQUFtQndQLEVBQW5CLEVBQXNCLFFBQXRCLEVBQStCLENBQS9COztBQUVBLFdBQUsraUIsY0FBTCxDQUFvQi9pQixFQUFwQixFQUF1QixRQUF2Qjs7QUFFQSxXQUFLb2YsTUFBTCxDQUFZL0IsUUFBWixDQUFxQixDQUFDcmQsRUFBRCxHQUFJLENBQUosR0FBTSxLQUFHdkQsUUFBTXVELEVBQVQsQ0FBM0I7QUFDQSxXQUFLeWYsVUFBTCxDQUFnQmp2QixHQUFoQixDQUFvQndQLEtBQUcsQ0FBdkIsRUFBeUIsUUFBekIsRUFBa0N2SyxNQUFsQztBQUNELEtBVkksTUFXQSxJQUFHZ0gsUUFBTSxJQUFFdUQsRUFBRixHQUFLLENBQWQsRUFBaUI7QUFDcEIsVUFBTTNULE1BQUUsS0FBR29RLFFBQU0sSUFBRXVELEVBQUYsR0FBSyxDQUFkLENBQVI7QUFDQSxXQUFLb2YsTUFBTCxDQUFZNXVCLEdBQVosQ0FBZ0J3UCxLQUFHM1QsR0FBbkI7O0FBRUEsV0FBSyt5QixNQUFMLENBQVloQyxPQUFaLENBQW9CLENBQUNwZCxFQUFELEdBQUkzVCxHQUF4QjtBQUNBLFdBQUtnekIsU0FBTCxDQUFlN3VCLEdBQWYsQ0FBbUJ3UCxLQUFHM1QsR0FBdEIsRUFBd0IsUUFBeEIsRUFBaUMsQ0FBakM7O0FBRUEsV0FBSzAyQixjQUFMLENBQW9CL2lCLEtBQUczVCxHQUF2QixFQUF5QixRQUF6Qjs7QUFFQSxXQUFLK3lCLE1BQUwsQ0FBWS9CLFFBQVosQ0FBcUIsQ0FBQ3JkLEVBQUQsR0FBSTNULEdBQXpCO0FBQ0EsV0FBS296QixVQUFMLENBQWdCanZCLEdBQWhCLENBQW9Cd1AsS0FBRyxDQUFILEdBQUszVCxHQUF6QixFQUEyQixRQUEzQixFQUFvQ29KLE1BQXBDO0FBQ0QsS0FYSSxNQVlBLElBQUdnSCxRQUFNLElBQUV1RCxFQUFGLEdBQUssQ0FBZCxFQUFpQjtBQUNwQixVQUFNM1QsTUFBRSxLQUFHb1EsUUFBTSxJQUFFdUQsRUFBRixHQUFLLENBQWQsQ0FBUjtBQUNBLFdBQUtvZixNQUFMLENBQVk1dUIsR0FBWixDQUFnQndQLEtBQUcsQ0FBbkI7O0FBRUEsV0FBS29mLE1BQUwsQ0FBWWhDLE9BQVosQ0FBb0IsQ0FBQ3BkLEVBQUQsR0FBSSxDQUF4QjtBQUNBLFdBQUtxZixTQUFMLENBQWU3dUIsR0FBZixDQUFtQndQLEtBQUczVCxHQUF0QixFQUF3QixRQUF4QixFQUFpQ29KLE1BQWpDOztBQUVBLFdBQUsycEIsTUFBTCxDQUFZL0IsUUFBWixDQUFxQixDQUFDcmQsRUFBRCxHQUFJLENBQXpCO0FBQ0EsV0FBS3lmLFVBQUwsQ0FBZ0JqdkIsR0FBaEIsQ0FBb0IsQ0FBcEIsRUFBc0IsUUFBdEIsRUFBK0IsQ0FBL0I7QUFDRCxLQVRJLE1BVUEsSUFBR2lNLFFBQU0sSUFBRXVELEVBQUYsR0FBSyxDQUFkLEVBQWlCO0FBQ3BCLFVBQU0zVCxNQUFFLEtBQUdvUSxRQUFNLElBQUV1RCxFQUFGLEdBQUssQ0FBZCxDQUFSO0FBQ0EsV0FBS29mLE1BQUwsQ0FBWTV1QixHQUFaLENBQWdCd1AsS0FBRyxDQUFILEdBQUszVCxHQUFyQjs7QUFFQSxXQUFLK3lCLE1BQUwsQ0FBWWhDLE9BQVosQ0FBb0IsQ0FBQ3BkLEVBQUQsR0FBSSxDQUF4QjtBQUNBLFdBQUtxZixTQUFMLENBQWU3dUIsR0FBZixDQUFtQndQLEtBQUcsQ0FBdEIsRUFBd0IsUUFBeEIsRUFBaUN2SyxNQUFqQzs7QUFFQSxXQUFLc3RCLGNBQUwsQ0FBb0IvaUIsS0FBRyxDQUFILEdBQUszVCxHQUF6QixFQUEyQixRQUEzQjs7QUFFQSxXQUFLK3lCLE1BQUwsQ0FBWS9CLFFBQVosQ0FBcUIsQ0FBQ3JkLEVBQUQsR0FBSSxDQUFKLEdBQU0zVCxHQUEzQjtBQUNBLFdBQUtvekIsVUFBTCxDQUFnQmp2QixHQUFoQixDQUFvQndQLEtBQUcsQ0FBSCxHQUFLM1QsR0FBekIsRUFBMkIsUUFBM0IsRUFBb0MsQ0FBcEM7QUFDRDtBQUNGLEc7O09BRU15NkIsaUIsOEJBQWtCcHhCLEssRUFBT3FELEksRUFBTTtBQUNwQyxRQUFNZ3VCLEtBQUssYUFBRSx3Q0FBRixDQUFYO0FBQ0EsUUFBR2h1QixTQUFPLE9BQVYsRUFBbUI7QUFDakIsVUFBTS9DLE1BQU0rd0IsR0FBRyxDQUFILEVBQU01dUIsVUFBTixDQUFpQixJQUFqQixDQUFaO0FBQ0FuQyxVQUFJUSxTQUFKO0FBQ0FSLFVBQUlTLFNBQUosR0FBZ0JDLHFCQUFXQyxVQUFYLENBQXNCakIsS0FBdEIsRUFBNkIsQ0FBN0IsQ0FBaEI7QUFDQU0sVUFBSVksSUFBSixDQUFTLENBQVQsRUFBWSxDQUFaLEVBQWUsQ0FBZixFQUFrQixDQUFsQjtBQUNBWixVQUFJYSxJQUFKO0FBQ0FiLFVBQUlRLFNBQUo7QUFDQVIsVUFBSVMsU0FBSixHQUFnQkMscUJBQVdDLFVBQVgsQ0FBc0JELHFCQUFXcUQsWUFBWCxDQUF3QnJFLEtBQXhCLEVBQThCLEdBQTlCLENBQXRCLEVBQTBELENBQTFELENBQWhCO0FBQ0FNLFVBQUlZLElBQUosQ0FBUyxDQUFULEVBQVksQ0FBWixFQUFlLENBQWYsRUFBa0IsQ0FBbEI7QUFDQVosVUFBSWEsSUFBSjtBQUNEO0FBQ0QsV0FBT2t3QixHQUFHLENBQUgsQ0FBUDtBQUNELEc7O2lCQUVENUksWSx5QkFBYWxsQixLLEVBQU87QUFDbEIsV0FBTyxLQUFLd0MsU0FBTCxDQUFla2IsS0FBS3FRLFVBQUwsQ0FBZ0Isa0JBQWhCLEVBQTZCL3RCLEtBQTdCLENBQWYsQ0FBUDtBQUNELEc7O09BRU0rdEIsVSx1QkFBV3pxQixLLEVBQU8wcUIsTSxFQUFRO0FBQy9CQSxhQUFTQSxVQUFVLEVBQW5CO0FBQ0Esd0JBQ0sxcUIsS0FETCxFQUVLMHFCLE1BRkw7QUFHRXpyQiwwQkFDS2UsTUFBTWYsS0FEWCxFQUVLeXJCLE9BQU96ckIsS0FGWixDQUhGO0FBT0VFLDBCQUNLYSxNQUFNYixLQURYLEVBRUt1ckIsT0FBT3ZyQixLQUZaLENBUEY7QUFXRUMseUJBQ0tZLE1BQU1aLElBRFgsRUFFS3NyQixPQUFPdHJCLElBRlosQ0FYRjtBQWVFMkosa0NBQ0svSSxNQUFNK0ksYUFEWCxFQUVLMmhCLE9BQU8zaEIsYUFGWjtBQWZGO0FBb0JELEc7O2lCQUVEN0osUyxzQkFBVXhDLEssRUFBTztBQUNmLFFBQU01SixpQkFDRDRKLEtBREM7QUFFSnVDLDBCQUNLdkMsTUFBTXVDLEtBRFgsQ0FGSTtBQUtKRSwwQkFDS3pDLE1BQU11QyxLQURYLEVBRUt2QyxNQUFNeUMsS0FGWCxDQUxJO0FBU0pDLHlCQUNLMUMsTUFBTXVDLEtBRFgsRUFFS3ZDLE1BQU0wQyxJQUZYLENBVEk7QUFhSjJKLGtDQUNLck0sTUFBTXFNLGFBRFg7QUFFRXhaO0FBRkY7QUFiSSxNQUFOO0FBQUEsUUFrQkEyTCxRQUFRLEVBbEJSO0FBQUEsUUFtQkFoQyxTQUFTZ0MsUUFBTXBJLEVBQUVvRyxNQW5CakI7QUFBQSxRQW9CQUQsUUFBUWlDLFFBQU1wSSxFQUFFbUcsS0FwQmhCO0FBQUEsUUFxQkFzc0Isa0JBQWtCLFNBQWxCQSxlQUFrQjtBQUFBLGFBQUs1cEIsU0FBTDtBQUFBLEtBckJsQjtBQUFBLFFBc0JBc0QsUUFBUTtBQUNOb0MsbUJBQWF2TyxFQUFFbU0sS0FBRixDQUFRb0MsV0FBUixJQUF1QitZLEtBQUttUSxpQkFBTCxDQUF1QnozQixFQUFFbU0sS0FBRixDQUFROUYsS0FBL0IsRUFBc0NyRyxFQUFFbU0sS0FBRixDQUFRMEosSUFBOUM7QUFEOUIsS0F0QlI7QUFBQSxRQXlCQXhKLHFCQUNLRixLQURMLEVBRUtuTSxFQUFFcU0sS0FGUDtBQUdFOEYsYUFBTy9KLFFBQU1wSSxFQUFFcU0sS0FBRixDQUFROEYsS0FIdkI7QUFJRWhNLGFBQU9BLEtBSlQ7QUFLRUMsY0FBUUEsTUFMVjtBQU1FMlAsZUFBUzNOLFFBQU1wSSxFQUFFcU0sS0FBRixDQUFRMEo7QUFOekIsTUF6QkE7QUFBQSxRQWlDQXpKLG9CQUNLSCxLQURMLEVBRUtuTSxFQUFFc00sSUFGUDtBQUdFNkYsYUFBTy9KLFFBQU1wSSxFQUFFc00sSUFBRixDQUFPNkYsS0FIdEI7QUFJRWhNLGFBQU9rRyxNQUFNbEcsS0FBTixHQUFja0csTUFBTTBKLE9BSjdCO0FBS0UzUCxjQUFRaUcsTUFBTWpHLE1BQU4sR0FBZSxJQUFFaUcsTUFBTTBKO0FBTGpDLE1BakNBO0FBQUEsUUF3Q0F2RyxTQUFTO0FBQ1BDLFdBQUssS0FERTtBQUVQcEosYUFBTyxRQUZBO0FBR1A0SixZQUFNN0gsUUFBTTtBQUhMLEtBeENUO0FBNkNBLFFBQUdpRSxNQUFNaEcsS0FBTixLQUFjOEYsTUFBTTlGLEtBQXBCLElBQTZCLENBQUNyRyxFQUFFcU0sS0FBRixDQUFRa0MsV0FBekMsRUFBc0Q7QUFDcERsQyxZQUFNa0MsV0FBTixHQUFvQitZLEtBQUttUSxpQkFBTCxDQUF1QnByQixNQUFNaEcsS0FBN0IsRUFBb0NnRyxNQUFNd0osSUFBMUMsQ0FBcEI7QUFDRDtBQUNELFFBQUd2SixLQUFLakcsS0FBTCxLQUFhOEYsTUFBTTlGLEtBQW5CLElBQTRCLENBQUNyRyxFQUFFc00sSUFBRixDQUFPaUMsV0FBdkMsRUFBb0Q7QUFDbERqQyxXQUFLaUMsV0FBTCxHQUFtQitZLEtBQUttUSxpQkFBTCxDQUF1Qm5yQixLQUFLakcsS0FBNUIsRUFBbUNpRyxLQUFLdUosSUFBeEMsQ0FBbkI7QUFDRDtBQUNELFFBQUc3VixFQUFFNjNCLGVBQUwsRUFBc0I7QUFDcEI3M0IsUUFBRTYzQixlQUFGLEdBQW9CLEtBQUtBLGVBQUwsQ0FBcUI3M0IsRUFBRTYzQixlQUF2QixDQUFwQjtBQUNEO0FBQ0Qsd0JBQVc3M0IsQ0FBWCxJQUFjb0ksWUFBZCxFQUFxQmhDLGNBQXJCLEVBQTZCRCxZQUE3QixFQUFvQ3NzQixnQ0FBcEMsRUFBcURwbUIsWUFBckQsRUFBNERDLFVBQTVELEVBQWtFa0QsY0FBbEU7QUFDRCxHOztpQkFFRHFvQixlLDRCQUFnQkMsTSxFQUFRO0FBQUE7O0FBQ3RCLFdBQU8sVUFBQ3QyQixDQUFELEVBQUl1YSxHQUFKLEVBQVc7QUFDaEIsYUFBTytiLE9BQU90MkIsQ0FBUCxFQUFVLFVBQUNGLEVBQUQsRUFBTztBQUN0QixZQUFNeTJCLE1BQU0sRUFBWjtBQUNBLDhCQUFhejJCLEVBQWIseUhBQWlCO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQSxjQUFUNUIsQ0FBUzs7QUFDZnE0QixjQUFJaDVCLElBQUosY0FDS1csQ0FETDtBQUVFa2MsZ0JBQUksT0FBS29jLGdCQUFMLENBQXNCdDRCLENBQXRCO0FBRk47QUFJRDtBQUNELGVBQU9xYyxJQUFJZ2MsR0FBSixDQUFQO0FBQ0QsT0FUTSxDQUFQO0FBVUQsS0FYRDtBQVlELEc7O2lCQUVEQyxnQiw2QkFBaUJ0NEIsQyxFQUFHO0FBQUE7O0FBQ2xCLFFBQU11NEIsU0FBUyxTQUFUQSxNQUFTLENBQUN4MkIsQ0FBRCxFQUFNO0FBQ25CLFVBQUk1QyxVQUFKO0FBQ0EsVUFBRzRDLENBQUgsRUFBTTtBQUNKLFlBQUk7QUFDRjVDLGNBQUk0QyxHQUFKO0FBQ0QsU0FGRCxDQUdBLE9BQU1nSSxDQUFOLEVBQVM7QUFDUHhJLGtCQUFRdWEsS0FBUixDQUFjL1IsQ0FBZDtBQUNEO0FBQ0Y7QUFDRCxhQUFPNUssQ0FBUDtBQUNELEtBWEQ7QUFZQSxXQUFPLFVBQUNnRCxDQUFELEVBQUk3QixDQUFKLEVBQVM7QUFDZCxVQUFJZ0UsSUFBSSxFQUFSO0FBQ0EsVUFBSTtBQUNGLFlBQU02VyxPQUFPZ0IsS0FBS25jLEVBQUVrYyxFQUFQLENBQWI7QUFDQTVYLFlBQUk2VyxPQUFNQSxLQUFLaFosQ0FBTCxFQUFRN0IsQ0FBUixLQUFjLEVBQXBCLEdBQXdCLEVBQTVCO0FBQ0QsT0FIRCxDQUlBLE9BQU15SixDQUFOLEVBQVM7QUFDUHhJLGdCQUFRdWEsS0FBUixDQUFjL1IsQ0FBZDtBQUNEO0FBQ0QsVUFBTXl1QixLQUFLLE9BQUtDLG9CQUFMLENBQTBCdDJCLENBQTFCLEVBQThCN0IsQ0FBOUIsQ0FBWDtBQUFBLFVBQTZDbzRCLEtBQUssRUFBbEQ7QUFUYyxpQkFVRCxDQUFDLE1BQUQsRUFBUyxRQUFULEVBQW1CLE1BQW5CLEVBQTJCLE9BQTNCLEVBQW9DLFNBQXBDLENBVkM7O0FBQUE7QUFVVixZQUFJNTJCLGFBQUo7QUFDRjQyQixXQUFHNTJCLENBQUgsSUFBUSxZQUFLO0FBQ1h5MkIsaUJBQU9DLEdBQUcxMkIsQ0FBSCxDQUFQO0FBQ0F5MkIsaUJBQU9qMEIsRUFBRXhDLENBQUYsQ0FBUDtBQUNELFNBSEQ7QUFYWTs7QUFVZCxrREFBNkQ7QUFBQTtBQUs1RDtBQUNELGFBQU80MkIsRUFBUDtBQUNELEtBakJEO0FBa0JELEc7O2lCQUVERCxvQixpQ0FBcUJ0MkIsQyxFQUFHN0IsQyxFQUFHO0FBQUE7O0FBQ3pCNkIsTUFBRW1wQixJQUFGLENBQU8sYUFBUCxFQUFzQmlHLEVBQXRCLENBQXlCLE9BQXpCLEVBQWtDLFVBQUN4bkIsQ0FBRCxFQUFNO0FBQ3RDLFVBQUlqSSxJQUFJLGFBQUVpSSxFQUFFNlUsTUFBSixDQUFSO0FBQ0EsYUFBTTljLEVBQUU1RCxNQUFGLElBQVksQ0FBQzRELEVBQUU2YSxRQUFGLENBQVcsWUFBWCxDQUFuQixFQUE2QztBQUMzQzdhLFlBQUksYUFBRUEsRUFBRSxDQUFGLEVBQUsrVSxVQUFQLENBQUo7QUFDRDtBQUNEL1UsVUFBSThxQixTQUFTOXFCLEVBQUU4b0IsSUFBRixDQUFPLGFBQVAsQ0FBVCxDQUFKO0FBQ0EsVUFBRyxDQUFDaEksTUFBTTlnQixDQUFOLENBQUosRUFBYztBQUNaaUksVUFBRTR1QixjQUFGO0FBQ0FyNEIsVUFBRTRaLEtBQUYsQ0FBUXFNLElBQVIsQ0FBYStGLFFBQWIsQ0FBc0J4cUIsSUFBRSxDQUF4QjtBQUNEO0FBQ0YsS0FWRDtBQVdBLFFBQU1tUixLQUFLOVEsRUFBRW1wQixJQUFGLENBQU8sVUFBUCxDQUFYO0FBQ0EsUUFBR3JZLEdBQUcvVSxNQUFOLEVBQWM7QUFDWitVLFNBQUdnSixJQUFILENBQVEsNkNBQVI7QUFDQTJjLDJCQUFXemQsSUFBWCxHQUFrQmtELElBQWxCLENBQXVCLFlBQUs7QUFDMUIsYUFBSSxJQUFJamYsSUFBRSxDQUFWLEVBQWFBLElBQUU2VCxHQUFHL1UsTUFBbEIsRUFBMEIsRUFBRWtCLENBQTVCLEVBQStCO0FBQzdCLGNBQUlwQixJQUFJaVYsR0FBRzdULENBQUgsQ0FBUjtBQUNBLGNBQU0wQyxLQUFJLGFBQUU5RCxDQUFGLENBQVY7QUFBQSxjQUFnQjZ3QixTQUFTLElBQUlnSyxHQUFHQyxNQUFQLENBQWNoM0IsR0FBRXdwQixJQUFGLENBQU8sS0FBUCxFQUFjLENBQWQsQ0FBZCxFQUFnQyxFQUFDeU4sU0FBU2ozQixHQUFFOG9CLElBQUYsQ0FBTyxTQUFQLENBQVYsRUFBaEMsQ0FBekI7QUFDQTlvQixhQUFFLENBQUYsRUFBSytzQixNQUFMLEdBQWNBLE1BQWQ7QUFDRDtBQUNGLE9BTkQ7QUFPRDtBQUNELFdBQU87QUFDTGpTLFlBQU0sZ0JBQUs7QUFDVCxZQUFHLFFBQUttUyxjQUFMLENBQW9CN3dCLE1BQXZCLEVBQStCO0FBQzdCLGtCQUFLNndCLGNBQUwsR0FBc0IsRUFBdEI7QUFDQSxrQkFBS3pRLGFBQUwsQ0FBbUI7QUFDakJ0VSxrQkFBTTtBQURXLFdBQW5CO0FBR0Q7QUFDRDdILFVBQUVtcEIsSUFBRixDQUFPLGdCQUFQLEVBQXlCME4sSUFBekIsQ0FBOEIsVUFBQzVvQixDQUFELEVBQUk5UCxDQUFKO0FBQUEsaUJBQVMsUUFBS3F1QixLQUFMLENBQVdNLEtBQVgsQ0FBaUIzdUIsQ0FBakIsQ0FBVDtBQUFBLFNBQTlCO0FBQ0QsT0FUSTtBQVVMMjRCLGFBQU87QUFBQSxlQUFLOTJCLEVBQUVtcEIsSUFBRixDQUFPLGdCQUFQLEVBQXlCME4sSUFBekIsQ0FBOEIsVUFBQzVvQixDQUFELEVBQUk5UCxDQUFKO0FBQUEsaUJBQVMsUUFBS3F1QixLQUFMLENBQVdDLElBQVgsQ0FBZ0J0dUIsQ0FBaEIsQ0FBVDtBQUFBLFNBQTlCLENBQUw7QUFBQSxPQVZGO0FBV0xpSCxlQUFTO0FBQUEsZUFBS3BGLEVBQUVtcEIsSUFBRixDQUFPLGdCQUFQLEVBQXlCME4sSUFBekIsQ0FBOEIsVUFBQzVvQixDQUFELEVBQUk5UCxDQUFKO0FBQUEsaUJBQVMsUUFBS3F1QixLQUFMLENBQVdNLEtBQVgsQ0FBaUIzdUIsQ0FBakIsQ0FBVDtBQUFBLFNBQTlCLENBQUw7QUFBQTtBQVhKLEtBQVA7QUFhRCxHOzs7RUFubkMrQmxFLFlBQU1taUIsZTs7a0JBQW5CcUosSTs7Ozs7Ozs7Ozs7Ozs7O0FDZnJCOztBQUNBOzs7O0FBQ0E7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7Ozs7Ozs7OztJQUVxQkksYzs7O0FBRW5CLDBCQUFZdkIsSUFBWixFQUFrQnRjLElBQWxCLEVBQXdCRCxLQUF4QixFQUErQjtBQUFBOztBQUFBLGlEQUM3QixzQkFENkI7O0FBRTdCLFVBQUtndkIsa0JBQUwsR0FBMEIsSUFBMUI7QUFDQSxVQUFLelMsSUFBTCxHQUFZQSxJQUFaO0FBQ0EsVUFBS2xaLE1BQUwsR0FBY2taLEtBQUtsWixNQUFuQjtBQUNBLFVBQUtqTixDQUFMLEdBQVMwbkIsZUFBZW9ILFlBQWYsQ0FBNEJsbEIsS0FBNUIsQ0FBVDtBQUNBLFVBQUs1SixDQUFMLENBQU8wVixHQUFQLEdBQWF5USxLQUFLbm1CLENBQUwsQ0FBTzBWLEdBQXBCOztBQUVBLFVBQUttakIsS0FBTCxHQUFhMVMsS0FBS2xaLE1BQUwsQ0FBWTZyQixRQUFaLEVBQWI7QUFDQTNTLFNBQUtxTSxrQkFBTCxDQUF3QixNQUFLdUcsaUJBQUwsQ0FBdUJ4USxJQUF2QixPQUF4QjtBQUNBLFVBQUsxZSxJQUFMLEdBQVlBLElBQVo7QUFDQSxVQUFLbXZCLFdBQUw7O0FBRUEsVUFBSzNyQixLQUFMLEdBQWE7QUFDWDRyQixnQkFBVSxDQUFDLE1BQUtDLE9BQUwsQ0FBYSxhQUFiLEVBQTRCQyxNQUQ1QjtBQUVYbkssa0JBQVksTUFBS2tLLE9BQUwsQ0FBYSxlQUFiLEVBQThCQyxNQUE5QixJQUF3QyxNQUFLRCxPQUFMLENBQWEsZUFBYixFQUE4QkUsZUFBOUIsSUFBaUQsTUFBS25zQixNQUFMLENBQVlvc0IsUUFBWixFQUYxRjtBQUdYQyxhQUFPLE1BQUtKLE9BQUwsQ0FBYSxVQUFiLEVBQXlCQyxNQUhyQjtBQUlYSSxnQkFBVSxNQUFLdjVCLENBQUwsQ0FBT3U1QixRQUFQLENBQWdCQyxPQUpmO0FBS1hDLGtCQUFZO0FBTEQsS0FBYjs7QUFRQSxVQUFLakksSUFBTCxHQUFZLENBQUMsSUFBSTExQixZQUFNMjFCLElBQVYsRUFBRCxFQUFtQixJQUFJMzFCLFlBQU0yMUIsSUFBVixFQUFuQixDQUFaO0FBQ0EsVUFBS2lJLFdBQUwsR0FBbUIsSUFBSUMseUJBQUosQ0FBb0IsTUFBSzFzQixNQUF6QixFQUFpQyxZQUFLO0FBQ3ZELFVBQUcsTUFBS0ksS0FBTCxDQUFXMmhCLFVBQWQsRUFBMEI7QUFDeEIsWUFBRyxNQUFLM2hCLEtBQUwsQ0FBV29zQixVQUFkLEVBQTBCO0FBQ3hCLGdCQUFLakksSUFBTCxDQUFVLENBQVYsRUFBYTRDLGFBQWIsQ0FBMkJqTyxLQUFLaUssVUFBTCxDQUFnQmhoQixLQUEzQztBQUNELFNBRkQsTUFHSztBQUNILGdCQUFLb2lCLElBQUwsQ0FBVSxDQUFWLEVBQWE0QyxhQUFiLENBQTJCak8sS0FBSzZKLFNBQUwsQ0FBZTVnQixLQUExQztBQUNEO0FBQ0YsT0FQRCxNQVFLO0FBQ0gsY0FBS29pQixJQUFMLENBQVUsQ0FBVixFQUFhNEMsYUFBYixDQUEyQmpPLEtBQUs2SixTQUFMLENBQWU1Z0IsS0FBMUM7QUFDQSxjQUFLb2lCLElBQUwsQ0FBVSxDQUFWLEVBQWE0QyxhQUFiLENBQTJCak8sS0FBS2lLLFVBQUwsQ0FBZ0JoaEIsS0FBM0M7QUFDQSxjQUFLb2lCLElBQUwsQ0FBVSxDQUFWLEVBQWE2QyxLQUFiLENBQW1CLE1BQUs3QyxJQUFMLENBQVUsQ0FBVixDQUFuQjtBQUNEO0FBQ0QsYUFBTyxNQUFLQSxJQUFMLENBQVUsQ0FBVixDQUFQO0FBQ0QsS0Fma0IsQ0FBbkI7QUFnQkEsVUFBS2tJLFdBQUwsQ0FBaUJ0eEIsS0FBakIsR0FBeUIsTUFBS3BJLENBQUwsQ0FBT29JLEtBQVAsQ0FBYW94QixPQUF0QztBQUNBLFVBQUtyVCxJQUFMLENBQVVvTSxPQUFWLENBQWtCLE1BQUttSCxXQUFMLENBQWlCdHhCLEtBQW5DLEVBQTBDLE1BQUtpRixLQUFMLENBQVcyaEIsVUFBckQ7O0FBRUEsVUFBSzRLLEtBQUwsR0FBYSxJQUFJQSxlQUFKLEVBQWI7QUFDQSxVQUFLQSxLQUFMLENBQVd2aUIsVUFBWCxDQUFzQnRMLEtBQXRCLENBQTRCK0gsUUFBNUIsR0FBdUMsVUFBdkM7QUFDQSxVQUFLOGxCLEtBQUwsQ0FBV3ZpQixVQUFYLENBQXNCdEwsS0FBdEIsQ0FBNEI4dEIsR0FBNUIsR0FBa0MsS0FBbEM7O0FBRUEsVUFBSzVzQixNQUFMLENBQVk2c0IsZ0JBQVosQ0FBNkIsTUFBS3pzQixLQUFMLENBQVdrc0IsUUFBeEM7QUFDQSxVQUFLMXNCLEtBQUwsR0FBYTtBQUNYa3RCLDJCQUFxQixNQUFLQSxtQkFBTCxDQUF5QnhSLElBQXpCLE9BRFY7QUFFWCtRLGFBQU8sTUFBS00sS0FBTCxDQUFXL0ksTUFBWCxDQUFrQnRJLElBQWxCLENBQXVCLE1BQUtxUixLQUE1QixDQUZJO0FBR1hJLG9CQUFjLE1BQUtDLFVBQUwsQ0FBZ0IxUixJQUFoQjtBQUhILEtBQWI7QUFLQXRJLDBCQUFZM0osZ0JBQVosQ0FBNkIsTUFBS3pNLElBQUwsQ0FBVXF3QixrQkFBVixHQUErQi9TLGFBQTVELEVBQTJFLE1BQUt0YSxLQUFMLENBQVdrdEIsbUJBQXRGOztBQUVBLFVBQUtJLFdBQUw7O0FBRUEsUUFBRyxNQUFLdHdCLElBQUwsQ0FBVXV3QixjQUFWLENBQXlCQyxTQUE1QixFQUF1QztBQUNyQzdkLGNBQVFDLE9BQVIsR0FBa0JzQixJQUFsQixDQUF1QixNQUFLbFUsSUFBTCxDQUFVdXdCLGNBQVYsQ0FBeUJDLFNBQWhEO0FBQ0Q7O0FBRUQsVUFBS2xVLElBQUwsQ0FBVThNLHNCQUFWLENBQWlDLE1BQUtqekIsQ0FBTCxDQUFPczZCLGdCQUFQLENBQXdCblUsSUFBekQ7QUFDQSxRQUFHLE1BQUtubUIsQ0FBTCxDQUFPczZCLGdCQUFQLENBQXdCQyxJQUEzQixFQUFpQztBQUMvQixZQUFLQyxvQkFBTDtBQUNEOztBQUVELFVBQUtyVSxJQUFMLENBQVU4TSxzQkFBVixDQUFpQyxNQUFLanpCLENBQUwsQ0FBT3M2QixnQkFBUCxDQUF3Qm5VLElBQXpEO0FBQ0EsVUFBS0EsSUFBTCxDQUFVbU0saUJBQVYsQ0FBNEIsTUFBS3R5QixDQUFMLENBQU9pdkIsY0FBUCxDQUFzQmptQixPQUFsRCxFQUEyRCxNQUFLaEosQ0FBTCxDQUFPaXZCLGNBQVAsQ0FBc0J3TCxXQUFqRjs7QUFFQSxVQUFLeHRCLE1BQUwsQ0FBWXFKLGdCQUFaLENBQTZCLFFBQTdCLEVBQXVDLE1BQUsyakIsVUFBTCxDQUFnQjFSLElBQWhCLE9BQXZDO0FBQ0EsVUFBS3BDLElBQUwsQ0FBVTdQLGdCQUFWLENBQTJCLGdCQUEzQixFQUE2QyxNQUFLMmpCLFVBQUwsQ0FBZ0IxUixJQUFoQixPQUE3QztBQXBFNkI7QUFxRTlCOzsyQkFFRHRoQixPLHNCQUFVO0FBQ1JnWiwwQkFBWU0sbUJBQVosQ0FBZ0MsS0FBSzFXLElBQUwsQ0FBVXF3QixrQkFBVixHQUErQi9TLGFBQS9ELEVBQThFLEtBQUt0YSxLQUFMLENBQVdrdEIsbUJBQXpGO0FBQ0EsV0FBTyxLQUFLNVQsSUFBWjtBQUNBLFdBQU8sS0FBS3RjLElBQVo7QUFDQSxXQUFPLEtBQUtvRCxNQUFaO0FBQ0QsRzs7MkJBRUR1dEIsb0IsbUNBQXVCO0FBQUE7O0FBQ3JCLFFBQU1sYSxVQUFVLFNBQVZBLE9BQVUsR0FBSztBQUNuQixVQUFNOVQsUUFBUSxPQUFLMlosSUFBTCxDQUFVNE0sV0FBVixFQUFkO0FBQ0EsVUFBSTJILFVBQVUsS0FBZDtBQUNBLDJCQUFhbHVCLEtBQWIsa0hBQW9CO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQSxZQUFaaEwsQ0FBWTs7QUFDbEIsWUFBTTZMLFFBQVEsT0FBSzhZLElBQUwsQ0FBVTZNLFlBQVYsQ0FBdUJ4eEIsQ0FBdkIsQ0FBZDtBQUNBazVCLGtCQUFVcnRCLFVBQVF4RSxTQUFSLElBQXFCd0UsVUFBUSxTQUF2QztBQUNBLFlBQUdxdEIsT0FBSCxFQUFZO0FBQ1Y7QUFDRDtBQUNGO0FBQ0QsYUFBSzd3QixJQUFMLENBQVU4d0IsUUFBVixDQUFtQixZQUFuQixFQUFpQztBQUMvQkQ7QUFEK0IsT0FBakM7QUFHRCxLQWJEO0FBY0EsU0FBS3ZVLElBQUwsQ0FBVTdQLGdCQUFWLENBQTJCLGlCQUEzQixFQUE4Q2dLLE9BQTlDO0FBQ0EsU0FBSzZGLElBQUwsQ0FBVTdQLGdCQUFWLENBQTJCLGdCQUEzQixFQUE2Q2dLLE9BQTdDO0FBQ0EsU0FBSzZGLElBQUwsQ0FBVTdQLGdCQUFWLENBQTJCLFVBQTNCLEVBQXVDZ0ssT0FBdkM7QUFDQSxTQUFLNkYsSUFBTCxDQUFVN1AsZ0JBQVYsQ0FBMkIsWUFBM0IsRUFBeUNnSyxPQUF6QztBQUNELEc7OzJCQUVEc2EsZ0IsNkJBQWlCMUwsTSxFQUFRO0FBQ3ZCLFNBQUswSixrQkFBTCxHQUEwQjFKLE1BQTFCO0FBQ0QsRzs7MkJBRURqRyxVLHVCQUFXbkQsTyxFQUFTO0FBQ2xCLFNBQUtBLE9BQUwsR0FBZUEsT0FBZjtBQUNBLFNBQUtBLE9BQUwsQ0FBYXRkLFFBQWIsR0FBd0IsS0FBS3l4QixVQUFMLENBQWdCMVIsSUFBaEIsQ0FBcUIsSUFBckIsQ0FBeEI7QUFDQSxTQUFLMFIsVUFBTDtBQUNELEc7OzJCQUVEalMsVSx1QkFBVzZTLE8sRUFBUztBQUNsQixTQUFLQSxPQUFMLEdBQWVBLE9BQWY7QUFDQSxTQUFLWixVQUFMO0FBQ0QsRzs7MkJBRURyUSxTLHNCQUFVL0QsTSxFQUFRO0FBQ2hCLFNBQUtBLE1BQUwsR0FBY0EsTUFBZDtBQUNBQSxXQUFPaVYsVUFBUCxDQUFrQixLQUFLNUIsT0FBTCxDQUFhLFdBQWIsRUFBMEJDLE1BQTVDO0FBQ0EsU0FBS2MsVUFBTDtBQUNELEc7OzJCQUdERixtQixnQ0FBb0J0d0IsQyxFQUFHO0FBQ3JCLFNBQUt3d0IsVUFBTDtBQUNELEc7OzJCQUVEYyxTLHdCQUFZO0FBQ1YsV0FBTyxDQUFDLEtBQUsxdEIsS0FBTCxDQUFXNHJCLFFBQVosSUFBd0IvNEIsS0FBS00sR0FBTCxDQUFTLEtBQUtrNUIsV0FBTCxDQUFpQnR4QixLQUFqQixHQUF1QixLQUFLcEksQ0FBTCxDQUFPb0ksS0FBUCxDQUFhcEYsR0FBN0MsSUFBa0QsS0FBS2hELENBQUwsQ0FBT29DLEdBQXhGO0FBQ0QsRzs7MkJBRUQ0NEIsVSx5QkFBYTtBQUNYLFdBQU8sQ0FBQyxLQUFLM3RCLEtBQUwsQ0FBVzRyQixRQUFaLElBQXdCLzRCLEtBQUtNLEdBQUwsQ0FBUyxLQUFLazVCLFdBQUwsQ0FBaUJ0eEIsS0FBakIsR0FBdUIsS0FBS3BJLENBQUwsQ0FBT29JLEtBQVAsQ0FBYXJGLEdBQTdDLElBQWtELEtBQUsvQyxDQUFMLENBQU9vQyxHQUF4RjtBQUNELEc7OzJCQUVENjRCLGMsNkJBQWlCO0FBQ2YsV0FBTyxLQUFLNXRCLEtBQUwsQ0FBVzRyQixRQUFsQjtBQUNELEc7OzJCQUVEaUMsVyx3QkFBWTl5QixLLEVBQU87QUFDakI7QUFDQTtBQUNJLFNBQUsrZCxJQUFMLENBQVVvTSxPQUFWLENBQWtCbnFCLEtBQWxCLEVBQXlCLEtBQUtpRixLQUFMLENBQVcyaEIsVUFBcEM7QUFDSjtBQUNBO0FBQ0QsRzs7MkJBRURtTSxTLHdCQUFZO0FBQ1YsUUFBRyxLQUFLOXRCLEtBQUwsQ0FBVzRyQixRQUFkLEVBQXdCO0FBQ3RCLFdBQUtTLFdBQUwsQ0FBaUJ0eEIsS0FBakIsR0FBeUJsSSxLQUFLNkMsR0FBTCxDQUFTLEtBQUsvQyxDQUFMLENBQU9vSSxLQUFQLENBQWFwRixHQUF0QixFQUEyQixLQUFLMDJCLFdBQUwsQ0FBaUJ0eEIsS0FBakIsR0FBdUIsS0FBS3BJLENBQUwsQ0FBT29JLEtBQVAsQ0FBYWd6QixLQUEvRCxDQUF6QjtBQUNBLFdBQUtGLFdBQUwsQ0FBaUIsS0FBS3hCLFdBQUwsQ0FBaUJ0eEIsS0FBbEM7QUFDRCxLQUhELE1BSUs7QUFDSCxXQUFLeXdCLEtBQUwsQ0FBV3dDLE1BQVgsQ0FBa0IsTUFBSSxLQUFLcjdCLENBQUwsQ0FBT29JLEtBQVAsQ0FBYWd6QixLQUFqQixHQUF1QixJQUF6QztBQUNEO0FBQ0QsU0FBS25CLFVBQUw7QUFDRCxHOzsyQkFFRHFCLFUseUJBQWE7QUFDWCxRQUFHLEtBQUtqdUIsS0FBTCxDQUFXNHJCLFFBQWQsRUFBd0I7QUFDdEIsV0FBS1MsV0FBTCxDQUFpQnR4QixLQUFqQixHQUF5QmxJLEtBQUs4QyxHQUFMLENBQVMsS0FBS2hELENBQUwsQ0FBT29JLEtBQVAsQ0FBYXJGLEdBQXRCLEVBQTJCLEtBQUsyMkIsV0FBTCxDQUFpQnR4QixLQUFqQixHQUF1QixLQUFLcEksQ0FBTCxDQUFPb0ksS0FBUCxDQUFhZ3pCLEtBQS9ELENBQXpCO0FBQ0EsV0FBS0YsV0FBTCxDQUFpQixLQUFLeEIsV0FBTCxDQUFpQnR4QixLQUFsQztBQUNELEtBSEQsTUFJSztBQUNILFdBQUt5d0IsS0FBTCxDQUFXMEMsT0FBWCxDQUFtQixNQUFJLEtBQUt2N0IsQ0FBTCxDQUFPb0ksS0FBUCxDQUFhZ3pCLEtBQWpCLEdBQXVCLElBQTFDO0FBQ0Q7QUFDRCxTQUFLbkIsVUFBTDtBQUNELEc7OzJCQUVEdUIsUSxxQkFBU3B6QixLLEVBQU87QUFDZCxTQUFLc3hCLFdBQUwsQ0FBaUJ0eEIsS0FBakIsR0FBeUJsSSxLQUFLNkMsR0FBTCxDQUFTLEtBQUsvQyxDQUFMLENBQU9vSSxLQUFQLENBQWFwRixHQUF0QixFQUEyQjlDLEtBQUs4QyxHQUFMLENBQVMsS0FBS2hELENBQUwsQ0FBT29JLEtBQVAsQ0FBYXJGLEdBQXRCLEVBQTJCcUYsS0FBM0IsQ0FBM0IsQ0FBekI7QUFDQSxTQUFLOHlCLFdBQUwsQ0FBaUIsS0FBS3hCLFdBQUwsQ0FBaUJ0eEIsS0FBbEM7QUFDQSxTQUFLNnhCLFVBQUw7QUFDRCxHOzsyQkFFRHdCLGMsNkJBQWlCO0FBQ2YsUUFBRyxLQUFLcHVCLEtBQUwsQ0FBVzRyQixRQUFkLEVBQXdCO0FBQ3RCLFdBQUtTLFdBQUwsQ0FBaUJ0eEIsS0FBakIsR0FBeUIsS0FBS3BJLENBQUwsQ0FBT29JLEtBQVAsQ0FBYW94QixPQUF0QztBQUNBLFdBQUswQixXQUFMLENBQWlCLEtBQUt4QixXQUFMLENBQWlCdHhCLEtBQWxDO0FBQ0EsV0FBSzZ4QixVQUFMO0FBQ0Q7QUFDRixHOzsyQkFFRHlCLE0scUJBQVM7QUFDUCxRQUFHLEtBQUs1VixPQUFSLEVBQWlCO0FBQ2YsV0FBS0EsT0FBTCxDQUFhNlYsS0FBYjtBQUNEO0FBQ0YsRzs7MkJBRURDLGUsOEJBQWtCO0FBQ2hCLFNBQUtDLFNBQUwsQ0FBZSxLQUFLMVYsSUFBTCxDQUFVb04sUUFBVixDQUFtQixDQUFuQixDQUFmO0FBQ0QsRzs7MkJBRUR1SSxXLDBCQUFjO0FBQUE7O0FBQ1osUUFBRyxLQUFLenVCLEtBQUwsQ0FBVzJoQixVQUFkLEVBQTBCO0FBQ3hCLFdBQUszaEIsS0FBTCxDQUFXb3NCLFVBQVgsR0FBd0IsQ0FBQyxLQUFLL1csT0FBTCxLQUFlLENBQWhCLElBQW1CLENBQTNDO0FBQ0EsVUFBRyxLQUFLclYsS0FBTCxDQUFXb3NCLFVBQWQsRUFBMEI7QUFDeEIsYUFBS3BzQixLQUFMLENBQVdvc0IsVUFBWCxHQUF3QixDQUF4QjtBQUNBLGFBQUtRLFVBQUw7QUFDRCxPQUhELE1BSUs7QUFDSCxhQUFLNEIsU0FBTCxDQUFlLEtBQUsxVixJQUFMLENBQVVvTixRQUFWLENBQW1CLENBQW5CLENBQWYsRUFBc0N4VixJQUF0QyxDQUEyQyxVQUFDNlUsS0FBRCxFQUFVO0FBQ25ELGNBQUdBLEtBQUgsRUFBVTtBQUNSLG1CQUFLdmxCLEtBQUwsQ0FBV29zQixVQUFYLEdBQXdCLENBQXhCO0FBQ0Q7QUFDRixTQUpEO0FBS0Q7QUFDRixLQWJELE1BY0s7QUFDSCxXQUFLb0MsU0FBTCxDQUFlLEtBQUsxVixJQUFMLENBQVVvTixRQUFWLENBQW1CLENBQW5CLENBQWY7QUFDRDtBQUNGLEc7OzJCQUVEd0ksYyw2QkFBaUI7QUFDZixTQUFLRCxXQUFMO0FBQ0QsRzs7MkJBRURFLFUseUJBQWE7QUFBQTs7QUFDWCxRQUFHLEtBQUszdUIsS0FBTCxDQUFXMmhCLFVBQWQsRUFBMEI7QUFDeEIsV0FBSzNoQixLQUFMLENBQVdvc0IsVUFBWCxHQUF3QixDQUFDLEtBQUsvVyxPQUFMLEtBQWUsQ0FBaEIsSUFBbUIsQ0FBM0M7QUFDQSxVQUFHLENBQUMsS0FBS3JWLEtBQUwsQ0FBV29zQixVQUFmLEVBQTJCO0FBQ3pCLGFBQUtwc0IsS0FBTCxDQUFXb3NCLFVBQVgsR0FBd0IsQ0FBeEI7QUFDQSxhQUFLUSxVQUFMO0FBQ0QsT0FIRCxNQUlLO0FBQ0gsYUFBSzRCLFNBQUwsQ0FBZSxLQUFLMVYsSUFBTCxDQUFVME4sU0FBVixDQUFvQixDQUFwQixDQUFmLEVBQXVDOVYsSUFBdkMsQ0FBNEMsVUFBQzZVLEtBQUQsRUFBVTtBQUNwRCxjQUFHQSxLQUFILEVBQVU7QUFDUixtQkFBS3ZsQixLQUFMLENBQVdvc0IsVUFBWCxHQUF3QixDQUF4QjtBQUNEO0FBQ0YsU0FKRDtBQUtEO0FBQ0YsS0FiRCxNQWNLO0FBQ0gsV0FBS29DLFNBQUwsQ0FBZSxLQUFLMVYsSUFBTCxDQUFVME4sU0FBVixDQUFvQixDQUFwQixDQUFmO0FBQ0Q7QUFDRixHOzsyQkFFRG9JLGEsNEJBQWdCO0FBQ2QsU0FBS0QsVUFBTDtBQUNELEc7OzJCQUVERSxjLDZCQUFpQjtBQUNmLFNBQUtMLFNBQUwsQ0FBZSxLQUFLMVYsSUFBTCxDQUFVME4sU0FBVixDQUFvQixDQUFwQixDQUFmO0FBQ0QsRzs7MkJBRURzSSxPLHNCQUFVO0FBQ1IzZ0MsV0FBTzRnQyxJQUFQLENBQVksS0FBS3A4QixDQUFMLENBQU9xOEIsV0FBbkIsRUFBZ0MsUUFBaEM7QUFDRCxHOzsyQkFFREMsUSx1QkFBVztBQUNULFNBQUt6QixPQUFMLENBQWEwQixLQUFiO0FBQ0QsRzs7MkJBRURDLGEsNEJBQWdCO0FBQ2QsUUFBRyxDQUFDdmMsc0JBQVlFLFNBQVosRUFBSixFQUE2QjtBQUMzQkYsNEJBQVlRLE9BQVosQ0FBb0IsS0FBSzVXLElBQUwsQ0FBVXF3QixrQkFBVixFQUFwQjtBQUNELEtBRkQsTUFHSztBQUNIamEsNEJBQVlTLE1BQVo7QUFDRDtBQUNGLEc7OzJCQUVEeVosVywwQkFBYztBQUNaLFNBQUs5c0IsS0FBTCxDQUFXNHJCLFFBQVgsR0FBc0IsQ0FBQyxLQUFLNXJCLEtBQUwsQ0FBVzRyQixRQUFsQztBQUNBLFFBQUcsS0FBSzVyQixLQUFMLENBQVc0ckIsUUFBZCxFQUF3QjtBQUN0QixXQUFLSixLQUFMLENBQVc0RCxlQUFYLEdBQTZCLENBQTdCO0FBQ0EsV0FBSzVELEtBQUwsQ0FBVzZELGVBQVgsR0FBNkIsQ0FBN0I7QUFDQSxXQUFLN0QsS0FBTCxDQUFXOEQsYUFBWCxHQUEyQixDQUEzQjtBQUNELFdBQUs5RCxLQUFMLENBQVcrRCxhQUFYLEdBQTJCMThCLEtBQUt5USxFQUFMLEdBQVEsQ0FBbkM7QUFDQyxXQUFLK29CLFdBQUwsQ0FBaUIxd0IsT0FBakIsR0FBMkIsSUFBM0I7QUFDRCxLQU5ELE1BT0s7QUFDSCxXQUFLNnZCLEtBQUwsQ0FBVzRELGVBQVgsR0FBNkIsQ0FBQzVmLFFBQTlCO0FBQ0EsV0FBS2djLEtBQUwsQ0FBVzZELGVBQVgsR0FBNkI3ZixRQUE3QjtBQUNBLFdBQUtnYyxLQUFMLENBQVc4RCxhQUFYLEdBQTJCLENBQTNCO0FBQ0QsV0FBSzlELEtBQUwsQ0FBVytELGFBQVgsR0FBMkIxOEIsS0FBS3lRLEVBQWhDO0FBQ0MsV0FBSytvQixXQUFMLENBQWlCMXdCLE9BQWpCLEdBQTJCLEtBQTNCO0FBQ0Q7QUFDRCxTQUFLaXhCLFVBQUw7QUFDRCxHOzsyQkFFRDRDLGEsNEJBQWdCO0FBQ2QsU0FBS3h2QixLQUFMLENBQVcyaEIsVUFBWCxHQUF3QixDQUFDLEtBQUszaEIsS0FBTCxDQUFXMmhCLFVBQXBDO0FBQ0EsU0FBS2tNLFdBQUwsQ0FBaUIsS0FBS3hCLFdBQUwsQ0FBaUJ0eEIsS0FBbEM7QUFDQSxTQUFLNnhCLFVBQUw7QUFDRCxHOzsyQkFFRDZDLFMsd0JBQVk7QUFDVixRQUFHLEtBQUtqWCxNQUFSLEVBQWdCO0FBQ2QsV0FBS0EsTUFBTCxDQUFZOFYsS0FBWjtBQUNEO0FBQ0QsU0FBSzFCLFVBQUw7QUFDRCxHOzsyQkFFRDhDLFEsdUJBQVc7QUFDVCxTQUFLMXZCLEtBQUwsQ0FBV2lzQixLQUFYLEdBQW1CLENBQUMsS0FBS2pzQixLQUFMLENBQVdpc0IsS0FBL0I7QUFDQSxRQUFHLEtBQUtqc0IsS0FBTCxDQUFXaXNCLEtBQWQsRUFBcUI7QUFDbkIsbUJBQUUsS0FBS3p2QixJQUFMLENBQVVxZCxZQUFWLEVBQUYsRUFBNEI4VixNQUE1QixDQUFtQyxLQUFLcEQsS0FBTCxDQUFXdmlCLFVBQTlDO0FBQ0EsV0FBS3BLLE1BQUwsQ0FBWStqQixpQkFBWixDQUE4QixLQUFLbmtCLEtBQUwsQ0FBV3lzQixLQUF6QztBQUNELEtBSEQsTUFJSztBQUNILG1CQUFFLEtBQUt6dkIsSUFBTCxDQUFVcWQsWUFBVixFQUFGLEVBQTRCOEQsSUFBNUIsQ0FBaUMsS0FBSzRPLEtBQUwsQ0FBV3ZpQixVQUE1QyxFQUF3RDZELE1BQXhEO0FBQ0EsV0FBS2pPLE1BQUwsQ0FBWWdsQixvQkFBWixDQUFpQyxLQUFLcGxCLEtBQUwsQ0FBV3lzQixLQUE1QztBQUNEO0FBQ0QsU0FBS1csVUFBTDtBQUNELEc7OzJCQUVEZ0QsYSw0QkFBZ0I7QUFDZCxTQUFLNXZCLEtBQUwsQ0FBV2tzQixRQUFYLEdBQXNCcjVCLEtBQUs2QyxHQUFMLENBQVMsS0FBS3NLLEtBQUwsQ0FBV2tzQixRQUFYLEdBQW9CLEtBQUt2NUIsQ0FBTCxDQUFPdTVCLFFBQVAsQ0FBZ0I2QixLQUE3QyxFQUFvRCxLQUFLcDdCLENBQUwsQ0FBT3U1QixRQUFQLENBQWdCdjJCLEdBQXBFLENBQXRCO0FBQ0EsU0FBS2lLLE1BQUwsQ0FBWTZzQixnQkFBWixDQUE2QixLQUFLenNCLEtBQUwsQ0FBV2tzQixRQUF4QztBQUNBLFNBQUtwVCxJQUFMLENBQVU0TCxXQUFWO0FBQ0EsU0FBS2tJLFVBQUw7QUFDRCxHOzsyQkFFRGlELGUsOEJBQWtCO0FBQ2hCLFNBQUs3dkIsS0FBTCxDQUFXa3NCLFFBQVgsR0FBc0JyNUIsS0FBSzhDLEdBQUwsQ0FBUyxLQUFLcUssS0FBTCxDQUFXa3NCLFFBQVgsR0FBb0IsS0FBS3Y1QixDQUFMLENBQU91NUIsUUFBUCxDQUFnQjZCLEtBQTdDLEVBQW9ELEtBQUtwN0IsQ0FBTCxDQUFPdTVCLFFBQVAsQ0FBZ0J4MkIsR0FBcEUsQ0FBdEI7QUFDQSxTQUFLa0ssTUFBTCxDQUFZNnNCLGdCQUFaLENBQTZCLEtBQUt6c0IsS0FBTCxDQUFXa3NCLFFBQXhDO0FBQ0EsU0FBS3BULElBQUwsQ0FBVTRMLFdBQVY7QUFDQSxTQUFLa0ksVUFBTDtBQUNELEc7OzJCQUVEa0QsYyw2QkFBaUI7QUFDZixTQUFLaFgsSUFBTCxDQUFVa00scUJBQVY7QUFDRCxHOzsyQkFFRHJHLFEscUJBQVMxZixJLEVBQU07QUFBQTs7QUFDYixRQUFHLEtBQUt0TSxDQUFMLENBQU8wVixHQUFWLEVBQWU7QUFDYnBKLGFBQU8sS0FBSzZaLElBQUwsQ0FBVWlDLFFBQVYsS0FBcUIsQ0FBckIsR0FBdUI5YixJQUE5QjtBQUNEO0FBQ0QsUUFBTTh3QixVQUFVbDlCLEtBQUs4QyxHQUFMLENBQVM5QyxLQUFLNkMsR0FBTCxDQUFTdUosSUFBVCxFQUFlLEtBQUs2WixJQUFMLENBQVVpQyxRQUFWLEtBQXFCLENBQXBDLENBQVQsRUFBZ0QsQ0FBaEQsQ0FBaEI7QUFDQSxTQUFLL2EsS0FBTCxDQUFXb3NCLFVBQVgsR0FBd0IsQ0FBQzJELFVBQVEsQ0FBVCxJQUFZLENBQXBDO0FBQ0EsUUFBSTllLFNBQVNwZSxLQUFLOEMsR0FBTCxDQUFTOUMsS0FBSzZDLEdBQUwsQ0FBU3VKLE9BQUssQ0FBTCxHQUFPQSxPQUFLLENBQXJCLEVBQXdCLEtBQUs2WixJQUFMLENBQVVpQyxRQUFWLEtBQXFCLENBQTdDLENBQVQsRUFBeUQsQ0FBekQsQ0FBYjtBQUFBLFFBQTBFaVYsVUFBVSxLQUFLbFgsSUFBTCxDQUFVekQsT0FBVixFQUFwRjtBQUFBLFFBQXlHNGEsUUFBUSxFQUFqSDtBQUFBLFFBQXFIQyxPQUFPLENBQTVILENBQThIO0FBQzlILFFBQUdqZixVQUFRK2UsT0FBWCxFQUFvQjtBQUNsQixVQUFHQSxZQUFVLENBQWIsRUFBZ0I7QUFDZEMsY0FBTXYrQixJQUFOLENBQVcsQ0FBWDtBQUNBcytCLG1CQUFTLENBQVQ7QUFDQSxVQUFFRSxJQUFGO0FBQ0QsT0FKRCxNQUtLLElBQUdGLFlBQVUsS0FBS2xYLElBQUwsQ0FBVWlDLFFBQVYsS0FBcUIsQ0FBbEMsRUFBcUM7QUFDeENrVixjQUFNditCLElBQU4sQ0FBVyxDQUFDLENBQVo7QUFDQXMrQixtQkFBUyxDQUFUO0FBQ0EsVUFBRUUsSUFBRjtBQUNEO0FBQ0QsVUFBSUMsS0FBSyxDQUFUO0FBQ0EsVUFBR2xmLFdBQVMsQ0FBWixFQUFlO0FBQ2JrZixhQUFLLENBQUMsQ0FBTjtBQUNBbGYsa0JBQVEsQ0FBUjtBQUNBLFVBQUVpZixJQUFGO0FBQ0QsT0FKRCxNQUtLLElBQUdqZixXQUFTLEtBQUs2SCxJQUFMLENBQVVpQyxRQUFWLEtBQXFCLENBQWpDLEVBQW9DO0FBQ3ZDb1YsYUFBSyxDQUFMO0FBQ0FsZixrQkFBUSxDQUFSO0FBQ0EsVUFBRWlmLElBQUY7QUFDRDtBQUNELFVBQUdqZixTQUFPK2UsT0FBVixFQUFtQjtBQUNqQkMsY0FBTXYrQixJQUFOLENBQVdtQixLQUFLUyxJQUFMLENBQVUsQ0FBQzJkLFNBQU8rZSxPQUFSLElBQWlCLENBQTNCLENBQVg7QUFDRDtBQUNELFVBQUdHLEVBQUgsRUFBTztBQUNMRixjQUFNditCLElBQU4sQ0FBV3krQixFQUFYO0FBQ0Q7QUFDRjs7QUFFRCxRQUFNQyxTQUFTLFNBQVRBLE1BQVMsQ0FBQ0MsRUFBRCxFQUFLQyxJQUFMLEVBQVc1aEIsR0FBWCxFQUFrQjtBQUMvQixhQUFPLElBQUlTLE9BQUosQ0FBWSxVQUFDQyxPQUFELEVBQVk7QUFDN0JOLG1CQUFXLFlBQUs7QUFDZCxjQUFHdWhCLEtBQUcsQ0FBTixFQUFTO0FBQ1AsbUJBQUs3QixTQUFMLENBQWUsT0FBSzFWLElBQUwsQ0FBVW9OLFFBQVYsQ0FBbUIsQ0FBQ21LLEVBQXBCLEVBQXdCM2hCLEdBQXhCLENBQWY7QUFDRCxXQUZELE1BR0s7QUFDSCxtQkFBSzhmLFNBQUwsQ0FBZSxPQUFLMVYsSUFBTCxDQUFVME4sU0FBVixDQUFvQjZKLEVBQXBCLEVBQXdCM2hCLEdBQXhCLENBQWY7QUFDRDtBQUNEVTtBQUNELFNBUkQsRUFRR2toQixJQVJIO0FBU0QsT0FWTSxDQUFQO0FBV0QsS0FaRDs7QUFjQSxRQUFHSixTQUFPLENBQVYsRUFBYTtBQUNYRSxhQUFPSCxNQUFNLENBQU4sQ0FBUCxFQUFpQixDQUFqQixFQUFvQixVQUFDMUssS0FBRCxFQUFRNUwsUUFBUixFQUFrQjNaLEtBQWxCLEVBQTJCO0FBQzdDLFlBQUdBLFNBQU8sUUFBUCxJQUFtQjJaLFlBQVUsQ0FBaEMsRUFBbUM7QUFDakN5VyxpQkFBT0gsTUFBTUEsTUFBTTEvQixNQUFOLEdBQWEsQ0FBbkIsQ0FBUCxFQUE4QixDQUE5QjtBQUNEO0FBQ0YsT0FKRCxFQUlHbWdCLElBSkgsQ0FJUTtBQUFBLGVBQUswZixPQUFPSCxNQUFNLENBQU4sQ0FBUCxFQUFpQixHQUFqQixDQUFMO0FBQUEsT0FKUjtBQUtELEtBTkQsTUFPSztBQUFBO0FBQ0gsWUFBSU0sT0FBT3BoQixRQUFRQyxPQUFSLEVBQVg7QUFBQSxZQUE4QmtoQixPQUFPLENBQXJDOztBQURHO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQSxjQUVLRCxFQUZMOztBQUdERSxpQkFBT0EsS0FBSzdmLElBQUwsQ0FBVTtBQUFBLG1CQUFLMGYsT0FBT0MsRUFBUCxFQUFXQyxJQUFYLENBQUw7QUFBQSxXQUFWLENBQVA7QUFDQUEsaUJBQU8sR0FBUDtBQUpDOztBQUVILDhCQUFjTCxLQUFkLHlIQUFxQjtBQUFBOztBQUFBOztBQUFBO0FBR3BCO0FBTEU7QUFNSjtBQUNGLEc7OzJCQUVEekIsUyxzQkFBVWdDLE8sRUFBUztBQUFBOztBQUNqQixXQUFPQSxVQUFTQSxRQUFROWYsSUFBUixDQUFhLFVBQUM2VSxLQUFELEVBQVU7QUFDckMsVUFBR0EsS0FBSCxFQUFVO0FBQ1IsZUFBSzlVLGFBQUwsQ0FBbUI7QUFDakJwVSxnQkFBTTtBQURXLFNBQW5CO0FBR0Q7QUFDRCxhQUFPa3BCLEtBQVA7QUFDRCxLQVBlLENBQVQsR0FPSHBXLFFBQVFDLE9BQVIsQ0FBZ0I1VCxTQUFoQixDQVBKO0FBUUQsRzs7MkJBRURpMUIsTyxvQkFBUWxMLEssRUFBTztBQUNiLFNBQUs5VSxhQUFMLENBQW1CO0FBQ2pCcFUsWUFBTTtBQURXLEtBQW5CO0FBR0EsV0FBT2twQixLQUFQO0FBQ0QsRzs7MkJBRURsUSxPLHNCQUFVO0FBQ1IsUUFBTXBXLE9BQU8sS0FBSzZaLElBQUwsQ0FBVXpELE9BQVYsRUFBYjtBQUNBLFdBQU9wVyxPQUFNcE0sS0FBSzZDLEdBQUwsQ0FBUyxLQUFLb2pCLElBQUwsQ0FBVXpELE9BQVYsS0FBb0IsS0FBS3JWLEtBQUwsQ0FBV29zQixVQUF4QyxFQUFvRCxLQUFLdFQsSUFBTCxDQUFVaUMsUUFBVixLQUFxQixDQUF6RSxDQUFOLEdBQW1GLENBQTFGO0FBQ0QsRzs7MkJBRUQyVixhLDRCQUFnQjtBQUNkLFFBQUl2OEIsSUFBSSxDQUFDLEtBQUs2TCxLQUFMLENBQVcyaEIsVUFBWCxHQUF1QixLQUFLdE0sT0FBTCxFQUF2QixHQUF1QyxLQUFLeUQsSUFBTCxDQUFVekQsT0FBVixFQUF4QyxJQUE2RCxDQUFyRTtBQUNBLFFBQUcsS0FBSzFpQixDQUFMLENBQU8wVixHQUFWLEVBQWU7QUFDYmxVLFVBQUksS0FBSzJrQixJQUFMLENBQVVpQyxRQUFWLEtBQXFCNW1CLENBQXJCLEdBQXVCLENBQTNCO0FBQ0Q7QUFDRCxXQUFPQSxDQUFQO0FBQ0QsRzs7MkJBRUR3OEIsTyxvQkFBUXYwQixDLEVBQUdwSyxJLEVBQU07QUFDZixTQUFLMnNCLFFBQUwsQ0FBYzNzQixPQUFLLENBQW5CO0FBQ0QsRzs7MkJBRUQwNUIsaUIsOEJBQWtCbkcsSyxFQUFPNUwsUSxFQUFVM1osSyxFQUFPM0QsSSxFQUFNO0FBQzlDLFFBQUcyRCxVQUFRLE1BQVIsSUFBa0JBLFVBQVEsUUFBN0IsRUFBdUM7QUFDckM4TyxpQkFBVyxLQUFLOGQsVUFBTCxDQUFnQjFSLElBQWhCLENBQXFCLElBQXJCLENBQVgsRUFBdUMsR0FBdkM7QUFDRDtBQUNELFFBQUdsYixVQUFRLFFBQVgsRUFBcUI7QUFDbkIsV0FBS3l3QixPQUFMLENBQWFsTCxLQUFiO0FBQ0Q7QUFDRixHOzsyQkFFRHFMLFkseUJBQWF4NEIsSSxFQUFNO0FBQ2pCLFdBQU8sYUFBRSxLQUFLd0gsTUFBTCxDQUFZekcsT0FBZCxFQUF1QkwsS0FBdkIsS0FBK0IsS0FBS25HLENBQUwsQ0FBT2srQixVQUFQLENBQWtCLzNCLEtBQWpELEdBQXlELEtBQUsreUIsT0FBTCxDQUFhenpCLElBQWIsRUFBbUIwNEIsZUFBbkIsS0FBcUN0MUIsU0FBckMsR0FBZ0QsS0FBS3F3QixPQUFMLENBQWF6ekIsSUFBYixFQUFtQnVELE9BQW5FLEdBQTRFLEtBQUtrd0IsT0FBTCxDQUFhenpCLElBQWIsRUFBbUIwNEIsZUFBeEosR0FBMEssS0FBS2pGLE9BQUwsQ0FBYXp6QixJQUFiLEVBQW1CdUQsT0FBcE07QUFDRCxHOzsyQkFFRG8xQixlLDhCQUFrQjtBQUNoQixTQUFLQyxTQUFMLEdBQWlCO0FBQ2YsbUJBQWE7QUFDWG5QLGdCQUFRLEtBQUs2TCxTQUFMLEVBREc7QUFFWEwsaUJBQVMsS0FBS3VELFlBQUwsQ0FBa0IsV0FBbEIsQ0FGRTtBQUdYOUUsZ0JBQVE7QUFIRyxPQURFO0FBTWYsb0JBQWM7QUFDWmpLLGdCQUFRLEtBQUs4TCxVQUFMLEVBREk7QUFFWk4saUJBQVMsS0FBS3VELFlBQUwsQ0FBa0IsWUFBbEIsQ0FGRztBQUdaOUUsZ0JBQVE7QUFISSxPQU5DO0FBV2Ysd0JBQWtCO0FBQ2hCakssZ0JBQVEsS0FBSytMLGNBQUwsRUFEUTtBQUVoQlAsaUJBQVMsS0FBS3VELFlBQUwsQ0FBa0IsZ0JBQWxCLENBRk87QUFHaEI5RSxnQkFBUSxLQUFLOEIsY0FBTCxNQUF5Qi82QixLQUFLTSxHQUFMLENBQVMsS0FBS2s1QixXQUFMLENBQWlCdHhCLEtBQWpCLEdBQXVCLEtBQUtwSSxDQUFMLENBQU9vSSxLQUFQLENBQWFveEIsT0FBN0MsSUFBc0QsS0FBS3g1QixDQUFMLENBQU9vQztBQUg5RSxPQVhIO0FBZ0JmLGdCQUFVO0FBQ1I4c0IsZ0JBQVEsQ0FBQyxDQUFDLEtBQUtwSixPQURQO0FBRVI0VSxpQkFBUyxLQUFLdUQsWUFBTCxDQUFrQixRQUFsQixLQUErQixLQUFLblksT0FGckM7QUFHUnFULGdCQUFRLEtBQUtyVCxPQUFMLElBQWdCLEtBQUtBLE9BQUwsQ0FBYTRVO0FBSDdCLE9BaEJLO0FBcUJmLGtCQUFZO0FBQ1ZBLGlCQUFTLElBREM7QUFFVnRpQixlQUFPLEtBQUsrTixJQUFMLENBQVVpQyxRQUFWO0FBRkcsT0FyQkc7QUF5QmYsaUJBQVc7QUFDVHNTLGlCQUFTLElBREE7QUFFVHhMLGdCQUFRLENBQUMsS0FBSy9JLElBQUwsQ0FBVXlMLFlBQVYsRUFBRCxJQUE2QixLQUFLZ0gsa0JBRmpDO0FBR1R4Z0IsZUFBTyxLQUFLMmxCLGFBQUw7QUFIRSxPQXpCSTtBQThCZixpQkFBVztBQUNUN08sZ0JBQVEsSUFEQztBQUVUd0wsaUJBQVMsS0FBS3VELFlBQUwsQ0FBa0IsU0FBbEIsS0FBZ0MsQ0FBQyxDQUFDLEtBQUtqK0IsQ0FBTCxDQUFPcThCLFdBRnpDO0FBR1RsRCxnQkFBUTtBQUhDLE9BOUJJO0FBbUNmLGtCQUFZO0FBQ1ZqSyxnQkFBUSxJQURFO0FBRVZ3TCxpQkFBUyxLQUFLdUQsWUFBTCxDQUFrQixVQUFsQixLQUFpQyxDQUFDLENBQUMsS0FBS3BELE9BRnZDO0FBR1YxQixnQkFBUTtBQUhFLE9BbkNHO0FBd0NmLHVCQUFpQjtBQUNmakssZ0JBQVFqUCxzQkFBWUMsU0FBWixFQURPO0FBRWZ3YSxpQkFBUyxLQUFLdUQsWUFBTCxDQUFrQixlQUFsQixDQUZNO0FBR2Y5RSxnQkFBUWxaLHNCQUFZQyxTQUFaLE1BQTJCRCxzQkFBWUUsU0FBWjtBQUhwQixPQXhDRjtBQTZDZixxQkFBZTtBQUNiK08sZ0JBQVEsSUFESztBQUVid0wsaUJBQVMsS0FBS3VELFlBQUwsQ0FBa0IsYUFBbEIsQ0FGSTtBQUdiOUUsZ0JBQVE7QUFISyxPQTdDQTtBQWtEZixxQkFBZTtBQUNiakssZ0JBQVEsSUFESztBQUVid0wsaUJBQVMsS0FBS3VELFlBQUwsQ0FBa0IsYUFBbEIsQ0FGSTtBQUdiOUUsZ0JBQVEsS0FBSzlyQixLQUFMLENBQVc0ckI7QUFITixPQWxEQTtBQXVEZix1QkFBaUI7QUFDZi9KLGdCQUFRLElBRE87QUFFZndMLGlCQUFTLEtBQUt1RCxZQUFMLENBQWtCLGVBQWxCLENBRk07QUFHZjlFLGdCQUFRLEtBQUs5ckIsS0FBTCxDQUFXMmhCO0FBSEosT0F2REY7QUE0RGYsbUJBQWE7QUFDWEUsZ0JBQVEsSUFERztBQUVYd0wsaUJBQVUsS0FBS3VELFlBQUwsQ0FBa0IsV0FBbEIsS0FBa0MsQ0FBQyxDQUFDLEtBQUtwWSxNQUZ4QztBQUdYc1QsZ0JBQVEsQ0FBQyxDQUFDLEtBQUt0VCxNQUFQLElBQWlCLEtBQUtBLE1BQUwsQ0FBWTdjO0FBSDFCLE9BNURFO0FBaUVmLGtCQUFZO0FBQ1ZrbUIsZ0JBQVEsSUFERTtBQUVWd0wsaUJBQVMsS0FBS3VELFlBQUwsQ0FBa0IsVUFBbEIsQ0FGQztBQUdWOUUsZ0JBQVEsS0FBSzlyQixLQUFMLENBQVdpc0I7QUFIVCxPQWpFRztBQXNFZix1QkFBaUI7QUFDZnBLLGdCQUFRaHZCLEtBQUtNLEdBQUwsQ0FBUyxLQUFLNk0sS0FBTCxDQUFXa3NCLFFBQVgsR0FBb0IsS0FBS3Y1QixDQUFMLENBQU91NUIsUUFBUCxDQUFnQnYyQixHQUE3QyxJQUFrRCxLQUFLaEQsQ0FBTCxDQUFPb0MsR0FEbEQ7QUFFZnM0QixpQkFBUyxLQUFLdUQsWUFBTCxDQUFrQixlQUFsQixDQUZNO0FBR2Y5RSxnQkFBUTtBQUhPLE9BdEVGO0FBMkVmLHlCQUFtQjtBQUNqQmpLLGdCQUFRaHZCLEtBQUtNLEdBQUwsQ0FBUyxLQUFLNk0sS0FBTCxDQUFXa3NCLFFBQVgsR0FBb0IsS0FBS3Y1QixDQUFMLENBQU91NUIsUUFBUCxDQUFnQngyQixHQUE3QyxJQUFrRCxLQUFLL0MsQ0FBTCxDQUFPb0MsR0FEaEQ7QUFFakJzNEIsaUJBQVMsS0FBS3VELFlBQUwsQ0FBa0IsaUJBQWxCLENBRlE7QUFHakI5RSxnQkFBUTtBQUhTLE9BM0VKO0FBZ0ZmLHdCQUFrQjtBQUNoQmpLLGdCQUFRLElBRFE7QUFFaEJ3TCxpQkFBUyxJQUZPO0FBR2hCdkIsZ0JBQVE7QUFIUSxPQWhGSDtBQXFGZix3QkFBa0I7QUFDaEJqSyxnQkFBUSxJQURRO0FBRWhCd0wsaUJBQVMsS0FBS3ZVLElBQUwsQ0FBVWlNLGlCQUFWLEVBRk87QUFHaEIrRyxnQkFBUTtBQUhRO0FBckZILEtBQWpCOztBQTRGQSxRQUFNNW1CLE9BQU8sS0FBSzRULElBQUwsQ0FBVStNLGVBQVYsRUFBYjtBQUFBLFFBQ00xZ0IsUUFBUSxLQUFLMlQsSUFBTCxDQUFVZ04sZ0JBQVYsRUFEZDtBQUVBLFFBQU1tTCxpQkFBaUI7QUFDckIxQyx1QkFBaUIsQ0FBQyxDQUFDcnBCLElBQUYsSUFBVSxLQUFLcW1CLGtCQURYO0FBRXJCa0QsbUJBQWEsQ0FBQyxDQUFDdnBCLElBQUYsSUFBVSxLQUFLcW1CLGtCQUZQO0FBR3JCbUQsc0JBQWdCLENBQUMsQ0FBQ3hwQixJQUFGLElBQVUsS0FBS3FtQixrQkFIVjtBQUlyQm9ELGtCQUFZLENBQUMsQ0FBQ3hwQixLQUFGLElBQVcsS0FBS29tQixrQkFKUDtBQUtyQnFELHFCQUFlLENBQUMsQ0FBQ3pwQixLQUFGLElBQVcsS0FBS29tQixrQkFMVjtBQU1yQnNELHNCQUFnQixDQUFDLENBQUMxcEIsS0FBRixJQUFXLEtBQUtvbUI7QUFOWCxLQUF2QjtBQVFBLDBCQUFnQnByQixPQUFPQyxJQUFQLENBQVk2d0IsY0FBWixDQUFoQix5SEFBNkM7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBLFVBQXJDNzRCLElBQXFDOztBQUMzQyxXQUFLNDRCLFNBQUwsQ0FBZTU0QixJQUFmLElBQXVCO0FBQ3JCeXBCLGdCQUFRb1AsZUFBZTc0QixJQUFmLENBRGE7QUFFckJpMUIsaUJBQVMsS0FBS3VELFlBQUwsQ0FBa0J4NEIsSUFBbEIsQ0FGWTtBQUdyQjB6QixnQkFBUTtBQUhhLE9BQXZCO0FBS0Q7QUFDRixHOzsyQkFFRGMsVSx5QkFBYTtBQUNYLFFBQUcsS0FBS3B3QixJQUFSLEVBQWM7QUFDWixXQUFLdTBCLGVBQUw7QUFDQSw0QkFBZ0I1d0IsT0FBT0MsSUFBUCxDQUFZLEtBQUs0d0IsU0FBakIsQ0FBaEIseUhBQTZDO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQSxZQUFyQzU0QixJQUFxQzs7QUFDM0MsYUFBS29FLElBQUwsQ0FBVTh3QixRQUFWLENBQW1CbDFCLElBQW5CLEVBQXlCLEtBQUs0NEIsU0FBTCxDQUFlNTRCLElBQWYsQ0FBekI7QUFDRDtBQUNGO0FBQ0YsRzs7MkJBRUQ4NEIsVSx5QkFBYTtBQUFBOztBQUNYLFFBQU1DLGFBQWEsU0FBYkEsVUFBYSxDQUFDLzRCLElBQUQsRUFBUztBQUMxQixhQUFPLE9BQUt5ekIsT0FBTCxDQUFhdUYsYUFBYixDQUEyQnoxQixPQUEzQixJQUFzQyxPQUFLa3dCLE9BQUwsQ0FBYXVGLGFBQWIsQ0FBMkJDLElBQTNCLEtBQWtDLE9BQUt4RixPQUFMLENBQWF6ekIsSUFBYixFQUFtQmk1QixJQUEzRixJQUFtRyxPQUFLcnhCLEtBQUwsQ0FBVzRyQixRQUE5RyxJQUEwSCxPQUFLUyxXQUFMLENBQWlCdHhCLEtBQWpCLElBQXdCLENBQXpKO0FBQ0QsS0FGRDtBQUFBLFFBRUd1MkIsT0FBTyxFQUZWOztBQURXLGlDQUtIbDVCLElBTEc7QUFNVCxVQUFHQSxLQUFLckYsT0FBTCxDQUFhLEtBQWIsTUFBc0IsQ0FBekIsRUFBNEI7QUFDMUJ1K0IsYUFBS2w1QixJQUFMLElBQWE7QUFDWG01QixvQkFBVSxvQkFBWTtBQUNwQixnQkFBRyxPQUFLUCxTQUFMLElBQWtCLE9BQUtBLFNBQUwsQ0FBZTU0QixJQUFmLEVBQXFCeXBCLE1BQTFDLEVBQWtEO0FBQ2hELHFCQUFLenBCLElBQUw7QUFDRDtBQUNGO0FBTFUsU0FBYjtBQU9EO0FBZFE7O0FBS1gsU0FBSSxJQUFJQSxJQUFSLElBQWdCLElBQWhCLEVBQXNCO0FBQUEsYUFBZEEsSUFBYztBQVVyQjs7QUFFRCx3QkFDS2s1QixJQURMO0FBRUVFLGtCQUFZO0FBQ1ZELGtCQUFVLGtCQUFDbjFCLENBQUQ7QUFBQSxpQkFBTSxPQUFLb3ZCLEtBQUwsQ0FBV0ssT0FBWCxDQUFtQjRGLEdBQW5CLENBQXVCcjFCLENBQXZCLEVBQTBCO0FBQ3hDNEQsbUJBQU8sTUFEaUM7QUFFeENoTCxnQkFBSSxDQUFDLE9BQUtyQyxDQUFMLENBQU84K0IsR0FBUCxDQUFXQyxLQUZ3QjtBQUd4Q3hoQyxnQkFBSTtBQUhvQyxXQUExQixDQUFOO0FBQUE7QUFEQSxPQUZkO0FBU0V5aEMsbUJBQWE7QUFDWEosa0JBQVUsa0JBQUNuMUIsQ0FBRDtBQUFBLGlCQUFNLE9BQUtvdkIsS0FBTCxDQUFXSyxPQUFYLENBQW1CNEYsR0FBbkIsQ0FBdUJyMUIsQ0FBdkIsRUFBMEI7QUFDeEM0RCxtQkFBTyxNQURpQztBQUV4Q2hMLGdCQUFJLE9BQUtyQyxDQUFMLENBQU84K0IsR0FBUCxDQUFXQyxLQUZ5QjtBQUd4Q3hoQyxnQkFBSTtBQUhvQyxXQUExQixDQUFOO0FBQUE7QUFEQyxPQVRmO0FBZ0JFMGhDLGdCQUFVO0FBQ1JMLGtCQUFVLGtCQUFDbjFCLENBQUQ7QUFBQSxpQkFBTSxPQUFLb3ZCLEtBQUwsQ0FBV0ssT0FBWCxDQUFtQjRGLEdBQW5CLENBQXVCcjFCLENBQXZCLEVBQTBCO0FBQ3hDNEQsbUJBQU8sTUFEaUM7QUFFeENoTCxnQkFBSSxDQUZvQztBQUd4QzlFLGdCQUFJLENBQUMsT0FBS3lDLENBQUwsQ0FBTzgrQixHQUFQLENBQVdDO0FBSHdCLFdBQTFCLENBQU47QUFBQTtBQURGLE9BaEJaO0FBdUJFRyxrQkFBWTtBQUNWTixrQkFBVSxrQkFBQ24xQixDQUFEO0FBQUEsaUJBQU0sT0FBS292QixLQUFMLENBQVdLLE9BQVgsQ0FBbUI0RixHQUFuQixDQUF1QnIxQixDQUF2QixFQUEwQjtBQUN4QzRELG1CQUFPLE1BRGlDO0FBRXhDaEwsZ0JBQUksQ0FGb0M7QUFHeEM5RSxnQkFBSSxPQUFLeUMsQ0FBTCxDQUFPOCtCLEdBQVAsQ0FBV0M7QUFIeUIsV0FBMUIsQ0FBTjtBQUFBO0FBREEsT0F2QmQ7QUE4QkVJLHNCQUFnQjtBQUNkUCxrQkFBVSxLQUFLL0YsS0FBTCxDQUFXSyxPQUFYLENBQW1Ca0c7QUFEZixPQTlCbEI7QUFpQ0VDLHdCQUFrQjtBQUNoQlQsa0JBQVUsa0JBQUNuMUIsQ0FBRCxFQUFJcEssSUFBSixFQUFZO0FBQ3BCLGNBQUdBLEtBQUs5QixFQUFMLEdBQVEsQ0FBWCxFQUFjO0FBQ1osbUJBQUsrOUIsVUFBTDtBQUNELFdBRkQsTUFHSyxJQUFHajhCLEtBQUs5QixFQUFMLEdBQVEsQ0FBWCxFQUFjO0FBQ2pCLG1CQUFLNDlCLFNBQUw7QUFDRDtBQUNGO0FBUmUsT0FqQ3BCO0FBMkNFbUUsbUJBQWE7QUFDWFYsa0JBQVUsS0FBSy9GLEtBQUwsQ0FBV0ssT0FBWCxDQUFtQjRGO0FBRGxCLE9BM0NmO0FBOENFUyx5QkFBbUI7QUFDakJYLGtCQUFVLGtCQUFDbjFCLENBQUQsRUFBTTtBQUNkQSxZQUFFNHVCLGNBQUY7QUFDQSxjQUFHNXVCLEVBQUUrMUIsTUFBRixHQUFTLENBQVosRUFBZTtBQUNiLG1CQUFLbEUsVUFBTDtBQUNELFdBRkQsTUFHSyxJQUFHN3hCLEVBQUUrMUIsTUFBRixHQUFTLENBQVosRUFBZTtBQUNsQixtQkFBS3JFLFNBQUw7QUFDRDtBQUNGO0FBVGdCLE9BOUNyQjtBQXlERXNFLHNCQUFnQjtBQUNkYixrQkFBVSxrQkFBQ24xQixDQUFELEVBQUlwSyxJQUFKLEVBQVk7QUFDcEIsY0FBRyxDQUFDbS9CLFdBQVcsZ0JBQVgsQ0FBSixFQUFrQztBQUNoQyxnQkFBR24vQixLQUFLZ08sS0FBTCxLQUFhLE1BQWhCLEVBQXdCO0FBQ3RCNUQsZ0JBQUU0dUIsY0FBRjtBQUNEO0FBQ0QsbUJBQUtRLEtBQUwsQ0FBV0ssT0FBWCxDQUFtQmtHLE1BQW5CLENBQTBCMzFCLENBQTFCLEVBQTZCcEssSUFBN0I7QUFDRDtBQUNGO0FBUmEsT0F6RGxCO0FBbUVFcWdDLG9CQUFjO0FBQ1pkLGtCQUFVLGtCQUFDbjFCLENBQUQsRUFBSXBLLElBQUosRUFBWTtBQUNwQixjQUFHLENBQUNtL0IsV0FBVyxjQUFYLENBQUosRUFBZ0M7QUFDOUIsZ0JBQU05K0IsSUFBSSxTQUFKQSxDQUFJLENBQVNPLENBQVQsRUFBWTtBQUNwQixxQkFBT0MsS0FBS29ELElBQUwsQ0FBVXJELEVBQUUvQixDQUFGLEdBQUkrQixFQUFFL0IsQ0FBTixHQUFRK0IsRUFBRXZDLENBQUYsR0FBSXVDLEVBQUV2QyxDQUF4QixDQUFQO0FBQ0QsYUFGRDtBQUdBLGdCQUFHMkIsS0FBS2dPLEtBQUwsS0FBYSxPQUFoQixFQUF5QjtBQUN2QixxQkFBS3N5QixhQUFMLEdBQXFCO0FBQ25CamdDLG1CQUFHQSxFQUFFTCxJQUFGLENBRGdCO0FBRW5CK0ksdUJBQU8sT0FBS3N4QixXQUFMLENBQWlCdHhCO0FBRkwsZUFBckI7QUFJRCxhQUxELE1BTUssSUFBRy9JLEtBQUtnTyxLQUFMLEtBQWEsTUFBaEIsRUFBd0I7QUFDM0I1RCxnQkFBRTR1QixjQUFGO0FBQ0EscUJBQUttRCxRQUFMLENBQWM5N0IsRUFBRUwsSUFBRixJQUFRLE9BQUtzZ0MsYUFBTCxDQUFtQmpnQyxDQUEzQixHQUE2QixPQUFLaWdDLGFBQUwsQ0FBbUJ2M0IsS0FBOUQ7QUFDRDtBQUNGO0FBQ0Y7QUFqQlcsT0FuRWhCO0FBc0ZFdzNCLG1CQUFhO0FBQ1hoQixrQkFBVSxrQkFBQ24xQixDQUFELEVBQUlwSyxJQUFKLEVBQVk7QUFDcEIsY0FBRyxDQUFDbS9CLFdBQVcsYUFBWCxDQUFKLEVBQStCO0FBQzdCLGdCQUFHbi9CLEtBQUtnTyxLQUFMLEtBQWEsTUFBYixLQUF3QixDQUFDLE9BQUtBLEtBQUwsQ0FBVzRyQixRQUFaLElBQXdCLE9BQUtTLFdBQUwsQ0FBaUJ0eEIsS0FBakIsR0FBdUIsQ0FBdkUsQ0FBSCxFQUE4RTtBQUM1RXFCLGdCQUFFNHVCLGNBQUY7QUFDQSxxQkFBS1EsS0FBTCxDQUFXSyxPQUFYLENBQW1CNEYsR0FBbkIsQ0FBdUJyMUIsQ0FBdkIsRUFBMEJwSyxJQUExQjtBQUNEO0FBQ0Y7QUFDRjtBQVJVLE9BdEZmO0FBZ0dFby9CLHFCQUFlO0FBQ2JHLGtCQUFVLGtCQUFDbjFCLENBQUQsRUFBSXBLLElBQUosRUFBWTtBQUNwQixjQUFHbS9CLFdBQVcsZUFBWCxDQUFILEVBQWdDO0FBQzlCLGdCQUFHbi9CLEtBQUtnTyxLQUFMLEtBQWEsT0FBaEIsRUFBeUI7QUFDdkIsa0JBQU13eUIsUUFBUSxDQUFDcDJCLEVBQUVxMkIsT0FBRixJQUFhcjJCLEVBQUVzMkIsYUFBRixDQUFnQkQsT0FBOUIsRUFBdUMsT0FBSzVHLE9BQUwsQ0FBYXVGLGFBQWIsQ0FBMkJDLElBQTNCLEdBQWdDLENBQXZFLENBQWQ7QUFDQSxxQkFBS3NCLFNBQUwsR0FBaUI7QUFDZkMseUJBQVMsS0FETTtBQUVmQyxvQkFBSUwsTUFBTS9PLEtBRks7QUFHZnFQLG9CQUFJTixNQUFNOU8sS0FISztBQUlmN3lCLG1CQUFHMmhDLE1BQU0vTyxLQUpNO0FBS2ZwekIsbUJBQUdtaUMsTUFBTTlPO0FBTE0sZUFBakI7QUFPRCxhQVRELE1BVUssSUFBRzF4QixLQUFLZ08sS0FBTCxLQUFhLE1BQWhCLEVBQXdCO0FBQzNCNUQsZ0JBQUU0dUIsY0FBRjtBQUNBLGtCQUFHLENBQUMsT0FBSzJILFNBQUwsQ0FBZUMsT0FBbkIsRUFBNEI7QUFDMUIsdUJBQUtELFNBQUwsZ0JBQ0ssT0FBS0EsU0FEVjtBQUVFOWhDLHFCQUFHLE9BQUs4aEMsU0FBTCxDQUFlOWhDLENBQWYsR0FBaUJtQixLQUFLZ0QsRUFGM0I7QUFHRTNFLHFCQUFHLE9BQUtzaUMsU0FBTCxDQUFldGlDLENBQWYsR0FBaUIyQixLQUFLOUI7QUFIM0I7QUFLQSxvQkFBRzJDLEtBQUtNLEdBQUwsQ0FBUyxPQUFLdy9CLFNBQUwsQ0FBZUUsRUFBZixHQUFrQixPQUFLRixTQUFMLENBQWU5aEMsQ0FBMUMsSUFBNkMsR0FBaEQsRUFBcUQ7QUFDbkQseUJBQUs4aEMsU0FBTCxDQUFlRSxFQUFmLEdBQWtCLE9BQUtGLFNBQUwsQ0FBZTloQyxDQUFqQyxHQUFvQyxPQUFLODlCLFVBQUwsRUFBcEMsR0FBdUQsT0FBS0YsV0FBTCxFQUF2RDtBQUNBLHlCQUFLa0UsU0FBTCxDQUFlQyxPQUFmLEdBQXlCLElBQXpCO0FBQ0Q7QUFDRjtBQUNGLGFBYkksTUFjQTtBQUNILHFCQUFPLE9BQUtELFNBQVo7QUFDRDtBQUNGO0FBQ0Y7QUEvQlksT0FoR2pCO0FBaUlFSSxtQkFBYTtBQUNYeEIsa0JBQVU7QUFBQSxpQkFBSy8xQixTQUFMO0FBQUE7QUFEQztBQWpJZjtBQXFJRCxHOzsyQkFFRG13QixXLDBCQUFjO0FBQ1osU0FBS3FILElBQUwsR0FBWSxJQUFJQyx5QkFBSixDQUFvQixhQUFFLEtBQUtyekIsTUFBTCxDQUFZekcsT0FBZCxDQUFwQixDQUFaO0FBQ0EsU0FBSzY1QixJQUFMLENBQVVFLFNBQVYsQ0FBb0IsVUFBQzkyQixDQUFEO0FBQUEsYUFBTUEsRUFBRTR1QixjQUFGLEVBQU47QUFBQSxLQUFwQixFQUE4QyxhQUE5QyxFQUE2RGlJLDBCQUFnQkUsWUFBaEIsQ0FBNkJDLEtBQTFGLEVBQWlHLENBQWpHOztBQUVBLFNBQUt2SCxPQUFMLEdBQWUsS0FBS3FGLFVBQUwsRUFBZjtBQUNBLDBCQUFnQi93QixPQUFPQyxJQUFQLENBQVksS0FBS3lyQixPQUFqQixDQUFoQix5SEFBMkM7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBLFVBQW5DenpCLElBQW1DOztBQUN6QyxVQUFNaTdCLHNCQUNELEtBQUt4SCxPQUFMLENBQWF6ekIsSUFBYixDQURDLEVBRUQsS0FBS3pGLENBQUwsQ0FBT2s1QixPQUFQLENBQWV6ekIsSUFBZixDQUZDLENBQU47QUFJQSxXQUFLeXpCLE9BQUwsQ0FBYXp6QixJQUFiLElBQXFCaTdCLE1BQXJCO0FBQ0EsVUFBR0EsT0FBTzEzQixPQUFWLEVBQW1CO0FBQ2pCLFlBQU0yM0IsUUFBUUQsT0FBT0MsS0FBUCxJQUFnQixDQUE5QjtBQUNBLFlBQUdELE9BQU9oM0IsSUFBVixFQUFnQjtBQUNkLGVBQUsyMkIsSUFBTCxDQUFVRSxTQUFWLENBQW9CRyxPQUFPOUIsUUFBM0IsRUFBcUM4QixPQUFPaDNCLElBQTVDLEVBQWtEZzNCLE9BQU9oQyxJQUF6RCxFQUErRGlDLEtBQS9EO0FBQ0QsU0FGRCxNQUdLLElBQUdELE9BQU9oQyxJQUFQLEtBQWM3MUIsU0FBakIsRUFBNEI7QUFDL0IsZUFBS3czQixJQUFMLENBQVVFLFNBQVYsQ0FBb0JHLE9BQU85QixRQUEzQixFQUFxQyxTQUFyQyxFQUFnRDhCLE9BQU9oQyxJQUF2RCxFQUE2RGlDLEtBQTdEO0FBQ0Q7QUFDRjtBQUNGO0FBQ0YsRzs7aUJBRU03UixZLHlCQUFhbGxCLEssRUFBTztBQUN6QixXQUFPOGQsZUFBZXRiLFNBQWYsQ0FBeUJzYixlQUFlaVEsVUFBZixDQUEwQiw0QkFBMUIsRUFBaUQvdEIsS0FBakQsQ0FBekIsQ0FBUDtBQUNELEc7O2lCQUVNZzNCLFUsdUJBQVdoM0IsSyxFQUFPc3ZCLE8sRUFBUztBQUNoQywwQkFBZ0IxckIsT0FBT0MsSUFBUCxDQUFZeXJCLFdBQVcsRUFBdkIsQ0FBaEIseUhBQTRDO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQSxVQUFwQ3p6QixJQUFvQzs7QUFDMUNtRSxZQUFNc3ZCLE9BQU4sQ0FBY3p6QixJQUFkLGlCQUNLbUUsTUFBTXN2QixPQUFOLENBQWN6ekIsSUFBZCxDQURMLEVBRUt5ekIsUUFBUXp6QixJQUFSLENBRkw7QUFJRDtBQUNGLEc7O2lCQUVNa3lCLFUsdUJBQVd6cUIsSyxFQUFPMHFCLE0sRUFBUTtBQUMvQkEsYUFBU0EsVUFBVSxFQUFuQjtBQUNBLGFBQVMvWSxLQUFULENBQWUzUixLQUFmLEVBQXNCMHFCLE1BQXRCLEVBQThCO0FBQzVCQSxlQUFTQSxVQUFVLEVBQW5CO0FBQ0EsVUFBTWh1QixxQkFDRHNELEtBREMsRUFFRDBxQixNQUZDLENBQU47QUFJQSw0QkFBZ0JwcUIsT0FBT0MsSUFBUCxDQUFZUCxLQUFaLENBQWhCLHlIQUFvQztBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQUEsWUFBNUJ6SCxJQUE0Qjs7QUFDbEMsWUFBRyxRQUFPeUgsTUFBTXpILElBQU4sQ0FBUCxNQUFxQixRQUF4QixFQUFrQztBQUNoQ21FLGdCQUFNbkUsSUFBTixJQUFjb1osTUFBTTNSLE1BQU16SCxJQUFOLENBQU4sRUFBbUJteUIsT0FBT255QixJQUFQLENBQW5CLENBQWQ7QUFDRDtBQUNGO0FBQ0QsYUFBT21FLEtBQVA7QUFDRDtBQUNELFFBQU1BLFFBQVFpVixNQUFNM1IsS0FBTixFQUFhMHFCLE1BQWIsQ0FBZDtBQUNBbFEsbUJBQWVrWixVQUFmLENBQTBCaDNCLEtBQTFCLEVBQWlDc0QsTUFBTWdzQixPQUF2QztBQUNBeFIsbUJBQWVrWixVQUFmLENBQTBCaDNCLEtBQTFCLEVBQWlDZ3VCLE9BQU9zQixPQUF4QztBQUNBLFdBQU90dkIsS0FBUDtBQUNELEc7O2lCQUVNd0MsUyxzQkFBVXhDLEssRUFBTztBQUN0QkEsVUFBTXhCLEtBQU4sQ0FBWWd6QixLQUFaLEdBQW9CLENBQUN4eEIsTUFBTXhCLEtBQU4sQ0FBWXBGLEdBQVosR0FBZ0I0RyxNQUFNeEIsS0FBTixDQUFZckYsR0FBN0IsSUFBa0M2RyxNQUFNeEIsS0FBTixDQUFZeTRCLE1BQWxFO0FBQ0FqM0IsVUFBTTJ2QixRQUFOLENBQWU2QixLQUFmLEdBQXVCLENBQUN4eEIsTUFBTTJ2QixRQUFOLENBQWV2MkIsR0FBZixHQUFtQjRHLE1BQU0ydkIsUUFBTixDQUFleDJCLEdBQW5DLElBQXdDNkcsTUFBTTJ2QixRQUFOLENBQWVzSCxNQUE5RTtBQUNBLFdBQU9qM0IsS0FBUDtBQUNELEc7OztFQXR3QnlDZ1Usb0I7O2tCQUF2QjhKLGM7Ozs7Ozs7Ozs7O0FDUnJCOzs7O0lBRXFCSCxXO0FBRW5CLHVCQUFZcmhCLE9BQVosRUFBcUJpZ0IsSUFBckIsRUFBMkIyYSxVQUEzQixFQUF1QztBQUFBOztBQUNyQyxTQUFLM2EsSUFBTCxHQUFZQSxJQUFaO0FBQ0EsU0FBSzJhLFVBQUwsR0FBa0JBLFVBQWxCO0FBQ0EsU0FBS3g2QixHQUFMLEdBQVdKLFFBQVFJLEdBQW5CO0FBQ0EsU0FBS0MsR0FBTCxHQUFXTCxRQUFRSyxHQUFuQjtBQUNBLFNBQUt1RyxZQUFMLEdBQW9CcVosS0FBS3ZaLGVBQUwsRUFBcEI7QUFDQSxRQUFNdkMsT0FBTyxLQUFLeUMsWUFBTCxDQUFrQixDQUFsQixDQUFiO0FBQ0EsU0FBS3BELElBQUwsR0FBWVcsS0FBS1gsSUFBakI7QUFDQSxRQUFHLEtBQUtBLElBQUwsS0FBWSxLQUFmLEVBQXNCO0FBQ3BCLFdBQUtxM0IsTUFBTCxHQUFjMTJCLEtBQUtvQixHQUFMLENBQVNBLEdBQXZCO0FBQ0Q7QUFDRjs7d0JBRURpVixNLHFCQUFTO0FBQ1AsU0FBS3NnQixRQUFMLEdBQWdCLElBQWhCO0FBQ0QsRzs7d0JBRUQvNUIsTyxzQkFBVTtBQUNSLFFBQUcsS0FBS2c2QixLQUFSLEVBQWU7QUFDYixXQUFLQSxLQUFMLENBQVcvbEIsTUFBWDtBQUNBLGFBQU8sS0FBSytsQixLQUFaO0FBQ0Q7QUFDRixHOzt3QkFFRDFFLEssb0JBQVE7QUFBQTs7QUFDTixXQUFPLEtBQUt5RSxRQUFaO0FBQ0EsUUFBRyxLQUFLdDNCLElBQUwsS0FBWSxLQUFmLEVBQXNCO0FBQ3BCLFVBQUl3M0IsaUJBQUo7QUFBQSxVQUFjQyxlQUFlLEtBQTdCO0FBQ0EsVUFBRyxLQUFLQyxTQUFMLEVBQUgsRUFBcUI7QUFDbkJELHVCQUFlLENBQUMsQ0FBQyxLQUFLRixLQUF0QjtBQUNBLFlBQUcsQ0FBQyxLQUFLQSxLQUFULEVBQWdCO0FBQ2QsZUFBS0EsS0FBTCxHQUFhLGFBQUUsa0JBQWdCLEtBQUtGLE1BQXJCLEdBQTRCLG9DQUE5QixFQUFvRS9sQixRQUFwRSxDQUE2RSxLQUFLelUsR0FBTCxDQUFTRSxJQUF0RixDQUFiO0FBQ0Q7QUFDRHk2QixtQkFBVyxLQUFLRCxLQUFMLENBQVcsQ0FBWCxFQUFjSSxhQUF6QjtBQUNELE9BTkQsTUFPSztBQUNISCxtQkFBVyxLQUFLNTZCLEdBQUwsQ0FBUzgxQixJQUFULENBQWMsS0FBSzJFLE1BQW5CLENBQVg7QUFDRDtBQUNELFVBQUdJLFlBQUgsRUFBaUI7QUFDZkQsaUJBQVMzRSxLQUFUO0FBQ0QsT0FGRCxNQUdLO0FBQ0gscUJBQUUyRSxRQUFGLEVBQVlqUSxFQUFaLENBQWUsTUFBZixFQUF1QixZQUFLO0FBQzFCLGNBQUk7QUFDRmlRLHFCQUFTM0UsS0FBVDtBQUNELFdBRkQsQ0FHQSxPQUFNOXlCLENBQU4sRUFBUztBQUNQeEksb0JBQVF1YSxLQUFSLENBQWMvUixDQUFkO0FBQ0Q7QUFDRixTQVBEO0FBUUQ7QUFDRixLQXpCRCxNQTBCSztBQUNILFdBQUs2M0IsYUFBTCxHQUNFdmpCLElBREYsQ0FDTyxVQUFDd2pCLE9BQUQsRUFBWTtBQUNmLFlBQU1MLFdBQVcsTUFBSzU2QixHQUFMLENBQVM4MUIsSUFBVCxFQUFqQjtBQUFBLFlBQ0FvRixXQUFXTixTQUFTNXBCLFFBRHBCO0FBQUEsWUFFQXFFLE9BQU8sOExBTUM0bEIsUUFBUXRtQixJQU5ULCtaQWtCQ3NtQixRQUFROTZCLElBbEJULCtEQXFCTHNVLFdBckJLLEVBRlA7QUF3QkF5bUIsaUJBQVNwRixJQUFUO0FBQ0FvRixpQkFBU0MsS0FBVCxDQUFlOWxCLElBQWY7QUFDQTZsQixpQkFBU0UsS0FBVDtBQUNELE9BN0JILEVBOEJFL2UsS0E5QkYsQ0E4QlEsVUFBQ2xaLENBQUQ7QUFBQSxlQUFNeEksUUFBUUMsSUFBUixDQUFhLHFDQUFiLENBQU47QUFBQSxPQTlCUjtBQStCRDtBQUNGLEc7O3dCQUVEOGxCLFEscUJBQVMvbUIsQyxFQUFHO0FBQ1YsUUFBRyxLQUFLK2dDLFFBQVIsRUFBa0I7QUFDaEIsWUFBTSxpQkFBTjtBQUNEO0FBQ0QsUUFBRyxLQUFLNWUsVUFBUixFQUFvQjtBQUNsQixXQUFLQSxVQUFMLENBQWdCbGlCLEtBQUs4RixLQUFMLENBQVcvRixJQUFFLEdBQWIsQ0FBaEI7QUFDRDtBQUNGLEc7O3dCQUVEcWhDLGEsNEJBQWdCO0FBQUE7O0FBQ2QsUUFBTTkwQixRQUFRLEtBQUsyWixJQUFMLENBQVVpQyxRQUFWLEVBQWQ7QUFBQSxRQUFvQ25OLE9BQU8sSUFBSTBtQixHQUFKLEVBQTNDO0FBQUEsUUFBc0RsN0IsT0FBTyxFQUE3RDtBQUNBLFFBQUlsRSxPQUFPaWEsUUFBUUMsT0FBUixFQUFYOztBQUZjLCtCQUdOblEsSUFITTtBQUlaLFVBQU1sQixPQUFPLE9BQUswQixZQUFMLENBQWtCUixJQUFsQixDQUFiO0FBQ0EsVUFBR2xCLEtBQUsxQixJQUFMLEtBQVksT0FBZixFQUF3QjtBQUN0Qm5ILGVBQU9BLEtBQUt3YixJQUFMLENBQVUsWUFBSztBQUNwQixpQkFBS2lKLFFBQUwsQ0FBYzFhLE9BQUtFLEtBQW5CO0FBQ0EsaUJBQU8sT0FBSy9FLFdBQUwsQ0FBaUJ3VCxJQUFqQixFQUF1QnhVLElBQXZCLEVBQTZCMkUsS0FBS0ssR0FBbEMsQ0FBUDtBQUNELFNBSE0sQ0FBUDtBQUlELE9BTEQsTUFNSyxJQUFHTCxLQUFLMUIsSUFBTCxLQUFZLE1BQWYsRUFBdUI7QUFDMUJuSCxlQUFPQSxLQUFLd2IsSUFBTCxDQUFVLFlBQUs7QUFDcEIsaUJBQUtpSixRQUFMLENBQWMxYSxPQUFLRSxLQUFuQjtBQUNBLGlCQUFPLE9BQUtvMUIsVUFBTCxDQUFnQjNtQixJQUFoQixFQUFzQnhVLElBQXRCLEVBQTRCMkUsS0FBS0ssR0FBakMsQ0FBUDtBQUNELFNBSE0sQ0FBUDtBQUlEO0FBaEJXOztBQUdkLFNBQUksSUFBSWEsT0FBSyxDQUFiLEVBQWdCQSxPQUFLRSxLQUFyQixFQUE0QixFQUFFRixJQUE5QixFQUFvQztBQUFBLFlBQTVCQSxJQUE0QjtBQWNuQztBQUNELFdBQU8vSixLQUFLd2IsSUFBTCxDQUFVLFlBQUs7QUFDcEIsYUFBS2lKLFFBQUwsQ0FBYyxDQUFkO0FBQ0EsYUFBTyxFQUFDL0wsTUFBTSxPQUFLNG1CLFVBQUwsQ0FBZ0I1bUIsSUFBaEIsQ0FBUCxFQUE4QnhVLE1BQU1BLEtBQUtuQixJQUFMLENBQVUsSUFBVixDQUFwQyxFQUFQO0FBQ0QsS0FITSxDQUFQO0FBSUQsRzs7Y0FFTXc4QixJLGlCQUFLUCxPLEVBQVM7QUFDbkIsK0NBQXlDQSxPQUF6QztBQUNELEc7O3dCQUVEOTVCLFcsd0JBQVl3VCxJLEVBQU14VSxJLEVBQU1nRixHLEVBQUs7QUFDM0JoRixTQUFLMUgsSUFBTCxDQUFVd29CLFlBQVl1YSxJQUFaLGdCQUE4QnIyQixHQUE5QixVQUFWO0FBQ0QsRzs7d0JBRURtMkIsVSx1QkFBVzNtQixJLEVBQU14VSxJLEVBQU1nRixHLEVBQUs7QUFDMUIsV0FBTyxJQUFJK1EsT0FBSixDQUFZLFVBQUNDLE9BQUQsRUFBVWthLE1BQVYsRUFBb0I7QUFDckNsNkIsY0FBRTBnQixHQUFGLENBQU0xUixHQUFOLEVBQVcsVUFBQ2tRLElBQUQsRUFBUztBQUNsQixZQUFNb21CLFFBQVFwbUIsS0FBS3FtQixLQUFMLENBQVcsYUFBWCxLQUE2QixFQUEzQztBQUNBLDZCQUFnQkQsS0FBaEIsa0hBQXVCO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQSxjQUFmRSxJQUFlOztBQUNyQixjQUFHQSxLQUFLRCxLQUFMLENBQVcsYUFBWCxDQUFILEVBQThCO0FBQzVCLGdCQUFNMzhCLE9BQU80OEIsS0FBS0QsS0FBTCxDQUFXLDBCQUFYLENBQWI7QUFDQSxnQkFBRzM4QixJQUFILEVBQVM7QUFDUDRWLG1CQUFLOUssR0FBTCxDQUFTOUssS0FBSyxDQUFMLENBQVQ7QUFDRDtBQUNGO0FBQ0Y7QUFDRCxZQUFNazhCLFVBQVU1bEIsS0FBS3FtQixLQUFMLENBQVcsNkJBQVgsQ0FBaEI7QUFDQSxZQUFHVCxPQUFILEVBQVk7QUFDVjk2QixlQUFLMUgsSUFBTCxDQUFVd29CLFlBQVl1YSxJQUFaLENBQWlCUCxRQUFRLENBQVIsQ0FBakIsQ0FBVjtBQUNEO0FBQ0Q5a0I7QUFDRCxPQWZELEVBZUd5bEIsSUFmSCxDQWVRLFVBQUN6NEIsQ0FBRCxFQUFNO0FBQ1p4SSxnQkFBUXVhLEtBQVIsQ0FBYy9SLEVBQUUwNEIsWUFBaEI7QUFDQXhMO0FBQ0QsT0FsQkQ7QUFtQkQsS0FwQk0sQ0FBUDtBQXFCRCxHOzt3QkFFRGtMLFUsdUJBQVc1bUIsSSxFQUFNO0FBQ2YsUUFBTXNtQixVQUFVLEVBQWhCO0FBQ0F0bUIsU0FBS2lDLE9BQUwsQ0FBYSxVQUFDamUsQ0FBRDtBQUFBLGFBQU1zaUMsUUFBUXhpQyxJQUFSLG1DQUE2Q0UsQ0FBN0MsUUFBTjtBQUFBLEtBQWI7QUFDQXNpQyxZQUFReGlDLElBQVIsQ0FBYSxLQUFLK2hDLFVBQUwscUNBQWlELEtBQUtBLFVBQXRELFVBQXNFdlosWUFBWTZhLGlCQUFaLEVBQW5GO0FBQ0EsV0FBT2IsUUFBUWo4QixJQUFSLENBQWEsSUFBYixDQUFQO0FBQ0QsRzs7d0JBRUQ4N0IsUyx3QkFBWTtBQUNWLFFBQU1pQixhQUFhLEtBQUsvN0IsR0FBTCxDQUFTZzhCLE1BQTVCO0FBQUEsUUFDRUMsU0FBUyxLQUFLajhCLEdBQUwsQ0FBU3lSLFNBRHBCO0FBQUEsUUFFRXlxQixhQUFhRCxPQUFPRSxNQUZ0QjtBQUFBLFFBR0VDLFdBQVdILE9BQU92cUIsU0FBUCxDQUFpQjVYLE9BQWpCLENBQXlCLE1BQXpCLElBQWlDLENBQUMsQ0FIL0M7QUFBQSxRQUlFdWlDLGNBQWNKLE9BQU92cUIsU0FBUCxDQUFpQmdxQixLQUFqQixDQUF1QixPQUF2QixDQUpoQjtBQUtBLFFBQUl2eUIsWUFBSjtBQUNBLFFBQUdrekIsV0FBSCxFQUFlO0FBQ2JsekIsWUFBTSxJQUFOO0FBQ0QsS0FGRCxNQUVPLElBQUc0eUIsY0FBY0csZUFBYSxhQUEzQixJQUE0QyxDQUFDRSxRQUFoRCxFQUEwRDtBQUMvRGp6QixZQUFNLElBQU47QUFDRCxLQUZNLE1BRUE7QUFDTEEsWUFBTSxLQUFOO0FBQ0Q7QUFDRCxXQUFPQSxHQUFQO0FBQ0QsRzs7Y0FFTTJ5QixpQixnQ0FBb0I7QUFDekIsV0FBTyw4TUFVTHJuQixXQVZLLEVBQVA7QUFXRCxHOzs7OztrQkE5TGtCd00sVzs7Ozs7Ozs7Ozs7QUNGckI7O0FBQ0E7Ozs7Ozs7Ozs7OztJQUVxQmQsUTs7O0FBSW5CLG9CQUFZbWMsU0FBWixFQUF1Qmw2QixNQUF2QixFQUErQjhlLFFBQS9CLEVBQXlDbEgsT0FBekMsRUFBa0Q7QUFBQTs7QUFBQSw0Q0FDaEQsaUJBQU1zaUIsU0FBTixFQUFpQmw2QixNQUFqQixFQUF5QjhlLFFBQXpCLEVBQW1DbEgsT0FBbkMsQ0FEZ0Q7QUFFakQ7O3FCQUVEdWlCLFEsdUJBQVc7QUFDVCxTQUFLaDVCLElBQUwsR0FBWSxLQUFLKzRCLFNBQUwsQ0FBZTVYLElBQWYsQ0FBb0IsT0FBcEIsQ0FBWjtBQUNBLFNBQUs4WCxhQUFMLEdBQXFCLEtBQUtGLFNBQUwsQ0FBZTVYLElBQWYsQ0FBb0IsZUFBcEIsQ0FBckI7QUFDQSxTQUFLK1gsY0FBTCxHQUFzQixLQUFLSCxTQUFMLENBQWU1WCxJQUFmLENBQW9CLGdCQUFwQixDQUF0QjtBQUNBLFNBQUtnWSxVQUFMLEdBQWtCLEtBQUtKLFNBQUwsQ0FBZTVYLElBQWYsQ0FBb0IsWUFBcEIsQ0FBbEI7QUFDRCxHOztxQkFFRGlZLFcsd0JBQVlqcUIsRSxFQUFJO0FBQUE7O0FBQ2QsUUFBSWtxQixpQkFBSjtBQUNBLFFBQUdscUIsT0FBSyxTQUFSLEVBQW1CO0FBQ2pCa3FCLGlCQUFXLENBQUM7QUFDVmxGLGlCQUFTLGlCQUFDdjBCLENBQUQsRUFBSXBLLElBQUo7QUFBQSxpQkFBWSxPQUFLOGpDLFNBQUwsQ0FBZSxnQkFBTUYsV0FBTixjQUFrQmpxQixFQUFsQixDQUFmLEVBQXNDQSxFQUF0QyxFQUEwQ3ZQLENBQTFDLEVBQTZDcEssSUFBN0MsRUFBbURvbkIsU0FBUzJjLGtCQUE1RCxDQUFaO0FBQUE7QUFEQyxPQUFELENBQVg7QUFHRCxLQUpELE1BS0s7QUFDSEYsaUJBQVcsZ0JBQU1ELFdBQU4sWUFBa0JqcUIsRUFBbEIsQ0FBWDtBQUNEO0FBQ0QsV0FBT2txQixRQUFQO0FBQ0QsRzs7cUJBRURHLGtCLCtCQUFtQnJxQixFLEVBQUkzTCxLLEVBQU87QUFDNUIsUUFBRzJMLE9BQUssZUFBUixFQUF5QjtBQUN2QixVQUFHM0wsTUFBTThyQixNQUFULEVBQWlCO0FBQ2YsYUFBSzVTLGVBQUwsQ0FBcUJoSyxRQUFyQixDQUE4QixZQUE5QjtBQUNELE9BRkQsTUFHSztBQUNILGFBQUtnSyxlQUFMLENBQXFCNUosV0FBckIsQ0FBaUMsWUFBakM7QUFDRDtBQUNGO0FBQ0YsRzs7cUJBRURrSyxPLHNCQUFVO0FBQ1IsV0FBTyxLQUFLaGQsSUFBWjtBQUNELEc7O3FCQUVEMGYsZ0IsK0JBQW1CO0FBQ2pCLFdBQU8sS0FBS3VaLGFBQVo7QUFDRCxHOztxQkFFRGxhLGlCLGdDQUFvQjtBQUNsQixXQUFPLEtBQUttYSxjQUFaO0FBQ0QsRzs7cUJBRUQ1YSxhLDRCQUFnQjtBQUNkLFdBQU8sS0FBSzZhLFVBQVo7QUFDRCxHOztxQkFFRE0sUSx1QkFBVztBQUNULFdBQU8sRUFBUDtBQUVELEc7O3FCQUVEQyxRLHVCQUFXO0FBQ1QsV0FBTyxDQUNMLFdBREssRUFFTCxZQUZLLEVBR0wsZ0JBSEssRUFJTCxRQUpLLEVBS0wsaUJBTEssRUFNTCxhQU5LLEVBT0wsZ0JBUEssRUFRTCxZQVJLLEVBU0wsZUFUSyxFQVVMLGdCQVZLLEVBV0wsU0FYSyxFQVlMLFVBWkssRUFhTCxlQWJLLEVBY0wsYUFkSyxFQWVMLGVBZkssRUFnQkwsV0FoQkssRUFpQkwsVUFqQkssRUFrQkwsZUFsQkssRUFtQkwsaUJBbkJLLEVBb0JMLGFBcEJLLEVBcUJMLGNBckJLLEVBc0JMLFdBdEJLLEVBdUJMLGVBdkJLLEVBd0JMLGdCQXhCSyxDQUFQO0FBMEJELEc7O3FCQUVEQyxVLHlCQUFhO0FBQ1gsV0FBTyxDQUNMLG9CQURLLEVBRUwsYUFGSyxFQUdMLFlBSEssRUFJTCxjQUpLLEVBS0wsZUFMSyxFQU1MLFdBTkssRUFPTCxhQVBLLEVBUUwsWUFSSyxFQVNMLGdCQVRLLENBQVA7QUFXRCxHOztxQkFFREMsUyx3QkFBWTtBQUNWLFdBQU8sQ0FDTCxTQURLLEVBRUwsVUFGSyxDQUFQO0FBSUQsRzs7cUJBRURDLFEsdUJBQVc7QUFDVCxXQUFPLENBQ0wsb0JBREssQ0FBUDtBQUdELEc7O3FCQUVEQyxXLDBCQUFjO0FBQ1osV0FBTztBQUNMaG9CLFlBQU0sa0NBREQ7QUFFTHpGLGNBQVEsQ0FDTix5QkFETSxDQUZIO0FBS0w2ckIsYUFBTyxDQUNMO0FBQ0U2QixhQUFLLFlBRFA7QUFFRXYrQixjQUFNO0FBRlIsT0FESyxDQUxGO0FBV0x3K0IsY0FBUTtBQVhILEtBQVA7QUFhRCxHOzs7RUFsSW1DQyxjOztBQUFqQnJkLFEsQ0FFWjJjLGtCLEdBQXFCLEk7a0JBRlQzYyxROzs7Ozs7Ozs7OztBQ0hyQjs7OztBQUNBOzs7Ozs7Ozs7Ozs7SUFFcUIyRCxtQjs7O0FBQ25CLCtCQUFZbGtCLE9BQVosRUFBcUI0RyxZQUFyQixFQUFtQ04sS0FBbkMsRUFBMENWLE9BQTFDLEVBQW1EQyxLQUFuRCxFQUEwRDtBQUFBOztBQUFBLGlEQUN4RCw2QkFBTUQsT0FBTixFQUFlQyxLQUFmLENBRHdEOztBQUV4RCxVQUFLUSxVQUFMLENBQWdCQyxLQUFoQjtBQUNBLFVBQUtNLFlBQUwsR0FBb0JBLFlBQXBCO0FBQ0EsVUFBS0QsS0FBTCxHQUFhO0FBQ1hDLG9CQUFjQSxhQUFheWIsSUFBYjtBQURILEtBQWI7QUFHQSxVQUFLd2IsWUFBTCxHQUFvQixJQUFJLzRCLHNCQUFKLENBQWlCOUUsT0FBakIsQ0FBcEI7O0FBRUEsUUFBR3NHLFFBQU0sQ0FBVCxFQUFZO0FBQ1YsVUFBTW5DLE9BQU8sTUFBSzA1QixZQUFMLENBQWtCNTRCLEtBQWxCLENBQXdCMkIsYUFBYSxDQUFiLENBQXhCLEVBQXlDLENBQXpDLEVBQTRDLE1BQUtkLFFBQUwsQ0FBY0csS0FBZCxDQUFvQmQsV0FBaEUsRUFBNkUsTUFBS1csUUFBTCxDQUFjRyxLQUFkLENBQW9CYixZQUFqRyxFQUErRyxNQUFLVSxRQUFMLENBQWNHLEtBQWQsQ0FBb0I5RixLQUFuSSxDQUFiO0FBQ0FnRSxXQUFLM0IsTUFBTCxHQUFjLFlBQUs7QUFDakIsY0FBSzBELFNBQUwsQ0FBZS9CLEtBQUtsRSxLQUFwQixFQUEyQmtFLEtBQUtqRSxNQUFoQztBQUNBaUUsYUFBS3BELE9BQUw7QUFDQSxjQUFLOEYsS0FBTDtBQUNELE9BSkQ7QUFLRCxLQVBELE1BUUs7QUFDSCxZQUFLbkQsS0FBTCxHQUFhLE1BQUtvQyxRQUFsQjtBQUNBLFlBQUtlLEtBQUw7QUFDRDtBQXBCdUQ7QUFxQnpEOzs7RUF0QjhDbEIsMEI7O2tCQUE1QnVlLG1COzs7Ozs7Ozs7Ozs7O0FDSHJCOzs7Ozs7Ozs7Ozs7SUFFcUI2RixLOzs7QUFFbkIsaUJBQVloakIsTUFBWixFQUFvQmpOLENBQXBCLEVBQXVCb04sS0FBdkIsRUFBOEJDLEtBQTlCLEVBQXFDO0FBQUE7O0FBQUEsNENBQ25DLHVCQUFNSixNQUFOLEVBQWNqTixDQUFkLEVBQWlCLENBQWpCLEVBQW9CLENBQXBCLEVBQXVCb04sS0FBdkIsRUFBOEJDLEtBQTlCLENBRG1DO0FBRXBDOztrQkFFRFYsUSx1QkFBVztBQUNULHdCQUNLLEtBQUszTSxDQUFMLENBQU9xTSxLQURaO0FBRUVJLGNBQVE7QUFGVjtBQUlELEc7O2tCQUVEYyxVLHlCQUFhO0FBQ1gsUUFBTXdFLDZCQUE2QixDQUNqQyxDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssQ0FBTCxDQURpQyxFQUVqQyxDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssQ0FBTCxFQUFPLENBQVAsRUFBUyxDQUFULENBRmlDLENBQW5DO0FBQUEsUUFJQUgsNkJBQTZCLENBQzNCLENBQUMsQ0FBRCxFQUFHLENBQUgsRUFBSyxDQUFMLENBRDJCLEVBRTNCLENBQUMsQ0FBRCxFQUFHLENBQUgsRUFBSyxDQUFMLENBRjJCLENBSjdCO0FBQUEsUUFRQTlELHNCQUFzQixDQUNwQjtBQUNFNVAsU0FBRyxDQUNFLENBQUMsQ0FBRCxFQUFHLE1BQUgsRUFBVSxNQUFWLEVBQWlCLE1BQWpCLEVBQXdCLE1BQXhCLENBREYsRUFFRSxDQUFDLENBQUQsRUFBRyxNQUFILEVBQVUsTUFBVixFQUFpQixNQUFqQixFQUF3QixNQUF4QixDQUZGLEVBR0UsQ0FBQyxDQUFELEVBQUcsTUFBSCxFQUFVLE1BQVYsRUFBaUIsTUFBakIsRUFBd0IsTUFBeEIsQ0FIRixFQUlFLENBQUMsQ0FBRCxFQUFHLE1BQUgsRUFBVSxNQUFWLEVBQWlCLE1BQWpCLEVBQXdCLE1BQXhCLENBSkYsRUFLRSxDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssQ0FBTCxFQUFPLENBQVAsRUFBUyxDQUFULENBTEYsQ0FETDtBQVFFUixTQUFHLENBQ0UsQ0FBQyxDQUFELEVBQUcsQ0FBSCxFQUFLLENBQUwsRUFBTyxDQUFQLEVBQVMsQ0FBVCxDQURGLEVBRUUsQ0FBQyxDQUFELEVBQUcsSUFBSCxFQUFRLEtBQVIsRUFBYyxDQUFDLEtBQWYsRUFBcUIsQ0FBQyxNQUF0QixDQUZGLEVBR0UsQ0FBQyxDQUFELEVBQUcsSUFBSCxFQUFRLElBQVIsRUFBYSxDQUFDLEtBQWQsRUFBb0IsQ0FBQyxLQUFyQixDQUhGLEVBSUUsQ0FBQyxDQUFELEVBQUksTUFBSixFQUFZLE1BQVosRUFBb0IsTUFBcEIsRUFBNEIsTUFBNUIsQ0FKRixFQUtFLENBQUMsQ0FBRCxFQUFJLE1BQUosRUFBWSxNQUFaLEVBQW9CLE1BQXBCLEVBQTRCLE1BQTVCLENBTEY7QUFSTCxLQURvQixFQWlCcEI7QUFDRVEsU0FBRyxDQUNFLENBQUMsQ0FBRCxFQUFHLE1BQUgsRUFBVSxNQUFWLEVBQWlCLE1BQWpCLEVBQXdCLE1BQXhCLENBREYsRUFFRSxDQUFDLENBQUQsRUFBRyxNQUFILEVBQVUsTUFBVixFQUFpQixNQUFqQixFQUF3QixNQUF4QixDQUZGLEVBR0UsQ0FBQyxDQUFELEVBQUcsTUFBSCxFQUFVLE1BQVYsRUFBaUIsTUFBakIsRUFBd0IsTUFBeEIsQ0FIRixFQUlFLENBQUMsS0FBRCxFQUFPLEtBQVAsRUFBYSxLQUFiLEVBQW1CLEtBQW5CLEVBQXlCLEtBQXpCLENBSkYsRUFLRSxDQUFDLEtBQUQsRUFBTyxLQUFQLEVBQWEsS0FBYixFQUFtQixLQUFuQixFQUF5QixLQUF6QixDQUxGLEVBTUUsQ0FBQyxLQUFELEVBQU8sS0FBUCxFQUFhLEtBQWIsRUFBbUIsS0FBbkIsRUFBeUIsS0FBekIsQ0FORixFQU9FLENBQUMsQ0FBRCxFQUFHLENBQUgsRUFBSyxDQUFMLEVBQU8sQ0FBUCxFQUFTLENBQVQsQ0FQRixDQURMO0FBVUVSLFNBQUcsQ0FDRSxDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssQ0FBTCxFQUFPLENBQVAsRUFBUyxDQUFULENBREYsRUFFRSxDQUFDLENBQUQsRUFBRyxJQUFILEVBQVEsS0FBUixFQUFjLENBQUMsS0FBZixFQUFxQixDQUFDLE1BQXRCLENBRkYsRUFHRSxDQUFDLENBQUQsRUFBRyxJQUFILEVBQVEsSUFBUixFQUFhLENBQUMsS0FBZCxFQUFvQixDQUFDLEtBQXJCLENBSEYsRUFJRSxDQUFDLEtBQUQsRUFBTyxLQUFQLEVBQWEsS0FBYixFQUFtQixLQUFuQixFQUF5QixLQUF6QixDQUpGLEVBS0UsQ0FBQyxLQUFELEVBQU8sS0FBUCxFQUFhLEtBQWIsRUFBbUIsS0FBbkIsRUFBeUIsS0FBekIsQ0FMRixFQU1FLENBQUMsS0FBRCxFQUFPLEtBQVAsRUFBYSxLQUFiLEVBQW1CLEtBQW5CLEVBQXlCLEtBQXpCLENBTkYsRUFPRSxDQUFDLENBQUQsRUFBSSxNQUFKLEVBQVksTUFBWixFQUFvQixNQUFwQixFQUE0QixNQUE1QixDQVBGO0FBVkwsS0FqQm9CLENBUnRCO0FBOENBLFdBQU87QUFDTG9RLDhDQURLO0FBRUxpRSw0REFGSztBQUdMSDtBQUhLLEtBQVA7QUFLRCxHOzs7RUFqRWdDNUUsb0I7O2tCQUFkaWpCLEs7Ozs7Ozs7Ozs7Ozs7QUNGckI7Ozs7Ozs7O0lBRXFCUixnQjtBQUNuQiw0QkFBWXRKLElBQVosRUFBa0I7QUFBQTs7QUFDaEIsU0FBS0EsSUFBTCxHQUFZQSxJQUFaO0FBQ0EsU0FBS3ZjLEtBQUwsR0FBYXVjLEtBQUtubUIsQ0FBTCxDQUFPaVcsYUFBcEI7QUFDQSxTQUFLaEosTUFBTCxHQUFja1osS0FBS2xaLE1BQW5CO0FBQ0EsU0FBS3FpQixXQUFMLEdBQW1CbkosS0FBS21KLFdBQXhCO0FBQ0EsU0FBSzBVLFFBQUwsR0FBZ0IsRUFBaEI7QUFDQSxTQUFLOU8sUUFBTCxHQUFnQixFQUFoQjtBQUNEOzs2QkFFRCtPLFUseUJBQWE7QUFDWCxRQUFJMzNCLE9BQU8sS0FBSzZaLElBQUwsQ0FBVXpELE9BQVYsRUFBWDtBQUFBLFFBQWdDbFcsUUFBUSxLQUFLMlosSUFBTCxDQUFVaUMsUUFBVixFQUF4QztBQUFBLFFBQThEOGIsTUFBTTUzQixTQUFPLENBQVAsSUFBWUEsU0FBT0UsUUFBTSxDQUF6QixHQUE0QixDQUFDRixJQUFELENBQTVCLEdBQW9DLENBQUNBLElBQUQsRUFBT0EsT0FBSyxDQUFaLENBQXhHO0FBQ0EsUUFBRyxDQUFDLEtBQUswM0IsUUFBTCxDQUFjLENBQWQsQ0FBRCxJQUFxQjEzQixTQUFPLENBQS9CLEVBQWtDO0FBQ2hDNDNCLGFBQU8sQ0FBUCxTQUFhQSxHQUFiO0FBQ0Q7QUFDRCxXQUFPQSxHQUFQO0FBQ0QsRzs7NkJBRURqOUIsTyxzQkFBVTtBQUNSLHlCQUFhdUcsT0FBTytYLE1BQVAsQ0FBYyxLQUFLeWUsUUFBbkIsQ0FBYixrSEFBMkM7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBLFVBQW5DbmMsQ0FBbUM7O0FBQ3pDQSxRQUFFc2MsTUFBRixDQUFTam5CLE9BQVQsQ0FBaUIsVUFBQ3hkLENBQUQ7QUFBQSxlQUFNQSxFQUFFdUgsT0FBRixFQUFOO0FBQUEsT0FBakI7QUFDRDtBQUNELFdBQU8sS0FBSys4QixRQUFaO0FBQ0QsRzs7NkJBRUR0bkIsSSxtQkFBTztBQUFBOztBQUNMLFNBQUswbkIsTUFBTCxHQUFjLEtBQWQ7O0FBREs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBLFVBRUc1aUMsQ0FGSDs7QUFHSCxVQUFNcW1CLElBQUksTUFBS21jLFFBQUwsQ0FBY3hpQyxDQUFkLENBQVY7QUFDQSxVQUFHcW1CLENBQUgsRUFBTTtBQUNKLFlBQUdBLEVBQUV4YSxLQUFGLEtBQVUsT0FBVixJQUFxQndhLEVBQUVzYyxNQUFGLENBQVN2bUMsTUFBakMsRUFBeUM7QUFDdkMsY0FBTWcxQixRQUFRLE1BQUt6TSxJQUFMLENBQVV3TSxjQUFWLENBQXlCbnhCLENBQXpCLENBQWQ7QUFDQXFtQixZQUFFc2MsTUFBRixDQUFTam5CLE9BQVQsQ0FBaUIsVUFBQ3hkLENBQUQsRUFBTTtBQUNyQixnQkFBR0EsRUFBRTBjLFFBQUYsRUFBSCxFQUFpQjtBQUNmMWMsZ0JBQUVteEIsTUFBRixDQUFTK0IsS0FBVDtBQUNBbHpCLGdCQUFFZ2QsSUFBRjtBQUNEO0FBQ0YsV0FMRDtBQU1EO0FBQ0YsT0FWRCxNQVdLO0FBQ0gsWUFBTW1MLEtBQUksTUFBS21jLFFBQUwsQ0FBY3hpQyxDQUFkLElBQW1CO0FBQzNCNkwsaUJBQU8sU0FEb0I7QUFFM0I4MkIsa0JBQVE7QUFGbUIsU0FBN0I7QUFJQTNuQixnQkFBUUMsT0FBUixHQUFrQnNCLElBQWxCLENBQXVCLFlBQUs7QUFDMUIsZ0JBQUt1UixXQUFMLENBQWlCK1UsU0FBakIsQ0FBMkI3aUMsQ0FBM0IsRUFBOEIsVUFBQzJpQyxNQUFELEVBQVc7QUFDdkMsZ0JBQU1HLFNBQVMsU0FBVEEsTUFBUyxHQUFLO0FBQ2xCLGtCQUFHSCxPQUFPdm1DLE1BQVAsSUFBaUIsTUFBS29tQyxRQUF6QixFQUFtQztBQUNqQyxvQkFBTXBSLFNBQVEsTUFBS3pNLElBQUwsQ0FBVXdNLGNBQVYsQ0FBeUJueEIsQ0FBekIsQ0FBZDtBQUNBLHNDQUFhMmlDLE1BQWIseUhBQXFCO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQSxzQkFBYnprQyxDQUFhOztBQUNuQixzQkFBTTZrQyxLQUFLLElBQUlDLHVCQUFKLENBQWtCLE1BQUt2M0IsTUFBdkIsRUFBK0IybEIsTUFBL0IsZUFBMEMsTUFBS2hwQixLQUEvQyxJQUFzRDY2QixZQUFZampDLENBQWxFLElBQVg7QUFDQXFtQixxQkFBRXNjLE1BQUYsQ0FBU3BsQyxJQUFULENBQWN3bEMsRUFBZDtBQUNBQSxxQkFBR3BqQyxHQUFILENBQU96QixFQUFFZ2MsR0FBVCxFQUFjaGMsRUFBRWljLElBQWhCLEVBQXNCamMsRUFBRWtjLEVBQXhCO0FBQ0Q7QUFDRE8sMkJBQVcsWUFBSztBQUNkLHNCQUFHLENBQUMsTUFBS2lvQixNQUFOLElBQWdCLENBQUMsTUFBS0gsVUFBTCxHQUFrQjdqQyxPQUFsQixDQUEwQm9CLENBQTFCLENBQXBCLEVBQWtEO0FBQ2hEcW1CLHVCQUFFc2MsTUFBRixDQUFTam5CLE9BQVQsQ0FBaUIsVUFBQ3hkLENBQUQ7QUFBQSw2QkFBTUEsRUFBRWdkLElBQUYsRUFBTjtBQUFBLHFCQUFqQjtBQUNEO0FBQ0YsaUJBSkQsRUFJRyxFQUpIO0FBS0Q7QUFDRG1MLGlCQUFFeGEsS0FBRixHQUFVLE9BQVY7QUFDRCxhQWZEO0FBZ0JBLGdCQUFHLE1BQUsyMkIsUUFBTCxLQUFrQnhpQyxNQUFJLENBQUosSUFBUyxNQUFLd2lDLFFBQUwsQ0FBYyxDQUFkLEVBQWlCMzJCLEtBQWpCLEtBQXlCLFNBQXBELENBQUgsRUFBbUU7QUFDakVpM0I7QUFDQSxrQkFBRzlpQyxNQUFJLENBQVAsRUFBVTtBQUNSLHNDQUFhLE1BQUswekIsUUFBbEIseUhBQTRCO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQSxzQkFBcEJ6ekIsQ0FBb0I7O0FBQzFCQTtBQUNEO0FBQ0Qsc0JBQUt5ekIsUUFBTCxHQUFnQixFQUFoQjtBQUNEO0FBQ0YsYUFSRCxNQVNLO0FBQ0gsb0JBQUtBLFFBQUwsQ0FBY24yQixJQUFkLENBQW1CdWxDLE1BQW5CO0FBQ0Q7QUFDRixXQTdCRDtBQStCRCxTQWhDRDtBQWlDRDtBQXJERTs7QUFFTCwwQkFBYSxLQUFLTCxVQUFMLEVBQWIseUhBQWdDO0FBQUE7O0FBQUE7O0FBQUE7QUFvRC9CO0FBRUYsRzs7NkJBRUQzbkIsSSxtQkFBTztBQUNMLFNBQUs4bkIsTUFBTCxHQUFjLElBQWQ7QUFDQSxRQUFNTSxPQUFPLEVBQWI7QUFDQSwwQkFBYWwzQixPQUFPK1gsTUFBUCxDQUFjLEtBQUt5ZSxRQUFuQixDQUFiLHlIQUEyQztBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQUEsVUFBbkNuYyxHQUFtQzs7QUFDekNBLFVBQUVzYyxNQUFGLENBQVNqbkIsT0FBVCxDQUFpQixVQUFDeGQsQ0FBRDtBQUFBLGVBQU1nbEMsS0FBSzNsQyxJQUFMLENBQVVXLEVBQUU0YyxJQUFGLEVBQVYsQ0FBTjtBQUFBLE9BQWpCO0FBQ0Q7QUFDRCxXQUFPRSxRQUFRaUcsR0FBUixDQUFZaWlCLElBQVosQ0FBUDtBQUNELEc7Ozs7O2tCQTFGa0JqVixnQjs7Ozs7Ozs7Ozs7OztBQ0ZyQjs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7Ozs7SUFFcUJGLFc7QUFFbkIsdUJBQVl0aUIsTUFBWixFQUFvQmtaLElBQXBCLEVBQTBCbm1CLENBQTFCLEVBQTZCO0FBQUE7O0FBQzNCLFNBQUtpTixNQUFMLEdBQWNBLE1BQWQ7QUFDQSxTQUFLa1osSUFBTCxHQUFZQSxJQUFaO0FBQ0EsU0FBS3dlLFNBQUwsR0FBaUIsRUFBakI7QUFDQSxTQUFLM2tDLENBQUwsR0FBU0EsQ0FBVDtBQUNBLFNBQUs0a0MsU0FBTCxHQUFpQixJQUFJMTVCLGVBQUosQ0FBVWxMLEVBQUVvVixXQUFaLENBQWpCO0FBQ0EsU0FBS3l2QixjQUFMLEdBQXNCLElBQUkzNUIsZUFBSixFQUF0Qjs7QUFFQSxTQUFLNDVCLFFBQUwsR0FBZ0IsRUFBaEI7QUFDQSxTQUFJLElBQUlobUMsSUFBRSxDQUFWLEVBQWFBLElBQUUsRUFBZixFQUFtQixFQUFFQSxDQUFyQixFQUF3QjtBQUN0QixVQUFNK0MsSUFBSSxhQUFFLFVBQUYsRUFBYyxDQUFkLENBQVY7QUFDQSxXQUFLaWpDLFFBQUwsQ0FBYy9sQyxJQUFkLENBQW1CLEVBQUM4QyxJQUFELEVBQUk4RSxLQUFLOUUsRUFBRWlILFVBQUYsQ0FBYSxJQUFiLENBQVQsRUFBbkI7QUFDRDtBQUNELFNBQUtpOEIsVUFBTCxHQUFrQixDQUFsQjs7QUFFQSxTQUFLaEIsWUFBTCxHQUFvQixJQUFJLzRCLHNCQUFKLGNBQXFCaUMsTUFBckIsSUFBNkIrUSxlQUFlbUksS0FBS25JLGFBQUwsQ0FBbUJ1SyxJQUFuQixDQUF3QnBDLElBQXhCLENBQTVDLEVBQTJFemYsY0FBYyxLQUFLbytCLFFBQUwsQ0FBYyxDQUFkLEVBQWlCampDLENBQTFHLEVBQTZHK0UsaUJBQWlCLEtBQUtrK0IsUUFBTCxDQUFjLENBQWQsRUFBaUJuK0IsR0FBL0ksS0FBcUosS0FBS2srQixjQUExSixDQUFwQjs7QUFFQSxTQUFLRyxRQUFMLEdBQWdCLEVBQWhCO0FBQ0EsU0FBS0MsV0FBTCxHQUFtQixFQUFuQjtBQUNBLFNBQUtDLGlCQUFMLEdBQXlCLEVBQXpCOztBQUVBLFNBQUtDLFdBQUwsR0FBbUIsSUFBSXJwQyxZQUFNc3BDLGlCQUFWLEVBQW5CO0FBQ0FuNEIsV0FBT3lrQixTQUFQLENBQWlCLElBQUk1MUIsWUFBTW1ULElBQVYsQ0FBZSxJQUFJblQsWUFBTXVwQyxhQUFWLENBQXdCLElBQXhCLEVBQThCLElBQTlCLENBQWYsRUFBb0QsS0FBS0YsV0FBekQsQ0FBakI7O0FBRUEsU0FBSzdLLGdCQUFMLEdBQXdCLElBQXhCO0FBQ0EsU0FBS2dMLE9BQUwsR0FBZSxFQUFmO0FBQ0EsU0FBS0EsT0FBTCxDQUFhdGxDLEVBQUVxTSxLQUFGLENBQVFoRyxLQUFyQixJQUE4QixLQUFLay9CLG9CQUFMLENBQTBCdmxDLEVBQUVxTSxLQUE1QixDQUE5QjtBQUNBLFFBQUdyTSxFQUFFc00sSUFBRixDQUFPakcsS0FBUCxLQUFlckcsRUFBRXFNLEtBQUYsQ0FBUWhHLEtBQTFCLEVBQWlDO0FBQy9CLFdBQUtpL0IsT0FBTCxDQUFhdGxDLEVBQUVzTSxJQUFGLENBQU9qRyxLQUFwQixJQUE2QixLQUFLay9CLG9CQUFMLENBQTBCdmxDLEVBQUVzTSxJQUE1QixDQUE3QjtBQUNEOztBQUVELFNBQUs2WixJQUFMLENBQVU3UCxnQkFBVixDQUEyQixnQkFBM0IsRUFBNkMsS0FBS2t2QixrQkFBTCxDQUF3QmpkLElBQXhCLENBQTZCLElBQTdCLENBQTdDOztBQUVBLFNBQUt3TCxZQUFMOztBQUVBOW1CLFdBQU8rakIsaUJBQVAsQ0FBeUIsS0FBS0gsTUFBTCxDQUFZdEksSUFBWixDQUFpQixJQUFqQixDQUF6Qjs7QUFFQS9MLFlBQVFDLE9BQVIsR0FBa0JzQixJQUFsQixDQUF1QixLQUFLMG5CLGlCQUFMLENBQXVCbGQsSUFBdkIsQ0FBNEIsSUFBNUIsQ0FBdkI7QUFDRDs7d0JBRURnZCxvQixpQ0FBcUJ2bEMsQyxFQUFHO0FBQ3RCLFFBQU0wbEMsY0FBYyxDQUFwQjtBQUFBLFFBQXVCcDZCLGVBQWV0TCxFQUFFb0csTUFBRixHQUFTcEcsRUFBRW1HLEtBQVgsR0FBaUJuRyxFQUFFcUwsV0FBekQ7QUFBQSxRQUNFakQsUUFBUWxJLEtBQUtvRCxJQUFMLENBQVUsTUFBSSxHQUFKLEdBQVEsR0FBUixHQUFZLEdBQVosSUFBaUJ0RCxFQUFFcUwsV0FBRixHQUFjQyxZQUEvQixDQUFWLENBRFY7QUFBQSxRQUVFcTZCLFlBQVksSUFBSUMsMEJBQUosQ0FBcUJ4OUIsUUFBTXBJLEVBQUVxTCxXQUE3QixFQUEwQ2pELFFBQU1rRCxZQUFoRCxFQUE4RHRMLEVBQUVxRyxLQUFoRSxDQUZkO0FBQUEsUUFHRXcvQixXQUFXLElBQUlDLHlCQUFKLENBQW9CSCxVQUFVSSxZQUFWLENBQXVCTCxXQUF2QixDQUFwQixFQUF5REEsV0FBekQsRUFBc0UsQ0FBdEUsRUFBeUVBLFdBQXpFLEVBQXNGLEdBQXRGLENBSGI7QUFJQUMsY0FBVTErQixPQUFWO0FBQ0EsV0FBTzQrQixRQUFQO0FBQ0QsRzs7d0JBRUQ1K0IsTyxzQkFBVTtBQUNSLFNBQUs0dEIsYUFBTDtBQUNBLHlCQUFpQnJuQixPQUFPQyxJQUFQLENBQVksS0FBSzYzQixPQUFqQixDQUFqQixrSEFBNEM7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBLFVBQXBDai9CLEtBQW9DOztBQUMxQyxXQUFLaS9CLE9BQUwsQ0FBYWovQixLQUFiLEVBQW9CWSxPQUFwQjtBQUNEO0FBQ0QsV0FBTyxLQUFLcStCLE9BQVo7QUFDQSxTQUFLVCxjQUFMLENBQW9CNTlCLE9BQXBCO0FBQ0EsU0FBSzI5QixTQUFMLENBQWUzOUIsT0FBZjtBQUNBLDBCQUFhLEtBQUs2OUIsUUFBbEIseUhBQTRCO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQSxVQUFwQjlnQyxDQUFvQjs7QUFDMUJBLFFBQUVuQyxDQUFGLENBQUl1RSxNQUFKLEdBQWFwQyxFQUFFbkMsQ0FBRixDQUFJc0UsS0FBSixHQUFZLENBQXpCO0FBQ0Q7QUFDRCxXQUFPLEtBQUsyK0IsUUFBWjtBQUNELEc7O3dCQUVEa0IsTyxvQkFBUXhrQyxDLEVBQUc7QUFDVCxXQUFPQSxJQUFFLENBQUYsSUFBT0EsS0FBRyxLQUFHLEtBQUt4QixDQUFMLENBQU95TSxNQUFQLEdBQWMsQ0FBakIsQ0FBakI7QUFDRCxHOzt3QkFFRDRzQixRLHVCQUFXO0FBQ1AsV0FBTyxLQUFLcHNCLE1BQUwsQ0FBWW9zQixRQUFaLEVBQVA7QUFDSCxHOzt3QkFFRHJHLFkseUJBQWF4eEIsQyxFQUFHO0FBQ2QsUUFBTWdJLFNBQVMsS0FBS283QixTQUFMLENBQWV6bkIsR0FBZixDQUFtQjNiLENBQW5CLENBQWY7QUFDQSxXQUFPZ0ksU0FBUUEsT0FBTzZELEtBQWYsR0FBc0J4RSxTQUE3QjtBQUNELEc7O3dCQUVEb3FCLHNCLG1DQUF1Qi9ELE0sRUFBUTtBQUM3QixTQUFLb0wsZ0JBQUwsR0FBd0JwTCxNQUF4QjtBQUNBLDBCQUFhLEtBQUs4VixRQUFsQix5SEFBNEI7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBLFVBQXBCaGhDLENBQW9COztBQUMxQixXQUFLaWlDLGFBQUwsQ0FBbUJqaUMsQ0FBbkI7QUFDRDtBQUNGLEc7O3dCQUVENnNCLE0sbUJBQU9wekIsRSxFQUFJO0FBQ1QsUUFBRyxLQUFLNjhCLGdCQUFSLEVBQTBCO0FBQ3hCLFVBQU1nTCxVQUFVLEVBQWhCO0FBQ0EsNEJBQWEsS0FBS04sUUFBbEIseUhBQTRCO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQSxZQUFwQmhoQyxDQUFvQjs7QUFDMUIsWUFBR0EsRUFBRWtpQyxRQUFGLEVBQUgsRUFBaUI7QUFDZlosa0JBQVF0aEMsRUFBRXFDLEtBQVYsSUFBbUIsSUFBbkIsQ0FBd0I7QUFDekI7QUFDRjtBQUNELDRCQUFpQm1ILE9BQU9DLElBQVAsQ0FBWTYzQixPQUFaLENBQWpCLHlIQUF1QztBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQUEsWUFBL0JqL0IsS0FBK0I7O0FBQ3JDLGFBQUtpL0IsT0FBTCxDQUFhai9CLEtBQWIsRUFBb0J3cUIsTUFBcEIsQ0FBMkJwekIsRUFBM0I7QUFDQSxhQUFLMG9CLElBQUwsQ0FBVTRMLFdBQVY7QUFDRDtBQUNGO0FBQ0YsRzs7d0JBRURvVSxrQiwrQkFBbUJuaUMsQyxFQUFHO0FBQ3BCLFFBQU1sRixJQUFJLEtBQUtrbUMsUUFBTCxDQUFjNWtDLE9BQWQsQ0FBc0I0RCxDQUF0QixDQUFWO0FBQ0EsUUFBRyxDQUFDbEYsQ0FBSixFQUFPO0FBQ0wsV0FBS2ttQyxRQUFMLENBQWMxaEIsTUFBZCxDQUFxQnhrQixDQUFyQixFQUF3QixDQUF4QjtBQUNEO0FBQ0YsRzs7d0JBRURzbkMscUIsa0NBQXNCcGlDLEMsRUFBRztBQUN2QixRQUFNbEYsSUFBSSxLQUFLbW1DLFdBQUwsQ0FBaUI3a0MsT0FBakIsQ0FBeUI0RCxDQUF6QixDQUFWO0FBQ0EsUUFBRyxDQUFDbEYsQ0FBSixFQUFPO0FBQ0wsV0FBS21tQyxXQUFMLENBQWlCM2hCLE1BQWpCLENBQXdCeGtCLENBQXhCLEVBQTJCLENBQTNCO0FBQ0Q7QUFDRixHOzt3QkFFRGd4QixnQiw2QkFBaUJ0dUIsQyxFQUFhO0FBQUEsUUFBVnF1QixLQUFVLHVFQUFKLEVBQUk7O0FBQzVCLFNBQUs4VSxTQUFMLEdBQWlCOVUsS0FBakI7QUFDQSxRQUFNcm1CLFNBQVMsS0FBS283QixTQUFMLENBQWV6bkIsR0FBZixDQUFtQjNiLENBQW5CLENBQWY7QUFDQSxRQUFHZ0ksVUFBVUEsT0FBTzY4QixPQUFqQixJQUE0Qjc4QixPQUFPNjhCLE9BQVAsQ0FBZS9kLFFBQTlDLEVBQXdEO0FBQ3RELFVBQUcsQ0FBQyxLQUFLc2MsU0FBTCxDQUFlMXBCLE1BQWYsQ0FBc0IxWixDQUF0QixDQUFKLEVBQThCO0FBQzVCZ0ksZUFBTzY4QixPQUFQLENBQWUvZCxRQUFmLENBQXdCdUgsS0FBeEI7QUFDQSxhQUFLeVcsaUJBQUwsQ0FBdUI5OEIsTUFBdkI7QUFDRDtBQUNGO0FBQ0YsRzs7d0JBRURtb0IsVywwQkFBYztBQUFBOztBQUNaLFFBQUcsS0FBSzN4QixDQUFMLENBQU9pdkIsY0FBUCxDQUFzQkMsTUFBekIsRUFBaUM7QUFDL0IsVUFBTXFYLEtBQUssRUFBWDtBQUNBLFdBQUszQixTQUFMLENBQWUxbkIsT0FBZixDQUF1QixVQUFDelQsQ0FBRCxFQUFNO0FBQzNCODhCLFdBQUd4bkMsSUFBSCxDQUFRMEssQ0FBUjtBQUNELE9BRkQ7QUFHQTg4QixTQUFHcnBCLE9BQUgsQ0FBVyxVQUFDelQsQ0FBRCxFQUFNO0FBQ2YsWUFBTUQsU0FBU0MsRUFBRSxDQUFGLENBQWY7QUFDQSxZQUFHRCxVQUFVQSxPQUFPNjhCLE9BQXBCLEVBQTZCO0FBQzNCLGNBQUcsQ0FBQyxNQUFLekIsU0FBTCxDQUFlMXBCLE1BQWYsQ0FBc0J6UixFQUFFLENBQUYsQ0FBdEIsQ0FBSixFQUFpQztBQUMvQixrQkFBSzY4QixpQkFBTCxDQUF1Qjk4QixNQUF2QjtBQUNEO0FBQ0Y7QUFDRixPQVBEO0FBUUQ7QUFDRixHOzt3QkFFRDY2QixTLHNCQUFVN2lDLEMsRUFBR3VhLEcsRUFBSztBQUFBOztBQUNoQixRQUFHLEtBQUsvYixDQUFMLENBQU82M0IsZUFBVixFQUEyQjtBQUN6QixXQUFLNzNCLENBQUwsQ0FBTzYzQixlQUFQLENBQXVCcjJCLENBQXZCLEVBQTBCLFlBQVk7QUFBQSwwQ0FBUmdsQyxJQUFRO0FBQVJBLGNBQVE7QUFBQTs7QUFDcEMsWUFBTWg5QixTQUFTLE9BQUtvN0IsU0FBTCxDQUFlem5CLEdBQWYsQ0FBbUIzYixDQUFuQixDQUFmO0FBQ0EsWUFBR2dJLE1BQUgsRUFBVztBQUNULGNBQUdBLE9BQU82RCxLQUFQLEtBQWUsUUFBbEIsRUFBNEI7QUFDMUI3RCxtQkFBTzByQixRQUFQLENBQWdCbjJCLElBQWhCLENBQXFCLEVBQUNnZCxRQUFELEVBQU15cUIsVUFBTixFQUFyQjtBQUNELFdBRkQsTUFHSztBQUNIenFCLGlDQUFPeXFCLElBQVA7QUFDRDtBQUNGO0FBQ0YsT0FWRDtBQVdELEtBWkQsTUFhSztBQUNIenFCLFVBQUksRUFBSjtBQUNEO0FBQ0YsRzs7d0JBRUQwcUIsZSw0QkFBZ0J2UixRLEVBQVU7QUFDeEIsMEJBQWFBLFFBQWIseUhBQXVCO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQSxVQUFmbDFCLENBQWU7O0FBQ3JCLFVBQUk7QUFDRkEsVUFBRStiLEdBQUYsVUFBUy9iLEVBQUV3bUMsSUFBWDtBQUNELE9BRkQsQ0FHQSxPQUFNLzhCLENBQU4sRUFBUztBQUNQeEksZ0JBQVF1YSxLQUFSLENBQWMvUixDQUFkO0FBQ0Q7QUFDRjtBQUNEeXJCLGFBQVM1UixNQUFULENBQWdCLENBQWhCLEVBQW1CNFIsU0FBU3QzQixNQUE1QjtBQUNELEc7O3dCQUVEOG9DLFEscUJBQVNsbEMsQyxFQUFHO0FBQ1YsV0FBTyxLQUFLeEIsQ0FBTCxDQUFPMFYsR0FBUCxHQUFZLEtBQUcsS0FBSzFWLENBQUwsQ0FBT3lNLE1BQVAsR0FBYyxDQUFqQixJQUFvQixDQUFwQixHQUFzQmpMLENBQWxDLEdBQXFDQSxDQUE1QztBQUNELEc7O3dCQUVEdXJCLEksaUJBQUtxSixRLEVBQVU1MEIsQyxFQUFHO0FBQUE7O0FBQ2hCLFFBQU1tbEMsS0FBSyxLQUFLM21DLENBQUwsQ0FBTzhNLFlBQVAsQ0FBb0IsS0FBSzQ1QixRQUFMLENBQWNsbEMsQ0FBZCxDQUFwQixDQUFYO0FBQUEsUUFBa0R4QixJQUFJLEtBQUtnbUMsT0FBTCxDQUFheGtDLENBQWIsSUFBaUIsS0FBS3hCLENBQUwsQ0FBT3FNLEtBQXhCLEdBQStCLEtBQUtyTSxDQUFMLENBQU9zTSxJQUE1RjtBQUNBLFFBQU10SSxJQUFJO0FBQ1J4QyxVQURRO0FBRVJ3ckIsZUFBUyxJQUFJbHhCLFlBQU0wUyxPQUFWLEVBRkQ7QUFHUjYzQixlQUFTLElBSEQ7QUFJUmg1QixhQUFPLFNBSkM7QUFLUitQLGNBQVEsZ0JBQUM1YixDQUFEO0FBQUEsZUFBTXdDLEVBQUVxSixLQUFGLEtBQVksU0FBWixJQUF5QnJKLEVBQUVxSixLQUFGLEtBQVksV0FBckMsSUFBb0QsT0FBSzhZLElBQUwsQ0FBVXVNLFlBQVYsQ0FBdUJseEIsQ0FBdkIsQ0FBMUQ7QUFBQSxPQUxBO0FBTVI2RSxhQUFPckcsRUFBRXFHLEtBTkQ7QUFPUjYvQixnQkFBVTtBQUFBLGVBQUssT0FBSy9mLElBQUwsQ0FBVXVNLFlBQVYsQ0FBdUJseEIsQ0FBdkIsQ0FBTDtBQUFBLE9BUEY7QUFRUm9sQyxhQUFPO0FBQUEsZUFBSyxDQUFDLE9BQUt6Z0IsSUFBTCxDQUFVNE0sV0FBVixHQUF3QjN5QixPQUF4QixDQUFnQ29CLENBQWhDLENBQU47QUFBQSxPQVJDO0FBU1J5RixlQUFTLG1CQUFLO0FBQ1osZUFBS2svQixrQkFBTCxDQUF3Qm5pQyxDQUF4QjtBQUNBLGVBQUtvaUMscUJBQUwsQ0FBMkJwaUMsQ0FBM0I7QUFDQSxZQUFHQSxFQUFFcWlDLE9BQUYsSUFBYXJpQyxFQUFFcWlDLE9BQUYsQ0FBVXAvQixPQUExQixFQUFtQztBQUNqQ2pELFlBQUVxaUMsT0FBRixDQUFVcC9CLE9BQVY7QUFDRDtBQUNEakQsVUFBRWdwQixPQUFGLENBQVUvbEIsT0FBVjtBQUNBLGVBQU9qRCxFQUFFZ3BCLE9BQVQ7QUFDQSxlQUFPaHBCLEVBQUVxaUMsT0FBVDtBQUNELE9BbEJPO0FBbUJSblIsZ0JBQVU7QUFuQkYsS0FBVjtBQXFCQWx4QixNQUFFZ3BCLE9BQUYsQ0FBVUUsU0FBVixHQUFzQnB4QixZQUFNcXhCLFlBQTVCO0FBQ0EsU0FBSzZYLFFBQUwsQ0FBY2ptQyxJQUFkLENBQW1CaUYsQ0FBbkI7QUFDQSxTQUFLNmlDLFdBQUwsQ0FBaUI3aUMsQ0FBakIsRUFBb0JveUIsUUFBcEI7O0FBRUE1WixZQUFRQyxPQUFSLEdBQWtCc0IsSUFBbEIsQ0FBdUIsWUFBSztBQUMxQixVQUFHL1osRUFBRWdwQixPQUFMLEVBQWM7QUFDWmhwQixVQUFFcUgsV0FBRixHQUFnQnM3QixHQUFHdDdCLFdBQUgsSUFBa0JyTCxFQUFFcUwsV0FBcEM7QUFDQXJILFVBQUVzSCxZQUFGLEdBQWlCdEwsRUFBRW9HLE1BQUYsR0FBU3BHLEVBQUVtRyxLQUFYLEdBQWlCbkcsRUFBRXFMLFdBQXBDO0FBQ0EsWUFBTWxKLE1BQU0sT0FBSzJrQyxjQUFMLENBQW9COWlDLENBQXBCLENBQVo7QUFDQUEsVUFBRXFpQyxPQUFGLEdBQVksT0FBS3RDLFlBQUwsQ0FBa0I1NEIsS0FBbEIsQ0FBd0J3N0IsRUFBeEIsRUFBNEJBLEdBQUd0akIsTUFBSCxLQUFZeGEsU0FBWixHQUF1QixPQUFLNjlCLFFBQUwsQ0FBY2xsQyxDQUFkLENBQXZCLEdBQXlDbWxDLEdBQUd0akIsTUFBeEUsRUFBZ0ZsaEIsSUFBSWdFLEtBQXBGLEVBQTJGaEUsSUFBSWlFLE1BQS9GLEVBQXVHcEcsRUFBRXFHLEtBQXpHLEVBQWdILE9BQUtyRyxDQUFMLENBQU91TCxRQUF2SCxDQUFaO0FBQ0EsWUFBR3ZILEVBQUVxaUMsT0FBRixDQUFVL2QsUUFBYixFQUF1QjtBQUNyQnRrQixZQUFFcWlDLE9BQUYsQ0FBVS9kLFFBQVYsQ0FBbUIsT0FBS3FjLFNBQXhCO0FBQ0Q7QUFDRDNnQyxVQUFFb3pCLFFBQUYsR0FBYXVQLEdBQUdJLFdBQUgsR0FBZ0IsQ0FBQy9pQyxFQUFFcWlDLE9BQUYsQ0FBVWpQLFFBQVYsSUFBdUI7QUFBQSxpQkFBS3Z1QixTQUFMO0FBQUEsU0FBeEIsRUFBeUMwZixJQUF6QyxDQUE4Q3ZrQixFQUFFcWlDLE9BQWhELENBQWhCLEdBQTBFeDlCLFNBQXZGO0FBQ0E3RSxVQUFFcWlDLE9BQUYsQ0FBVTM5QixNQUFWLEdBQW1CLFlBQUs7QUFDdEIxRSxZQUFFcUosS0FBRixHQUFVLFFBQVY7QUFDQSxpQkFBS2k1QixpQkFBTCxDQUF1QnRpQyxDQUF2QjtBQUNBLGlCQUFLbWlCLElBQUwsQ0FBVW5JLGFBQVYsQ0FBd0I7QUFDdEJ0VSxrQkFBTSxZQURnQjtBQUV0QjRDLGtCQUFNOUs7QUFGZ0IsV0FBeEI7QUFJRCxTQVBEO0FBUUF3QyxVQUFFcWlDLE9BQUYsQ0FBVTc5QixRQUFWLEdBQXFCLFVBQUNkLEtBQUQsRUFBVTtBQUM3QixjQUFHMUQsRUFBRWdwQixPQUFMLEVBQWM7QUFDWixtQkFBS21aLGtCQUFMLENBQXdCbmlDLENBQXhCO0FBQ0EsZ0JBQUdBLEVBQUVveUIsUUFBTCxFQUFlO0FBQ2JweUIsZ0JBQUVveUIsUUFBRixDQUFXMW9CLEdBQVgsR0FBaUIxSixFQUFFZ3BCLE9BQW5CO0FBQ0FocEIsZ0JBQUVveUIsUUFBRixDQUFXL3ZCLEtBQVgsR0FBbUIsSUFBSXZLLFlBQU1rckMsS0FBVixDQUFnQixRQUFoQixDQUFuQjtBQUNBaGpDLGdCQUFFb3lCLFFBQUYsQ0FBV3huQixXQUFYLEdBQXlCLElBQXpCO0FBQ0Q7QUFDRDVLLGNBQUVncEIsT0FBRixDQUFVdGxCLEtBQVYsR0FBa0JBLEtBQWxCO0FBQ0ExRCxjQUFFZ3BCLE9BQUYsQ0FBVXBlLFdBQVYsR0FBd0IsSUFBeEI7QUFDQTVLLGNBQUVncEIsT0FBRixDQUFVaWEsUUFBVixHQUFxQixZQUFLO0FBQ3hCOXFCLHlCQUFXLFlBQUk7QUFDYixvQkFBR25ZLEVBQUVxSixLQUFGLEtBQVksaUJBQWYsRUFBa0M7QUFDaENySixvQkFBRXFKLEtBQUYsR0FBVSxRQUFWO0FBQ0EseUJBQUtvNUIsZUFBTCxDQUFxQnppQyxFQUFFa3hCLFFBQXZCO0FBQ0Q7QUFDRCx1QkFBTyxPQUFLZ1MsU0FBWjtBQUNBO0FBQ0QsZUFQRCxFQU9HLEdBUEg7QUFRRCxhQVREO0FBVUEsbUJBQUsvQixXQUFMLENBQWlCejNCLEdBQWpCLEdBQXVCMUosRUFBRWdwQixPQUF6QjtBQUNBLG1CQUFLbVksV0FBTCxDQUFpQnYyQixXQUFqQixHQUErQixJQUEvQjtBQUNEO0FBQ0YsU0F2QkQ7QUF3QkQ7QUFDRixLQTNDRDtBQTRDQSxTQUFLdVgsSUFBTCxDQUFVbkksYUFBVixDQUF3QjtBQUN0QnRVLFlBQU0sVUFEZ0I7QUFFdEI0QyxZQUFNOUs7QUFGZ0IsS0FBeEI7QUFJQSxXQUFPLEtBQUtvakMsU0FBTCxDQUFlam5CLEdBQWYsQ0FBbUJuYyxDQUFuQixFQUFzQndDLENBQXRCLENBQVA7QUFDRCxHOzt3QkFFRG1qQyxZLHlCQUFhbmpDLEMsRUFBRztBQUNkLFdBQU8sS0FBS2hFLENBQUwsQ0FBT2d2QixVQUFQLElBQXFCLENBQUNockIsRUFBRXhDLENBQXhCLElBQTZCd0MsRUFBRXhDLENBQUYsS0FBTSxLQUFLMmtCLElBQUwsQ0FBVWlDLFFBQVYsS0FBcUIsQ0FBL0Q7QUFDRCxHOzt3QkFFRDBlLGMsMkJBQWU5aUMsQyxFQUFHO0FBQ2hCLFFBQUk3QixZQUFKO0FBQ0EsUUFBRyxLQUFLbkMsQ0FBTCxDQUFPaXZCLGNBQVAsQ0FBc0JDLE1BQXpCLEVBQWlDO0FBQy9CLFVBQU1qd0IsSUFBSWlCLEtBQUs2QyxHQUFMLENBQVMsQ0FBQyxLQUFLb2tDLFlBQUwsQ0FBa0JuakMsQ0FBbEIsSUFBc0IsQ0FBdEIsR0FBeUIsR0FBMUIsSUFBK0IsS0FBS2lKLE1BQUwsQ0FBWTlHLEtBQVosRUFBL0IsR0FBbURuQyxFQUFFcUgsV0FBOUQsRUFBMkUsS0FBSzRCLE1BQUwsQ0FBWTdHLE1BQVosS0FBcUJwQyxFQUFFc0gsWUFBbEcsQ0FBVjtBQUNBbkosWUFBTTtBQUNKZ0UsZUFBTyxLQUFLbkcsQ0FBTCxDQUFPaXZCLGNBQVAsQ0FBc0Jod0IsQ0FBdEIsR0FBd0IsS0FBS2UsQ0FBTCxDQUFPK3VCLElBQS9CLEdBQW9DOXZCLENBQXBDLEdBQXNDK0UsRUFBRXFILFdBRDNDO0FBRUpqRixnQkFBUSxLQUFLcEcsQ0FBTCxDQUFPaXZCLGNBQVAsQ0FBc0Jod0IsQ0FBdEIsR0FBd0IsS0FBS2UsQ0FBTCxDQUFPK3VCLElBQS9CLEdBQW9DOXZCLENBQXBDLEdBQXNDK0UsRUFBRXNIO0FBRjVDLE9BQU47QUFJRCxLQU5ELE1BT0s7QUFDSG5KLFlBQU07QUFDSmdFLGVBQU9uQyxFQUFFcUgsV0FETDtBQUVKakYsZ0JBQVFwQyxFQUFFc0g7QUFGTixPQUFOO0FBSUQ7QUFDRCxXQUFPbkosR0FBUDtBQUNELEc7O3dCQUVEbWtDLGlCLDhCQUFrQnRpQyxDLEVBQUc7QUFDbkIsUUFBR0EsRUFBRXFKLEtBQUYsS0FBVSxpQkFBVixJQUErQnJKLEVBQUVxSixLQUFGLEtBQVUsU0FBNUMsRUFBdUQ7QUFDckRySixRQUFFcUosS0FBRixHQUFVLGlCQUFWO0FBQ0EsV0FBSzQzQixXQUFMLENBQWlCbG1DLElBQWpCLENBQXNCaUYsQ0FBdEI7QUFDQTtBQUNEO0FBQ0YsRzs7d0JBRUR5aEMsaUIsZ0NBQW9CO0FBQ2xCLFFBQUcsS0FBS1gsUUFBUixFQUFrQjtBQUNoQixVQUFNOWtDLElBQUksS0FBS0EsQ0FBZjtBQUNBLFVBQUcsQ0FBQyxLQUFLa25DLFNBQVQsRUFBb0I7QUFDbEIsWUFBR2xuQyxFQUFFdVYsbUJBQUYsSUFBeUIsQ0FBQyxLQUFLNFEsSUFBTCxDQUFVeUwsWUFBVixFQUE3QixFQUF1RDtBQUNyRCxjQUFJdUgsZUFBSjtBQUFBLGNBQVlVLFlBQVo7QUFDQSxnQ0FBYSxLQUFLb0wsV0FBbEIseUhBQStCO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQSxnQkFBdkJqaEMsR0FBdUI7O0FBQzdCLGdCQUFHLENBQUNtMUIsTUFBRCxJQUFXbjFCLElBQUVraUMsUUFBRixFQUFkLEVBQTRCO0FBQzFCL00sdUJBQVNuMUIsR0FBVDtBQUNEO0FBQ0QsZ0JBQUdBLElBQUU0aUMsS0FBRixFQUFILEVBQWM7QUFDWi9NLG9CQUFNNzFCLEdBQU47QUFDQTtBQUNEO0FBQ0Y7QUFDRCxlQUFLa2pDLFNBQUwsR0FBaUJyTixPQUFPVixNQUF4Qjs7QUFFQSxjQUFHLEtBQUtFLFFBQUwsTUFBbUJyNUIsRUFBRXNWLDJCQUFyQixJQUFvRCxDQUFDLEtBQUsrakIsUUFBTCxFQUFELElBQW9CcjVCLEVBQUVxVixtQkFBN0UsRUFBa0c7QUFDaEcsZ0JBQUcsQ0FBQyxLQUFLNnhCLFNBQVQsRUFBb0I7QUFDbEIsa0JBQU1FLEtBQUssS0FBS2poQixJQUFMLENBQVV5USxnQkFBVixFQUFYO0FBQUEsa0JBQXlDeVEsT0FBTyxFQUFoRDtBQUNBLG9DQUFhLEtBQUtwQyxXQUFsQix5SEFBK0I7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBLG9CQUF2QmpoQyxDQUF1Qjs7QUFDN0Isb0JBQU1nVixLQUFLb3VCLEdBQUdoWSxXQUFILEdBQWVwckIsRUFBRXhDLENBQTVCO0FBQ0Esb0JBQUcsQ0FBQzZsQyxLQUFLcnVCLEVBQUwsQ0FBRCxJQUFhOVksS0FBS00sR0FBTCxDQUFTNm1DLEtBQUtydUIsRUFBTCxFQUFTeFgsQ0FBVCxHQUFXNGxDLEdBQUdoWSxXQUF2QixJQUFvQ2x2QixLQUFLTSxHQUFMLENBQVN3RCxFQUFFeEMsQ0FBRixHQUFJNGxDLEdBQUdoWSxXQUFoQixDQUFwRCxFQUFrRjtBQUNoRmlZLHVCQUFLcnVCLEVBQUwsSUFBV2hWLENBQVg7QUFDRDtBQUNELHFCQUFLa2pDLFNBQUwsR0FBaUJHLEtBQUtELEdBQUcvWCxTQUFILEtBQWUsQ0FBcEIsS0FBMEJnWSxLQUFLRCxHQUFHL1gsU0FBSCxLQUFlLENBQXBCLENBQTNDO0FBQ0Q7QUFDRjtBQUNGO0FBQ0QsY0FBRyxLQUFLNlgsU0FBUixFQUFtQjtBQUNqQixnQkFBRyxLQUFLQSxTQUFMLENBQWViLE9BQWYsQ0FBdUIxOUIsV0FBMUIsRUFBdUM7QUFDckMsbUJBQUt5OUIscUJBQUwsQ0FBMkIsS0FBS2MsU0FBaEM7QUFDQSxtQkFBS0EsU0FBTCxDQUFlNzVCLEtBQWYsR0FBdUIsV0FBdkI7QUFDQSxrQkFBTXJKLEtBQUksS0FBSzhnQyxRQUFMLENBQWMsS0FBS0MsVUFBbkIsQ0FBVjtBQUNBLG1CQUFLQSxVQUFMLEdBQWtCLENBQUMsS0FBS0EsVUFBTCxHQUFnQixDQUFqQixJQUFvQixLQUFLRCxRQUFMLENBQWNsbkMsTUFBcEQ7QUFDQSxtQkFBS3NwQyxTQUFMLENBQWViLE9BQWYsQ0FBdUJ0L0IsZUFBdkIsQ0FBdUMvQyxHQUFFbkMsQ0FBekMsRUFBNENtQyxHQUFFMkMsR0FBOUM7QUFDQSxtQkFBS3VnQyxTQUFMLENBQWViLE9BQWYsQ0FBdUJyL0IsYUFBdkIsQ0FBcUMsS0FBSzgvQixjQUFMLENBQW9CLEtBQUtJLFNBQXpCLENBQXJDO0FBQ0EsbUJBQUtBLFNBQUwsQ0FBZWIsT0FBZixDQUF1QjE5QixXQUF2QjtBQUNELGFBUkQsTUFTSztBQUNILHFCQUFPLEtBQUt1K0IsU0FBWjtBQUNEO0FBQ0Y7QUFDRjtBQUNGLE9BekNELE1BMENLO0FBQ0gsYUFBSy9nQixJQUFMLENBQVU0TCxXQUFWO0FBQ0Q7QUFDRDVWLGlCQUFXLEtBQUtzcEIsaUJBQUwsQ0FBdUJsZCxJQUF2QixDQUE0QixJQUE1QixDQUFYLEVBQThDLEdBQTlDO0FBQ0Q7QUFDRixHOzt3QkFFRHdMLFksMkJBQWU7QUFDYixTQUFLdVQsY0FBTCxHQUFzQixJQUF0QjtBQUNELEc7O3dCQUVEelMsYSw0QkFBZ0I7QUFDZCxRQUFNMFMsVUFBVTlxQyxRQUFFNE0sS0FBRixDQUFRLFNBQVIsQ0FBaEI7QUFBQSxRQUFvQ20rQixXQUFXL3FDLFFBQUU0TSxLQUFGLENBQVEsVUFBUixDQUEvQztBQUNBLFNBQUt1N0IsU0FBTCxDQUFlMW5CLE9BQWYsQ0FBdUIsVUFBQ3VxQixHQUFELEVBQVE7QUFDN0IsVUFBTWorQixTQUFTaStCLElBQUksQ0FBSixDQUFmO0FBQ0EsVUFBR2orQixPQUFPNHRCLFFBQVYsRUFBb0I7QUFDbEI1dEIsZUFBTzR0QixRQUFQLENBQWdCbVEsT0FBaEIsRUFBeUIxK0IsU0FBekIsRUFBb0MsQ0FBcEMsRUFBdUMsQ0FBdkM7QUFDQVcsZUFBTzR0QixRQUFQLENBQWdCb1EsUUFBaEIsRUFBMEIzK0IsU0FBMUIsRUFBcUMsQ0FBckMsRUFBd0MsQ0FBeEM7QUFDRDtBQUNGLEtBTkQ7QUFPQSxTQUFLeStCLGNBQUwsR0FBc0IsS0FBdEI7QUFDRCxHOzt3QkFFRHZSLHNCLG1DQUF1QnYwQixDLEVBQUdpSSxDLEVBQUdwSyxJLEVBQU07QUFDakMsUUFBRyxLQUFLaW9DLGNBQVIsRUFBd0I7QUFDdEIsVUFBTUksV0FBVyxLQUFLQyxzQkFBTCxDQUE0QjkrQixTQUE1QixFQUF1Q3JILENBQXZDLENBQWpCO0FBQ0EsVUFBR2ttQyxTQUFTckIsT0FBWixFQUFxQjtBQUNiLFlBQUM3UixFQUFELEdBQU9uMUIsSUFBUCxDQUFDbTFCLEVBQUQ7QUFBQSxZQUFhb1QsS0FBYixHQUFxQkYsU0FBU3JCLE9BQVQsQ0FBaUJ6OUIsZUFBakIsRUFBckI7QUFDTixhQUFLZzhCLFNBQUwsQ0FBZTFuQixPQUFmLENBQXVCLFVBQUN1cUIsR0FBRCxFQUFRO0FBQzdCLGNBQU1qK0IsU0FBU2krQixJQUFJLENBQUosQ0FBZjtBQUNBLGNBQUdqK0IsT0FBTzR0QixRQUFWLEVBQW9CO0FBQ2xCNXRCLG1CQUFPNHRCLFFBQVAsQ0FBZ0IzdEIsQ0FBaEIsRUFBbUJtK0IsS0FBbkIsRUFBMEJwVCxHQUFHdDJCLENBQTdCLEVBQWdDczJCLEdBQUc5MkIsQ0FBbkM7QUFDRDtBQUNGLFNBTEQ7QUFNRDtBQUNGO0FBQ0YsRzs7d0JBRUQ4bkMsa0IsaUNBQXFCO0FBQUE7O0FBQ25CaHBCLFlBQVFDLE9BQVIsR0FBa0JzQixJQUFsQixDQUF1QixZQUFLO0FBQzFCLFVBQU1xcEIsS0FBSyxPQUFLamhCLElBQUwsQ0FBVXlRLGdCQUFWLEVBQVg7QUFDQSxhQUFLc08saUJBQUwsR0FBeUIsRUFBekI7QUFDQSxXQUFJLElBQUlwbUMsSUFBSSxDQUFSLEVBQVdrQixJQUFJb25DLEdBQUdoWSxXQUFILEdBQWlCZ1ksR0FBRy9YLFNBQXZDLEVBQWtEdndCLElBQUUsT0FBS2tCLENBQUwsQ0FBT3lWLFlBQTNELEVBQXlFLEVBQUUzVyxDQUFGLEVBQUtrQixLQUFHb25DLEdBQUcvWCxTQUFwRixFQUErRjtBQUM3RixlQUFLNlYsaUJBQUwsQ0FBdUJubUMsSUFBdkIsQ0FBNEJpQixDQUE1QjtBQUNEO0FBQ0QsNEJBQWEsT0FBS2tsQyxpQkFBbEIseUhBQXFDO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQSxZQUE3QmxsQyxFQUE2Qjs7QUFDbkMsWUFBR0EsTUFBRyxDQUFILElBQVFBLEtBQUUsT0FBS21tQixJQUFMLENBQVVpQyxRQUFWLEVBQVYsSUFBa0MsQ0FBQyxPQUFLd2MsU0FBTCxDQUFlem5CLEdBQWYsQ0FBbUJuZCxFQUFuQixDQUF0QyxFQUE2RDtBQUMzRCxpQkFBSytzQixJQUFMLENBQVVsa0IsU0FBVixFQUFxQjdJLEVBQXJCO0FBQ0Q7QUFDRjtBQUNGLEtBWEQ7QUFZRCxHOzt3QkFFRDZtQyxXLHdCQUFZN2lDLEMsRUFBR295QixRLEVBQVU7QUFDdkIsU0FBS3dPLFNBQUwsQ0FBZTFuQixPQUFmLENBQXVCLFVBQUN6VCxDQUFELEVBQU07QUFDM0IsVUFBTW8rQixLQUFLcCtCLEVBQUUsQ0FBRixDQUFYO0FBQ0EsVUFBR3pGLE1BQUk2akMsRUFBSixJQUFVQSxHQUFHelIsUUFBSCxLQUFjQSxRQUEzQixFQUFxQztBQUNuQyxlQUFPeVIsR0FBR3pSLFFBQVY7QUFDRDtBQUNGLEtBTEQ7QUFNQSxRQUFHQSxZQUFZQSxhQUFXcHlCLEVBQUVveUIsUUFBNUIsRUFBc0M7QUFDcENweUIsUUFBRW95QixRQUFGLEdBQWFBLFFBQWI7QUFDQSxXQUFLNlAsYUFBTCxDQUFtQmppQyxDQUFuQjtBQUNEO0FBQ0YsRzs7d0JBRURpaUMsYSwwQkFBY2ppQyxDLEVBQUc7QUFDZkEsTUFBRW95QixRQUFGLENBQVcxb0IsR0FBWCxHQUFpQjFKLEVBQUVncEIsT0FBRixDQUFVdGxCLEtBQVYsR0FBaUIxRCxFQUFFZ3BCLE9BQW5CLEdBQTZCLEtBQUtzTixnQkFBTCxHQUF1QixLQUFLZ0wsT0FBTCxDQUFhdGhDLEVBQUVxQyxLQUFmLEVBQXNCMm1CLE9BQTdDLEdBQXNELElBQXBHO0FBQ0EsUUFBRyxDQUFDaHBCLEVBQUVveUIsUUFBRixDQUFXMW9CLEdBQWYsRUFBb0I7QUFDbEIxSixRQUFFb3lCLFFBQUYsQ0FBVy92QixLQUFYLEdBQW1CLElBQUl2SyxZQUFNa3JDLEtBQVYsQ0FBZ0JoakMsRUFBRXFDLEtBQWxCLENBQW5CO0FBQ0Q7QUFDRHJDLE1BQUVveUIsUUFBRixDQUFXeG5CLFdBQVgsR0FBeUIsSUFBekI7QUFDRCxHOzt3QkFFRCs0QixzQixtQ0FBdUJ2UixRLEVBQVU1MEIsQyxFQUFHO0FBQ2xDLFFBQUlnSSxTQUFTLEtBQUtvN0IsU0FBTCxDQUFlem5CLEdBQWYsQ0FBbUIzYixDQUFuQixDQUFiO0FBQ0EsUUFBRyxDQUFDZ0ksTUFBSixFQUFZO0FBQ1ZBLGVBQVMsS0FBS3VqQixJQUFMLENBQVVxSixRQUFWLEVBQW9CNTBCLENBQXBCLENBQVQ7QUFDRCxLQUZELE1BR0s7QUFDSCxXQUFLcWxDLFdBQUwsQ0FBaUJyOUIsTUFBakIsRUFBeUI0c0IsUUFBekI7QUFDRDs7QUFFRCxXQUFPNXNCLE1BQVA7QUFDRCxHOzt3QkFFRHVGLFUsdUJBQVdxbkIsUSxFQUFVNTBCLEMsRUFBRztBQUN0QixTQUFLbW1DLHNCQUFMLENBQTRCdlIsUUFBNUIsRUFBc0M1MEIsQ0FBdEM7QUFDRCxHOzs7OztrQkFsYWtCK3RCLFc7Ozs7Ozs7Ozs7O0FDTnJCOzs7O0FBQ0E7Ozs7Ozs7Ozs7OztJQUVxQnRGLG1COzs7QUFFbkIsK0JBQVl4ZSxHQUFaLEVBQWlCSyxPQUFqQixFQUEwQkMsS0FBMUIsRUFBaUM7QUFBQTs7QUFBQSxpREFDL0IsNkJBQU1ELE9BQU4sRUFBZUMsS0FBZixDQUQrQjs7QUFFL0IsVUFBS2llLEdBQUwsR0FBVyxJQUFJckksYUFBSixDQUFRbFcsR0FBUixDQUFYO0FBQ0EsVUFBS3E4QixlQUFMLEdBQXVCO0FBQ3JCcCtCLFlBQU0sS0FEZTtBQUVyQitCLFdBQUssTUFBS3VlLEdBRlc7QUFHckIrYyxtQkFBYTtBQUhRLEtBQXZCO0FBS0EsVUFBS2w2QixLQUFMLEdBQWE7QUFDWEMsb0JBQWMsTUFBS0EsWUFBTCxDQUFrQnliLElBQWxCO0FBREgsS0FBYjtBQUdBLFVBQUt5QixHQUFMLENBQVN0RyxVQUFULENBQW9CLE1BQUs3SSxJQUFMLENBQVUwTixJQUFWLE9BQXBCO0FBWCtCO0FBWWhDOztnQ0FFRHRoQixPLHNCQUFVO0FBQ1IsU0FBSytpQixHQUFMLENBQVMvaUIsT0FBVDtBQUNBLGdDQUFNQSxPQUFOO0FBQ0QsRzs7Z0NBRUQ0VCxJLGlCQUFLeUYsTyxFQUFTO0FBQUE7O0FBQ1osUUFBTTlULFFBQVEsS0FBS3dkLEdBQUwsQ0FBU2hILFdBQVQsRUFBZDtBQUNBLFNBQUt6VyxVQUFMLENBQWdCQyxLQUFoQjtBQUNBLFFBQUdBLFFBQU0sQ0FBVCxFQUFZO0FBQ1Y4VCxjQUFRb0MsT0FBUixDQUFnQixDQUFoQixFQUNBM0UsSUFEQSxDQUNLLFVBQUN6UixJQUFELEVBQVM7QUFDWixZQUFNeTdCLFdBQVd6N0IsS0FBSzA3QixXQUFMLENBQWlCLEVBQUM1L0IsT0FBTyxDQUFSLEVBQWpCLENBQWpCO0FBQUEsWUFBK0M2SCxPQUFPLEVBQUM5SixPQUFPNGhDLFNBQVM1aEMsS0FBakIsRUFBd0JDLFFBQVEyaEMsU0FBUzNoQyxNQUF6QyxFQUF0RDtBQUNBLGVBQUtnRyxTQUFMLENBQWU2RCxLQUFLOUosS0FBcEIsRUFBMkI4SixLQUFLN0osTUFBaEM7QUFDQSxlQUFLMkcsS0FBTDtBQUNELE9BTEQsRUFNQTRWLEtBTkEsQ0FNTSxVQUFDbFosQ0FBRCxFQUFNO0FBQ1Z4SSxnQkFBUXVhLEtBQVIsQ0FBYy9SLENBQWQ7QUFDRCxPQVJEO0FBU0QsS0FWRCxNQVdLO0FBQ0gsV0FBS0csS0FBTCxHQUFhLEtBQUtvQyxRQUFsQjtBQUNBLFdBQUtlLEtBQUw7QUFDRDtBQUNGLEc7O2dDQUVERCxZLHlCQUFhdEwsQyxFQUFHO0FBQ2QsV0FBTyxLQUFLc21DLGVBQVo7QUFDRCxHOzs7RUEzQzhDajhCLDBCOztrQkFBNUJvZSxtQjs7Ozs7Ozs7Ozs7QUNIckI7Ozs7SUFFcUJmLGU7QUFFbkIsMkJBQVljLEdBQVosRUFBaUIvRCxJQUFqQixFQUF1QnpmLE9BQXZCLEVBQWdDO0FBQUE7O0FBQzlCLFNBQUt3akIsR0FBTCxHQUFXQSxHQUFYO0FBQ0EsU0FBSy9ELElBQUwsR0FBWUEsSUFBWjtBQUNBLFNBQUt6ZixPQUFMLEdBQWUsYUFBRUEsT0FBRixDQUFmO0FBQ0EsU0FBS3loQyxPQUFMLEdBQWUsRUFBZjtBQUNEOzs0QkFFRGhoQyxPLHNCQUFVLENBRVQsQzs7NEJBRUR5aUIsVSx1QkFBV3BKLE8sRUFBUztBQUNsQixTQUFLQSxPQUFMLEdBQWVBLE9BQWY7QUFDRCxHOzs0QkFFRDRuQixjLDJCQUFleCtCLEksRUFBTXkrQixXLEVBQWE7QUFDaEMsUUFBR3orQixTQUFPLFVBQVYsRUFBc0I7QUFDcEIsV0FBS3VjLElBQUwsQ0FBVStGLFFBQVYsQ0FBbUJtYyxXQUFuQjtBQUNELEtBRkQsTUFHSyxJQUFHeitCLFNBQU8sVUFBVixFQUFzQjtBQUN6QmxPLGFBQU80Z0MsSUFBUCxDQUFZK0wsV0FBWixFQUF5QixRQUF6QjtBQUNEO0FBQ0YsRzs7NEJBRURDLFkseUJBQWExK0IsSSxFQUFNeStCLFcsRUFBYTtBQUM5QixRQUFHLENBQUMsS0FBSzduQixPQUFOLElBQWlCLENBQUMsS0FBS0EsT0FBTCxDQUFhNVcsSUFBYixFQUFtQnkrQixXQUFuQixDQUFyQixFQUFzRDtBQUNwRCxXQUFLRCxjQUFMLENBQW9CeCtCLElBQXBCLEVBQTBCeStCLFdBQTFCO0FBQ0Q7QUFDRixHOzs0QkFFRGhmLFcsd0JBQVk5cEIsSSxFQUFNO0FBQUE7O0FBQ2hCLFFBQU1vSyxJQUFJcEssS0FBS2dwQyxLQUFmO0FBQUEsUUFBc0JDLE9BQU9qcEMsS0FBS2twQyxVQUFsQztBQUNBLFlBQU85K0IsRUFBRUMsSUFBVDtBQUNFLFdBQUssV0FBTDtBQUFrQjtBQUNoQixlQUFLdStCLE9BQUwsQ0FBYWxwQyxJQUFiLENBQWtCLEtBQUt5SCxPQUFMLENBQWFrVixHQUFiLENBQWlCLFFBQWpCLENBQWxCO0FBQ0EsZUFBS2xWLE9BQUwsQ0FBYWtWLEdBQWIsQ0FBaUIsUUFBakIsRUFBMkIsU0FBM0I7QUFDQTtBQUNEO0FBQ0QsV0FBSyxVQUFMO0FBQWlCO0FBQ2YsZUFBS2xWLE9BQUwsQ0FBYWtWLEdBQWIsQ0FBaUIsUUFBakIsRUFBMkIsS0FBS3VzQixPQUFMLENBQWFPLEdBQWIsTUFBc0IsRUFBakQ7QUFDQTtBQUNEO0FBQ0QsV0FBSyxVQUFMO0FBQ0EsV0FBSyxPQUFMO0FBQWM7QUFDWixjQUFHRixLQUFLdGpDLEdBQVIsRUFBYTtBQUNYLGlCQUFLb2pDLFlBQUwsQ0FBa0IsVUFBbEIsRUFBOEJFLEtBQUt0akMsR0FBbkM7QUFDRCxXQUZELE1BR0ssSUFBR3NqQyxLQUFLcGxCLElBQVIsRUFBYztBQUNqQixpQkFBSzhHLEdBQUwsQ0FBUy9HLGNBQVQsQ0FBd0JxbEIsS0FBS3BsQixJQUE3QixFQUNFbkYsSUFERixDQUNPLFVBQUNzRixNQUFEO0FBQUEscUJBQVcsTUFBSytrQixZQUFMLENBQWtCLFVBQWxCLEVBQThCL2tCLE1BQTlCLENBQVg7QUFBQSxhQURQO0FBRUQ7QUFDRDtBQUNEO0FBcEJIO0FBc0JELEc7Ozs7O2tCQXhEa0I2RixlOzs7Ozs7Ozs7OztBQ0ZyQjs7Ozs7Ozs7SUFFcUJ5RyxZO0FBQ25CLHdCQUFZN2lCLFlBQVosRUFBMEJOLEtBQTFCLEVBQWlDO0FBQUE7O0FBQy9CLFNBQUtNLFlBQUwsR0FBb0JBLFlBQXBCO0FBQ0EsU0FBS04sS0FBTCxHQUFhQSxLQUFiO0FBQ0EsU0FBS2ljLE9BQUwsR0FBZSxFQUFmO0FBQ0Q7O3lCQUVESCxRLHFCQUFTdUgsSyxFQUFPO0FBQ2QsU0FBS0EsS0FBTCxHQUFhQSxLQUFiO0FBQ0EsU0FBS2dCLE1BQUwsR0FBYyxJQUFkO0FBQ0EsU0FBSzRYLE9BQUw7QUFDRCxHOzt5QkFFREEsTyxzQkFBVTtBQUFBOztBQUNSLFFBQUcsS0FBSzVYLE1BQVIsRUFBZ0I7QUFDZCxVQUFNcEksVUFBVSxLQUFLQSxPQUFyQjtBQUNBLFdBQUtBLE9BQUwsR0FBZSxFQUFmO0FBQ0EsVUFBRyxLQUFLbUgsaUJBQVIsRUFBMkI7QUFDekIsNkJBQWVuSCxPQUFmLGtIQUF3QjtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQUEsY0FBaEJ0bUIsR0FBZ0I7O0FBQ3RCLGVBQUt5dEIsaUJBQUwsQ0FBdUIvbUIsU0FBdkIsRUFBa0MsRUFBbEM7QUFDRDtBQUNGO0FBQ0QsV0FBS2dvQixNQUFMLEdBQWMsS0FBZDtBQUNBLFdBQUt2a0IsSUFBTCxHQUFZLENBQVo7QUFDQSxXQUFLbzhCLEtBQUwsR0FBYXpzQixLQUFLQyxHQUFMLEVBQWI7QUFDQSxVQUFHLEtBQUsyVCxLQUFMLENBQVdqeUIsTUFBWCxHQUFrQixDQUFyQixFQUF3QjtBQUN0QixhQUFLNnFDLE9BQUw7QUFDRDtBQUNGLEtBZEQsTUFlSztBQUNILFVBQUcsS0FBS244QixJQUFMLEdBQVUsS0FBS0UsS0FBbEIsRUFBeUI7QUFDdkIsWUFBTWs4QixRQUFRLEtBQUtBLEtBQW5CO0FBQ0EsYUFBSzFkLElBQUwsQ0FBVSxLQUFLbGUsWUFBTCxDQUFrQixLQUFLUixJQUF2QixDQUFWLEVBQ0V5UixJQURGLENBQ08sVUFBQzRCLFFBQUQsRUFBYTtBQUNoQixjQUFHK29CLFVBQVUsTUFBS0EsS0FBbEIsRUFBeUI7QUFDdkIsZ0JBQUcvb0IsU0FBUy9oQixNQUFaLEVBQW9CO0FBQ2xCLG9CQUFLNnFCLE9BQUwsQ0FBYTFwQixJQUFiLENBQWtCO0FBQ2hCdU4sc0JBQU0sTUFBS0EsSUFESztBQUVoQnFUO0FBRmdCLGVBQWxCO0FBSUQ7QUFDRCxnQkFBRyxNQUFLaVEsaUJBQVIsRUFBMkI7QUFDekIsb0JBQUtBLGlCQUFMLENBQXVCLE1BQUt0akIsSUFBNUIsRUFBa0MsTUFBS3VqQixLQUF2QztBQUNEO0FBQ0QsY0FBRSxNQUFLdmpCLElBQVA7QUFDQSxrQkFBS204QixPQUFMO0FBQ0Q7QUFDRixTQWZIO0FBZ0JEO0FBQ0Y7QUFDRixHOzt5QkFFRHpkLEksaUJBQUsyYixFLEVBQUk7QUFBQTs7QUFDUCxRQUFJL0ksYUFBSjtBQUNBLFFBQUcrSSxHQUFHajlCLElBQUgsS0FBVSxLQUFiLEVBQW9CO0FBQ2xCazBCLGFBQU8sSUFBSXBoQixPQUFKLENBQVksVUFBQ0MsT0FBRCxFQUFZO0FBQzdCa3FCLFdBQUdsN0IsR0FBSCxDQUFPaVksVUFBUCxDQUFrQixZQUFLO0FBQ3JCLGNBQU1saUIsSUFBSW1sQyxHQUFHdGpCLE1BQUgsS0FBWXhhLFNBQVosR0FBdUIsT0FBS3lELElBQTVCLEdBQWtDcTZCLEdBQUd0akIsTUFBL0M7QUFDQSxjQUFHc2pCLEdBQUdsN0IsR0FBSCxDQUFPc1gsV0FBUCxDQUFtQnZoQixDQUFuQixNQUF3QixPQUEzQixFQUFvQztBQUNsQ2liLG9CQUFRLEVBQVI7QUFDRCxXQUZELE1BR0s7QUFDSGtxQixlQUFHbDdCLEdBQUgsQ0FBT2lYLE9BQVAsQ0FBZWxoQixDQUFmLEVBQ0F1YyxJQURBLENBQ0ssVUFBQ3pSLElBQUQsRUFBUztBQUNaQSxtQkFBS3E4QixjQUFMLEdBQ0E1cUIsSUFEQSxDQUNLLFVBQUM2cUIsV0FBRCxFQUFnQjtBQUNuQm5zQix3QkFBUSxJQUFJaUMsZ0JBQUosQ0FBV2txQixZQUFZQyxLQUFaLENBQWtCbjdCLEdBQWxCLENBQXNCLFVBQUNvN0IsSUFBRDtBQUFBLHlCQUFTQSxLQUFLN3BCLEdBQWQ7QUFBQSxpQkFBdEIsQ0FBWCxFQUFxRCxPQUFLNFEsS0FBMUQsRUFBaUUsRUFBQ3ZRLE1BQU0sS0FBUCxFQUFqRSxFQUFnRlEsV0FBaEYsRUFBUjtBQUNELGVBSEQ7QUFJRCxhQU5ELEVBT0E2QyxLQVBBLENBT007QUFBQSxxQkFBS2xHLFFBQVEsRUFBUixDQUFMO0FBQUEsYUFQTjtBQVFEO0FBQ0YsU0FmRDtBQWdCRCxPQWpCTSxDQUFQO0FBa0JELEtBbkJELE1Bb0JLO0FBQ0htaEIsYUFBT3BoQixRQUFRQyxPQUFSLENBQWdCLEVBQWhCLENBQVA7QUFDRDtBQUNELFdBQU9taEIsSUFBUDtBQUNELEc7Ozs7O2tCQTlFa0JqTyxZOzs7Ozs7Ozs7OztBQ0ZyQjs7Ozs7Ozs7SUFFcUI2VSxhO0FBQ25CLHlCQUFZdjNCLE1BQVosRUFBb0IybEIsS0FBcEIsRUFBMkJocEIsS0FBM0IsRUFBa0M7QUFBQTs7QUFDaEMsU0FBS3FELE1BQUwsR0FBY0EsTUFBZDtBQUNBLFFBQU1nRCxPQUFPMmlCLE1BQU0vaEIsVUFBTixFQUFiO0FBQ0EsU0FBS2s0QixLQUFMLEdBQWEsSUFBSW51QixrQkFBSixDQUFhM0ssS0FBSzlKLEtBQWxCLEVBQXlCOEosS0FBSzdKLE1BQTlCLEVBQXNDd0QsS0FBdEMsQ0FBYjs7QUFFQSxTQUFLaW5CLE1BQUwsQ0FBWStCLEtBQVo7QUFDQSxTQUFLM2xCLE1BQUwsQ0FBWSs3QixZQUFaLENBQXlCLEtBQUtELEtBQTlCO0FBQ0Q7OzBCQUVEOWhDLE8sc0JBQVU7QUFDUixTQUFLOGhDLEtBQUwsQ0FBVzloQyxPQUFYO0FBQ0EsU0FBS2dHLE1BQUwsQ0FBWWc4QixlQUFaLENBQTRCLEtBQUtGLEtBQWpDO0FBQ0QsRzs7MEJBRUQzc0IsUSx1QkFBVztBQUNULFdBQU8sS0FBSzJzQixLQUFMLENBQVczc0IsUUFBWCxFQUFQO0FBQ0QsRzs7MEJBRURFLEksbUJBQU87QUFDTCxXQUFPLEtBQUt5c0IsS0FBTCxDQUFXenNCLElBQVgsRUFBUDtBQUNELEc7OzBCQUVESSxJLG1CQUFPO0FBQ0wsV0FBTyxLQUFLcXNCLEtBQUwsQ0FBV3JzQixJQUFYLEVBQVA7QUFDRCxHOzswQkFFRHZiLEcsZ0JBQUl1YSxHLEVBQUtDLEksRUFBTUMsRSxFQUFJO0FBQ2pCLFNBQUttdEIsS0FBTCxDQUFXenRCLE9BQVgsQ0FBbUJJLEdBQW5CLEVBQXdCQyxJQUF4QixFQUE4QkMsRUFBOUI7QUFDRCxHOzswQkFFRGlWLE0sbUJBQU8rQixLLEVBQU87QUFDWixTQUFLQSxLQUFMLEdBQWFBLEtBQWI7QUFDQSxTQUFLQSxLQUFMLENBQVc3aEIsbUJBQVgsQ0FBK0IsS0FBS2c0QixLQUFMLENBQVdHLFFBQTFDO0FBQ0EsU0FBS3RXLEtBQUwsQ0FBVzNoQixtQkFBWCxDQUErQixLQUFLODNCLEtBQUwsQ0FBV2oxQixRQUExQztBQUNELEc7Ozs7O2tCQW5Da0Iwd0IsYTs7Ozs7Ozs7Ozs7OztBQ0ZyQjs7Ozs7Ozs7SUFFcUI1VCxZO2VBRVp1WSxjLDJCQUFlbmxDLEMsRUFBRWhILEMsRUFBRWlELEMsRUFBRWczQixFLEVBQUk7QUFDOUIsUUFBTXYzQixJQUFJMUMsSUFBRSxLQUFLNkIsQ0FBakI7QUFDQSxXQUFPLE1BQUksS0FBS00sQ0FBVCxHQUFXLEtBQUtpcUMsQ0FBaEIsSUFBbUIsS0FBRyxJQUFFbHBDLEtBQUt3VCxHQUFMLENBQVMsTUFBSWhVLElBQUUsS0FBSzJwQyxFQUFYLENBQVQsQ0FBTCxJQUErQixDQUFsRCxJQUFxRCxLQUFLbHFDLENBQUwsR0FBTyxFQUFQLEdBQVVjLENBQXRFO0FBQ0QsRzs7ZUFFTXcxQixtQixnQ0FBb0J6eEIsQyxFQUFFL0QsQyxFQUFFUCxDLEVBQUV1M0IsRSxFQUFJO0FBQ25DLFdBQU8sQ0FBUDtBQUNELEc7O3lCQUVEekIsaUIsOEJBQWtCeGYsSSxFQUFNc3pCLFcsRUFBYTtBQUNuQyxXQUFPMVksYUFBYXVZLGNBQWIsQ0FBNEI1Z0IsSUFBNUIsQ0FBaUM7QUFDdEM2Z0IsU0FBRyxLQUFLcHBDLENBQUwsQ0FBT21WLE9BRDRCO0FBRXRDaFcsU0FBRzZXLElBRm1DO0FBR3RDcXpCLFVBQUlDLGNBQVksS0FBS3RwQyxDQUFMLENBQU9uQixDQUhlO0FBSXRDQSxTQUFHLEtBQUttQixDQUFMLENBQU9uQjtBQUo0QixLQUFqQyxDQUFQO0FBTUQsRzs7ZUFFTTYxQixZLHlCQUFhMXdCLEMsRUFBRWhILEMsRUFBRWlELEMsRUFBRWczQixFLEVBQUk7QUFDNUIsV0FBT2p6QixFQUFFdWxDLElBQUYsR0FBT3ZsQyxFQUFFN0UsQ0FBVCxJQUFZLEtBQUc2RSxFQUFFb2xDLENBQUwsR0FBT25TLEVBQVAsR0FBVSxLQUFHaDNCLENBQUgsSUFBTSxJQUFFQyxLQUFLd1QsR0FBTCxDQUFTLE1BQUl4VCxLQUFLTSxHQUFMLENBQVN5MkIsRUFBVCxDQUFiLENBQVIsQ0FBdEIsQ0FBUDtBQUNELEc7O2VBRU11UyxrQiwrQkFBbUJ4bEMsQyxFQUFFaEgsQyxFQUFFaUQsQyxFQUFFZzNCLEUsRUFBSTtBQUNsQyxXQUFPLE1BQUksS0FBRyxJQUFFLzJCLEtBQUt3VCxHQUFMLENBQVMsTUFBSTFXLElBQUUsS0FBSzhDLEVBQVgsSUFBZWtFLEVBQUVuRixDQUExQixDQUFMLElBQW1DLENBQXZDLENBQVA7QUFDRCxHOztlQUVNODFCLHFCLGtDQUFzQjJVLFcsRUFBYTtBQUN4QyxXQUFPMVksYUFBYTRZLGtCQUFiLENBQWdDamhCLElBQWhDLENBQXFDO0FBQzFDem9CLFVBQUl3cEM7QUFEc0MsS0FBckMsQ0FBUDtBQUdELEc7O0FBRUQsMEJBQTJEO0FBQUEsUUFBL0N6cUMsQ0FBK0MsdUVBQTdDLENBQTZDO0FBQUEsUUFBMUNzVyxPQUEwQyx1RUFBbEMsQ0FBa0M7QUFBQSxRQUEvQjFCLGVBQStCLHVFQUFmLElBQWU7QUFBQSxRQUFUZzJCLEdBQVMsdUVBQUwsR0FBSzs7QUFBQTs7QUFDekQsU0FBS3pwQyxDQUFMLEdBQVM7QUFDUG5CLFVBRE87QUFFUDRVLHNDQUZPO0FBR1AvVCxTQUFHUSxLQUFLeVEsRUFBTCxHQUFROVIsQ0FISjtBQUlQNnFDLGVBQVMsSUFBRUQsR0FKSjtBQUtQdDBCLHNCQUxPO0FBTVB3MEIsY0FBUSxRQUFNOXFDLENBTlA7QUFPUCtxQyxZQUFNLEdBUEM7QUFRUEMsZ0JBQVUsRUFSSDtBQVNQQyxxQkFBZTtBQVRSLEtBQVQ7QUFXQSxTQUFLOXNCLEVBQUwsR0FBVSxFQUFWO0FBQ0Q7O3lCQUVEL1YsTyxzQkFBVTtBQUNSLFNBQUsrVixFQUFMLEdBQVUsRUFBVjtBQUNELEc7O3lCQUVEeE0sTyxzQkFBVTtBQUNSLFdBQU8sS0FBS3dNLEVBQUwsQ0FBUXBmLE1BQWY7QUFDRCxHOzt5QkFFRDh6QixTLHNCQUFVMWIsSSxFQUFNNUksSyxFQUFPbXBCLFEsRUFBVTNnQixXLEVBQWE0Z0IsWSxFQUFjTSxXLEVBQWFDLFMsRUFBbUQ7QUFBQSxRQUF4Q2dULFFBQXdDLHVFQUEvQjtBQUFBLGFBQUssQ0FBTDtBQUFBLEtBQStCO0FBQUEsUUFBdkJDLGNBQXVCLHVFQUFSO0FBQUEsYUFBSyxDQUFMO0FBQUEsS0FBUTs7QUFDMUgsUUFBTTlSLEtBQUs7QUFDVGxmLFVBQUluVixvQkFBVW5ELFNBQVYsRUFESztBQUVUdkIsU0FBRzZXLElBRk07QUFHVC9WLFNBQUdzMkIsUUFITTtBQUlUNzJCLFNBQUcwTixRQUFNLEtBQUtwTixDQUFMLENBQU9uQixDQUpQO0FBS1Q0QyxTQUFHc29DLFFBTE07QUFNVEUsVUFBSUQsY0FOSztBQU9UL1MsVUFBSVQsWUFQSztBQVFUK1MsWUFBTTN6QixXQVJHO0FBU1RraEIsOEJBVFM7QUFVVEM7QUFWUyxLQUFYO0FBWUEsUUFBSWo0QixJQUFJLEtBQUtrZSxFQUFMLENBQVFzTyxTQUFSLENBQWtCLFVBQUN0bkIsQ0FBRDtBQUFBLGFBQU1rMEIsR0FBR3g0QixDQUFILElBQU1zRSxFQUFFdEUsQ0FBZDtBQUFBLEtBQWxCLENBQVI7QUFDQVosUUFBSSxDQUFDQSxDQUFELEdBQUlBLENBQUosR0FBTyxLQUFLa2UsRUFBTCxDQUFRcGYsTUFBbkI7QUFDQSxTQUFLb2YsRUFBTCxDQUFRc0csTUFBUixDQUFleGtCLENBQWYsRUFBa0IsQ0FBbEIsRUFBcUJvNUIsRUFBckI7QUFDQSxXQUFPQSxHQUFHbGYsRUFBVjtBQUNELEc7O3lCQUVEa3hCLGMsMkJBQWV6a0MsSSxFQUFNO0FBQ25CLFFBQU1pSSxNQUFNO0FBQ1ZzSSxZQUFNLEdBREk7QUFFVnVnQixnQkFBVSxHQUZBO0FBR1YzZ0IsbUJBQWEsTUFISDtBQUlWNGdCLG9CQUFjLElBSko7QUFLVk0sbUJBQWEsYUFMSDtBQU1WQyxpQkFBVyxXQU5EO0FBT1ZnVCxnQkFBVSxHQVBBO0FBUVZDLHNCQUFnQjtBQVJOLEtBQVo7QUFVQSxXQUFPdDhCLElBQUlqSSxJQUFKLENBQVA7QUFDRCxHOzt5QkFFRDh2QixXLHdCQUFZdmMsRSxFQUFJdlQsSSxFQUFNMlMsSyxFQUFPO0FBQzNCLFFBQU1wVSxJQUFJLEtBQUtnWixFQUFMLENBQVFnTyxJQUFSLENBQWEsVUFBQ2huQixDQUFEO0FBQUEsYUFBTUEsRUFBRWdWLEVBQUYsS0FBT0EsRUFBYjtBQUFBLEtBQWIsQ0FBVjtBQUNBLFFBQUd2VCxTQUFTLE9BQVosRUFBcUI7QUFDbkJ6QixRQUFFdEUsQ0FBRixHQUFNMFksUUFBTSxLQUFLcFksQ0FBTCxDQUFPbkIsQ0FBbkI7QUFDRCxLQUZELE1BR0s7QUFDSG1GLFFBQUUsS0FBS2ttQyxjQUFMLENBQW9CemtDLElBQXBCLENBQUYsSUFBK0IyUyxLQUEvQjtBQUNEO0FBQ0YsRzs7eUJBRURrYixXLHdCQUFZdGEsRSxFQUFJdlQsSSxFQUFNO0FBQ3BCLFFBQU16QixJQUFJLEtBQUtnWixFQUFMLENBQVFnTyxJQUFSLENBQWEsVUFBQ2huQixDQUFEO0FBQUEsYUFBTUEsRUFBRWdWLEVBQUYsS0FBT0EsRUFBYjtBQUFBLEtBQWIsQ0FBVjtBQUNBLFFBQUlaLGNBQUo7QUFDQSxRQUFHM1MsU0FBUyxPQUFaLEVBQXFCO0FBQ25CMlMsY0FBUXBVLEVBQUV0RSxDQUFGLEdBQUksS0FBS00sQ0FBTCxDQUFPbkIsQ0FBbkI7QUFDRCxLQUZELE1BR0s7QUFDSHVaLGNBQVFwVSxFQUFFLEtBQUtrbUMsY0FBTCxDQUFvQnprQyxJQUFwQixDQUFGLENBQVI7QUFDRDtBQUNELFdBQU8yUyxLQUFQO0FBQ0QsRzs7eUJBRURnZixRLHFCQUFTK1MsQyxFQUFHO0FBQ1YsUUFBSTNzQyxJQUFFLENBQU47QUFBQSxRQUNJQyxLQUFHLEtBQUt1QyxDQUFMLENBQU8wcEMsT0FEZDtBQUFBLFFBRUlVLFVBQVEsQ0FGWjtBQUFBLFFBR0lDLEtBQUcsQ0FIUDs7QUFLQSxXQUFNN3NDLElBQUUyc0MsQ0FBRixJQUFPRSxLQUFHLEtBQUtycUMsQ0FBTCxDQUFPOHBDLGFBQXZCLEVBQXNDO0FBQ3BDLFVBQUdyc0MsS0FBRzBzQyxJQUFFM3NDLENBQVIsRUFBVztBQUNUQyxhQUFLMHNDLElBQUUzc0MsQ0FBUDtBQUNEO0FBQ0QsVUFBTThzQyxNQUFNLEtBQUtDLFNBQUwsQ0FBZSxLQUFLdnRCLEVBQXBCLEVBQXdCdmYsRUFBeEIsQ0FBWjtBQUFBLFVBQ00rc0MsS0FBSyxLQUFLQyxjQUFMLENBQW9CSCxHQUFwQixDQURYO0FBRUEsVUFBR0UsR0FBRy9xQyxHQUFILEdBQU8sQ0FBUCxJQUFZMnFDLFVBQVEsS0FBS3BxQyxDQUFMLENBQU82cEMsUUFBOUIsRUFBd0M7QUFDdENwc0MsY0FBSSxDQUFKO0FBQ0EsVUFBRTJzQyxPQUFGO0FBQ0QsT0FIRCxNQUlLO0FBQ0gsWUFBR0ksR0FBRy9xQyxHQUFILEtBQVMsQ0FBWixFQUFlO0FBQ2IsY0FBTWlyQyxPQUFPLEtBQUtDLGNBQUwsQ0FBb0JMLElBQUlFLEdBQUdyOUIsSUFBSCxHQUFRLENBQVosQ0FBcEIsRUFBb0NtOUIsSUFBSUUsR0FBR3I5QixJQUFQLENBQXBDLENBQWI7QUFDQW05QixjQUFJRSxHQUFHcjlCLElBQUgsR0FBUSxDQUFaLElBQWlCdTlCLEtBQUssQ0FBTCxDQUFqQjtBQUNBSixjQUFJRSxHQUFHcjlCLElBQVAsSUFBZXU5QixLQUFLLENBQUwsQ0FBZjtBQUNELFNBSkQsTUFLSyxJQUFHRixHQUFHL3FDLEdBQUgsR0FBTyxDQUFWLEVBQWE7QUFDaEIsY0FBTW1yQyxLQUFLLEVBQVg7QUFDQSxjQUFJejlCLE9BQU8sQ0FBQyxDQUFaO0FBQ0EsK0JBQWFxOUIsR0FBRy9uQixHQUFoQixrSEFBcUI7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBLGdCQUFiM2pCLENBQWE7O0FBQ25CLGdCQUFHQSxJQUFFcU8sSUFBRixHQUFPLENBQVYsRUFBYTtBQUNYeTlCLGlCQUFHN3JDLElBQUgsQ0FBUSxFQUFSO0FBQ0Q7QUFDRDZyQyxlQUFHQSxHQUFHaHRDLE1BQUgsR0FBVSxDQUFiLEVBQWdCbUIsSUFBaEIsQ0FBcUJELENBQXJCO0FBQ0FxTyxtQkFBT3JPLENBQVA7QUFDRDtBQUNELGdDQUFhOHJDLEVBQWIseUhBQWlCO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQSxnQkFBVHhCLENBQVM7O0FBQ2YsZ0JBQUlqbUMsV0FBSjtBQUFBLGdCQUFRMG5DLFdBQVI7QUFDQSxnQkFBR1AsSUFBSWxCLEVBQUUsQ0FBRixDQUFKLEVBQVUxcEMsQ0FBVixHQUFZUSxLQUFLeVEsRUFBTCxHQUFRLENBQVIsR0FBVSxLQUFLM1EsQ0FBTCxDQUFPbkIsQ0FBaEMsRUFBbUM7QUFDakNzRSxtQkFBSyxDQUFDLENBQU47QUFDQTBuQyxtQkFBS3pCLEVBQUVBLEVBQUV4ckMsTUFBRixHQUFTLENBQVgsQ0FBTDtBQUNELGFBSEQsTUFJSztBQUNIdUYsbUJBQUssQ0FBTDtBQUNBMG5DLG1CQUFLekIsRUFBRSxDQUFGLENBQUw7QUFDRDtBQUNELGlCQUFJLElBQUl0cUMsTUFBRStyQyxFQUFWLEVBQWMvckMsTUFBRXdyQyxJQUFJMXNDLE1BQU4sSUFBZ0JrQixNQUFFLENBQUMsQ0FBakMsRUFBb0NBLE9BQUdxRSxFQUF2QyxFQUEyQztBQUN6QyxrQkFBTWEsSUFBSXNtQyxJQUFJeHJDLE1BQUVxRSxFQUFOLENBQVY7QUFDQSxrQkFBR2EsS0FBS2IsTUFBSWEsRUFBRXRFLENBQUYsR0FBSTRxQyxJQUFJeHJDLEdBQUosRUFBT1ksQ0FBZixLQUFtQixLQUFLTSxDQUFMLENBQU8ycEMsTUFBbEMsRUFBMEM7QUFDeEMzbEMsa0JBQUV0RSxDQUFGLEdBQUk0cUMsSUFBSXhyQyxHQUFKLEVBQU9ZLENBQVAsR0FBU3lELEtBQUcsQ0FBSCxHQUFLLEtBQUtuRCxDQUFMLENBQU8ycEMsTUFBekI7QUFDQSxvQkFBRzNsQyxFQUFFdEUsQ0FBRixHQUFJLEtBQUtNLENBQUwsQ0FBT04sQ0FBWCxJQUFnQnNFLEVBQUV0RSxDQUFGLEdBQUksQ0FBdkIsRUFBMEI7QUFDeEJzRSxvQkFBRXRFLENBQUYsR0FBTXNFLEVBQUV0RSxDQUFGLEdBQUksS0FBS00sQ0FBTCxDQUFPTixDQUFYLEdBQWMsS0FBS00sQ0FBTCxDQUFPTixDQUFyQixHQUF3QixDQUE5QjtBQUNBc0Usb0JBQUVpekIsRUFBRixHQUFPLENBQVA7QUFDQWp6QixvQkFBRS9ELENBQUYsR0FBSSxDQUFKO0FBQ0FnQiwwQkFBUXVhLEtBQVIsQ0FBYyxlQUFkO0FBQ0Q7QUFDRixlQVJELE1BU0s7QUFDSDtBQUNEO0FBQ0Y7QUFDRjtBQUNGO0FBQ0QsYUFBS3dCLEVBQUwsR0FBVXN0QixHQUFWO0FBQ0EsYUFBS1EsNEJBQUw7QUFDQXR0QyxhQUFHQyxFQUFIO0FBQ0FBLGFBQUcsS0FBS3VDLENBQUwsQ0FBTzBwQyxPQUFWO0FBQ0FVLGtCQUFRLENBQVI7QUFDRDtBQUNELFFBQUVDLEVBQUY7QUFDRDs7QUFFRCxTQUFLVSxhQUFMO0FBQ0QsRzs7eUJBRURBLGEsNEJBQWdCO0FBQ2QsUUFBTVQsTUFBTSxFQUFaO0FBQUEsUUFBZ0JsaEMsU0FBUyxDQUFDLEVBQUQsRUFBSSxFQUFKLENBQXpCO0FBQ0EsMEJBQWEsS0FBSzRULEVBQWxCLHlIQUFzQjtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQUEsVUFBZGhaLENBQWM7O0FBQ3BCLFVBQUdBLEVBQUU4eUIsV0FBTCxFQUFrQjtBQUNoQjl5QixVQUFFOHlCLFdBQUYsQ0FBYzl5QixFQUFFdEUsQ0FBRixHQUFJLEtBQUtNLENBQUwsQ0FBT25CLENBQXpCLEVBQTRCbUYsRUFBRWl6QixFQUE5QjtBQUNEO0FBQ0QsVUFBRyxDQUFDanpCLEVBQUV0RSxDQUFGLEtBQU0sS0FBS00sQ0FBTCxDQUFPTixDQUFiLElBQWtCc0UsRUFBRXRFLENBQUYsS0FBTSxDQUF6QixLQUErQnNFLEVBQUUvRCxDQUFGLEtBQU0sQ0FBeEMsRUFBMkM7QUFDekMsWUFBRytELEVBQUUreUIsU0FBRixLQUFnQmx1QixTQUFuQixFQUE4QjtBQUM1Qk8saUJBQU8sQ0FBQ3BGLEVBQUV0RSxDQUFGLEtBQU0sS0FBS00sQ0FBTCxDQUFPTixDQUFkLElBQWlCLENBQXhCLEVBQTJCWCxJQUEzQixDQUFnQ2lGLENBQWhDO0FBQ0Q7QUFDRixPQUpELE1BS0s7QUFDSHNtQyxZQUFJdnJDLElBQUosQ0FBU2lGLENBQVQ7QUFDRDtBQUNGO0FBQ0QsU0FBS2daLEVBQUwsR0FBVXN0QixHQUFWO0FBQ0EsMEJBQWFsaEMsT0FBTyxDQUFQLEVBQVU5SyxPQUFWLEVBQWIseUhBQWtDO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQSxVQUExQjBGLEVBQTBCOztBQUNoQ0EsU0FBRSt5QixTQUFGLENBQVk3MkIsS0FBS3lRLEVBQWpCLEVBQXFCM00sR0FBRWl6QixFQUF2QjtBQUNEO0FBQ0QsMEJBQWE3dEIsT0FBTyxDQUFQLENBQWIseUhBQXdCO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQSxVQUFoQnBGLEdBQWdCOztBQUN0QkEsVUFBRSt5QixTQUFGLENBQVksQ0FBWixFQUFlL3lCLElBQUVpekIsRUFBakI7QUFDRDtBQUNGLEc7O3lCQUVENlQsNEIsMkNBQStCO0FBQzdCLFFBQUcsS0FBSzl0QixFQUFMLENBQVFwZixNQUFYLEVBQW1CO0FBQ2pCLFVBQU1vZixtQkFFQyxLQUFLQSxFQUFMLENBQVEsQ0FBUixDQUZEO0FBR0Z0ZCxXQUFHLENBSEQ7QUFJRlAsV0FBRyxLQUFLYSxDQUFMLENBQU80cEMsSUFKUjtBQUtGM1MsWUFBSTtBQUxGLGlCQU9ELEtBQUtqYSxFQVBKLGdCQVNDLEtBQUtBLEVBQUwsQ0FBUSxDQUFSLENBVEQ7QUFVRnRkLFdBQUcsT0FBSyxLQUFLTSxDQUFMLENBQU9OLENBVmI7QUFXRlAsV0FBRyxLQUFLYSxDQUFMLENBQU80cEMsSUFYUjtBQVlGM1MsWUFBSTtBQVpGLFVBQU47O0FBZ0JBLFdBQUksSUFBSW40QixJQUFFLENBQVYsRUFBYUEsSUFBRWtlLEdBQUdwZixNQUFsQixFQUEwQixFQUFFa0IsQ0FBNUIsRUFBK0I7QUFDN0IsWUFBTTlCLElBQUVnZ0IsR0FBR2xlLElBQUUsQ0FBTCxDQUFSO0FBQUEsWUFBaUI1QixJQUFFOGYsR0FBR2xlLENBQUgsQ0FBbkI7QUFBQSxZQUNNa3NDLEtBQUdodUMsRUFBRTBDLENBQUYsR0FBSSxLQUFLTSxDQUFMLENBQU95VCxlQUFQLEdBQXVCelcsRUFBRWk2QixFQUF6QixHQUE0QixLQUFLajNCLENBQUwsQ0FBT25CLENBRGhEO0FBQUEsWUFFTXlWLEtBQUdwWCxFQUFFd0MsQ0FBRixHQUFJLEtBQUtNLENBQUwsQ0FBT3lULGVBQVAsR0FBdUJ2VyxFQUFFKzVCLEVBQXpCLEdBQTRCLEtBQUtqM0IsQ0FBTCxDQUFPbkIsQ0FGaEQ7QUFHQSxZQUFHLE9BQUttc0MsRUFBTCxHQUFRMTJCLEVBQVIsSUFBY3RYLEVBQUVpNkIsRUFBRixHQUFLLzVCLEVBQUUrNUIsRUFBeEIsRUFBNEI7QUFDMUIsY0FBTWdVLE1BQU1qdUMsRUFBRWk2QixFQUFGLEdBQUsvNUIsRUFBRSs1QixFQUFuQjtBQUFBLGNBQXVCaVUsS0FBR2x1QyxFQUFFbUMsQ0FBRixHQUFJbkMsRUFBRXVzQyxJQUFOLEdBQVdyc0MsRUFBRWlDLENBQUYsR0FBSWpDLEVBQUVxc0MsSUFBM0M7QUFBQSxjQUFpRHhzQyxLQUFHQyxFQUFFbUMsQ0FBRixHQUFJbkMsRUFBRXVzQyxJQUFOLEdBQVcyQixFQUEvRDtBQUFBLGNBQW1FanVDLEtBQUdDLEVBQUVpQyxDQUFGLEdBQUlqQyxFQUFFcXNDLElBQU4sR0FBVzJCLEVBQWpGO0FBQ0FsdUMsWUFBRWk2QixFQUFGLEdBQUtqNkIsRUFBRWk2QixFQUFGLEdBQUtoNkIsS0FBR2d1QyxHQUFiO0FBQ0EvdEMsWUFBRSs1QixFQUFGLEdBQUsvNUIsRUFBRSs1QixFQUFGLEdBQUtsNkIsS0FBR2t1QyxHQUFiO0FBQ0Q7QUFDRjtBQUNGO0FBQ0YsRzs7eUJBRUROLGMsMkJBQWUzdEMsQyxFQUFHRSxDLEVBQUc7QUFDbkIsUUFBTWl1QyxLQUFJanVDLEVBQUVpQyxDQUFGLEdBQUluQyxFQUFFbUMsQ0FBaEI7QUFBQSxRQUNFaXNDLEtBQUssQ0FBQyxDQUFDcHVDLEVBQUVpRCxDQUFILEdBQUsvQyxFQUFFaUMsQ0FBUCxHQUFTbkMsRUFBRW1DLENBQUYsR0FBSW5DLEVBQUVpRCxDQUFmLEdBQWlCLElBQUUvQyxFQUFFaUMsQ0FBSixHQUFNakMsRUFBRStDLENBQTFCLElBQTZCa3JDLEVBRHBDO0FBQUEsUUFFRUUsS0FBSyxDQUFDbnVDLEVBQUVpQyxDQUFGLEdBQUlqQyxFQUFFK0MsQ0FBTixHQUFRL0MsRUFBRStDLENBQUYsR0FBSWpELEVBQUVtQyxDQUFkLEdBQWdCLElBQUVuQyxFQUFFbUMsQ0FBSixHQUFNbkMsRUFBRWlELENBQXpCLElBQTRCa3JDLEVBRm5DO0FBR0EsV0FBTyxjQUFLbnVDLENBQUwsSUFBUWlELEdBQUdtckMsRUFBWCxrQkFBb0JsdUMsQ0FBcEIsSUFBdUIrQyxHQUFHb3JDLEVBQTFCLElBQVA7QUFDRCxHOzt5QkFFRFosYywyQkFBZXp0QixFLEVBQUk7QUFDakIsUUFBTXd0QixLQUFLO0FBQ1QvcUMsV0FBSyxDQURJO0FBRVQwTixZQUFNLENBRkc7QUFHVHNWLFdBQUs7QUFISSxLQUFYO0FBS0EsU0FBSSxJQUFJM2pCLElBQUksQ0FBWixFQUFlQSxJQUFFa2UsR0FBR3BmLE1BQUwsSUFBZTRzQyxHQUFHL3FDLEdBQUgsR0FBTyxDQUFyQyxFQUF3QyxFQUFFWCxDQUExQyxFQUE2QztBQUMzQyxVQUFHa2UsR0FBR2xlLElBQUUsQ0FBTCxFQUFRWSxDQUFSLEdBQVVzZCxHQUFHbGUsQ0FBSCxFQUFNWSxDQUFoQixJQUFxQixLQUFLNHJDLFdBQUwsQ0FBaUJ0dUIsR0FBR2xlLElBQUUsQ0FBTCxDQUFqQixFQUEwQmtlLEdBQUdsZSxDQUFILENBQTFCLENBQXhCLEVBQTBEO0FBQ3hELFlBQUdrZSxHQUFHbGUsSUFBRSxDQUFMLEVBQVFZLENBQVIsR0FBVXNkLEdBQUdsZSxDQUFILEVBQU1ZLENBQW5CLEVBQXNCO0FBQ3BCLFlBQUU4cUMsR0FBRy9xQyxHQUFMO0FBQ0Q7QUFDRCxVQUFFK3FDLEdBQUcvcUMsR0FBTDtBQUNBK3FDLFdBQUdyOUIsSUFBSCxHQUFVck8sQ0FBVjtBQUNBLFlBQUcwckMsR0FBRy9uQixHQUFILENBQU9yaUIsT0FBUCxDQUFldEIsSUFBRSxDQUFqQixNQUFzQixDQUFDLENBQTFCLEVBQTZCO0FBQzNCMHJDLGFBQUcvbkIsR0FBSCxDQUFPMWpCLElBQVAsQ0FBWUQsSUFBRSxDQUFkO0FBQ0Q7QUFDRCxZQUFHMHJDLEdBQUcvbkIsR0FBSCxDQUFPcmlCLE9BQVAsQ0FBZXRCLENBQWYsTUFBb0IsQ0FBQyxDQUF4QixFQUEyQjtBQUN6QjByQyxhQUFHL25CLEdBQUgsQ0FBTzFqQixJQUFQLENBQVlELENBQVo7QUFDRDtBQUNGO0FBQ0Y7QUFDRCxXQUFPMHJDLEVBQVA7QUFDRCxHOzt5QkFFRGMsVyx3QkFBWXR1QyxDLEVBQUdFLEMsRUFBRztBQUNoQixXQUFPZ0QsS0FBS00sR0FBTCxDQUFTeEQsRUFBRTBDLENBQUYsR0FBSXhDLEVBQUV3QyxDQUFmLElBQWtCLEtBQUtNLENBQUwsQ0FBTzJwQyxNQUF6QixJQUFtQzNzQyxFQUFFaUQsQ0FBRixHQUFJL0MsRUFBRStDLENBQWhEO0FBQ0QsRzs7eUJBRURzcUMsUyxzQkFBVXZ0QixFLEVBQUl2ZixFLEVBQUk7QUFDaEIsUUFBTTZzQyxNQUFNLEVBQVo7QUFDQSwwQkFBYXR0QixFQUFiLHlIQUFpQjtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQUEsVUFBVGhaLENBQVM7O0FBQ2YsVUFBTWtGLEtBQUtyRixvQkFBVXZHLEdBQVYsQ0FDVCxLQUFLQyxFQUFMLENBQVFnckIsSUFBUixDQUFhO0FBQ1g2Z0IsV0FBRyxLQUFLcHBDLENBQUwsQ0FBT21WLE9BREM7QUFFWHRXLFdBQUcsS0FBS21CLENBQUwsQ0FBT25CLENBRkM7QUFHWE0sV0FBRzZFLEVBQUU3RSxDQUhNO0FBSVhzQyxXQUFHdUMsRUFBRXZDLENBSk07QUFLWHdvQyxZQUFJam1DLEVBQUVpbUMsRUFMSztBQU1YaFQsWUFBSWp6QixFQUFFaXpCLEVBTks7QUFPWHNTLGNBQU12bEMsRUFBRXVsQztBQVBHLE9BQWIsQ0FEUyxFQVVULENBVlMsRUFXVDlyQyxFQVhTLEVBWVQsQ0FBQ3VHLEVBQUUvRCxDQUFILEVBQU0rRCxFQUFFdEUsQ0FBUixFQUFXc0UsRUFBRWl6QixFQUFiLENBWlMsQ0FBWDtBQWNBLFVBQU1pQixrQkFDRGwwQixDQURDO0FBRUovRCxXQUFHaUosR0FBRyxDQUFILENBRkM7QUFHSnhKLFdBQUd3SixHQUFHLENBQUgsQ0FIQztBQUlKK3RCLFlBQUkvdEIsR0FBRyxDQUFIO0FBSkEsUUFBTjtBQU1BLFVBQUdndkIsR0FBR3g0QixDQUFILElBQU0sQ0FBTixJQUFXdzRCLEdBQUd4NEIsQ0FBSCxJQUFNLEtBQUtNLENBQUwsQ0FBT04sQ0FBM0IsRUFBOEI7QUFDNUJ3NEIsV0FBR3g0QixDQUFILEdBQUt3NEIsR0FBR3g0QixDQUFILElBQU0sQ0FBTixHQUFTLENBQVQsR0FBWSxLQUFLTSxDQUFMLENBQU9OLENBQXhCO0FBQ0F3NEIsV0FBR2o0QixDQUFILEdBQUssQ0FBTDtBQUNBaTRCLFdBQUdqQixFQUFILEdBQU0sQ0FBTjtBQUNEO0FBQ0RxVCxVQUFJdnJDLElBQUosQ0FBU201QixFQUFUO0FBQ0Q7QUFDRCxXQUFPb1MsR0FBUDtBQUNELEc7O3lCQUVEL3NDLEUsZUFBR0MsQyxFQUFFRSxDLEVBQUc7QUFDTixRQUFNdUMsSUFBRXZDLEVBQUUsQ0FBRixDQUFSO0FBQUEsUUFBY2dDLElBQUVoQyxFQUFFLENBQUYsQ0FBaEI7QUFBQSxRQUFzQnU1QixLQUFHdjVCLEVBQUUsQ0FBRixDQUF6QjtBQUFBLFFBQStCNnRDLE1BQU03ckMsSUFBRSxLQUFLYixDQUE1QztBQUFBLFFBQStDNEMsSUFBRSxLQUFLQSxDQUFMLENBQU8sSUFBUCxFQUFZOHBDLEdBQVosRUFBZ0J0ckMsQ0FBaEIsRUFBa0JnM0IsRUFBbEIsQ0FBakQ7QUFBQSxRQUF3RWdULEtBQUcsS0FBS0EsRUFBTCxDQUFRLElBQVIsRUFBYXNCLEdBQWIsRUFBaUJ0ckMsQ0FBakIsRUFBbUJnM0IsRUFBbkIsQ0FBM0U7QUFBQSxRQUFtR3VVLFNBQU90ckMsS0FBSzBVLEdBQUwsQ0FBUzIyQixHQUFULENBQTFHO0FBQUEsUUFDQUUsTUFBSSxRQUFNdnJDLEtBQUtNLEdBQUwsQ0FBUyxDQUFDTixLQUFLSyxJQUFMLENBQVVpckMsTUFBVixJQUFrQnRyQyxLQUFLSyxJQUFMLENBQVVOLENBQVYsQ0FBbkIsSUFBaUNBLENBQTFDLENBQU4sR0FBbURDLEtBQUt5MUIsR0FBTCxDQUFTNlYsTUFBVCxFQUFnQixDQUFoQixDQUR2RDtBQUVBLFdBQU8sQ0FDTCxDQUFDLENBQUMsS0FBS3BDLENBQU4sR0FBUW9DLE1BQVIsR0FBZSxLQUFLcnNDLENBQXBCLEdBQXNCc3NDLEdBQXRCLEdBQTBCaHFDLENBQTNCLElBQThCLEtBQUt0QyxDQUQ5QixFQUVMYyxJQUFFLFFBQU1DLEtBQUtVLE1BQUwsS0FBYyxHQUFwQixDQUZHLEVBR0wsS0FBSzJvQyxJQUFMLElBQVcsQ0FBQyxLQUFHLElBQUVycEMsS0FBS3dULEdBQUwsQ0FBUyxDQUFDLEdBQUQsR0FBS3UyQixFQUFkLENBQUwsSUFBd0IsQ0FBekIsS0FBNkIsSUFBRSxLQUFHLElBQUUvcEMsS0FBS3dULEdBQUwsQ0FBUyxDQUFDLENBQUQsSUFBSXhULEtBQUtNLEdBQUwsQ0FBU3kyQixFQUFULElBQWEsQ0FBakIsQ0FBVCxDQUFMLENBQS9CLElBQW9FQSxFQUEvRSxDQUhLLENBQVA7QUFLRCxHOzs7OztrQkExVGtCckcsWTs7Ozs7Ozs7Ozs7OztJQ0FBakgsZ0I7QUFFbkIsOEJBQXlCO0FBQUEsUUFBYm5DLFFBQWEsdUVBQUosRUFBSTs7QUFBQTs7QUFDdkJBLGVBQVcsT0FBT0EsUUFBUCxLQUFrQixVQUFsQixHQUE4QkEsVUFBOUIsR0FBMENBLFFBQXJEO0FBQ0EsU0FBSzNCLE1BQUwsR0FBYzJCLFNBQVMzQixNQUFULElBQW1CLEVBQWpDO0FBQ0EsU0FBSzZsQixLQUFMLEdBQWEsRUFBYjtBQUNBLFFBQUcsS0FBSzdsQixNQUFMLENBQVlnVyxTQUFmLEVBQTBCO0FBQ3hCLFdBQUs2UCxLQUFMLENBQVc3UCxTQUFYLEdBQXVCLElBQUk4UCxLQUFKLENBQVUsS0FBSzlsQixNQUFMLENBQVlnVyxTQUF0QixDQUF2QjtBQUNBLFdBQUs2UCxLQUFMLENBQVc3UCxTQUFYLENBQXFCMWxCLE1BQXJCLEdBQThCLEdBQTlCO0FBQ0Q7QUFDRCxRQUFHLEtBQUswUCxNQUFMLENBQVlpWSxPQUFmLEVBQXdCO0FBQ3RCLFdBQUs0TixLQUFMLENBQVc1TixPQUFYLEdBQXFCLElBQUk2TixLQUFKLENBQVUsS0FBSzlsQixNQUFMLENBQVlpWSxPQUF0QixDQUFyQjtBQUNBLFdBQUs0TixLQUFMLENBQVc1TixPQUFYLENBQW1CM25CLE1BQW5CLEdBQTRCLEdBQTVCO0FBQ0Q7QUFDRjs7NkJBRUQya0IsVSx1QkFBVzl4QixPLEVBQVM7QUFDbEIsU0FBS0EsT0FBTCxHQUFlQSxPQUFmO0FBQ0QsRzs7NkJBRUQyeUIsSyxvQkFBUTtBQUNOLFNBQUszeUIsT0FBTCxHQUFlLENBQUMsS0FBS0EsT0FBckI7QUFDRCxHOzs2QkFFRC9CLE8sc0JBQVU7QUFDUixXQUFPLEtBQUt5a0MsS0FBTCxDQUFXN1AsU0FBbEI7QUFDQSxXQUFPLEtBQUs2UCxLQUFMLENBQVc1TixPQUFsQjtBQUNELEc7OzZCQUVEakMsUyx3QkFBWTtBQUNWLFFBQUcsS0FBSzd5QixPQUFMLElBQWdCLEtBQUswaUMsS0FBTCxDQUFXN1AsU0FBOUIsRUFBeUM7QUFDdkMsV0FBSzZQLEtBQUwsQ0FBVzdQLFNBQVgsQ0FBcUJ2TixJQUFyQjtBQUNEO0FBQ0YsRzs7NkJBRUR3UCxPLHNCQUFVO0FBQ1IsUUFBRyxLQUFLOTBCLE9BQUwsSUFBZ0IsS0FBSzBpQyxLQUFMLENBQVc3UCxTQUE5QixFQUF5QztBQUN2QyxXQUFLNlAsS0FBTCxDQUFXN1AsU0FBWCxDQUFxQmxOLEtBQXJCO0FBQ0EsV0FBSytjLEtBQUwsQ0FBVzdQLFNBQVgsQ0FBcUIrUCxXQUFyQixHQUFtQyxDQUFuQztBQUNEO0FBQ0QsUUFBRyxLQUFLNWlDLE9BQUwsSUFBZ0IsS0FBSzBpQyxLQUFMLENBQVc1TixPQUE5QixFQUF1QztBQUNyQyxXQUFLNE4sS0FBTCxDQUFXNU4sT0FBWCxDQUFtQnhQLElBQW5CO0FBQ0Q7QUFDRixHOzs2QkFFRHpFLGMsMkJBQWVnaUIsTyxFQUFTO0FBQ3RCQSxZQUFRdjFCLGdCQUFSLENBQXlCLFdBQXpCLEVBQXNDLEtBQUt1bEIsU0FBTCxDQUFldFQsSUFBZixDQUFvQixJQUFwQixDQUF0QztBQUNBc2pCLFlBQVF2MUIsZ0JBQVIsQ0FBeUIsU0FBekIsRUFBb0MsS0FBS3duQixPQUFMLENBQWF2VixJQUFiLENBQWtCLElBQWxCLENBQXBDO0FBQ0QsRzs7Ozs7a0JBaERrQm9CLGdCOzs7Ozs7Ozs7OztBQ0ZyQjs7Ozs7Ozs7Ozs7O0lBRXFCYixhOzs7QUFFbkIseUJBQVlqZixJQUFaLEVBQWtCaWUsUUFBbEIsRUFBNEI7QUFBQTs7QUFBQSxpREFDMUIsNkJBQU1qZSxJQUFOLENBRDBCOztBQUUxQixVQUFLaWUsUUFBTCxHQUFnQkEsUUFBaEI7QUFDQSxVQUFLZ2tCLEdBQUwsR0FBVyxNQUFYO0FBSDBCO0FBSTNCOzswQkFFRC9pQixhLDBCQUFjaEQsVSxFQUFZO0FBQ3hCLFNBQUtBLFVBQUwsR0FBa0JBLFVBQWxCO0FBQ0FBLGVBQVdnbUIsVUFBWCxHQUF3QixLQUFLQyxrQkFBTCxDQUF3QnpqQixJQUF4QixDQUE2QixJQUE3QixDQUF4QjtBQUNBLFFBQUcsS0FBS3VqQixHQUFMLEtBQWEsTUFBaEIsRUFBd0I7QUFDdEIsV0FBS0EsR0FBTCxHQUFXLFlBQVg7QUFDRDtBQUNELFNBQUtHLFVBQUw7QUFDRCxHOzswQkFFRGpqQixTLHNCQUFVZixNLEVBQVE7QUFDaEIsU0FBS0EsTUFBTCxHQUFjQSxNQUFkO0FBQ0FBLFdBQU84akIsVUFBUCxHQUFvQixLQUFLRyxjQUFMLENBQW9CM2pCLElBQXBCLENBQXlCLElBQXpCLENBQXBCO0FBQ0EsU0FBSzBqQixVQUFMO0FBQ0QsRzs7MEJBRUR6aUIsWSx5QkFBYXhELFMsRUFBV2dFLEcsRUFBSztBQUMzQixTQUFLaEUsU0FBTCxHQUFpQkEsU0FBakI7QUFDQSxTQUFLZ0UsR0FBTCxHQUFXQSxHQUFYO0FBQ0FoRSxjQUFVK2xCLFVBQVYsR0FBdUIsS0FBS0ksaUJBQUwsQ0FBdUI1akIsSUFBdkIsQ0FBNEIsSUFBNUIsQ0FBdkI7QUFDQSxRQUFHdkMsVUFBVXhWLE9BQVYsRUFBSCxFQUF3QjtBQUN0QixXQUFLczdCLEdBQUwsR0FBVyxXQUFYO0FBQ0EsV0FBS00sV0FBTCxHQUFtQixJQUFuQjtBQUNEO0FBQ0QsU0FBS0gsVUFBTDtBQUNELEc7OzBCQUVESSxZLDJCQUFlO0FBQ2IsU0FBS1AsR0FBTCxHQUFXLFdBQVg7QUFDQSxTQUFLRyxVQUFMO0FBQ0QsRzs7MEJBRURLLGEsNEJBQWdCO0FBQ2QsU0FBS1IsR0FBTCxHQUFXLFlBQVg7QUFDQSxTQUFLRyxVQUFMO0FBQ0QsRzs7MEJBRURNLFMsd0JBQVk7QUFDVixTQUFLVCxHQUFMLEdBQVcsUUFBWDtBQUNBLFNBQUtHLFVBQUw7QUFDRCxHOzswQkFFRE8sVywwQkFBYztBQUNaLFNBQUtsd0IsSUFBTDtBQUNELEc7OzBCQUVEMHZCLGtCLCtCQUFtQjNvQixNLEVBQVE7QUFDekIsU0FBS3lFLFFBQUwsQ0FBY2tFLFFBQWQsQ0FBdUIzSSxNQUF2QjtBQUNELEc7OzBCQUVENm9CLGMsMkJBQWU3b0IsTSxFQUFRO0FBQ3JCLFNBQUt5RSxRQUFMLENBQWNrRSxRQUFkLENBQXVCM0ksTUFBdkI7QUFDRCxHOzswQkFFRDhvQixpQiw4QkFBa0JyRCxJLEVBQU07QUFBQTs7QUFDdEIsUUFBR0EsS0FBSzlqQyxHQUFSLEVBQWE7QUFDWHhKLGFBQU80Z0MsSUFBUCxDQUFZME0sS0FBSzlqQyxHQUFqQixFQUFzQixRQUF0QjtBQUNELEtBRkQsTUFHSyxJQUFHOGpDLEtBQUs1bEIsSUFBUixFQUFjO0FBQ2pCLFdBQUs4RyxHQUFMLENBQVMvRyxjQUFULENBQXdCNmxCLEtBQUs1bEIsSUFBN0IsRUFDRW5GLElBREYsQ0FDTyxVQUFDc0YsTUFBRDtBQUFBLGVBQVcsT0FBS3lFLFFBQUwsQ0FBY2tFLFFBQWQsQ0FBdUIzSSxNQUF2QixDQUFYO0FBQUEsT0FEUDtBQUVEO0FBQ0YsRzs7MEJBRUQ0VyxVLHlCQUFhO0FBQUE7O0FBQ1gsUUFBRyxLQUFLcHdCLElBQVIsRUFBYztBQUNaLFdBQUtBLElBQUwsQ0FBVTh3QixRQUFWLENBQW1CLFlBQW5CLEVBQWlDO0FBQy9CekwsZ0JBQVEsSUFEdUI7QUFFL0J3TCxpQkFBUyxJQUZzQjtBQUcvQnZCLGdCQUFRO0FBSHVCLE9BQWpDO0FBS0EsV0FBS3R2QixJQUFMLENBQVU4d0IsUUFBVixDQUFtQixlQUFuQixFQUFvQztBQUNsQ3pMLGdCQUFRLElBRDBCO0FBRWxDd0wsaUJBQVMsS0FBS29SLEdBQUwsS0FBVyxZQUZjO0FBR2xDM1MsZ0JBQVE7QUFIMEIsT0FBcEM7QUFLQSxXQUFLdHZCLElBQUwsQ0FBVTh3QixRQUFWLENBQW1CLFdBQW5CLEVBQWdDO0FBQzlCekwsZ0JBQVEsSUFEc0I7QUFFOUJ3TCxpQkFBUyxLQUFLb1IsR0FBTCxLQUFXLFFBRlU7QUFHOUIzUyxnQkFBUTtBQUhzQixPQUFoQztBQUtBLFdBQUt0dkIsSUFBTCxDQUFVOHdCLFFBQVYsQ0FBbUIsY0FBbkIsRUFBbUM7QUFDakN6TCxnQkFBUSxJQUR5QjtBQUVqQ3dMLGlCQUFTLEtBQUtvUixHQUFMLEtBQVcsV0FGYTtBQUdqQzNTLGdCQUFRO0FBSHlCLE9BQW5DO0FBS0EsV0FBS3R2QixJQUFMLENBQVU4d0IsUUFBVixDQUFtQixjQUFuQixFQUFtQztBQUNqQ3pMLGdCQUFRLElBRHlCO0FBRWpDd0wsaUJBQVMsSUFGd0I7QUFHakN2QixnQkFBUSxLQUFLMlMsR0FBTCxLQUFXO0FBSGMsT0FBbkM7QUFLQSxXQUFLamlDLElBQUwsQ0FBVTh3QixRQUFWLENBQW1CLGFBQW5CLEVBQWtDO0FBQ2hDekwsZ0JBQVEsSUFEd0I7QUFFaEN3TCxpQkFBUyxJQUZ1QjtBQUdoQ3ZCLGdCQUFRO0FBSHdCLE9BQWxDO0FBS0EsV0FBS3R2QixJQUFMLENBQVU4d0IsUUFBVixDQUFtQixlQUFuQixFQUFvQztBQUNsQ3pMLGdCQUFRLElBRDBCO0FBRWxDd0wsaUJBQVMsSUFGeUI7QUFHbEN2QixnQkFBUSxLQUFLMlMsR0FBTCxLQUFXO0FBSGUsT0FBcEM7QUFLQSxXQUFLamlDLElBQUwsQ0FBVTh3QixRQUFWLENBQW1CLFdBQW5CLEVBQWdDO0FBQzlCekwsZ0JBQVEsSUFEc0I7QUFFOUJ3TCxpQkFBUyxJQUZxQjtBQUc5QnZCLGdCQUFRLEtBQUsyUyxHQUFMLEtBQVc7QUFIVyxPQUFoQztBQUtBdHZCLGNBQVFDLE9BQVIsR0FBa0JzQixJQUFsQixDQUF1QjtBQUFBLGVBQUssT0FBS2dJLFVBQUwsQ0FBZ0I5YyxTQUFoQixDQUEwQixPQUFLeXhCLE9BQUwsSUFBZ0IsT0FBS29SLEdBQUwsS0FBVyxZQUFyRCxDQUFMO0FBQUEsT0FBdkI7QUFDQSxrQ0FBTTdSLFVBQU47QUFDRDtBQUNGLEc7OztFQXBId0N3UywwQjs7a0JBQXRCM2pCLGE7Ozs7Ozs7Ozs7O0FDRnJCOztBQUNBOzs7Ozs7QUFFQSxJQUFNN2EsT0FBTyxFQUFiO0FBQUEsSUFDTTJFLE9BQU8sQ0FEYjtBQUFBLElBRU1oQyxPQUFPLEVBRmI7QUFBQSxJQUdNeEksUUFBUSxDQUhkO0FBQUEsSUFJTWtHLFFBQVEsRUFKZDs7QUFNQSxJQUFNbytCLGdCQUFnQixJQUFJNXdDLFlBQU11cEMsYUFBVixDQUF3Qmo5QixLQUF4QixFQUErQkEsS0FBL0IsRUFBc0M2RixPQUFLLENBQTNDLEVBQThDMkUsT0FBSyxDQUFuRCxDQUF0QjtBQUNBODVCLGNBQWNDLFNBQWQsQ0FBd0IsTUFBSXZrQyxLQUE1QixFQUFrQyxNQUFJQSxLQUF0QyxFQUE0Q0EsS0FBNUM7QUFDQSxJQUFNd2tDLGVBQWUsSUFBSTl3QyxZQUFNdXBDLGFBQVYsQ0FBd0JqOUIsS0FBeEIsRUFBK0JBLEtBQS9CLEVBQXNDNkYsT0FBSyxDQUEzQyxFQUE4QzJFLE9BQUssQ0FBbkQsQ0FBckI7QUFDQWc2QixhQUFhQyxPQUFiLENBQXFCM3NDLEtBQUt5USxFQUExQjtBQUNBaThCLGFBQWFELFNBQWIsQ0FBdUIsTUFBSXZrQyxLQUEzQixFQUFpQyxNQUFJQSxLQUFyQyxFQUEyQyxDQUEzQztBQUNBLElBQU0wa0MsZUFBZSxJQUFJaHhDLFlBQU11cEMsYUFBVixDQUF3Qmo5QixLQUF4QixFQUErQkEsS0FBL0IsRUFBc0N3SSxPQUFLLENBQTNDLEVBQThDZ0MsT0FBSyxDQUFuRCxDQUFyQjtBQUNBazZCLGFBQWFELE9BQWIsQ0FBcUIsQ0FBQzNzQyxLQUFLeVEsRUFBTixHQUFTLENBQTlCO0FBQ0FtOEIsYUFBYUgsU0FBYixDQUF1QixDQUF2QixFQUF5QixNQUFJdmtDLEtBQTdCLEVBQW1DLE1BQUlBLEtBQXZDO0FBQ0EsSUFBTTJrQyxnQkFBZ0IsSUFBSWp4QyxZQUFNdXBDLGFBQVYsQ0FBd0JqOUIsS0FBeEIsRUFBK0JBLEtBQS9CLEVBQXNDd0ksT0FBSyxDQUEzQyxFQUE4Q2dDLE9BQUssQ0FBbkQsQ0FBdEI7QUFDQW02QixjQUFjRixPQUFkLENBQXNCM3NDLEtBQUt5USxFQUFMLEdBQVEsQ0FBOUI7QUFDQW84QixjQUFjSixTQUFkLENBQXdCdmtDLEtBQXhCLEVBQThCLE1BQUlBLEtBQWxDLEVBQXdDLE1BQUlBLEtBQTVDO0FBQ0EsSUFBTTRrQyxjQUFjLElBQUlseEMsWUFBTXVwQyxhQUFWLENBQXdCajlCLEtBQXhCLEVBQStCQSxLQUEvQixFQUFzQzZGLE9BQUssQ0FBM0MsRUFBOEMyQyxPQUFLLENBQW5ELENBQXBCO0FBQ0FvOEIsWUFBWUMsT0FBWixDQUFvQixDQUFDL3NDLEtBQUt5USxFQUFOLEdBQVMsQ0FBN0I7QUFDQXE4QixZQUFZTCxTQUFaLENBQXNCLE1BQUl2a0MsS0FBMUIsRUFBZ0NBLEtBQWhDLEVBQXNDLE1BQUlBLEtBQTFDO0FBQ0EsSUFBTThrQyxpQkFBaUJGLFlBQVk1K0IsS0FBWixFQUF2QjtBQUNBOCtCLGVBQWVQLFNBQWYsQ0FBeUIsQ0FBekIsRUFBMkIsQ0FBQ3ZrQyxLQUE1QixFQUFrQyxDQUFsQztBQUNBLHFCQUFhOGtDLGVBQWU1K0IsS0FBNUIsa0hBQW1DO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQSxNQUEzQjdNLENBQTJCO0FBQUEsY0FDcEIsQ0FBQ0EsRUFBRXZFLENBQUgsRUFBTXVFLEVBQUV6RSxDQUFSLENBRG9CO0FBQ2hDeUUsSUFBRXpFLENBRDhCO0FBQzNCeUUsSUFBRXZFLENBRHlCO0FBRWxDOztBQUVELElBQU1pUixXQUFXLElBQUlyUyxZQUFNcXhDLFFBQVYsRUFBakI7QUFDQWgvQixTQUFTdUIsUUFBVCxhQUF3Qnc5QixlQUFleDlCLFFBQXZDLEVBQW9EczlCLFlBQVl0OUIsUUFBaEU7O0FBRUEsSUFBTTA5QixXQUFXLFNBQVhBLFFBQVcsQ0FBQ0MsRUFBRCxFQUFLMy9CLEdBQUwsRUFBWTtBQUMzQix3QkFBYTIvQixFQUFiLHlIQUFpQjtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQUEsUUFBVDVyQyxDQUFTOztBQUNmME0sYUFBU0csS0FBVCxDQUFldlAsSUFBZixDQUFvQixJQUFJakQsWUFBTXd4QyxLQUFWLENBQWdCNS9CLElBQUlqTSxFQUFFekUsQ0FBTixDQUFoQixFQUEwQjBRLElBQUlqTSxFQUFFdkUsQ0FBTixDQUExQixFQUFvQ3dRLElBQUlqTSxFQUFFSSxDQUFOLENBQXBDLENBQXBCO0FBQ0Q7QUFDRHlNLFFBQU12UCxJQUFOLENBQVdvUCxTQUFTRyxLQUFULENBQWUxUSxNQUExQjtBQUNELENBTEQ7O0FBT0EsSUFBTTJ2QyxjQUFjLFNBQWRBLFdBQWMsQ0FBQzloQyxHQUFELEVBQU0raEMsR0FBTixFQUFhO0FBQy9CLE1BQU05L0IsTUFBTSxFQUFaO0FBQ0EsTUFBTSsvQixLQUFLLFNBQUxBLEVBQUssQ0FBQ3p3QyxDQUFELEVBQUlFLENBQUo7QUFBQSxXQUFTZ0QsS0FBS00sR0FBTCxDQUFTeEQsRUFBRWtCLENBQUYsR0FBSWhCLEVBQUVnQixDQUFmLElBQWtCZ0MsS0FBS00sR0FBTCxDQUFTeEQsRUFBRVUsQ0FBRixHQUFJUixFQUFFUSxDQUFmLENBQWxCLEdBQW9Dd0MsS0FBS00sR0FBTCxDQUFTeEQsRUFBRW9FLENBQUYsR0FBSWxFLEVBQUVrRSxDQUFmLENBQXBDLEdBQXNELElBQS9EO0FBQUEsR0FBWDtBQUNBLE9BQUksSUFBSXRDLElBQUUsQ0FBVixFQUFhQSxJQUFFMk0sSUFBSTdOLE1BQW5CLEVBQTJCLEVBQUVrQixDQUE3QixFQUFnQztBQUM5QixTQUFJLElBQUlFLElBQUUsQ0FBVixFQUFhQSxJQUFFd3VDLElBQUk1dkMsTUFBbkIsRUFBMkIsRUFBRW9CLENBQTdCLEVBQWdDO0FBQzlCLFVBQUd5dUMsR0FBR2hpQyxJQUFJM00sQ0FBSixDQUFILEVBQVcwdUMsSUFBSXh1QyxDQUFKLENBQVgsQ0FBSCxFQUF1QjtBQUNyQjBPLFlBQUk1TyxDQUFKLElBQU9FLENBQVA7QUFDQTtBQUNEO0FBQ0Y7QUFDRjtBQUNELFNBQU8wTyxHQUFQO0FBQ0QsQ0FaRDs7QUFjQSxJQUFNZ2dDLFdBQVdILFlBQVliLGNBQWNoOUIsUUFBMUIsRUFBb0N2QixTQUFTdUIsUUFBN0MsQ0FBakI7QUFDQSxJQUFNaStCLFVBQVVKLFlBQVlYLGFBQWFsOUIsUUFBekIsRUFBbUN2QixTQUFTdUIsUUFBNUMsQ0FBaEI7QUFDQSxJQUFNaytCLFVBQVVMLFlBQVlULGFBQWFwOUIsUUFBekIsRUFBbUN2QixTQUFTdUIsUUFBNUMsQ0FBaEI7QUFDQSxJQUFNbStCLFdBQVdOLFlBQVlSLGNBQWNyOUIsUUFBMUIsRUFBb0N2QixTQUFTdUIsUUFBN0MsQ0FBakI7O0FBRUEwOUIsU0FBU0osWUFBWTErQixLQUFyQixFQUE0QixVQUFDeFAsQ0FBRDtBQUFBLFNBQU1BLElBQUVvdUMsZUFBZXg5QixRQUFmLENBQXdCOVIsTUFBaEM7QUFBQSxDQUE1QjtBQUNBd3ZDLFNBQVNGLGVBQWU1K0IsS0FBeEIsRUFBK0IsVUFBQ3hQLENBQUQ7QUFBQSxTQUFNQSxDQUFOO0FBQUEsQ0FBL0I7QUFDQXN1QyxTQUFTVixjQUFjcCtCLEtBQXZCLEVBQThCLFVBQUN4UCxDQUFEO0FBQUEsU0FBTTR1QyxTQUFTNXVDLENBQVQsQ0FBTjtBQUFBLENBQTlCO0FBQ0FzdUMsU0FBU1IsYUFBYXQrQixLQUF0QixFQUE2QixVQUFDeFAsQ0FBRDtBQUFBLFNBQU02dUMsUUFBUTd1QyxDQUFSLENBQU47QUFBQSxDQUE3QjtBQUNBc3VDLFNBQVNOLGFBQWF4K0IsS0FBdEIsRUFBNkIsVUFBQ3hQLENBQUQ7QUFBQSxTQUFNOHVDLFFBQVE5dUMsQ0FBUixDQUFOO0FBQUEsQ0FBN0I7QUFDQXN1QyxTQUFTTCxjQUFjeitCLEtBQXZCLEVBQThCLFVBQUN4UCxDQUFEO0FBQUEsU0FBTSt1QyxTQUFTL3VDLENBQVQsQ0FBTjtBQUFBLENBQTlCO0FBQ0F3UCxNQUFNazZCLEdBQU47O0FBRUF6NEIscUJBQVcrVSxvQkFBWCxDQUFnQzNXLFFBQWhDLEVBQTBDRyxLQUExQzs7QUFFQUgsU0FBUzRGLG9CQUFUO0FBQ0E7QUFDQTVGLFNBQVM2RixxQkFBVDtBQUNBO0FBQ0E3RixTQUFTOEYsa0JBQVQsR0FBOEIsSUFBOUI7O2tCQUVlO0FBQ2RoRyxZQURjO0FBRWQyRSxZQUZjO0FBR2RoQyxZQUhjO0FBSWR0QyxjQUpjO0FBS2RIO0FBTGMsQzs7Ozs7Ozs7OztRQ3BFQ3ZFLEssR0FBQUEsSztBQU5oQixJQUFNNDJCLGVBQWU7QUFDbkJzTixRQUFNLENBRGE7QUFFbkJDLFVBQVEsQ0FGVztBQUduQnROLFNBQU87QUFIWSxDQUFyQjs7QUFNTyxTQUFTNzJCLEtBQVQsR0FBaUI7QUFDdEIsU0FBTztBQUNMeEgsU0FBSyxJQURBO0FBRUxnRyxXQUFPO0FBQ0xveEIsZUFBUyxHQURKO0FBRUx6MkIsV0FBSyxHQUZBO0FBR0xDLFdBQUssR0FIQTtBQUlMNjlCLGNBQVE7QUFKSCxLQUZGO0FBUUx0SCxjQUFVO0FBQ1JDLGVBQVMsR0FERDtBQUVSejJCLFdBQUssQ0FGRztBQUdSQyxXQUFLLENBSEc7QUFJUjY5QixjQUFRO0FBSkEsS0FSTDtBQWNML0IsU0FBSztBQUNIQyxhQUFPO0FBREosS0FkQTtBQWlCTHpFLHNCQUFrQjtBQUNoQkMsWUFBTSxLQURVO0FBRWhCcFUsWUFBTTtBQUZVLEtBakJiO0FBcUJMOEksb0JBQWdCO0FBQ2RqbUIsZUFBUyxJQURLO0FBRWR5eEIsbUJBQWE7QUFGQyxLQXJCWDtBQXlCTHlELGdCQUFZO0FBQ1YvM0IsYUFBTztBQURHLEtBekJQO0FBNEJMK3lCLGFBQVM7QUFDUGlDLGlCQUFXO0FBQ1RueUIsaUJBQVMsSUFEQTtBQUVUbTFCLHlCQUFpQjtBQUZSLE9BREo7QUFLUDdDLGtCQUFZO0FBQ1Z0eUIsaUJBQVMsSUFEQztBQUVWbTFCLHlCQUFpQjtBQUZQLE9BTEw7QUFTUDFDLHNCQUFnQjtBQUNkenlCLGlCQUFTLElBREs7QUFFZG0xQix5QkFBaUIsS0FGSDtBQUdkejBCLGNBQU0sVUFIUTtBQUlkZzFCLGNBQU07QUFKUSxPQVRUO0FBZVBoRCxjQUFRO0FBQ04xeUIsaUJBQVMsSUFESDtBQUVObTFCLHlCQUFpQjtBQUZYLE9BZkQ7QUFtQlB2Qyx1QkFBaUI7QUFDZjV5QixpQkFBUyxLQURNO0FBRWZtMUIseUJBQWlCO0FBRkYsT0FuQlY7QUF1QlByQyxtQkFBYTtBQUNYOXlCLGlCQUFTLElBREU7QUFFWG0xQix5QkFBaUI7QUFGTixPQXZCTjtBQTJCUHBDLHNCQUFnQjtBQUNkL3lCLGlCQUFTLElBREs7QUFFZG0xQix5QkFBaUI7QUFGSCxPQTNCVDtBQStCUG5DLGtCQUFZO0FBQ1ZoekIsaUJBQVMsSUFEQztBQUVWbTFCLHlCQUFpQjtBQUZQLE9BL0JMO0FBbUNQbEMscUJBQWU7QUFDYmp6QixpQkFBUyxJQURJO0FBRWJtMUIseUJBQWlCO0FBRkosT0FuQ1I7QUF1Q1BqQyxzQkFBZ0I7QUFDZGx6QixpQkFBUyxLQURLO0FBRWRtMUIseUJBQWlCO0FBRkgsT0F2Q1Q7QUEyQ1BoQyxlQUFTO0FBQ1BuekIsaUJBQVMsSUFERjtBQUVQbTFCLHlCQUFpQjtBQUZWLE9BM0NGO0FBK0NQN0IsZ0JBQVU7QUFDUnR6QixpQkFBUyxJQUREO0FBRVJtMUIseUJBQWlCO0FBRlQsT0EvQ0g7QUFtRFAzQixxQkFBZTtBQUNieHpCLGlCQUFTLElBREk7QUFFYm0xQix5QkFBaUI7QUFGSixPQW5EUjtBQXVEUGlDLG1CQUFhO0FBQ1hwM0IsaUJBQVMsSUFERTtBQUVYbTFCLHlCQUFpQjtBQUZOLE9BdkROO0FBMkRQaEUsbUJBQWE7QUFDWG54QixpQkFBUyxJQURFO0FBRVhtMUIseUJBQWlCLElBRk47QUFHWGhGLGdCQUFRO0FBSEcsT0EzRE47QUFnRVAwRCxxQkFBZTtBQUNiN3pCLGlCQUFTLElBREk7QUFFYm0xQix5QkFBaUIsSUFGSjtBQUdiaEYsZ0JBQVEsS0FISztBQUliQyx5QkFBaUI7QUFKSixPQWhFUjtBQXNFUDBELGlCQUFXO0FBQ1Q5ekIsaUJBQVMsSUFEQTtBQUVUbTFCLHlCQUFpQixJQUZSO0FBR1RoRixnQkFBUTtBQUhDLE9BdEVKO0FBMkVQNEQsZ0JBQVU7QUFDUi96QixpQkFBUyxJQUREO0FBRVJtMUIseUJBQWlCLElBRlQ7QUFHUmhGLGdCQUFRO0FBSEEsT0EzRUg7QUFnRlA4RCxxQkFBZTtBQUNiajBCLGlCQUFTLElBREk7QUFFYm0xQix5QkFBaUI7QUFGSixPQWhGUjtBQW9GUGpCLHVCQUFpQjtBQUNmbDBCLGlCQUFTLElBRE07QUFFZm0xQix5QkFBaUI7QUFGRixPQXBGVjtBQXdGUFUsa0JBQVk7QUFDVjcxQixpQkFBUztBQURDLE9BeEZMO0FBMkZQZzJCLG1CQUFhO0FBQ1hoMkIsaUJBQVM7QUFERSxPQTNGTjtBQThGUGkyQixnQkFBVTtBQUNSajJCLGlCQUFTO0FBREQsT0E5Rkg7QUFpR1BrMkIsa0JBQVk7QUFDVmwyQixpQkFBUztBQURDLE9BakdMO0FBb0dQbTJCLHNCQUFnQjtBQUNkbjJCLGlCQUFTLElBREs7QUFFZFUsY0FBTSxXQUZRO0FBR2RnMUIsY0FBTThCLGFBQWFDO0FBSEwsT0FwR1Q7QUF5R1BwQix3QkFBa0I7QUFDaEJyMkIsaUJBQVMsSUFETztBQUVoQlUsY0FBTSxXQUZVO0FBR2hCZzFCLGNBQU04QixhQUFhdU47QUFISCxPQXpHWDtBQThHUHpPLG1CQUFhO0FBQ1h0MkIsaUJBQVMsSUFERTtBQUVYVSxjQUFNLFdBRks7QUFHWGcxQixjQUFNOEIsYUFBYXNOO0FBSFIsT0E5R047QUFtSFB2Tyx5QkFBbUI7QUFDakJ2MkIsaUJBQVMsSUFEUTtBQUVqQlUsY0FBTSxZQUZXO0FBR2pCZzFCLGNBQU07QUFIVyxPQW5IWjtBQXdIUGUsc0JBQWdCO0FBQ2R6MkIsaUJBQVMsSUFESztBQUVkVSxjQUFNLFdBRlE7QUFHZGcxQixjQUFNO0FBSFEsT0F4SFQ7QUE2SFBnQixvQkFBYztBQUNaMTJCLGlCQUFTLElBREc7QUFFWlUsY0FBTSxXQUZNO0FBR1pnMUIsY0FBTTtBQUhNLE9BN0hQO0FBa0lQa0IsbUJBQWE7QUFDWDUyQixpQkFBUyxJQURFO0FBRVhVLGNBQU0sV0FGSztBQUdYZzFCLGNBQU07QUFISyxPQWxJTjtBQXVJUEQscUJBQWU7QUFDYnoxQixpQkFBUyxJQURJO0FBRWJVLGNBQU0sV0FGTztBQUdiZzFCLGNBQU07QUFITztBQXZJUjtBQTVCSixHQUFQO0FBMEtELEU7Ozs7Ozs7Ozs7O0FDakxEOztBQUNBOzs7Ozs7Ozs7Ozs7SUFFcUI5eUIsVTs7O0FBRW5CLHNCQUFZMUYsT0FBWixFQUFxQkMsS0FBckIsRUFBNEJDLE1BQTVCLEVBQW9DQyxLQUFwQyxFQUEyQztBQUFBOztBQUFBLGlEQUN6QyxzQkFBTUgsT0FBTixFQUFlQyxLQUFmLEVBQXNCQyxNQUF0QixFQUE4QkMsS0FBOUIsQ0FEeUM7O0FBR3pDbVcsWUFBUUMsT0FBUixHQUNFc0IsSUFERixDQUNPLFlBQUs7QUFDUixZQUFLcFYsV0FBTCxHQUFtQixZQUFLO0FBQ3RCLGNBQUt6QixlQUFMO0FBQ0EsY0FBS3FCLFlBQUw7QUFDRCxPQUhEO0FBSUEsWUFBS0UsVUFBTDtBQUNELEtBUEg7QUFIeUM7QUFXMUM7OztFQWJxQ3hDLG1COztrQkFBbkIyRixVOzs7Ozs7Ozs7OztBQ0hyQjs7OztJQUVxQjBkLFM7QUFFbkIscUJBQVlzWixTQUFaLEVBQXVCaUcsS0FBdkIsRUFBNkU7QUFBQTs7QUFBQSxRQUEvQ21GLFFBQStDLHVFQUF0QyxVQUFDbHZDLENBQUQ7QUFBQSxhQUFNQSxFQUFFbXZDLEtBQVI7QUFBQSxLQUFzQztBQUFBLFFBQXZCQyxRQUF1Qix1RUFBZCxVQUFDcHZDLENBQUQ7QUFBQSxhQUFLQSxFQUFFK3BDLEtBQVA7QUFBQSxLQUFjOztBQUFBOztBQUMzRSxTQUFLakcsU0FBTCxHQUFpQkEsU0FBakI7QUFDQSxTQUFLbDFCLEdBQUwsR0FBVyxFQUFYO0FBQ0EsU0FBS3NnQyxRQUFMLEdBQWdCQSxRQUFoQjtBQUNBLFNBQUtFLFFBQUwsR0FBZ0JBLFFBQWhCO0FBQ0EsU0FBS0MsS0FBTCxHQUFhLEtBQUtDLFFBQUwsQ0FBY3ZGLEtBQWQsRUFBcUIsS0FBS243QixHQUExQixDQUFiOztBQUVBLFNBQUtiLEtBQUwsR0FBYTtBQUNYOHVCLGFBQU8sZUFBQ2x5QixDQUFELEVBQU07QUFDWEEsVUFBRTR1QixjQUFGO0FBQ0EsWUFBSWdXLEtBQUssYUFBRTVrQyxFQUFFNlUsTUFBSixDQUFUO0FBQ0EsZUFBTSt2QixHQUFHLENBQUgsS0FBU0EsR0FBRyxDQUFILE1BQVF6TCxVQUFVLENBQVYsQ0FBakIsSUFBaUMsQ0FBQ3lMLEdBQUdoeUIsUUFBSCxDQUFZLE1BQVosQ0FBeEMsRUFBNkQ7QUFDM0RneUIsZUFBSyxhQUFFQSxHQUFHLENBQUgsRUFBTTkzQixVQUFSLENBQUw7QUFDRDtBQUNELFlBQUc4M0IsR0FBR2h5QixRQUFILENBQVksTUFBWixDQUFILEVBQXdCO0FBQ3RCLGNBQUlpeUIsTUFBTSxhQUFFN2tDLEVBQUU2VSxNQUFKLENBQVY7QUFDQSxpQkFBTWd3QixJQUFJLENBQUosS0FBVUEsSUFBSSxDQUFKLE1BQVNELEdBQUcsQ0FBSCxDQUFuQixJQUE0QixDQUFDQyxJQUFJanlCLFFBQUosQ0FBYSxLQUFiLENBQW5DLEVBQXdEO0FBQ3REaXlCLGtCQUFNLGFBQUVBLElBQUksQ0FBSixFQUFPLzNCLFVBQVQsQ0FBTjtBQUNEO0FBQ0QsY0FBRyszQixJQUFJanlCLFFBQUosQ0FBYSxLQUFiLENBQUgsRUFBd0I7QUFDdEIsZ0JBQU0rRCxPQUFPLE1BQUsxUyxHQUFMLENBQVMyZ0MsR0FBRy9qQixJQUFILENBQVEsU0FBUixDQUFULENBQWI7QUFDQSxnQkFBR2drQixJQUFJanlCLFFBQUosQ0FBYSxPQUFiLENBQUgsRUFBMEI7QUFDeEIrRCxtQkFBS211QixTQUFMLEdBQWlCLENBQUNudUIsS0FBS211QixTQUF2QjtBQUNBLGtCQUFHbnVCLEtBQUttdUIsU0FBUixFQUFtQjtBQUNqQkYsbUJBQUdyakIsSUFBSCxDQUFRLElBQVIsRUFBYzlQLE1BQWQ7QUFDQW16QixtQkFBR3JqQixJQUFILENBQVEsUUFBUixFQUFrQnpPLFFBQWxCLENBQTJCLFdBQTNCO0FBQ0QsZUFIRCxNQUlLO0FBQ0g4eEIsbUJBQUdyakIsSUFBSCxDQUFRLFFBQVIsRUFBa0JyTyxXQUFsQixDQUE4QixXQUE5QjtBQUNBMHhCLG1CQUFHclIsTUFBSCxDQUFVLENBQUMsTUFBS3dSLFVBQUwsQ0FBZ0JwdUIsSUFBaEIsRUFBc0I0aEIsS0FBdEIsQ0FBNEIsbUJBQTVCLEtBQW9ELENBQUMsRUFBRCxDQUFyRCxFQUEyRCxDQUEzRCxDQUFWO0FBQ0Q7QUFDRixhQVZELE1BV0s7QUFDSCxrQkFBRyxNQUFLK0osVUFBUixFQUFvQjtBQUNsQixzQkFBS0EsVUFBTCxDQUFnQjNyQixLQUFLMG9CLElBQXJCO0FBQ0Q7QUFDRjtBQUNGO0FBQ0Y7QUFDRjtBQWhDVSxLQUFiOztBQW1DQWxHLGNBQVUzUixFQUFWLENBQWEsT0FBYixFQUFzQixLQUFLcGtCLEtBQUwsQ0FBVzh1QixLQUFqQztBQUNBLFNBQUs5SyxNQUFMO0FBQ0Q7O3NCQUVEcmdCLE8sc0JBQVU7QUFDUixXQUFPLEtBQUs5QyxHQUFMLENBQVM5UCxNQUFoQjtBQUNELEc7O3NCQUVEcUosTyxzQkFBVTtBQUNSLFNBQUsyN0IsU0FBTCxDQUFlbHlCLEdBQWYsQ0FBbUIsT0FBbkIsRUFBNEIsS0FBSzdELEtBQUwsQ0FBVzh1QixLQUF2QztBQUNBLFNBQUtpSCxTQUFMLENBQWVqbkIsSUFBZixDQUFvQixFQUFwQjtBQUNELEc7O3NCQUVEa1YsTSxxQkFBUztBQUNQLFNBQUsrUixTQUFMLENBQWVqbkIsSUFBZixDQUFvQixLQUFLOHlCLFdBQUwsQ0FBaUIsS0FBS04sS0FBdEIsQ0FBcEI7QUFDRCxHOztzQkFFRGp4QixPLG9CQUFRemIsQyxFQUFxQjtBQUFBLFFBQWxCMHNDLEtBQWtCLHVFQUFaLEtBQUtBLEtBQU87O0FBQzNCLHlCQUFpQkEsU0FBUyxFQUExQixrSEFBK0I7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBLFVBQXZCL3RCLElBQXVCOztBQUM3QjNlLFFBQUUyZSxJQUFGO0FBQ0EsV0FBS2xELE9BQUwsQ0FBYXpiLENBQWIsRUFBZ0IyZSxLQUFLOUcsUUFBckI7QUFDRDtBQUNGLEc7O3NCQUVEbzFCLE0scUJBQVM7QUFDUCxTQUFLeHhCLE9BQUwsQ0FBYSxVQUFDMWIsQ0FBRDtBQUFBLGFBQU1BLEVBQUUrc0MsU0FBRixHQUFjLEtBQXBCO0FBQUEsS0FBYjtBQUNBLFNBQUsxZCxNQUFMO0FBQ0QsRzs7c0JBRUQ4ZCxRLHVCQUFXO0FBQ1QsU0FBS3p4QixPQUFMLENBQWEsVUFBQzFiLENBQUQ7QUFBQSxhQUFNQSxFQUFFK3NDLFNBQUYsR0FBYyxJQUFwQjtBQUFBLEtBQWI7QUFDQSxTQUFLMWQsTUFBTDtBQUNELEc7O3NCQUVEMmQsVSx1QkFBV3B1QixJLEVBQU07QUFDZixXQUFPLENBQUMsb0JBQUQsRUFDTEEsS0FBSzlHLFFBQUwsR0FBZSxrQ0FBa0M4RyxLQUFLbXVCLFNBQUwsR0FBZ0IsWUFBaEIsR0FBOEIsRUFBaEUsSUFBc0UsMENBQXJGLEdBQWlJLDhCQUQ1SCxFQUVMLHdCQUZLLEVBRXFCbnVCLEtBQUs2dEIsS0FGMUIsRUFFZ0MsYUFGaEMsRUFFK0M3dEIsS0FBSzZ0QixLQUZwRCxFQUUyRCxZQUYzRCxFQUdMN3RCLEtBQUttdUIsU0FBTCxHQUFnQixFQUFoQixHQUFvQixLQUFLRSxXQUFMLENBQWlCcnVCLEtBQUs5RyxRQUF0QixDQUhmLEVBSUxoVSxJQUpLLENBSUEsRUFKQSxDQUFQO0FBS0QsRzs7c0JBRURtcEMsVyx3QkFBWU4sSyxFQUFPO0FBQ2pCLFFBQUloc0MsTUFBTSxDQUFDLHlCQUFELENBQVY7QUFDQSxRQUFHZ3NDLFNBQVNBLE1BQU12d0MsTUFBbEIsRUFBMEI7QUFDeEJ1RSxVQUFJcEQsSUFBSixDQUFTLG1CQUFULEVBQThCb3ZDLE1BQU0sQ0FBTixFQUFTUyxLQUF2QyxFQUE4QyxJQUE5QztBQUNBLDRCQUFnQlQsS0FBaEIseUhBQXVCO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQSxZQUFmL3RCLElBQWU7O0FBQ3JCamUsWUFBSXBELElBQUosQ0FBUyxDQUNQLDRCQURPLEVBQ3VCcWhCLEtBQUtwSCxFQUQ1QixFQUMrQixJQUQvQixFQUVMLEtBQUt3MUIsVUFBTCxDQUFnQnB1QixJQUFoQixDQUZLLEVBR1AsT0FITyxFQUdFOWEsSUFIRixDQUdPLEVBSFAsQ0FBVDtBQUlEO0FBQ0RuRCxVQUFJcEQsSUFBSixDQUFTLE9BQVQ7QUFDRDtBQUNEb0QsUUFBSXBELElBQUosQ0FBUyxRQUFUO0FBQ0EsV0FBT29ELElBQUltRCxJQUFKLENBQVMsRUFBVCxDQUFQO0FBQ0QsRzs7c0JBRUQ4b0MsUSxxQkFBU3ZGLEssRUFBd0I7QUFBQSxRQUFqQm43QixHQUFpQix1RUFBYixFQUFhO0FBQUEsUUFBVGtoQyxLQUFTLHVFQUFILENBQUc7O0FBQy9CLFFBQUlULFFBQVEsSUFBWjtBQUNBLFFBQUd0RixTQUFTQSxNQUFNanJDLE1BQWxCLEVBQTBCO0FBQ3hCdXdDLGNBQU0sRUFBTjtBQUNBLDRCQUFnQnRGLEtBQWhCLHlIQUF1QjtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQUEsWUFBZkMsSUFBZTs7QUFDckIsWUFBTTl2QixLQUFLdEwsSUFBSTlQLE1BQWY7QUFDQThQLFlBQUkzTyxJQUFKLENBQVM4SixTQUFUO0FBQ0EsWUFBTXVYLE9BQU87QUFDWHBILGdCQURXO0FBRVhpMUIsaUJBQU8sS0FBS0QsUUFBTCxDQUFjbEYsSUFBZCxDQUZJO0FBR1g4RixzQkFIVztBQUlYOUYsb0JBSlc7QUFLWHlGLHFCQUFXLElBTEE7QUFNWGoxQixvQkFBVSxLQUFLODBCLFFBQUwsQ0FBYyxLQUFLRixRQUFMLENBQWNwRixJQUFkLENBQWQsRUFBbUNwN0IsR0FBbkMsRUFBd0NraEMsUUFBTSxDQUE5QztBQU5DLFNBQWI7QUFRQVQsY0FBTXB2QyxJQUFOLENBQVdxaEIsSUFBWDtBQUNBMVMsWUFBSXNMLEVBQUosSUFBVW9ILElBQVY7QUFDRDtBQUNGO0FBQ0QsV0FBTyt0QixLQUFQO0FBQ0QsRzs7Ozs7a0JBMUhrQjdrQixTOzs7Ozs7Ozs7OztBQ0ZyQjs7OztJQUVxQjVDLFE7Ozs7O1VBa0JibW9CLG9CLG1DQUF1QjtBQUM3QixNQUFNcm9DLFVBQVU4USxTQUFTQyxhQUFULENBQXVCLEtBQXZCLENBQWhCO0FBQ0EvUSxVQUFRd1MsRUFBUixHQUFhLHFCQUFiO0FBQ0F4UyxVQUFRdUYsS0FBUixDQUFjK2lDLFVBQWQsR0FBMkIsV0FBM0I7QUFDQXRvQyxVQUFRdUYsS0FBUixDQUFjZ2pDLFFBQWQsR0FBeUIsTUFBekI7QUFDQXZvQyxVQUFRdUYsS0FBUixDQUFjaWpDLFVBQWQsR0FBMkIsUUFBM0I7QUFDQXhvQyxVQUFRdUYsS0FBUixDQUFja2pDLFNBQWQsR0FBMEIsUUFBMUI7QUFDQXpvQyxVQUFRdUYsS0FBUixDQUFjbWpDLFVBQWQsR0FBMkIsTUFBM0I7QUFDQTFvQyxVQUFRdUYsS0FBUixDQUFjMUYsS0FBZCxHQUFzQixNQUF0QjtBQUNBRyxVQUFRdUYsS0FBUixDQUFjZ0ssT0FBZCxHQUF3QixPQUF4QjtBQUNBdlAsVUFBUXVGLEtBQVIsQ0FBYzVGLEtBQWQsR0FBc0IsT0FBdEI7QUFDQUssVUFBUXVGLEtBQVIsQ0FBYzQ5QixNQUFkLEdBQXVCLFlBQXZCOztBQUVBLE1BQUksQ0FBQ2pqQixTQUFTQyxLQUFkLEVBQXFCO0FBQ3BCbmdCLFdBQVEyb0MsU0FBUixHQUFvQjN6QyxPQUFPNHpDLHFCQUFQLEdBQStCLENBQ2xELHdKQURrRCxFQUVsRCxxRkFGa0QsRUFHakQ5cEMsSUFIaUQsQ0FHNUMsSUFINEMsQ0FBL0IsR0FHTCxDQUNkLGlKQURjLEVBRWQscUZBRmMsRUFHYkEsSUFIYSxDQUdSLElBSFEsQ0FIZjtBQU9BO0FBQ0QsU0FBT2tCLE9BQVA7QUFDQSxFOztVQUVNb2dCLGtCLCtCQUFtQnlvQixVLEVBQVk7QUFDckMsTUFBSTUwQixlQUFKO0FBQUEsTUFBWXpCLFdBQVo7QUFBQSxNQUFnQnhTLGdCQUFoQjtBQUNBNm9DLGVBQWFBLGNBQWMsRUFBM0I7O0FBRUE1MEIsV0FBUzQwQixXQUFXNTBCLE1BQVgsSUFBcUIsYUFBRW5ELFNBQVM3USxJQUFYLENBQTlCO0FBQ0F1UyxPQUFLcTJCLFdBQVdyMkIsRUFBWCxJQUFpQixPQUF0Qjs7QUFFQXhTLFlBQVVrZ0IsU0FBU21vQixvQkFBVCxFQUFWO0FBQ0E7O0FBRUFwMEIsU0FBT3VpQixNQUFQLENBQWN4MkIsT0FBZDtBQUNBLEU7Ozs7O0FBdERtQmtnQixRLENBRWI0b0IsTSxHQUFTLENBQUMsQ0FBRTl6QyxPQUFPK3pDLHdCOztBQUZON29CLFEsQ0FJYkMsSyxHQUFTLFlBQVc7QUFDMUIsS0FBSTtBQUNILE1BQU0yb0IsU0FBU2g0QixTQUFTQyxhQUFULENBQXVCLFFBQXZCLENBQWY7QUFDQSxTQUFPLENBQUMsRUFBRy9iLE9BQU80ekMscUJBQVAsS0FBaUNFLE9BQU94bUMsVUFBUCxDQUFrQixPQUFsQixLQUE4QndtQyxPQUFPeG1DLFVBQVAsQ0FBa0Isb0JBQWxCLENBQS9ELENBQUgsQ0FBUjtBQUNBLEVBSEQsQ0FJQSxPQUFPVyxDQUFQLEVBQVU7QUFDVCxTQUFPLEtBQVA7QUFDQTtBQUNELENBUmMsRTs7QUFKS2lkLFEsQ0FjYjhvQixPLEdBQVUsQ0FBQyxDQUFFaDBDLE9BQU9pMEMsTTtBQWRQL29CLFEsQ0FnQmJncEIsTyxHQUFVbDBDLE9BQU9tMEMsSUFBUCxJQUFlbjBDLE9BQU9vMEMsVUFBdEIsSUFBb0NwMEMsT0FBT3EwQyxRQUEzQyxJQUF1RHIwQyxPQUFPczBDLEk7a0JBaEIzRHBwQixROzs7Ozs7Ozs7OztBQ0ZyQjs7OztJQUVxQnFwQixpQjtBQUtuQiw2QkFBWUMsTUFBWixFQUFvQnhwQyxPQUFwQixFQUFxRDtBQUFBLFFBQXhCeXBDLFFBQXdCLHVFQUFmMzRCLFNBQVM3USxJQUFNOztBQUFBOztBQUNuRCxTQUFLdXBDLE1BQUwsR0FBY0EsTUFBZDtBQUNBLFNBQUsxcEMsR0FBTCxHQUFXMHBDLE9BQU8sQ0FBUCxFQUFVM08sYUFBckI7QUFDQSxTQUFLOTZCLEdBQUwsR0FBV3lwQyxPQUFPLENBQVAsRUFBVUUsZUFBckI7QUFDQSxTQUFLMXBDLE9BQUwsR0FBZUEsV0FBV0QsSUFBSUUsSUFBOUI7QUFDQSxTQUFLd3BDLFFBQUwsR0FBZ0JBLFFBQWhCO0FBQ0EsU0FBS0UsZ0JBQUwsR0FBd0IsS0FBS0MsMEJBQUwsRUFBeEI7QUFDQSxTQUFLQyxtQkFBTCxHQUEyQixLQUFLQyw2QkFBTCxFQUEzQjtBQUNBLFNBQUtySSxPQUFMLEdBQWUsRUFBZjtBQUNBLFNBQUtzSSxlQUFMLEdBQXVCLEVBQXZCO0FBQ0EsUUFBTUMsUUFBUSxDQUNFO0FBQ0V4bEIsWUFBTSxRQURSO0FBRUU5bEIsZUFBUyxNQUFJNnFDLGtCQUFrQlU7QUFGakMsS0FERixFQUtFO0FBQ0V6bEIsWUFBTSxTQURSO0FBRUU5bEIsZUFBUyxNQUFJNnFDLGtCQUFrQlc7QUFGakMsS0FMRixDQUFkO0FBVUEsUUFBSTNrQyxRQUFRLENBQUMseUJBQUQsQ0FBWjtBQUNBLFNBQUssSUFBSWpOLElBQUksQ0FBYixFQUFnQkEsSUFBSSxLQUFLeUgsR0FBTCxDQUFTb3FDLFdBQVQsQ0FBcUIveUMsTUFBekMsRUFBaUQsRUFBRWtCLENBQW5ELEVBQXNEO0FBQ3BELFVBQUk4eEMsS0FBSyxLQUFLcnFDLEdBQUwsQ0FBU29xQyxXQUFULENBQXFCN3hDLENBQXJCLENBQVQ7QUFDQSxXQUFLLElBQUlFLElBQUksQ0FBYixFQUFnQkEsSUFBSTR4QyxHQUFHQyxRQUFILENBQVlqekMsTUFBaEMsRUFBd0MsRUFBRW9CLENBQTFDLEVBQTZDO0FBQzNDLFlBQUlILElBQUkreEMsR0FBR0MsUUFBSCxDQUFZN3hDLENBQVosQ0FBUjtBQUFBLFlBQXdCOHhDLGdCQUF4QjtBQUNBLDZCQUFnQk4sS0FBaEIsa0hBQXVCO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQSxjQUFmTyxJQUFlOztBQUNyQixjQUFJLENBQUNseUMsRUFBRW15QyxZQUFGLENBQWU1d0MsT0FBZixDQUF1QjJ3QyxLQUFLL2xCLElBQTVCLENBQUwsRUFBd0M7QUFDdEM4bEIsc0JBQVUsQ0FBQ0EsV0FBV2p5QyxFQUFFaXlDLE9BQWQsRUFBdUI1ckMsT0FBdkIsQ0FBK0IsSUFBSXFtQixNQUFKLENBQVd3bEIsS0FBSy9sQixJQUFoQixFQUFzQixHQUF0QixDQUEvQixFQUEyRCtsQixLQUFLN3JDLE9BQWhFLENBQVY7QUFDRDtBQUNGO0FBQ0QsWUFBRzRyQyxPQUFILEVBQVk7QUFDVi9rQyxnQkFBTWhOLElBQU4sQ0FBVyt4QyxPQUFYO0FBQ0Q7QUFDRjtBQUNGO0FBQ0Qva0MsVUFBTWhOLElBQU4sQ0FBVyxVQUFYO0FBQ0EsaUJBQUUsS0FBS3dILEdBQUwsQ0FBUzBVLElBQVgsRUFBaUIraEIsTUFBakIsQ0FBd0IsYUFBRWp4QixNQUFNekcsSUFBTixDQUFXLEVBQVgsQ0FBRixDQUF4QjtBQUNEOzs4QkFFRDJyQyxhLDBCQUFjL3lDLEMsRUFBR1IsQyxFQUFHO0FBQ2xCLFFBQU13ekMsV0FBVyxhQUFFLEtBQUsxcUMsT0FBUCxDQUFqQjtBQUNBLFFBQU0wTCxTQUFTZy9CLFNBQVNoL0IsTUFBVCxFQUFmO0FBQ0EsV0FBTztBQUNMaFUsU0FBR2dVLE9BQU9LLElBQVAsR0FBWTIrQixTQUFTL3FDLEtBQVQsS0FBaUJqSSxDQUQzQjtBQUVMUixTQUFHd1UsT0FBTzJuQixHQUFQLEdBQVdxWCxTQUFTOXFDLE1BQVQsTUFBbUIsSUFBRTFJLENBQXJCO0FBRlQsS0FBUDtBQUlELEc7OzhCQUVEeXpDLFkseUJBQWEzcUMsTyxFQUFTaUQsQyxFQUFHekosQyxFQUFHMEosSSxFQUFNMG5DLGEsRUFBZTtBQUMvQyxRQUFNeG5DLFFBQVEsRUFBZDtBQUNBLDBCQUFhLEtBQUt1bUMsZ0JBQWxCLHlIQUFvQztBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQUEsVUFBNUIzdUMsRUFBNEI7O0FBQ2xDb0ksWUFBTXBJLEVBQU4sSUFBV2lJLEVBQUVqSSxFQUFGLENBQVg7QUFDRDtBQUNELDBCQUFhLEtBQUs2dUMsbUJBQWxCLHlIQUF1QztBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQUEsVUFBL0I3dUMsR0FBK0I7O0FBQ3JDb0ksWUFBTXBJLEdBQU4sSUFBV3FILFNBQVg7QUFDRDtBQUNELFNBQUksSUFBSXJILENBQVIsSUFBYTR2QyxhQUFiLEVBQTRCO0FBQzFCLFVBQUdBLGNBQWMxckMsY0FBZCxDQUE2QmxFLENBQTdCLENBQUgsRUFBb0M7QUFDbENvSSxjQUFNcEksQ0FBTixJQUFXNHZDLGNBQWM1dkMsQ0FBZCxDQUFYO0FBQ0Q7QUFDRjtBQUNEb0ksVUFBTUMsSUFBTixHQUFhLEtBQUt2RCxHQUFsQjtBQUNBc0QsVUFBTWtuQixLQUFOLEdBQWM5d0IsRUFBRTlCLENBQWhCO0FBQ0EwTCxVQUFNbW5CLEtBQU4sR0FBYy93QixFQUFFdEMsQ0FBaEI7QUFDQSxRQUFNb00sS0FBS3JOLFFBQUU0TSxLQUFGLENBQVFLLElBQVIsRUFBY0UsS0FBZCxDQUFYO0FBQ0FFLE9BQUd1bkMsU0FBSCxHQUFlNW5DLEVBQUU0bkMsU0FBakI7QUFDQSxpQkFBRTdxQyxPQUFGLEVBQVcyd0IsT0FBWCxDQUFtQnJ0QixFQUFuQjtBQUNELEc7OzhCQUVEeVMsUSxxQkFBUy9WLE8sRUFBU2YsSSxFQUFNO0FBQ3RCLGlCQUFFZSxPQUFGLEVBQVcrVixRQUFYLENBQW9COVcsSUFBcEI7QUFDQSxRQUFNc0csUUFBUSxLQUFLekYsR0FBTCxDQUFTZ3JDLGdCQUFULENBQTBCOXFDLE9BQTFCLENBQWQ7QUFDQSxTQUFLeWhDLE9BQUwsQ0FBYWxwQyxJQUFiLENBQWtCLGFBQUUsS0FBS2t4QyxRQUFQLEVBQWlCdjBCLEdBQWpCLENBQXFCLFFBQXJCLENBQWxCO0FBQ0EsaUJBQUUsS0FBS3UwQixRQUFQLEVBQWlCdjBCLEdBQWpCLENBQXFCLFFBQXJCLEVBQStCM1AsTUFBTXdsQyxnQkFBTixDQUF1QixRQUF2QixDQUEvQjtBQUNELEc7OzhCQUVENTBCLFcsd0JBQVluVyxPLEVBQVNmLEksRUFBTTtBQUN6QixpQkFBRWUsT0FBRixFQUFXbVcsV0FBWCxDQUF1QmxYLElBQXZCO0FBQ0EsaUJBQUUsS0FBS3dxQyxRQUFQLEVBQWlCdjBCLEdBQWpCLENBQXFCLFFBQXJCLEVBQStCLEtBQUt1c0IsT0FBTCxDQUFhTyxHQUFiLEVBQS9CO0FBQ0QsRzs7OEJBRURnSixZLHlCQUFhaHJDLE8sRUFBUztBQUNwQixTQUFLK1YsUUFBTCxDQUFjL1YsT0FBZCxFQUF1QnVwQyxrQkFBa0JVLEtBQXpDO0FBQ0QsRzs7OEJBRURnQixZLHlCQUFhanJDLE8sRUFBUztBQUNwQixTQUFLbVcsV0FBTCxDQUFpQm5XLE9BQWpCLEVBQTBCdXBDLGtCQUFrQlUsS0FBNUM7QUFDRCxHOzs4QkFFRGlCLGUsNEJBQWdCbHJDLE8sRUFBUztBQUN2QixTQUFLK1YsUUFBTCxDQUFjL1YsT0FBZCxFQUF1QnVwQyxrQkFBa0JXLE1BQXpDO0FBQ0QsRzs7OEJBRURpQixpQiw4QkFBa0JuckMsTyxFQUFTO0FBQ3pCLFNBQUttVyxXQUFMLENBQWlCblcsT0FBakIsRUFBMEJ1cEMsa0JBQWtCVyxNQUE1QztBQUNELEc7OzhCQUVEa0IsZSw0QkFBZ0I3MUIsRyxFQUFLO0FBQ25CLFNBQUt3MEIsZUFBTCxDQUFxQnh4QyxJQUFyQixDQUEwQmdkLEdBQTFCO0FBQ0QsRzs7OEJBRUQzUyxNLHFCQUFTO0FBQ1AsMEJBQWUsS0FBS21uQyxlQUFwQix5SEFBcUM7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBLFVBQTdCeDBCLEdBQTZCOztBQUNuQ0EsVUFBSSxLQUFLelYsR0FBVCxFQUFjLEtBQUtDLEdBQW5CO0FBQ0Q7QUFDRixHOzs4QkFFRHNyQyxnQiw2QkFBaUI3eEMsQyxFQUFHO0FBQ2xCLFFBQUlvZ0IsT0FBTyxLQUFLN1osR0FBTCxDQUFTRSxJQUFwQjtBQUFBLFFBQTBCbTNCLE9BQU8sSUFBakM7QUFDQSxXQUFNQSxJQUFOLEVBQVk7QUFDVkEsYUFBTyxLQUFQO0FBQ0EsV0FBSSxJQUFJOStCLElBQUUsQ0FBVixFQUFhQSxJQUFFc2hCLEtBQUsweEIsVUFBTCxDQUFnQmwwQyxNQUEvQixFQUF1QyxFQUFFa0IsQ0FBekMsRUFBNEM7QUFDMUMsWUFBTWl6QyxRQUFRM3hCLEtBQUsweEIsVUFBTCxDQUFnQmh6QyxDQUFoQixDQUFkO0FBQ0EsWUFBR2l6QyxpQkFBaUIsS0FBS3pyQyxHQUFMLENBQVMwckMsT0FBN0IsRUFBc0M7QUFDcEMsY0FBTXRhLEtBQUssYUFBRXFhLEtBQUYsQ0FBWDtBQUFBLGNBQXFCNy9CLFNBQVN3bEIsR0FBR3hsQixNQUFILEVBQTlCO0FBQUEsY0FBMkM5TCxTQUFTc3hCLEdBQUd0eEIsTUFBSCxFQUFwRDtBQUFBLGNBQWlFRCxRQUFRdXhCLEdBQUd2eEIsS0FBSCxFQUF6RTtBQUNBLGNBQUduRyxFQUFFOUIsQ0FBRixHQUFJZ1UsT0FBT0ssSUFBWCxJQUFtQnZTLEVBQUU5QixDQUFGLEdBQUlnVSxPQUFPSyxJQUFQLEdBQVlwTSxLQUFuQyxJQUE0Q25HLEVBQUV0QyxDQUFGLEdBQUl3VSxPQUFPMm5CLEdBQXZELElBQThENzVCLEVBQUV0QyxDQUFGLEdBQUl3VSxPQUFPMm5CLEdBQVAsR0FBV3p6QixNQUFoRixFQUF3RjtBQUN0RmdhLG1CQUFPMnhCLEtBQVA7QUFDQW5VLG1CQUFPLElBQVA7QUFDQTtBQUNEO0FBQ0Y7QUFDRjtBQUNGO0FBQ0QsV0FBT3hkLElBQVA7QUFDRCxHOzs4QkFFRDZ4QixVLHVCQUFXanlDLEMsRUFBRztBQUNaLFFBQU1reUMsT0FBTyxLQUFLbEMsTUFBTCxDQUFZOTlCLE1BQVosRUFBYjtBQUNBLFNBQUs4OUIsTUFBTCxDQUFZOTlCLE1BQVosQ0FBbUIsRUFBQ0ssTUFBTSxNQUFJL1csT0FBTzIyQyxVQUFYLEdBQXNCbnlDLEVBQUU5QixDQUEvQixFQUFrQzI3QixLQUFLLE1BQUlyK0IsT0FBTzQyQyxXQUFYLEdBQXVCcHlDLEVBQUV0QyxDQUFoRSxFQUFuQjtBQUNBLFFBQUk4SSxVQUFVLEtBQUtELEdBQUwsQ0FBU3NyQyxnQkFBVCxDQUEwQjd4QyxFQUFFOUIsQ0FBNUIsRUFBK0I4QixFQUFFdEMsQ0FBakMsQ0FBZDtBQUNBLFFBQUcsQ0FBQzhJLE9BQUosRUFBYTtBQUFFO0FBQ2JBLGdCQUFVLEtBQUtELEdBQUwsQ0FBU3NyQyxnQkFBVCxDQUEwQjd4QyxFQUFFOUIsQ0FBNUIsRUFBK0I4QixFQUFFdEMsQ0FBakMsQ0FBVjtBQUNEO0FBQ0QsU0FBS3N5QyxNQUFMLENBQVk5OUIsTUFBWixDQUFtQmdnQyxJQUFuQjtBQUNBLFdBQU8xckMsVUFBU0EsT0FBVCxHQUFrQixLQUFLcXJDLGdCQUFMLENBQXNCN3hDLENBQXRCLENBQXpCO0FBQ0QsRzs7OEJBRURvM0IsUSxxQkFBUzN0QixDLEVBQUdsRCxHLEVBQUtySSxDLEVBQUdSLEMsRUFBRztBQUNyQixRQUFNc0MsSUFBSSxLQUFLaXhDLGFBQUwsQ0FBbUIveUMsQ0FBbkIsRUFBc0JSLENBQXRCLENBQVY7QUFBQSxRQUNNOEksVUFBVUQsUUFBTSxLQUFLQSxHQUFYLEdBQWdCLEtBQUswckMsVUFBTCxDQUFnQmp5QyxDQUFoQixDQUFoQixHQUFvQzZJLFNBRHBEO0FBRUEsUUFBSXN1QixVQUFVM3dCLFlBQVlxQyxTQUExQjtBQUFBLFFBQXFDTyxTQUFTLEtBQTlDOztBQUVBLFlBQU9LLEVBQUVDLElBQVQ7QUFDRSxXQUFLLFdBQUw7QUFBa0I7QUFDaEIsY0FBRyxLQUFLMm9DLFVBQVIsRUFBb0I7QUFDbEIsaUJBQUtWLGlCQUFMLENBQXVCLEtBQUtVLFVBQTVCO0FBQ0FqcEMscUJBQVMsSUFBVDtBQUNEO0FBQ0QsZUFBS2lwQyxVQUFMLEdBQWtCN3JDLE9BQWxCO0FBQ0EsY0FBRyxLQUFLNnJDLFVBQVIsRUFBb0I7QUFDbEIsaUJBQUtYLGVBQUwsQ0FBcUIsS0FBS1csVUFBMUI7QUFDQWpwQyxxQkFBUyxJQUFUO0FBQ0Q7QUFDRDtBQUNEO0FBQ0QsV0FBSyxTQUFMO0FBQWdCO0FBQ2QsY0FBRyxLQUFLaXBDLFVBQVIsRUFBb0I7QUFDbEIsaUJBQUtWLGlCQUFMLENBQXVCLEtBQUtVLFVBQTVCO0FBQ0FqcEMscUJBQVMsSUFBVDtBQUNEO0FBQ0QsZUFBS2lvQyxTQUFMLEdBQWlCNW5DLEVBQUU0bkMsU0FBbkI7QUFDQTtBQUNEO0FBQ0QsV0FBSyxPQUFMO0FBQWM7QUFDWmxhLG9CQUFVM3dCLFdBQVcsS0FBSzZyQyxVQUFMLEtBQW9CN3JDLE9BQXpDLENBRFksQ0FDcUM7QUFDakQsZUFBSzZyQyxVQUFMLEdBQWtCeHBDLFNBQWxCO0FBQ0E7QUFDRDtBQUNELFdBQUssWUFBTDtBQUNBLFdBQUssV0FBTDtBQUNBLFdBQUssV0FBTDtBQUFrQjtBQUNoQixjQUFJeXBDLFNBQVMsSUFBYjtBQUNBLGNBQUcsS0FBS0MsVUFBTCxLQUFvQi9yQyxPQUFwQixJQUErQixLQUFLK3JDLFVBQXZDLEVBQW1EO0FBQ2pELGlCQUFLcEIsWUFBTCxDQUFrQixLQUFLb0IsVUFBdkIsRUFBbUM5b0MsQ0FBbkMsRUFBc0N6SixDQUF0QyxFQUF5QyxVQUF6QyxFQUFxRCxFQUFDd3lDLGVBQWVoc0MsVUFBU0EsT0FBVCxHQUFrQixJQUFsQyxFQUFyRDtBQUNBLGlCQUFLaXJDLFlBQUwsQ0FBa0IsS0FBS2MsVUFBdkI7QUFDQUQscUJBQVMsS0FBS0MsVUFBZDtBQUNBLGlCQUFLQSxVQUFMLEdBQWtCMXBDLFNBQWxCO0FBQ0FPLHFCQUFTLElBQVQ7QUFDRDtBQUNELGNBQUcsQ0FBQyxLQUFLbXBDLFVBQU4sSUFBb0IvckMsT0FBdkIsRUFBZ0M7QUFDOUIsaUJBQUsycUMsWUFBTCxDQUFrQjNxQyxPQUFsQixFQUEyQmlELENBQTNCLEVBQThCekosQ0FBOUIsRUFBaUMsV0FBakMsRUFBOEMsRUFBQ3d5QyxlQUFlRixNQUFoQixFQUE5QztBQUNBLGlCQUFLZCxZQUFMLENBQWtCaHJDLE9BQWxCO0FBQ0EsaUJBQUsrckMsVUFBTCxHQUFrQi9yQyxPQUFsQjtBQUNBNEMscUJBQVMsSUFBVDtBQUNEO0FBQ0QrdEIsb0JBQVUzd0IsV0FBV2lELEVBQUVDLElBQUYsS0FBVyxXQUFoQztBQUNBO0FBQ0Q7QUFDRCxXQUFLLFlBQUw7QUFDQSxXQUFLLFVBQUw7QUFBaUI7QUFDZixjQUFHLEtBQUs2b0MsVUFBUixFQUFvQjtBQUNsQixpQkFBS3BCLFlBQUwsQ0FBa0IsS0FBS29CLFVBQXZCLEVBQW1DOW9DLENBQW5DLEVBQXNDekosQ0FBdEMsRUFBeUMsVUFBekMsRUFBcUQsRUFBQ3d5QyxlQUFlL29DLEVBQUUrb0MsYUFBbEIsRUFBckQ7QUFDQSxpQkFBS2YsWUFBTCxDQUFrQixLQUFLYyxVQUF2QjtBQUNBLGlCQUFLQSxVQUFMLEdBQWtCMXBDLFNBQWxCO0FBQ0FPLHFCQUFTLElBQVQ7QUFDRDtBQUNEK3RCLG9CQUFVLEtBQVY7QUFDQTtBQUNEO0FBeERIO0FBMERBLFFBQUdBLE9BQUgsRUFBWTtBQUNWLFdBQUtnYSxZQUFMLENBQWtCM3FDLE9BQWxCLEVBQTJCaUQsQ0FBM0IsRUFBOEJ6SixDQUE5QixFQUFpQ3lKLEVBQUVDLElBQW5DO0FBQ0Q7QUFDRCxRQUFHTixNQUFILEVBQVc7QUFDVCxXQUFLQSxNQUFMO0FBQ0Q7QUFDRixHOzs4QkFFRGtuQyw2Qiw0Q0FBZ0M7QUFDOUIsV0FBTyxDQUNMLFNBREssRUFFTCxTQUZLLEVBR0wsU0FISyxFQUlMLFNBSkssRUFLTCxTQUxLLEVBTUwsU0FOSyxDQUFQO0FBUUQsRzs7OEJBRURGLDBCLHlDQUE2QjtBQUMzQixXQUFPLENBQ0wsUUFESyxFQUVMLFNBRkssRUFHTCxRQUhLLEVBSUwsU0FKSyxFQUtMLFlBTEssRUFNTCxnQkFOSyxFQU9MLE1BUEssRUFRTCxVQVJLLEVBU0wsU0FUSyxFQVVMLE1BVkssRUFXTCxRQVhLLEVBWUwsWUFaSyxFQWFMLG9CQWJLLEVBY0wsS0FkSyxFQWVMLFNBZkssRUFnQkwsU0FoQkssRUFpQkwsV0FqQkssRUFrQkwsYUFsQkssRUFtQkwsVUFuQkssRUFvQkwsZUFwQkssRUFxQkwsU0FyQkssRUFzQkwsT0F0QkssQ0FBUDtBQXdCRCxHOzs7OztBQUlIOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTdQcUJMLGlCLENBRVpVLEssR0FBUSxpQjtBQUZJVixpQixDQUdaVyxNLEdBQVMsa0I7a0JBSEdYLGlCOzs7Ozs7Ozs7Ozs7O0lDRkEwQyxTLEdBRW5CLG1CQUFZbnNDLEdBQVosRUFBaUJDLEdBQWpCLEVBQXNCMEUsS0FBdEIsRUFBNkI7QUFBQTs7QUFDM0IsUUFBTXFFLE9BQU8sSUFBYjtBQUNBLFNBQUs5VCxNQUFMLEdBQWM4SyxHQUFkO0FBQ0EsU0FBS2dSLFFBQUwsR0FBZ0IvUSxHQUFoQjtBQUNBLFNBQUswRSxLQUFMLEdBQWFBLEtBQWI7O0FBRUEsUUFBTXluQyxPQUFPQyxTQUFiO0FBQ0EsUUFBTUMsVUFBVUMsWUFBaEI7QUFDQSxRQUFNQyxZQUFZQyxjQUFsQjtBQUNBLFFBQU1DLFNBQVNDLFdBQWY7O0FBRUEsU0FBS0MsS0FBTCxHQUFhQSxLQUFiO0FBQ0EsU0FBS0MsS0FBTCxHQUFhQSxLQUFiO0FBQ0EsU0FBS0MsTUFBTCxHQUFjQSxNQUFkO0FBQ0EsU0FBS0MsTUFBTCxHQUFjQSxNQUFkO0FBQ0EsU0FBS0MsV0FBTCxHQUFtQkEsV0FBbkI7QUFDQSxTQUFLQyxJQUFMLEdBQVk7QUFDRVQsbUJBQVdBLFNBRGI7QUFFRUUsZ0JBQVFBLE1BRlY7QUFHRU4sY0FBTUEsSUFIUjtBQUlFRSxpQkFBU0E7QUFKWCxLQUFaOztBQU9BOzs7Ozs7Ozs7Ozs7OztBQWNBLGFBQVNNLEtBQVQsQ0FBZTl5QixJQUFmLEVBQXFCdUYsT0FBckIsRUFBOEI7QUFDMUJBLGtCQUFVQSxXQUFXLEVBQXJCO0FBQ0EsZUFBT25KLFFBQVFDLE9BQVIsQ0FBZ0IyRCxJQUFoQixFQUNGckMsSUFERSxDQUNHLFVBQVVxQyxJQUFWLEVBQWdCO0FBQ2xCLG1CQUFPb3pCLFVBQVVwekIsSUFBVixFQUFnQnVGLFFBQVEzYixNQUF4QixFQUFnQyxJQUFoQyxDQUFQO0FBQ0gsU0FIRSxFQUlGK1QsSUFKRSxDQUlHMDFCLFVBSkgsRUFLRjExQixJQUxFLENBS0cyMUIsWUFMSCxFQU1GMzFCLElBTkUsQ0FNRzQxQixZQU5ILEVBT0Y1MUIsSUFQRSxDQU9HLFVBQVUzUCxLQUFWLEVBQWlCO0FBQ25CLG1CQUFPd2xDLGVBQWV4bEMsS0FBZixFQUNIdVgsUUFBUXhmLEtBQVIsSUFBaUJ1c0MsS0FBS3ZzQyxLQUFMLENBQVdpYSxJQUFYLENBRGQsRUFFSHVGLFFBQVF2ZixNQUFSLElBQWtCc3NDLEtBQUt0c0MsTUFBTCxDQUFZZ2EsSUFBWixDQUZmLENBQVA7QUFJSCxTQVpFLENBQVA7O0FBY0EsaUJBQVN1ekIsWUFBVCxDQUFzQnZsQyxLQUF0QixFQUE2QjtBQUN6QixnQkFBSXVYLFFBQVFrdUIsT0FBWixFQUFxQnpsQyxNQUFNckMsS0FBTixDQUFZK25DLGVBQVosR0FBOEJudUIsUUFBUWt1QixPQUF0Qzs7QUFFckIsZ0JBQUlsdUIsUUFBUXhmLEtBQVosRUFBbUJpSSxNQUFNckMsS0FBTixDQUFZNUYsS0FBWixHQUFvQndmLFFBQVF4ZixLQUFSLEdBQWdCLElBQXBDO0FBQ25CLGdCQUFJd2YsUUFBUXZmLE1BQVosRUFBb0JnSSxNQUFNckMsS0FBTixDQUFZM0YsTUFBWixHQUFxQnVmLFFBQVF2ZixNQUFSLEdBQWlCLElBQXRDOztBQUVwQixnQkFBSXVmLFFBQVE1WixLQUFaLEVBQ0l1RCxLQUFLOVQsTUFBTCxDQUFZZ1MsTUFBWixDQUFtQkMsSUFBbkIsQ0FBd0JrWSxRQUFRNVosS0FBaEMsRUFBdUNtUixPQUF2QyxDQUErQyxVQUFVNjJCLFFBQVYsRUFBb0I7QUFDL0QzbEMsc0JBQU1yQyxLQUFOLENBQVlnb0MsUUFBWixJQUF3QnB1QixRQUFRNVosS0FBUixDQUFjZ29DLFFBQWQsQ0FBeEI7QUFDSCxhQUZEOztBQUlKLG1CQUFPM2xDLEtBQVA7QUFDSDtBQUNKOztBQUVEOzs7OztBQUtBLGFBQVNrbEMsV0FBVCxDQUFxQmx6QixJQUFyQixFQUEyQnVGLE9BQTNCLEVBQW9DO0FBQ2hDLGVBQU9xdUIsS0FBSzV6QixJQUFMLEVBQVd1RixXQUFXLEVBQXRCLEVBQ0Y1SCxJQURFLENBQ0csVUFBVXV4QixNQUFWLEVBQWtCO0FBQ3BCLG1CQUFPQSxPQUFPeG1DLFVBQVAsQ0FBa0IsSUFBbEIsRUFBd0JtckMsWUFBeEIsQ0FDSCxDQURHLEVBRUgsQ0FGRyxFQUdIdkIsS0FBS3ZzQyxLQUFMLENBQVdpYSxJQUFYLENBSEcsRUFJSHN5QixLQUFLdHNDLE1BQUwsQ0FBWWdhLElBQVosQ0FKRyxFQUtML2dCLElBTEY7QUFNSCxTQVJFLENBQVA7QUFTSDs7QUFFRDs7Ozs7QUFLQSxhQUFTOHpDLEtBQVQsQ0FBZS95QixJQUFmLEVBQXFCdUYsT0FBckIsRUFBOEI7QUFDMUIsZUFBT3F1QixLQUFLNXpCLElBQUwsRUFBV3VGLFdBQVcsRUFBdEIsRUFDRjVILElBREUsQ0FDRyxVQUFVdXhCLE1BQVYsRUFBa0I7QUFDcEIsbUJBQU9BLE9BQU80RSxTQUFQLEVBQVA7QUFDSCxTQUhFLENBQVA7QUFJSDs7QUFFRDs7Ozs7QUFLQSxhQUFTZCxNQUFULENBQWdCaHpCLElBQWhCLEVBQXNCdUYsT0FBdEIsRUFBK0I7QUFDM0JBLGtCQUFVQSxXQUFXLEVBQXJCO0FBQ0EsZUFBT3F1QixLQUFLNXpCLElBQUwsRUFBV3VGLE9BQVgsRUFDRjVILElBREUsQ0FDRyxVQUFVdXhCLE1BQVYsRUFBa0I7QUFDcEIsbUJBQU9BLE9BQU80RSxTQUFQLENBQWlCLFlBQWpCLEVBQStCdnVCLFFBQVF3dUIsT0FBUixJQUFtQixHQUFsRCxDQUFQO0FBQ0gsU0FIRSxDQUFQO0FBSUg7O0FBRUQ7Ozs7O0FBS0EsYUFBU2QsTUFBVCxDQUFnQmp6QixJQUFoQixFQUFzQnVGLE9BQXRCLEVBQStCO0FBQzNCLGVBQU9xdUIsS0FBSzV6QixJQUFMLEVBQVd1RixXQUFXLEVBQXRCLEVBQ0Y1SCxJQURFLENBQ0cyMEIsS0FBSzBCLFlBRFIsQ0FBUDtBQUVIOztBQUVELGFBQVNKLElBQVQsQ0FBY0ssT0FBZCxFQUF1QjF1QixPQUF2QixFQUFnQztBQUM1QixlQUFPdXRCLE1BQU1tQixPQUFOLEVBQWUxdUIsT0FBZixFQUNGNUgsSUFERSxDQUNHMjBCLEtBQUs0QixTQURSLEVBRUZ2MkIsSUFGRSxDQUVHMjBCLEtBQUs1M0IsS0FBTCxDQUFXLEdBQVgsQ0FGSCxFQUdGaUQsSUFIRSxDQUdHLFVBQVVyVyxLQUFWLEVBQWlCO0FBQ25CLGdCQUFNNG5DLFNBQVNpRixVQUFVRixPQUFWLENBQWY7QUFDQS9FLG1CQUFPeG1DLFVBQVAsQ0FBa0IsSUFBbEIsRUFBd0JsQixTQUF4QixDQUFrQ0YsS0FBbEMsRUFBeUMsQ0FBekMsRUFBNEMsQ0FBNUM7QUFDQSxtQkFBTzRuQyxNQUFQO0FBQ0gsU0FQRSxDQUFQOztBQVNBLGlCQUFTaUYsU0FBVCxDQUFtQkYsT0FBbkIsRUFBNEI7QUFDeEIsZ0JBQU0vRSxTQUFTaGdDLEtBQUtnSSxRQUFMLENBQWNDLGFBQWQsQ0FBNEIsUUFBNUIsQ0FBZjtBQUNBKzNCLG1CQUFPbnBDLEtBQVAsR0FBZXdmLFFBQVF4ZixLQUFSLElBQWlCdXNDLEtBQUt2c0MsS0FBTCxDQUFXa3VDLE9BQVgsQ0FBaEM7QUFDQS9FLG1CQUFPbHBDLE1BQVAsR0FBZ0J1ZixRQUFRdmYsTUFBUixJQUFrQnNzQyxLQUFLdHNDLE1BQUwsQ0FBWWl1QyxPQUFaLENBQWxDOztBQUVBLGdCQUFJMXVCLFFBQVFrdUIsT0FBWixFQUFxQjtBQUNqQixvQkFBTWx0QyxNQUFNMm9DLE9BQU94bUMsVUFBUCxDQUFrQixJQUFsQixDQUFaO0FBQ0FuQyxvQkFBSVMsU0FBSixHQUFnQnVlLFFBQVFrdUIsT0FBeEI7QUFDQWx0QyxvQkFBSTZ0QyxRQUFKLENBQWEsQ0FBYixFQUFnQixDQUFoQixFQUFtQmxGLE9BQU9ucEMsS0FBMUIsRUFBaUNtcEMsT0FBT2xwQyxNQUF4QztBQUNIOztBQUVELG1CQUFPa3BDLE1BQVA7QUFDSDtBQUNKOztBQUVELGFBQVNrRSxTQUFULENBQW1CcHpCLElBQW5CLEVBQXlCcFcsTUFBekIsRUFBaUN5cUMsSUFBakMsRUFBdUM7QUFDbkMsWUFBSSxDQUFDQSxJQUFELElBQVN6cUMsTUFBVCxJQUFtQixDQUFDQSxPQUFPb1csSUFBUCxDQUF4QixFQUFzQyxPQUFPNUQsUUFBUUMsT0FBUixFQUFQOztBQUV0QyxlQUFPRCxRQUFRQyxPQUFSLENBQWdCMkQsSUFBaEIsRUFDRnJDLElBREUsQ0FDRzIyQixZQURILEVBRUYzMkIsSUFGRSxDQUVHLFVBQVUzUCxLQUFWLEVBQWlCO0FBQ25CLG1CQUFPdW1DLGNBQWN2MEIsSUFBZCxFQUFvQmhTLEtBQXBCLEVBQTJCcEUsTUFBM0IsQ0FBUDtBQUNILFNBSkUsRUFLRitULElBTEUsQ0FLRyxVQUFVM1AsS0FBVixFQUFpQjtBQUNuQixtQkFBT3dtQyxhQUFheDBCLElBQWIsRUFBbUJoUyxLQUFuQixDQUFQO0FBQ0gsU0FQRSxDQUFQOztBQVNBLGlCQUFTc21DLFlBQVQsQ0FBc0J0MEIsSUFBdEIsRUFBNEI7QUFDeEIsZ0JBQUlzeUIsS0FBS21DLFFBQUwsQ0FBY3owQixJQUFkLENBQUosRUFBeUIsT0FBT3N5QixLQUFLNEIsU0FBTCxDQUFlbDBCLEtBQUs4ekIsU0FBTCxFQUFmLENBQVA7QUFDekIsbUJBQU85ekIsS0FBS296QixTQUFMLENBQWUsS0FBZixDQUFQO0FBQ0g7O0FBRUQsaUJBQVNtQixhQUFULENBQXVCRyxRQUF2QixFQUFpQzFtQyxLQUFqQyxFQUF3Q3BFLE1BQXhDLEVBQWdEO0FBQzVDLGdCQUFNc1AsV0FBV3c3QixTQUFTaEQsVUFBMUI7QUFDQSxnQkFBSXg0QixTQUFTMWIsTUFBVCxLQUFvQixDQUF4QixFQUEyQixPQUFPNGUsUUFBUUMsT0FBUixDQUFnQnJPLEtBQWhCLENBQVA7O0FBRTNCLG1CQUFPMm1DLHFCQUFxQjNtQyxLQUFyQixFQUE0QnNrQyxLQUFLc0MsT0FBTCxDQUFhMTdCLFFBQWIsQ0FBNUIsRUFBb0R0UCxNQUFwRCxFQUNGK1QsSUFERSxDQUNHLFlBQVk7QUFDZCx1QkFBTzNQLEtBQVA7QUFDSCxhQUhFLENBQVA7O0FBS0EscUJBQVMybUMsb0JBQVQsQ0FBOEJ0NkIsTUFBOUIsRUFBc0NuQixRQUF0QyxFQUFnRHRQLE1BQWhELEVBQXdEO0FBQ3BELG9CQUFJekgsT0FBT2lhLFFBQVFDLE9BQVIsRUFBWDtBQUNBbkQseUJBQVM0RCxPQUFULENBQWlCLFVBQVU2MEIsS0FBVixFQUFpQjtBQUM5Qnh2QywyQkFBT0EsS0FDRndiLElBREUsQ0FDRyxZQUFZO0FBQ2QsK0JBQU95MUIsVUFBVXpCLEtBQVYsRUFBaUIvbkMsTUFBakIsQ0FBUDtBQUNILHFCQUhFLEVBSUYrVCxJQUpFLENBSUcsVUFBVWszQixVQUFWLEVBQXNCO0FBQ3hCLDRCQUFJQSxVQUFKLEVBQWdCeDZCLE9BQU81QyxXQUFQLENBQW1CbzlCLFVBQW5CO0FBQ25CLHFCQU5FLENBQVA7QUFPSCxpQkFSRDtBQVNBLHVCQUFPMXlDLElBQVA7QUFDSDtBQUNKOztBQUVELGlCQUFTcXlDLFlBQVQsQ0FBc0JFLFFBQXRCLEVBQWdDMW1DLEtBQWhDLEVBQXVDO0FBQ25DLGdCQUFJLENBQUNza0MsS0FBS3dDLFNBQUwsQ0FBZTltQyxLQUFmLENBQUwsRUFBNEIsT0FBT0EsS0FBUDs7QUFFNUIsbUJBQU9vTyxRQUFRQyxPQUFSLEdBQ0ZzQixJQURFLENBQ0dvM0IsVUFESCxFQUVGcDNCLElBRkUsQ0FFR3EzQixtQkFGSCxFQUdGcjNCLElBSEUsQ0FHR3MzQixhQUhILEVBSUZ0M0IsSUFKRSxDQUlHdTNCLE1BSkgsRUFLRnYzQixJQUxFLENBS0csWUFBWTtBQUNkLHVCQUFPM1AsS0FBUDtBQUNILGFBUEUsQ0FBUDs7QUFTQSxxQkFBUyttQyxVQUFULEdBQXNCO0FBQ2xCSSwwQkFBVWptQyxLQUFLOVQsTUFBTCxDQUFZODFDLGdCQUFaLENBQTZCd0QsUUFBN0IsQ0FBVixFQUFrRDFtQyxNQUFNckMsS0FBeEQ7O0FBRUEseUJBQVN3cEMsU0FBVCxDQUFtQkMsTUFBbkIsRUFBMkJsM0IsTUFBM0IsRUFBbUM7QUFDL0Isd0JBQUlrM0IsT0FBTzFFLE9BQVgsRUFBb0J4eUIsT0FBT3d5QixPQUFQLEdBQWlCMEUsT0FBTzFFLE9BQXhCLENBQXBCLEtBQ0syRSxlQUFlRCxNQUFmLEVBQXVCbDNCLE1BQXZCOztBQUVMLDZCQUFTbTNCLGNBQVQsQ0FBd0JELE1BQXhCLEVBQWdDbDNCLE1BQWhDLEVBQXdDO0FBQ3BDbzBCLDZCQUFLc0MsT0FBTCxDQUFhUSxNQUFiLEVBQXFCdDRCLE9BQXJCLENBQTZCLFVBQVV6WCxJQUFWLEVBQWdCO0FBQ3pDNlksbUNBQU9vM0IsV0FBUCxDQUNJandDLElBREosRUFFSSt2QyxPQUFPakUsZ0JBQVAsQ0FBd0I5ckMsSUFBeEIsQ0FGSixFQUdJK3ZDLE9BQU9HLG1CQUFQLENBQTJCbHdDLElBQTNCLENBSEo7QUFLSCx5QkFORDtBQU9IO0FBQ0o7QUFDSjs7QUFFRCxxQkFBUzJ2QyxtQkFBVCxHQUErQjtBQUMzQixpQkFBQyxTQUFELEVBQVksUUFBWixFQUFzQmw0QixPQUF0QixDQUE4QixVQUFVMVcsT0FBVixFQUFtQjtBQUM3Q292Qyx1Q0FBbUJwdkMsT0FBbkI7QUFDSCxpQkFGRDs7QUFJQSx5QkFBU292QyxrQkFBVCxDQUE0QnB2QyxPQUE1QixFQUFxQztBQUNqQyx3QkFBTXVGLFFBQVF1RCxLQUFLOVQsTUFBTCxDQUFZODFDLGdCQUFaLENBQTZCd0QsUUFBN0IsRUFBdUN0dUMsT0FBdkMsQ0FBZDtBQUNBLHdCQUFNKzZCLFVBQVV4MUIsTUFBTXdsQyxnQkFBTixDQUF1QixTQUF2QixDQUFoQjs7QUFFQSx3QkFBSWhRLFlBQVksRUFBWixJQUFrQkEsWUFBWSxNQUFsQyxFQUEwQzs7QUFFMUMsd0JBQU1zVSxZQUFZbkQsS0FBS29ELEdBQUwsRUFBbEI7QUFDQTFuQywwQkFBTXluQyxTQUFOLEdBQWtCem5DLE1BQU15bkMsU0FBTixHQUFrQixHQUFsQixHQUF3QkEsU0FBMUM7QUFDQSx3QkFBTUUsZUFBZXptQyxLQUFLZ0ksUUFBTCxDQUFjQyxhQUFkLENBQTRCLE9BQTVCLENBQXJCO0FBQ0F3K0IsaUNBQWFsK0IsV0FBYixDQUF5Qm0rQix5QkFBeUJILFNBQXpCLEVBQW9DcnZDLE9BQXBDLEVBQTZDdUYsS0FBN0MsQ0FBekI7QUFDQXFDLDBCQUFNeUosV0FBTixDQUFrQmsrQixZQUFsQjs7QUFFQSw2QkFBU0Msd0JBQVQsQ0FBa0NILFNBQWxDLEVBQTZDcnZDLE9BQTdDLEVBQXNEdUYsS0FBdEQsRUFBNkQ7QUFDekQsNEJBQU1rcUMsV0FBVyxNQUFNSixTQUFOLEdBQWtCLEdBQWxCLEdBQXdCcnZDLE9BQXpDO0FBQ0EsNEJBQU1zcUMsVUFBVS9rQyxNQUFNK2tDLE9BQU4sR0FBZ0JvRixjQUFjbnFDLEtBQWQsQ0FBaEIsR0FBdUNvcUMsb0JBQW9CcHFDLEtBQXBCLENBQXZEO0FBQ0EsK0JBQU91RCxLQUFLZ0ksUUFBTCxDQUFjOCtCLGNBQWQsQ0FBNkJILFdBQVcsR0FBWCxHQUFpQm5GLE9BQWpCLEdBQTJCLEdBQXhELENBQVA7O0FBRUEsaUNBQVNvRixhQUFULENBQXVCbnFDLEtBQXZCLEVBQThCO0FBQzFCLGdDQUFNdzFCLFVBQVV4MUIsTUFBTXdsQyxnQkFBTixDQUF1QixTQUF2QixDQUFoQjtBQUNBLG1DQUFPeGxDLE1BQU0ra0MsT0FBTixHQUFnQixZQUFoQixHQUErQnZQLE9BQS9CLEdBQXlDLEdBQWhEO0FBQ0g7O0FBRUQsaUNBQVM0VSxtQkFBVCxDQUE2QnBxQyxLQUE3QixFQUFvQzs7QUFFaEMsbUNBQU8ybUMsS0FBS3NDLE9BQUwsQ0FBYWpwQyxLQUFiLEVBQ0YyQixHQURFLENBQ0Uyb0MsY0FERixFQUVGL3dDLElBRkUsQ0FFRyxJQUZILElBRVcsR0FGbEI7O0FBSUEscUNBQVMrd0MsY0FBVCxDQUF3QjV3QyxJQUF4QixFQUE4QjtBQUMxQix1Q0FBT0EsT0FBTyxJQUFQLEdBQ0hzRyxNQUFNd2xDLGdCQUFOLENBQXVCOXJDLElBQXZCLENBREcsSUFFRnNHLE1BQU00cEMsbUJBQU4sQ0FBMEJsd0MsSUFBMUIsSUFBa0MsYUFBbEMsR0FBa0QsRUFGaEQsQ0FBUDtBQUdIO0FBQ0o7QUFDSjtBQUNKO0FBQ0o7O0FBRUQscUJBQVM0dkMsYUFBVCxHQUF5QjtBQUNyQixvQkFBSTNDLEtBQUs0RCxVQUFMLENBQWdCeEIsUUFBaEIsQ0FBSixFQUErQjFtQyxNQUFNK2dDLFNBQU4sR0FBa0IyRixTQUFTMThCLEtBQTNCO0FBQy9CLG9CQUFJczZCLEtBQUs2RCxPQUFMLENBQWF6QixRQUFiLENBQUosRUFBNEIxbUMsTUFBTW9vQyxZQUFOLENBQW1CLE9BQW5CLEVBQTRCMUIsU0FBUzE4QixLQUFyQztBQUMvQjs7QUFFRCxxQkFBU2s5QixNQUFULEdBQWtCO0FBQ2Qsb0JBQUksQ0FBQzVDLEtBQUsrRCxLQUFMLENBQVdyb0MsS0FBWCxDQUFMLEVBQXdCO0FBQ3hCQSxzQkFBTW9vQyxZQUFOLENBQW1CLE9BQW5CLEVBQTRCLDRCQUE1Qjs7QUFFQSxvQkFBSSxDQUFDOUQsS0FBS2dFLFNBQUwsQ0FBZXRvQyxLQUFmLENBQUwsRUFBNEI7QUFDNUIsaUJBQUMsT0FBRCxFQUFVLFFBQVYsRUFBb0I4TyxPQUFwQixDQUE0QixVQUFVeTVCLFNBQVYsRUFBcUI7QUFDN0Msd0JBQU12K0IsUUFBUWhLLE1BQU13b0MsWUFBTixDQUFtQkQsU0FBbkIsQ0FBZDtBQUNBLHdCQUFJLENBQUN2K0IsS0FBTCxFQUFZOztBQUVaaEssMEJBQU1yQyxLQUFOLENBQVkycEMsV0FBWixDQUF3QmlCLFNBQXhCLEVBQW1DditCLEtBQW5DO0FBQ0gsaUJBTEQ7QUFNSDtBQUNKO0FBQ0o7O0FBRUQsYUFBU3E3QixVQUFULENBQW9CcnpCLElBQXBCLEVBQTBCO0FBQ3RCLGVBQU8weUIsVUFBVStELFVBQVYsR0FDRjk0QixJQURFLENBQ0csVUFBVSt5QixPQUFWLEVBQW1CO0FBQ3JCLGdCQUFNZ0csWUFBWXhuQyxLQUFLZ0ksUUFBTCxDQUFjQyxhQUFkLENBQTRCLE9BQTVCLENBQWxCO0FBQ0E2SSxpQkFBS3ZJLFdBQUwsQ0FBaUJpL0IsU0FBakI7QUFDQUEsc0JBQVVqL0IsV0FBVixDQUFzQnZJLEtBQUtnSSxRQUFMLENBQWM4K0IsY0FBZCxDQUE2QnRGLE9BQTdCLENBQXRCO0FBQ0EsbUJBQU8xd0IsSUFBUDtBQUNILFNBTkUsQ0FBUDtBQU9IOztBQUVELGFBQVNzekIsWUFBVCxDQUFzQnR6QixJQUF0QixFQUE0QjtBQUN4QixlQUFPNHlCLE9BQU8rRCxTQUFQLENBQWlCMzJCLElBQWpCLEVBQ0ZyQyxJQURFLENBQ0csWUFBWTtBQUNkLG1CQUFPcUMsSUFBUDtBQUNILFNBSEUsQ0FBUDtBQUlIOztBQUVELGFBQVN3ekIsY0FBVCxDQUF3Qnh6QixJQUF4QixFQUE4QmphLEtBQTlCLEVBQXFDQyxNQUFyQyxFQUE2QztBQUN6QyxlQUFPb1csUUFBUUMsT0FBUixDQUFnQjJELElBQWhCLEVBQ0ZyQyxJQURFLENBQ0csVUFBVXFDLElBQVYsRUFBZ0I7QUFDbEJBLGlCQUFLbzJCLFlBQUwsQ0FBa0IsT0FBbEIsRUFBMkIsOEJBQTNCO0FBQ0EsbUJBQU8sSUFBSWxuQyxLQUFLOVQsTUFBTCxDQUFZdzdDLGFBQWhCLEdBQWdDQyxpQkFBaEMsQ0FBa0Q3MkIsSUFBbEQsQ0FBUDtBQUNILFNBSkUsRUFLRnJDLElBTEUsQ0FLRzIwQixLQUFLd0UsV0FMUixFQU1GbjVCLElBTkUsQ0FNRyxVQUFVbzVCLEtBQVYsRUFBaUI7QUFDbkIsbUJBQU8sQ0FBQyxtQ0FBRCxFQUNQLGlEQURPLEVBQzRDaHhDLEtBRDVDLEVBQ21ELFlBRG5ELEVBQ2lFQyxNQURqRSxFQUN5RSxJQUR6RSxFQUVMLHdEQUZLLEVBRXFEK3dDLEtBRnJELEVBRTRELGtCQUY1RCxFQUdQLFFBSE8sRUFHRzd4QyxJQUhILENBR1EsRUFIUixDQUFQO0FBSUgsU0FYRSxDQUFQO0FBWUg7O0FBRUQsYUFBU3F0QyxPQUFULEdBQW1CO0FBQ2YsZUFBTztBQUNIbm5CLG9CQUFRQSxNQURMO0FBRUg0ckIsNEJBQWdCQSxjQUZiO0FBR0hDLHNCQUFVQSxRQUhQO0FBSUhDLHVCQUFXQSxTQUpSO0FBS0hDLHVCQUFXQSxTQUxSO0FBTUhuRCwwQkFBY0EsWUFOWDtBQU9Ib0Qsd0JBQVlBLFVBUFQ7QUFRSEMsMEJBQWNBLFlBUlg7QUFTSDNCLGlCQUFLQSxLQVRGO0FBVUhoN0IsbUJBQU9BLEtBVko7QUFXSGs2QixxQkFBU0EsT0FYTjtBQVlIa0MseUJBQWFBLFdBWlY7QUFhSDVDLHVCQUFXQSxTQWJSO0FBY0hudUMsbUJBQU9BLEtBZEo7QUFlSEMsb0JBQVFBLE1BZkw7O0FBaUJIOHVDLGdDQWpCRztBQWtCSEwsOEJBbEJHO0FBbUJIeUIsa0NBbkJHO0FBb0JIQyw0QkFwQkc7QUFxQkhFLHdCQXJCRztBQXNCSEMsZ0NBdEJHO0FBdUJIZ0I7QUF2QkcsU0FBUDs7QUEwQkEsaUJBQVNDLEtBQVQsR0FBaUI7QUFDYjs7OztBQUlBLGdCQUFNQyxPQUFPLHVCQUFiO0FBQ0EsZ0JBQU1DLE9BQU8sWUFBYjs7QUFFQSxtQkFBTztBQUNILHdCQUFRRCxJQURMO0FBRUgseUJBQVNBLElBRk47QUFHSCx1QkFBTywyQkFISjtBQUlILHVCQUFPLCtCQUpKO0FBS0gsdUJBQU8sV0FMSjtBQU1ILHVCQUFPQyxJQU5KO0FBT0gsd0JBQVFBLElBUEw7QUFRSCx1QkFBTyxXQVJKO0FBU0gsd0JBQVEsWUFUTDtBQVVILHVCQUFPO0FBVkosYUFBUDtBQVlIOztBQUVELGlCQUFTVCxjQUFULENBQXdCcHlDLEdBQXhCLEVBQTZCO0FBQ3pCLGdCQUFNZzlCLFFBQVEsa0JBQWtCNVYsSUFBbEIsQ0FBdUJwbkIsR0FBdkIsQ0FBZDtBQUNBLGdCQUFJZzlCLEtBQUosRUFBVyxPQUFPQSxNQUFNLENBQU4sQ0FBUCxDQUFYLEtBQ0ssT0FBTyxFQUFQO0FBQ1I7O0FBRUQsaUJBQVNxVixRQUFULENBQWtCcnlDLEdBQWxCLEVBQXVCO0FBQ25CLGdCQUFNOHlDLFlBQVlWLGVBQWVweUMsR0FBZixFQUFvQithLFdBQXBCLEVBQWxCO0FBQ0EsbUJBQU80M0IsUUFBUUcsU0FBUixLQUFzQixFQUE3QjtBQUNIOztBQUVELGlCQUFTUCxTQUFULENBQW1CdnlDLEdBQW5CLEVBQXdCO0FBQ3BCLG1CQUFPQSxJQUFJaWpCLE1BQUosQ0FBVyxVQUFYLE1BQTJCLENBQUMsQ0FBbkM7QUFDSDs7QUFFRCxpQkFBU29yQixNQUFULENBQWdCL0QsTUFBaEIsRUFBd0I7QUFDcEIsbUJBQU8sSUFBSTl5QixPQUFKLENBQVksVUFBVUMsT0FBVixFQUFtQjtBQUNsQyxvQkFBTXM3QixlQUFlem9DLEtBQUs5VCxNQUFMLENBQVl3OEMsSUFBWixDQUFpQjFJLE9BQU80RSxTQUFQLEdBQW1CanZDLEtBQW5CLENBQXlCLEdBQXpCLEVBQThCLENBQTlCLENBQWpCLENBQXJCO0FBQ0Esb0JBQU1ySCxTQUFTbTZDLGFBQWFuNkMsTUFBNUI7QUFDQSxvQkFBTXE2QyxjQUFjLElBQUkzb0MsS0FBSzlULE1BQUwsQ0FBWTA4QyxVQUFoQixDQUEyQnQ2QyxNQUEzQixDQUFwQjs7QUFFQSxxQkFBSyxJQUFJa0IsSUFBSSxDQUFiLEVBQWdCQSxJQUFJbEIsTUFBcEIsRUFBNEJrQixHQUE1QjtBQUNJbTVDLGdDQUFZbjVDLENBQVosSUFBaUJpNUMsYUFBYUksVUFBYixDQUF3QnI1QyxDQUF4QixDQUFqQjtBQURKLGlCQUdBMmQsUUFBUSxJQUFJbk4sS0FBSzlULE1BQUwsQ0FBWXMwQyxJQUFoQixDQUFxQixDQUFDbUksV0FBRCxDQUFyQixFQUFvQztBQUN4Q3Z1QywwQkFBTTtBQURrQyxpQkFBcEMsQ0FBUjtBQUdILGFBWE0sQ0FBUDtBQVlIOztBQUVELGlCQUFTMHFDLFlBQVQsQ0FBc0I5RSxNQUF0QixFQUE4QjtBQUMxQixnQkFBSUEsT0FBTytELE1BQVgsRUFDSSxPQUFPLElBQUk3MkIsT0FBSixDQUFZLFVBQVVDLE9BQVYsRUFBbUI7QUFDbEM2eUIsdUJBQU8rRCxNQUFQLENBQWM1MkIsT0FBZDtBQUNILGFBRk0sQ0FBUDs7QUFJSixtQkFBTzQyQixPQUFPL0QsTUFBUCxDQUFQO0FBQ0g7O0FBRUQsaUJBQVNrSSxVQUFULENBQW9CeHlDLEdBQXBCLEVBQXlCb3pDLE9BQXpCLEVBQWtDO0FBQzlCLGdCQUFNN3hDLE1BQU0rSSxLQUFLZ0ksUUFBTCxDQUFjK2dDLGNBQWQsQ0FBNkJDLGtCQUE3QixFQUFaO0FBQ0EsZ0JBQU1uekMsT0FBT29CLElBQUlnUixhQUFKLENBQWtCLE1BQWxCLENBQWI7QUFDQWhSLGdCQUFJMFUsSUFBSixDQUFTcEQsV0FBVCxDQUFxQjFTLElBQXJCO0FBQ0EsZ0JBQU1uSSxJQUFJdUosSUFBSWdSLGFBQUosQ0FBa0IsR0FBbEIsQ0FBVjtBQUNBaFIsZ0JBQUlFLElBQUosQ0FBU29SLFdBQVQsQ0FBcUI3YSxDQUFyQjtBQUNBbUksaUJBQUtFLElBQUwsR0FBWSt5QyxPQUFaO0FBQ0FwN0MsY0FBRXFJLElBQUYsR0FBU0wsR0FBVDtBQUNBLG1CQUFPaEksRUFBRXFJLElBQVQ7QUFDSDs7QUFFRCxpQkFBU3l3QyxHQUFULEdBQWU7QUFDWCxnQkFBSTc3QixRQUFRLENBQVo7O0FBRUEsbUJBQU8sWUFBWTtBQUNmLHVCQUFPLE1BQU1zK0IsaUJBQU4sR0FBMEJ0K0IsT0FBakM7O0FBRUEseUJBQVNzK0IsZUFBVCxHQUEyQjtBQUN2QjtBQUNBLDJCQUFPLENBQUMsU0FBUyxDQUFDanBDLEtBQUs5VCxNQUFMLENBQVkwRSxJQUFaLENBQWlCVSxNQUFqQixLQUE0QjBPLEtBQUs5VCxNQUFMLENBQVkwRSxJQUFaLENBQWlCeTFCLEdBQWpCLENBQXFCLEVBQXJCLEVBQXlCLENBQXpCLENBQTVCLElBQTJELENBQTVELEVBQStENmlCLFFBQS9ELENBQXdFLEVBQXhFLENBQVYsRUFBdUZDLEtBQXZGLENBQTZGLENBQUMsQ0FBOUYsQ0FBUDtBQUNIO0FBQ0osYUFQRDtBQVFIOztBQUVELGlCQUFTbkUsU0FBVCxDQUFtQm9FLEdBQW5CLEVBQXdCO0FBQ3BCLG1CQUFPLElBQUlsOEIsT0FBSixDQUFZLFVBQVVDLE9BQVYsRUFBbUJrYSxNQUFuQixFQUEyQjtBQUMxQyxvQkFBTWp2QixRQUFRLElBQUk0SCxLQUFLOVQsTUFBTCxDQUFZbTlDLEtBQWhCLEVBQWQ7QUFDQWp4QyxzQkFBTWt4QyxNQUFOLEdBQWUsWUFBWTtBQUN2Qm44Qiw0QkFBUS9VLEtBQVI7QUFDSCxpQkFGRDtBQUdBQSxzQkFBTW14QyxPQUFOLEdBQWdCbGlCLE1BQWhCO0FBQ0FqdkIsc0JBQU0rRCxHQUFOLEdBQVlpdEMsR0FBWjtBQUNILGFBUE0sQ0FBUDtBQVFIOztBQUVELGlCQUFTakIsWUFBVCxDQUFzQnp5QyxHQUF0QixFQUEyQjtBQUN6QixnQkFBSTNGLE9BQU9pUSxLQUFLckUsS0FBTCxDQUFXa1MsR0FBWCxDQUFlblksR0FBZixDQUFYO0FBQ0EsZ0JBQUczRixJQUFILEVBQVM7QUFDUCxvQkFBR0EsS0FBS2tpQyxPQUFSLEVBQWlCO0FBQ2YsMkJBQU9saUMsS0FBS2tpQyxPQUFaO0FBQ0QsaUJBRkQsTUFHSztBQUNILDJCQUFPLElBQUkva0IsT0FBSixDQUFZLFVBQUNDLE9BQUQsRUFBWTtBQUM3Qiw0QkFBR3BkLEtBQUtraUMsT0FBUixFQUFpQjtBQUNmOWtCLG9DQUFRcGQsS0FBS2tpQyxPQUFiO0FBQ0QseUJBRkQsTUFHSztBQUNIbGlDLGlDQUFLNjFCLFFBQUwsQ0FBY24yQixJQUFkLENBQW1CMGQsT0FBbkI7QUFDRDtBQUNGLHFCQVBNLENBQVA7QUFRRDtBQUNGLGFBZEQsTUFlSztBQUNIcGQsdUJBQU9pUSxLQUFLckUsS0FBTCxDQUFXMFMsR0FBWCxDQUFlM1ksR0FBZixFQUFvQixFQUFDa3dCLFVBQVUsRUFBWCxFQUFwQixDQUFQOztBQUVBLG9CQUFNNGpCLFVBQVUsS0FBaEI7O0FBRUEsdUJBQU8sSUFBSXQ4QixPQUFKLENBQVksVUFBVUMsT0FBVixFQUFtQjtBQUNsQyx3QkFBTWdFLFVBQVUsSUFBSW5SLEtBQUs5VCxNQUFMLENBQVl1OUMsY0FBaEIsRUFBaEI7O0FBRUF0NEIsNEJBQVF1NEIsa0JBQVIsR0FBNkJ6MkMsSUFBN0I7QUFDQWtlLDRCQUFRdzRCLFNBQVIsR0FBb0JDLE9BQXBCO0FBQ0F6NEIsNEJBQVEwNEIsWUFBUixHQUF1QixNQUF2QjtBQUNBMTRCLDRCQUFReTRCLE9BQVIsR0FBa0JKLE9BQWxCO0FBQ0FyNEIsNEJBQVEyYixJQUFSLENBQWEsS0FBYixFQUFvQnAzQixHQUFwQixFQUF5QixJQUF6QjtBQUNBeWIsNEJBQVEyNEIsSUFBUjs7QUFFQSw2QkFBUzcyQyxJQUFULEdBQWdCO0FBQ1osNEJBQUlrZSxRQUFRNDRCLFVBQVIsS0FBdUIsQ0FBM0IsRUFBOEI7O0FBRTlCLDRCQUFJNTRCLFFBQVE2NEIsTUFBUixLQUFtQixHQUF2QixFQUE0QjtBQUN4QnBYLGlDQUFLLDRCQUE0Qmw5QixHQUE1QixHQUFrQyxZQUFsQyxHQUFpRHliLFFBQVE2NEIsTUFBOUQ7QUFDQTtBQUNIOztBQUVELDRCQUFNQyxVQUFVLElBQUlqcUMsS0FBSzlULE1BQUwsQ0FBWW8wQyxVQUFoQixFQUFoQjtBQUNBMkosZ0NBQVFDLFNBQVIsR0FBb0IsWUFBWTtBQUM1Qm42QyxpQ0FBS2tpQyxPQUFMLEdBQWVnWSxRQUFRRSxNQUFSLENBQWV4MEMsS0FBZixDQUFxQixHQUFyQixFQUEwQixDQUExQixDQUFmO0FBQ0EsaURBQW1CNUYsS0FBSzYxQixRQUF4QixrSEFBa0M7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBLG9DQUExQnpZLFFBQTBCOztBQUNoQ0EseUNBQVFwZCxLQUFLa2lDLE9BQWI7QUFDRDtBQUNEbGlDLGlDQUFLNjFCLFFBQUwsR0FBZ0IsRUFBaEI7QUFDQXpZLG9DQUFRcGQsS0FBS2tpQyxPQUFiO0FBQ0gseUJBUEQ7QUFRQWdZLGdDQUFRRyxhQUFSLENBQXNCajVCLFFBQVFrNUIsUUFBOUI7QUFDSDs7QUFFRCw2QkFBU1QsT0FBVCxHQUFtQjtBQUNmaFgsNkJBQUssZ0JBQWdCNFcsT0FBaEIsR0FBMEIsc0NBQTFCLEdBQW1FOXpDLEdBQXhFO0FBQ0g7O0FBRUQsNkJBQVNrOUIsSUFBVCxDQUFjMFgsT0FBZCxFQUF1QjtBQUNuQjM0QyxnQ0FBUXVhLEtBQVIsQ0FBY28rQixPQUFkO0FBQ0FuOUIsZ0NBQVEsRUFBUjtBQUNIO0FBQ0osaUJBdENNLENBQVA7QUF1Q0Q7QUFDRjs7QUFFRCxpQkFBUzY2QixTQUFULENBQW1CL1YsT0FBbkIsRUFBNEI3M0IsSUFBNUIsRUFBa0M7QUFDOUIsbUJBQU8sQ0FBQyxPQUFELEVBQVNBLElBQVQsRUFBYyxVQUFkLEVBQXlCNjNCLE9BQXpCLEVBQWtDajhCLElBQWxDLENBQXVDLEVBQXZDLENBQVA7QUFDSDs7QUFFRCxpQkFBU2ttQixNQUFULENBQWdCcXVCLE1BQWhCLEVBQXdCO0FBQ3BCLG1CQUFPQSxPQUFPMzBDLE9BQVAsQ0FBZSwwQkFBZixFQUEyQyxNQUEzQyxDQUFQO0FBQ0g7O0FBRUQsaUJBQVM0VixLQUFULENBQWVnL0IsRUFBZixFQUFtQjtBQUNmLG1CQUFPLFVBQVVDLEdBQVYsRUFBZTtBQUNsQix1QkFBTyxJQUFJdjlCLE9BQUosQ0FBWSxVQUFVQyxPQUFWLEVBQW1CO0FBQ2xDTiwrQkFBVyxZQUFZO0FBQ25CTSxnQ0FBUXM5QixHQUFSO0FBQ0gscUJBRkQsRUFFR0QsRUFGSDtBQUdILGlCQUpNLENBQVA7QUFLSCxhQU5EO0FBT0g7O0FBRUQsaUJBQVM5RSxPQUFULENBQWlCZ0YsU0FBakIsRUFBNEI7QUFDeEIsZ0JBQU1DLFFBQVEsRUFBZDtBQUNBLGdCQUFNcjhDLFNBQVNvOEMsVUFBVXA4QyxNQUF6QjtBQUNBLGlCQUFLLElBQUlrQixJQUFJLENBQWIsRUFBZ0JBLElBQUlsQixNQUFwQixFQUE0QmtCLEdBQTVCO0FBQWlDbTdDLHNCQUFNbDdDLElBQU4sQ0FBV2k3QyxVQUFVbDdDLENBQVYsQ0FBWDtBQUFqQyxhQUNBLE9BQU9tN0MsS0FBUDtBQUNIOztBQUVELGlCQUFTL0MsV0FBVCxDQUFxQjJDLE1BQXJCLEVBQTZCO0FBQ3pCLG1CQUFPQSxPQUFPMzBDLE9BQVAsQ0FBZSxTQUFmLEVBQTBCLFVBQUNyRCxDQUFEO0FBQUEsdUJBQU1BLE1BQUksR0FBSixHQUFTLEtBQVQsR0FBZ0IsS0FBdEI7QUFBQSxhQUExQixDQUFQO0FBQ0g7O0FBRUQsaUJBQVNzRSxLQUFULENBQWVpYSxJQUFmLEVBQXFCO0FBQ2pCLGdCQUFNODVCLGFBQWFDLEdBQUcvNUIsSUFBSCxFQUFTLG1CQUFULENBQW5CO0FBQ0EsZ0JBQU1nNkIsY0FBY0QsR0FBRy81QixJQUFILEVBQVMsb0JBQVQsQ0FBcEI7QUFDQSxtQkFBT0EsS0FBS2k2QixXQUFMLEdBQW1CSCxVQUFuQixHQUFnQ0UsV0FBdkM7QUFDSDs7QUFFRCxpQkFBU2gwQyxNQUFULENBQWdCZ2EsSUFBaEIsRUFBc0I7QUFDbEIsZ0JBQU1rNkIsWUFBWUgsR0FBRy81QixJQUFILEVBQVMsa0JBQVQsQ0FBbEI7QUFDQSxnQkFBTW02QixlQUFlSixHQUFHLzVCLElBQUgsRUFBUyxxQkFBVCxDQUFyQjtBQUNBLG1CQUFPQSxLQUFLbzZCLFlBQUwsR0FBb0JGLFNBQXBCLEdBQWdDQyxZQUF2QztBQUNIOztBQUVELGlCQUFTSixFQUFULENBQVkvNUIsSUFBWixFQUFrQnE2QixhQUFsQixFQUFpQztBQUM3QixnQkFBTXJpQyxRQUFROUksS0FBSzlULE1BQUwsQ0FBWTgxQyxnQkFBWixDQUE2Qmx4QixJQUE3QixFQUFtQ214QixnQkFBbkMsQ0FBb0RrSixhQUFwRCxDQUFkO0FBQ0EsbUJBQU9DLFdBQVd0aUMsTUFBTWxULE9BQU4sQ0FBYyxJQUFkLEVBQW9CLEVBQXBCLENBQVgsQ0FBUDtBQUNIOztBQUVELGlCQUFTZ3dDLFNBQVQsQ0FBbUI5MEIsSUFBbkIsRUFBeUI7QUFDdkIsbUJBQU9BLGdCQUFnQjlRLEtBQUs5VCxNQUFMLENBQVl3MkMsT0FBbkM7QUFDRDs7QUFFRCxpQkFBUzZDLFFBQVQsQ0FBa0J6MEIsSUFBbEIsRUFBd0I7QUFDdEIsbUJBQU9BLGdCQUFnQjlRLEtBQUs5VCxNQUFMLENBQVltL0MsaUJBQW5DO0FBQ0Q7O0FBRUQsaUJBQVNyRSxVQUFULENBQW9CbDJCLElBQXBCLEVBQTBCO0FBQ3hCLG1CQUFPQSxnQkFBZ0I5USxLQUFLOVQsTUFBTCxDQUFZby9DLG1CQUFuQztBQUNEOztBQUVELGlCQUFTckUsT0FBVCxDQUFpQm4yQixJQUFqQixFQUF1QjtBQUNyQixtQkFBT0EsZ0JBQWdCOVEsS0FBSzlULE1BQUwsQ0FBWXEvQyxnQkFBbkM7QUFDRDs7QUFFRCxpQkFBU3BFLEtBQVQsQ0FBZXIyQixJQUFmLEVBQXFCO0FBQ25CLG1CQUFPQSxnQkFBZ0I5USxLQUFLOVQsTUFBTCxDQUFZcy9DLFVBQW5DO0FBQ0Q7O0FBRUQsaUJBQVNwRSxTQUFULENBQW1CdDJCLElBQW5CLEVBQXlCO0FBQ3ZCLG1CQUFPQSxnQkFBZ0I5USxLQUFLOVQsTUFBTCxDQUFZdS9DLGNBQW5DO0FBQ0Q7O0FBRUQsaUJBQVNyRCxPQUFULENBQWlCdDNCLElBQWpCLEVBQXVCO0FBQ3JCLG1CQUFPQSxnQkFBZ0I5USxLQUFLOVQsTUFBTCxDQUFZdy9DLGdCQUFuQztBQUNEO0FBQ0o7O0FBRUQsYUFBU25JLFVBQVQsR0FBc0I7QUFDbEIsWUFBTW9JLFlBQVksNkJBQWxCOztBQUVBLGVBQU87QUFDSGxFLHVCQUFXQSxTQURSO0FBRUhtRSwyQkFBZUEsYUFGWjtBQUdIM0gsa0JBQU07QUFDRjRILDBCQUFVQSxRQURSO0FBRUZDLHdCQUFRQTtBQUZOO0FBSEgsU0FBUDs7QUFTQSxpQkFBU0YsYUFBVCxDQUF1QnJCLE1BQXZCLEVBQStCO0FBQzNCLG1CQUFPQSxPQUFPNXhCLE1BQVAsQ0FBY2d6QixTQUFkLE1BQTZCLENBQUMsQ0FBckM7QUFDSDs7QUFFRCxpQkFBU0UsUUFBVCxDQUFrQnRCLE1BQWxCLEVBQTBCO0FBQ3RCLGdCQUFNSixTQUFTLEVBQWY7QUFDQSxnQkFBSXpYLGNBQUo7QUFDQSxtQkFBTyxDQUFDQSxRQUFRaVosVUFBVTd1QixJQUFWLENBQWV5dEIsTUFBZixDQUFULE1BQXFDLElBQTVDLEVBQWtEO0FBQzlDSix1QkFBTzE2QyxJQUFQLENBQVlpakMsTUFBTSxDQUFOLENBQVo7QUFDSDtBQUNELG1CQUFPeVgsT0FBT3p2QyxNQUFQLENBQWMsVUFBVWhGLEdBQVYsRUFBZTtBQUNoQyx1QkFBTyxDQUFDMHRDLEtBQUs2RSxTQUFMLENBQWV2eUMsR0FBZixDQUFSO0FBQ0gsYUFGTSxDQUFQO0FBR0g7O0FBRUQsaUJBQVNvMkMsTUFBVCxDQUFnQnZCLE1BQWhCLEVBQXdCNzBDLEdBQXhCLEVBQTZCb3pDLE9BQTdCLEVBQXNDajdCLEdBQXRDLEVBQTJDO0FBQ3ZDLG1CQUFPWCxRQUFRQyxPQUFSLENBQWdCelgsR0FBaEIsRUFDRitZLElBREUsQ0FDRyxVQUFVL1ksR0FBVixFQUFlO0FBQ2pCLHVCQUFPb3pDLFVBQVUxRixLQUFLOEUsVUFBTCxDQUFnQnh5QyxHQUFoQixFQUFxQm96QyxPQUFyQixDQUFWLEdBQTBDcHpDLEdBQWpEO0FBQ0gsYUFIRSxFQUlGK1ksSUFKRSxDQUlHWixPQUFPdTFCLEtBQUsrRSxZQUpmLEVBS0YxNUIsSUFMRSxDQUtHLFVBQVUxZSxJQUFWLEVBQWdCO0FBQ2xCLHVCQUFPcXpDLEtBQUs0RSxTQUFMLENBQWVqNEMsSUFBZixFQUFxQnF6QyxLQUFLMkUsUUFBTCxDQUFjcnlDLEdBQWQsQ0FBckIsQ0FBUDtBQUNILGFBUEUsRUFRRitZLElBUkUsQ0FRRyxVQUFVczlCLE9BQVYsRUFBbUI7QUFDckIsdUJBQU94QixPQUFPMzBDLE9BQVAsQ0FBZW8yQyxXQUFXdDJDLEdBQVgsQ0FBZixFQUFnQyxDQUFDLElBQUQsRUFBT3EyQyxPQUFQLEVBQWdCLElBQWhCLEVBQXNCLzFDLElBQXRCLENBQTJCLEVBQTNCLENBQWhDLENBQVA7QUFDSCxhQVZFLENBQVA7O0FBWUEscUJBQVNnMkMsVUFBVCxDQUFvQnQyQyxHQUFwQixFQUF5QjtBQUNyQix1QkFBTyxJQUFJc0ssS0FBSzlULE1BQUwsQ0FBWSt2QixNQUFoQixDQUF1QixDQUFDLGlCQUFELEVBQW9CbW5CLEtBQUtsbkIsTUFBTCxDQUFZeG1CLEdBQVosQ0FBcEIsRUFBc0MsY0FBdEMsRUFBc0RNLElBQXRELENBQTJELEVBQTNELENBQXZCLEVBQXVGLEdBQXZGLENBQVA7QUFDSDtBQUNKOztBQUVELGlCQUFTeXhDLFNBQVQsQ0FBbUI4QyxNQUFuQixFQUEyQnpCLE9BQTNCLEVBQW9DajdCLEdBQXBDLEVBQXlDO0FBQ3JDLGdCQUFJbytCLGlCQUFKLEVBQXVCLE9BQU8vK0IsUUFBUUMsT0FBUixDQUFnQm85QixNQUFoQixDQUFQOztBQUV2QixtQkFBT3I5QixRQUFRQyxPQUFSLENBQWdCbzlCLE1BQWhCLEVBQ0Y5N0IsSUFERSxDQUNHbzlCLFFBREgsRUFFRnA5QixJQUZFLENBRUcsVUFBVXk5QixJQUFWLEVBQWdCO0FBQ2xCLG9CQUFJajVDLE9BQU9pYSxRQUFRQyxPQUFSLENBQWdCbzlCLE1BQWhCLENBQVg7QUFDQTJCLHFCQUFLdCtCLE9BQUwsQ0FBYSxVQUFVbFksR0FBVixFQUFlO0FBQ3hCekMsMkJBQU9BLEtBQUt3YixJQUFMLENBQVUsVUFBVTg3QixNQUFWLEVBQWtCO0FBQy9CLCtCQUFPdUIsT0FBT3ZCLE1BQVAsRUFBZTcwQyxHQUFmLEVBQW9Cb3pDLE9BQXBCLEVBQTZCajdCLEdBQTdCLENBQVA7QUFDSCxxQkFGTSxDQUFQO0FBR0gsaUJBSkQ7QUFLQSx1QkFBTzVhLElBQVA7QUFDSCxhQVZFLENBQVA7O0FBWUEscUJBQVNnNUMsZUFBVCxHQUEyQjtBQUN2Qix1QkFBTyxDQUFDTCxjQUFjckIsTUFBZCxDQUFSO0FBQ0g7QUFDSjtBQUNKOztBQUVELGFBQVM5RyxZQUFULEdBQXdCO0FBQ3BCLGVBQU87QUFDSDhELHdCQUFZQSxVQURUO0FBRUh0RCxrQkFBTTtBQUNGa0kseUJBQVNBO0FBRFA7QUFGSCxTQUFQOztBQU9BLGlCQUFTNUUsVUFBVCxHQUFzQjtBQUNsQixtQkFBTzRFLFFBQVFuc0MsS0FBS2dJLFFBQWIsRUFDRnlHLElBREUsQ0FDRyxVQUFVMjlCLFFBQVYsRUFBb0I7QUFDdEIsdUJBQU9sL0IsUUFBUWlHLEdBQVIsQ0FDSGk1QixTQUFTaHVDLEdBQVQsQ0FBYSxVQUFVaXVDLE9BQVYsRUFBbUI7QUFDNUIsMkJBQU9BLFFBQVFsL0IsT0FBUixFQUFQO0FBQ0gsaUJBRkQsQ0FERyxDQUFQO0FBS0gsYUFQRSxFQVFGc0IsSUFSRSxDQVFHLFVBQVU2OUIsVUFBVixFQUFzQjtBQUN4Qix1QkFBT0EsV0FBV3QyQyxJQUFYLENBQWdCLElBQWhCLENBQVA7QUFDSCxhQVZFLENBQVA7QUFXSDs7QUFFRCxpQkFBU20yQyxPQUFULEdBQW1CO0FBQ2YsbUJBQU9qL0IsUUFBUUMsT0FBUixDQUFnQmkyQixLQUFLc0MsT0FBTCxDQUFhMWxDLEtBQUtnSSxRQUFMLENBQWNxNUIsV0FBM0IsQ0FBaEIsRUFDRjV5QixJQURFLENBQ0c4OUIsV0FESCxFQUVGOTlCLElBRkUsQ0FFRys5QixrQkFGSCxFQUdGLzlCLElBSEUsQ0FHRyxVQUFVZytCLEtBQVYsRUFBaUI7QUFDbkIsdUJBQU9BLE1BQU1ydUMsR0FBTixDQUFVc3VDLFVBQVYsQ0FBUDtBQUNILGFBTEUsQ0FBUDs7QUFPQSxxQkFBU0Ysa0JBQVQsQ0FBNEJqTCxRQUE1QixFQUFzQztBQUNsQyx1QkFBT0EsU0FDRjdtQyxNQURFLENBQ0ssVUFBVWl5QyxJQUFWLEVBQWdCO0FBQ3BCLDJCQUFPQSxLQUFLdnlDLElBQUwsS0FBY3d5QyxRQUFRQyxjQUE3QjtBQUNILGlCQUhFLEVBSUZueUMsTUFKRSxDQUlLLFVBQVVpeUMsSUFBVixFQUFnQjtBQUNwQiwyQkFBT3JKLFFBQVFzSSxhQUFSLENBQXNCZSxLQUFLbHdDLEtBQUwsQ0FBV3dsQyxnQkFBWCxDQUE0QixLQUE1QixDQUF0QixDQUFQO0FBQ0gsaUJBTkUsQ0FBUDtBQU9IOztBQUVELHFCQUFTc0ssV0FBVCxDQUFxQmxMLFdBQXJCLEVBQWtDO0FBQzlCLG9CQUFNRSxXQUFXLEVBQWpCO0FBQ0FGLDRCQUFZenpCLE9BQVosQ0FBb0IsVUFBVS9RLEtBQVYsRUFBaUI7QUFDakMsd0JBQUk7QUFDQXVtQyw2QkFBS3NDLE9BQUwsQ0FBYTdvQyxNQUFNMGtDLFFBQU4sSUFBa0IsRUFBL0IsRUFBbUMzekIsT0FBbkMsQ0FBMkMyekIsU0FBUzl4QyxJQUFULENBQWN3cEIsSUFBZCxDQUFtQnNvQixRQUFuQixDQUEzQztBQUNILHFCQUZELENBRUUsT0FBT3BuQyxDQUFQLEVBQVU7QUFDUnhJLGdDQUFRbTdDLEdBQVIsQ0FBWSx3Q0FBd0Nqd0MsTUFBTTlHLElBQTFELEVBQWdFb0UsRUFBRSt1QyxRQUFGLEVBQWhFO0FBQ0g7QUFDSixpQkFORDtBQU9BLHVCQUFPM0gsUUFBUDtBQUNIOztBQUVELHFCQUFTbUwsVUFBVCxDQUFvQkssV0FBcEIsRUFBaUM7QUFDN0IsdUJBQU87QUFDSDUvQiw2QkFBUyxTQUFTQSxPQUFULEdBQW1CO0FBQ3hCLDRCQUFNMjdCLFVBQVUsQ0FBQ2lFLFlBQVlDLGdCQUFaLElBQWdDLEVBQWpDLEVBQXFDajNDLElBQXJEO0FBQ0EsK0JBQU91dEMsUUFBUW1FLFNBQVIsQ0FBa0JzRixZQUFZdkwsT0FBOUIsRUFBdUNzSCxPQUF2QyxDQUFQO0FBQ0gscUJBSkU7QUFLSDNzQyx5QkFBSyxlQUFZO0FBQ2IsK0JBQU80d0MsWUFBWXR3QyxLQUFaLENBQWtCd2xDLGdCQUFsQixDQUFtQyxLQUFuQyxDQUFQO0FBQ0g7QUFQRSxpQkFBUDtBQVNIO0FBQ0o7QUFDSjs7QUFFRCxhQUFTMEIsU0FBVCxHQUFxQjtBQUNqQixlQUFPO0FBQ0g4RCx1QkFBV0EsU0FEUjtBQUVIeEQsa0JBQU07QUFDRmdKLDBCQUFVQTtBQURSO0FBRkgsU0FBUDs7QUFPQSxpQkFBU0EsUUFBVCxDQUFrQi8xQyxPQUFsQixFQUEyQjtBQUN2QixtQkFBTztBQUNINDBDLHdCQUFRQTtBQURMLGFBQVA7O0FBSUEscUJBQVNBLE1BQVQsQ0FBZ0JqK0IsR0FBaEIsRUFBcUI7QUFDakIsb0JBQUl1MUIsS0FBSzZFLFNBQUwsQ0FBZS93QyxRQUFRaUYsR0FBdkIsQ0FBSixFQUFpQyxPQUFPK1EsUUFBUUMsT0FBUixFQUFQOztBQUVqQyx1QkFBT0QsUUFBUUMsT0FBUixDQUFnQmpXLFFBQVFpRixHQUF4QixFQUNGc1MsSUFERSxDQUNHWixPQUFPdTFCLEtBQUsrRSxZQURmLEVBRUYxNUIsSUFGRSxDQUVHLFVBQVUxZSxJQUFWLEVBQWdCO0FBQ2xCLDJCQUFPcXpDLEtBQUs0RSxTQUFMLENBQWVqNEMsSUFBZixFQUFxQnF6QyxLQUFLMkUsUUFBTCxDQUFjN3dDLFFBQVFpRixHQUF0QixDQUFyQixDQUFQO0FBQ0gsaUJBSkUsRUFLRnNTLElBTEUsQ0FLRyxVQUFVczlCLE9BQVYsRUFBbUI7QUFDckIsMkJBQU8sSUFBSTcrQixPQUFKLENBQVksVUFBVUMsT0FBVixFQUFtQmthLE1BQW5CLEVBQTJCO0FBQzFDbndCLGdDQUFRb3lDLE1BQVIsR0FBaUJuOEIsT0FBakI7QUFDQWpXLGdDQUFRcXlDLE9BQVIsR0FBa0JsaUIsTUFBbEI7QUFDQW53QixnQ0FBUWlGLEdBQVIsR0FBYzR2QyxPQUFkO0FBQ0gscUJBSk0sQ0FBUDtBQUtILGlCQVhFLENBQVA7QUFZSDtBQUNKOztBQUVELGlCQUFTdEUsU0FBVCxDQUFtQjMyQixJQUFuQixFQUF5QjtBQUNyQixnQkFBSSxDQUFDc3lCLEtBQUt3QyxTQUFMLENBQWU5MEIsSUFBZixDQUFMLEVBQTJCLE9BQU81RCxRQUFRQyxPQUFSLENBQWdCMkQsSUFBaEIsQ0FBUDs7QUFFM0IsbUJBQU9vOEIsaUJBQWlCcDhCLElBQWpCLEVBQ0ZyQyxJQURFLENBQ0csWUFBWTtBQUNkLG9CQUFJMjBCLEtBQUtnRixPQUFMLENBQWF0M0IsSUFBYixDQUFKLEVBQ0ksT0FBT204QixTQUFTbjhCLElBQVQsRUFBZWc3QixNQUFmLEVBQVAsQ0FESixLQUdJLE9BQU81K0IsUUFBUWlHLEdBQVIsQ0FDSGl3QixLQUFLc0MsT0FBTCxDQUFhNTBCLEtBQUsweEIsVUFBbEIsRUFBOEJwa0MsR0FBOUIsQ0FBa0MsVUFBVXFrQyxLQUFWLEVBQWlCO0FBQy9DLDJCQUFPZ0YsVUFBVWhGLEtBQVYsQ0FBUDtBQUNILGlCQUZELENBREcsQ0FBUDtBQUtQLGFBVkUsQ0FBUDs7QUFZQSxxQkFBU3lLLGdCQUFULENBQTBCcDhCLElBQTFCLEVBQWdDO0FBQzVCLG9CQUFNOHVCLGFBQWE5dUIsS0FBS3JVLEtBQUwsQ0FBV3dsQyxnQkFBWCxDQUE0QixZQUE1QixDQUFuQjs7QUFFQSxvQkFBSSxDQUFDckMsVUFBTCxFQUFpQixPQUFPMXlCLFFBQVFDLE9BQVIsQ0FBZ0IyRCxJQUFoQixDQUFQOztBQUVqQix1QkFBT3d5QixRQUFRbUUsU0FBUixDQUFrQjdILFVBQWxCLEVBQ0ZueEIsSUFERSxDQUNHLFVBQVUwK0IsT0FBVixFQUFtQjtBQUNyQnI4Qix5QkFBS3JVLEtBQUwsQ0FBVzJwQyxXQUFYLENBQ0ksWUFESixFQUVJK0csT0FGSixFQUdJcjhCLEtBQUtyVSxLQUFMLENBQVc0cEMsbUJBQVgsQ0FBK0IsWUFBL0IsQ0FISjtBQUtILGlCQVBFLEVBUUY1M0IsSUFSRSxDQVFHLFlBQVk7QUFDZCwyQkFBT3FDLElBQVA7QUFDSCxpQkFWRSxDQUFQO0FBV0g7QUFDSjtBQUNKO0FBQ0YsQzs7a0JBcndCa0JxeUIsUzs7Ozs7Ozs7Ozs7QUNBckI7Ozs7SUFFcUJpSyxJO0FBRW5CLGdCQUFZcDJDLEdBQVosRUFBaUJDLEdBQWpCLEVBQXNCeWQsV0FBdEIsRUFBbUM7QUFBQTs7QUFDakMsU0FBSzFkLEdBQUwsR0FBV0EsR0FBWDtBQUNBLFNBQUtDLEdBQUwsR0FBV0EsR0FBWDtBQUNBLFNBQUswRyxNQUFMLEdBQWMrVyxXQUFkO0FBQ0EsU0FBS0MsTUFBTCxHQUFjLElBQUlub0IsWUFBTThJLE9BQVYsRUFBZDtBQUNBLFNBQUsrM0MsWUFBTCxHQUFvQixJQUFJN2dELFlBQU0rSSxPQUFWLEVBQXBCO0FBQ0EsU0FBS3FmLFNBQUwsR0FBaUIsS0FBS2pYLE1BQUwsQ0FBWWlYLFNBQTdCO0FBQ0EsU0FBS2hOLE1BQUwsR0FBYyxLQUFLakssTUFBTCxDQUFZaUssTUFBMUI7QUFDQSxTQUFLckUsS0FBTCxHQUFhLElBQUkvVyxZQUFNZ1gsS0FBVixFQUFiO0FBQ0EsU0FBS3FSLE1BQUwsR0FBYyxFQUFkO0FBQ0EsU0FBS3k0QixRQUFMLEdBQWdCLElBQWhCO0FBQ0EsU0FBSzV6QyxPQUFMLEdBQWUsSUFBZjtBQUNBLFNBQUs2ekMsYUFBTCxHQUFxQixLQUFLNXZDLE1BQUwsQ0FBWTZ2QyxnQkFBWixFQUFyQjs7QUFFQSxTQUFLdDJDLE9BQUwsR0FBZSxLQUFLeUcsTUFBTCxDQUFZekcsT0FBM0I7QUFDQSxTQUFLcUcsS0FBTCxHQUFhO0FBQ1hrd0MsbUJBQWEsS0FBS0EsV0FBTCxDQUFpQngwQixJQUFqQixDQUFzQixJQUF0QixDQURGO0FBRVh5MEIsbUJBQWEsS0FBS0EsV0FBTCxDQUFpQnowQixJQUFqQixDQUFzQixJQUF0QixDQUZGO0FBR1gwMEIsaUJBQVcsS0FBS0EsU0FBTCxDQUFlMTBCLElBQWYsQ0FBb0IsSUFBcEI7QUFIQSxLQUFiO0FBS0EsaUJBQUUsS0FBSy9oQixPQUFQLEVBQWdCeXFCLEVBQWhCLENBQW1CLFdBQW5CLEVBQWdDLEtBQUtwa0IsS0FBTCxDQUFXa3dDLFdBQTNDO0FBQ0EsaUJBQUUsS0FBS3YyQyxPQUFQLEVBQWdCeXFCLEVBQWhCLENBQW1CLFdBQW5CLEVBQWdDLEtBQUtwa0IsS0FBTCxDQUFXbXdDLFdBQTNDO0FBQ0EsaUJBQUUsS0FBS3oyQyxHQUFQLEVBQVkwcUIsRUFBWixDQUFlLFNBQWYsRUFBMEIsS0FBS3BrQixLQUFMLENBQVdvd0MsU0FBckM7QUFDRDs7aUJBRUQ3NEIsUSxxQkFBU2hWLEssRUFBTztBQUNkLFNBQUsrVSxNQUFMLENBQVlwbEIsSUFBWixDQUFpQnFRLEtBQWpCO0FBQ0QsRzs7aUJBRURpVixXLHdCQUFZalYsSyxFQUFPO0FBQ2pCLFFBQU10USxJQUFJLEtBQUtxbEIsTUFBTCxDQUFZL2pCLE9BQVosQ0FBb0JnUCxLQUFwQixDQUFWO0FBQ0EsUUFBRyxDQUFDdFEsQ0FBSixFQUFPO0FBQ0wsV0FBS3FsQixNQUFMLENBQVliLE1BQVosQ0FBbUJ4a0IsQ0FBbkIsRUFBc0IsQ0FBdEI7QUFDRDtBQUNGLEc7O2lCQUVEb3lCLGMsNkJBQWlCO0FBQ2YsV0FBTyxJQUFQO0FBQ0QsRzs7aUJBRURFLGMsNkJBQWlCO0FBQ2YsV0FBTyxJQUFQO0FBQ0QsRzs7aUJBRURDLGlCLGdDQUFvQixDQUVuQixDOztpQkFFRHBxQixPLHNCQUFVO0FBQ1IsaUJBQUUsS0FBS1QsT0FBUCxFQUFnQmtLLEdBQWhCLENBQW9CLFdBQXBCLEVBQWlDLEtBQUs3RCxLQUFMLENBQVdrd0MsV0FBNUM7QUFDQSxpQkFBRSxLQUFLdjJDLE9BQVAsRUFBZ0JrSyxHQUFoQixDQUFvQixXQUFwQixFQUFpQyxLQUFLN0QsS0FBTCxDQUFXbXdDLFdBQTVDO0FBQ0EsaUJBQUUsS0FBS3oyQyxHQUFQLEVBQVltSyxHQUFaLENBQWdCLFNBQWhCLEVBQTJCLEtBQUs3RCxLQUFMLENBQVdvd0MsU0FBdEM7QUFDRCxHOztpQkFFRDM0QixrQiwrQkFBbUI3YSxDLEVBQUc7QUFDcEIsUUFBTXluQyxXQUFXLGFBQUUsS0FBSzFxQyxPQUFQLENBQWpCO0FBQ0EsUUFBTTBMLFNBQVNnL0IsU0FBU2gvQixNQUFULEVBQWY7QUFDQSxTQUFLK1IsTUFBTCxDQUFZL2xCLENBQVosR0FBaUIsQ0FBQ3VMLEVBQUVxbkIsS0FBRixHQUFRNWUsT0FBT0ssSUFBaEIsSUFBc0IyK0IsU0FBUy9xQyxLQUFULEVBQXZCLEdBQXlDLENBQXpDLEdBQTJDLENBQTNEO0FBQ0EsU0FBSzhkLE1BQUwsQ0FBWXZtQixDQUFaLEdBQWdCLEVBQUUsQ0FBQytMLEVBQUVzbkIsS0FBRixHQUFRN2UsT0FBTzJuQixHQUFoQixJQUFxQnFYLFNBQVM5cUMsTUFBVCxFQUF2QixJQUEwQyxDQUExQyxHQUE0QyxDQUE1RDtBQUNBLFdBQU8sS0FBSzZkLE1BQVo7QUFDRCxHOztpQkFFRCs0QixXLHdCQUFZdnpDLEMsRUFBRztBQUNiLFFBQUcsQ0FBQyxLQUFLVCxPQUFULEVBQWtCOztBQUVsQixRQUFHLEtBQUs0ekMsUUFBUixFQUFrQixLQUFLSyxTQUFMLENBQWV4ekMsQ0FBZjs7QUFFbEIsU0FBSzZhLGtCQUFMLENBQXdCN2EsQ0FBeEI7QUFDRCxTQUFLeWEsU0FBTCxDQUFlSyxhQUFmLENBQTZCLEtBQUtOLE1BQWxDLEVBQTBDLEtBQUsvTSxNQUEvQzs7QUFFQSxRQUFNc04sYUFBYSxLQUFLTixTQUFMLENBQWVPLGdCQUFmLENBQWdDLEtBQUtOLE1BQXJDLENBQW5CO0FBQ0EsUUFBR0ssV0FBVzVtQixNQUFYLEdBQW9CLENBQXZCLEVBQTBCO0FBQ3ZCLFVBQU1nL0MsV0FBV3A0QixXQUFXLENBQVgsRUFBY2hiLE1BQS9CO0FBQ0EsVUFBRyxDQUFDLEtBQUswbkIsY0FBTCxDQUFvQjFNLFdBQVcsQ0FBWCxDQUFwQixDQUFKLEVBQXdDO0FBQ3hDLFVBQU12a0IsSUFBSXVrQixXQUFXLENBQVgsRUFBYzNRLEtBQWQsQ0FBb0J6RixLQUFwQixFQUFWO0FBQ0EsV0FBS21GLFFBQUwsR0FBZ0J0VCxFQUFFcVQsR0FBRixDQUFNLEtBQUs0USxTQUFMLENBQWVnNUIsR0FBZixDQUFtQkMsTUFBekIsRUFBaUN2L0MsTUFBakMsRUFBaEIsQ0FBMEQ7QUFDMUQsV0FBS2kvQyxhQUFMLEdBQXFCLEtBQUs1dkMsTUFBTCxDQUFZNnZDLGdCQUFaLEVBQXJCO0FBQ0EsV0FBSzd2QyxNQUFMLENBQVltd0MsZ0JBQVosQ0FBNkIsS0FBN0I7QUFDQSxXQUFLdnFDLEtBQUwsQ0FBV00sNkJBQVgsQ0FBeUMsS0FBS2xHLE1BQUwsQ0FBWWlLLE1BQVosQ0FBbUJtbUMsaUJBQW5CLENBQXFDLEtBQUt4cUMsS0FBTCxDQUFXRSxNQUFoRCxDQUF6QyxFQUFrR3lSLFdBQVcsQ0FBWCxFQUFjM1EsS0FBaEg7QUFDQTtBQUNBLFdBQUsrb0MsUUFBTCxHQUFnQkEsUUFBaEI7QUFDRjtBQUVELEc7O2lCQUVERyxXLHdCQUFZdHpDLEMsRUFBRztBQUNiLFFBQUcsQ0FBQyxLQUFLVCxPQUFULEVBQWtCO0FBQ25CUyxNQUFFNHVCLGNBQUY7O0FBRUEsUUFBRyxLQUFLdWtCLFFBQVIsRUFBa0I7QUFDZixXQUFLdDRCLGtCQUFMLENBQXdCN2EsQ0FBeEI7QUFDRCxXQUFLeWEsU0FBTCxDQUFlSyxhQUFmLENBQTZCLEtBQUtOLE1BQWxDLEVBQTBDLEtBQUsvTSxNQUEvQztBQUNBLFVBQUcsS0FBS2dOLFNBQUwsQ0FBZWc1QixHQUFmLENBQW1CSSxjQUFuQixDQUFrQyxLQUFLenFDLEtBQXZDLEVBQThDLEtBQUs4cEMsWUFBbkQsQ0FBSCxFQUFxRTtBQUNsRSxZQUFHLENBQUMsS0FBS3ZyQixjQUFMLENBQW9CLEtBQUt1ckIsWUFBekIsQ0FBSixFQUE0QyxLQUFLTSxTQUFMLENBQWV4ekMsQ0FBZjtBQUM3QyxPQUxjLENBS2Q7QUFDRDtBQUNBO0FBQ0Y7QUFDRCxHOztpQkFFRHd6QyxTLHNCQUFVeHpDLEMsRUFBRztBQUNYLFFBQUcsS0FBS216QyxRQUFSLEVBQWtCO0FBQ2hCLFdBQUt2ckIsaUJBQUw7QUFDRixXQUFLdXJCLFFBQUwsR0FBZ0IsSUFBaEI7QUFDRSxXQUFLM3ZDLE1BQUwsQ0FBWW13QyxnQkFBWixDQUE2QixLQUFLUCxhQUFsQztBQUNGO0FBQ0EsUUFBRyxDQUFDLEtBQUs3ekMsT0FBVCxFQUFrQjtBQUNuQlMsTUFBRTR1QixjQUFGO0FBQ0EsRzs7Ozs7a0JBOUdrQnFrQixJOzs7Ozs7Ozs7Ozs7O0FDRnJCOzs7O0FBQ0FoaEQsbUJBQU9BLENBQUMsRUFBUixFQUEwRGUsT0FBMUQ7O0lBRXFCNmpDLGU7a0JBY1ppZCxhLDBCQUFjOXpDLEMsRUFBRztBQUN0QixXQUFPQSxFQUFFK3pDLE9BQUYsSUFBVyxDQUFYLEdBQWUvekMsRUFBRWcwQyxRQUFGLElBQVksQ0FBM0IsR0FBK0JoMEMsRUFBRWkwQyxNQUFGLElBQVUsQ0FBaEQ7QUFDRCxHOztrQkFFTUMsVyx3QkFBWTdkLE8sRUFBUztBQUMxQixRQUFJNWhDLFVBQUo7QUFBQSxRQUFPUixVQUFQO0FBQ0EsUUFBR29pQyxRQUFRbGlDLE1BQVIsS0FBaUIsQ0FBcEIsRUFBdUI7QUFDckJNLFVBQUk0aEMsUUFBUSxDQUFSLEVBQVdoUCxLQUFYLEdBQWlCZ1AsUUFBUSxDQUFSLEVBQVdoUCxLQUFoQztBQUNBcHpCLFVBQUlvaUMsUUFBUSxDQUFSLEVBQVcvTyxLQUFYLEdBQWlCK08sUUFBUSxDQUFSLEVBQVcvTyxLQUFoQztBQUNELEtBSEQsTUFJSztBQUNIN3lCLFVBQUk0aEMsUUFBUSxDQUFSLEVBQVdoUCxLQUFmO0FBQ0FwekIsVUFBSW9pQyxRQUFRLENBQVIsRUFBVy9PLEtBQWY7QUFDRDtBQUNELFdBQU87QUFDTDd5QixVQURLO0FBRUxSO0FBRkssS0FBUDtBQUlELEc7O0FBRUQsMkJBQVk4SSxPQUFaLEVBQXFCMHlCLE9BQXJCLEVBQThCO0FBQUE7O0FBQzVCLFNBQUtBLE9BQUwsR0FBZUEsV0FBVyxFQUExQjtBQUNBLFNBQUsxeUIsT0FBTCxHQUFlQSxPQUFmO0FBQ0EsU0FBS0QsR0FBTCxHQUFXQyxRQUFRLENBQVIsRUFBVzJnQixhQUF0QjtBQUNBLFNBQUs3Z0IsR0FBTCxHQUFXLEtBQUtDLEdBQUwsQ0FBUzZnQixXQUFwQjtBQUNBLFNBQUtwZSxPQUFMLEdBQWUsSUFBZjs7QUFFQSxTQUFLNkQsS0FBTCxHQUFhO0FBQ1grd0MsbUJBQWEsS0FBS0EsV0FBTCxDQUFpQnIxQixJQUFqQixDQUFzQixJQUF0QixDQURGOztBQUdYczFCLGlCQUFXLEtBQUtBLFNBQUwsQ0FBZXQxQixJQUFmLENBQW9CLElBQXBCLENBSEE7QUFJWHUxQixpQkFBVyxLQUFLQSxTQUFMLENBQWV2MUIsSUFBZixDQUFvQixJQUFwQixDQUpBO0FBS1h3MUIsZUFBUyxLQUFLQSxPQUFMLENBQWF4MUIsSUFBYixDQUFrQixJQUFsQixDQUxFO0FBTVh5MUIsa0JBQVksS0FBS0EsVUFBTCxDQUFnQnoxQixJQUFoQixDQUFxQixJQUFyQixDQU5EOztBQVFYMDFCLG9CQUFjLEtBQUtBLFlBQUwsQ0FBa0IxMUIsSUFBbEIsQ0FBdUIsSUFBdkIsQ0FSSDtBQVNYMjFCLGtCQUFZLEtBQUtBLFVBQUwsQ0FBZ0IzMUIsSUFBaEIsQ0FBcUIsSUFBckIsQ0FURDs7QUFXWDQxQixhQUFPLEtBQUtBLEtBQUwsQ0FBVzUxQixJQUFYLENBQWdCLElBQWhCLENBWEk7QUFZWDYxQixnQkFBVSxLQUFLQSxRQUFMLENBQWM3MUIsSUFBZCxDQUFtQixJQUFuQixDQVpDOztBQWNYODFCLGtCQUFZLEtBQUtBLFVBQUwsQ0FBZ0I5MUIsSUFBaEIsQ0FBcUIsSUFBckIsQ0FkRDtBQWVYKzFCLGlCQUFXLEtBQUtBLFNBQUwsQ0FBZS8xQixJQUFmLENBQW9CLElBQXBCLENBZkE7QUFnQlhnMkIsZ0JBQVUsS0FBS0EsUUFBTCxDQUFjaDJCLElBQWQsQ0FBbUIsSUFBbkIsQ0FoQkM7O0FBa0JYaTJCLGVBQVMsS0FBS0EsT0FBTCxDQUFhajJCLElBQWIsQ0FBa0IsSUFBbEIsQ0FsQkU7QUFtQlhrMkIsZ0JBQVUsS0FBS0EsUUFBTCxDQUFjbDJCLElBQWQsQ0FBbUIsSUFBbkIsQ0FuQkM7QUFvQlhtMkIsYUFBTyxLQUFLQSxLQUFMLENBQVduMkIsSUFBWCxDQUFnQixJQUFoQjtBQXBCSSxLQUFiOztBQXVCQSxTQUFLL2hCLE9BQUwsQ0FBYXlxQixFQUFiLENBQWdCLGFBQWhCLEVBQStCLEtBQUtwa0IsS0FBTCxDQUFXK3dDLFdBQTFDOztBQUVBLFNBQUtwM0MsT0FBTCxDQUFheXFCLEVBQWIsQ0FBZ0IsV0FBaEIsRUFBNkIsS0FBS3BrQixLQUFMLENBQVdneEMsU0FBeEM7QUFDQSxTQUFLcjNDLE9BQUwsQ0FBYXlxQixFQUFiLENBQWdCLFdBQWhCLEVBQTZCLEtBQUtwa0IsS0FBTCxDQUFXaXhDLFNBQXhDO0FBQ0EsU0FBS3QzQyxPQUFMLENBQWF5cUIsRUFBYixDQUFnQixTQUFoQixFQUEyQixLQUFLcGtCLEtBQUwsQ0FBV2t4QyxPQUF0QztBQUNBLFNBQUt2M0MsT0FBTCxDQUFheXFCLEVBQWIsQ0FBZ0IsWUFBaEIsRUFBOEIsS0FBS3BrQixLQUFMLENBQVdteEMsVUFBekM7O0FBRUEsaUJBQUUsS0FBS3ozQyxHQUFQLEVBQVkwcUIsRUFBWixDQUFlLFdBQWYsRUFBNEIsS0FBS3BrQixLQUFMLENBQVdveEMsWUFBdkM7QUFDQSxpQkFBRSxLQUFLMTNDLEdBQVAsRUFBWTBxQixFQUFaLENBQWUsU0FBZixFQUEwQixLQUFLcGtCLEtBQUwsQ0FBV3F4QyxVQUFyQzs7QUFFQSxTQUFLMTNDLE9BQUwsQ0FBYXlxQixFQUFiLENBQWdCLE9BQWhCLEVBQXlCLEtBQUtwa0IsS0FBTCxDQUFXc3hDLEtBQXBDO0FBQ0EsU0FBSzMzQyxPQUFMLENBQWF5cUIsRUFBYixDQUFnQixVQUFoQixFQUE0QixLQUFLcGtCLEtBQUwsQ0FBV3V4QyxRQUF2Qzs7QUFFQSxTQUFLNTNDLE9BQUwsQ0FBYXlxQixFQUFiLENBQWdCLFlBQWhCLEVBQThCLEtBQUtwa0IsS0FBTCxDQUFXd3hDLFVBQXpDO0FBQ0EsU0FBSzczQyxPQUFMLENBQWF5cUIsRUFBYixDQUFnQixXQUFoQixFQUE2QixLQUFLcGtCLEtBQUwsQ0FBV3l4QyxTQUF4QztBQUNBLFNBQUs5M0MsT0FBTCxDQUFheXFCLEVBQWIsQ0FBZ0IsVUFBaEIsRUFBNEIsS0FBS3BrQixLQUFMLENBQVcweEMsUUFBdkM7O0FBRUEsaUJBQUUsS0FBS2o0QyxHQUFQLEVBQVkycUIsRUFBWixDQUFlLFNBQWYsRUFBMEIsS0FBS3BrQixLQUFMLENBQVcyeEMsT0FBckM7QUFDQSxpQkFBRSxLQUFLbDRDLEdBQVAsRUFBWTJxQixFQUFaLENBQWUsVUFBZixFQUEyQixLQUFLcGtCLEtBQUwsQ0FBVzR4QyxRQUF0QztBQUNBLGlCQUFFLEtBQUtuNEMsR0FBUCxFQUFZMnFCLEVBQVosQ0FBZSxPQUFmLEVBQXdCLEtBQUtwa0IsS0FBTCxDQUFXNnhDLEtBQW5DO0FBQ0Q7OzRCQUVEbmUsUyxzQkFBVUcsTSxFQUFRaDNCLEksRUFBTWcxQixJLEVBQU1pQyxLLEVBQU87QUFDbkNqM0IsV0FBT0EsS0FBS3FXLFdBQUwsRUFBUDtBQUNBLFFBQUcsQ0FBQyxLQUFLbVosT0FBTCxDQUFheHZCLElBQWIsQ0FBSixFQUF3QjtBQUN0QixXQUFLd3ZCLE9BQUwsQ0FBYXh2QixJQUFiLElBQXFCLEVBQXJCO0FBQ0Q7QUFDRCxRQUFHLENBQUMsS0FBS3d2QixPQUFMLENBQWF4dkIsSUFBYixFQUFtQmcxQixJQUFuQixDQUFKLEVBQThCO0FBQzVCLFdBQUt4RixPQUFMLENBQWF4dkIsSUFBYixFQUFtQmcxQixJQUFuQixJQUEyQixFQUEzQjtBQUNEO0FBQ0QsUUFBRyxDQUFDLEtBQUt4RixPQUFMLENBQWF4dkIsSUFBYixFQUFtQmcxQixJQUFuQixFQUF5QmlDLEtBQXpCLENBQUosRUFBcUM7QUFDbkMsV0FBS3pILE9BQUwsQ0FBYXh2QixJQUFiLEVBQW1CZzFCLElBQW5CLEVBQXlCaUMsS0FBekIsSUFBa0MsRUFBbEM7QUFDRDtBQUNELFNBQUt6SCxPQUFMLENBQWF4dkIsSUFBYixFQUFtQmcxQixJQUFuQixFQUF5QmlDLEtBQXpCLEVBQWdDNWhDLElBQWhDLENBQXFDMmhDLE1BQXJDO0FBQ0QsRzs7NEJBRURuQyxVLHVCQUFXNzBCLEksRUFBTWcxQixJLEVBQU1pQyxLLEVBQU87QUFDNUIsV0FBTyxDQUFDLENBQUMsS0FBS3pILE9BQUwsQ0FBYXh2QixJQUFiLEtBQXNCLEVBQXZCLEVBQTJCZzFCLElBQTNCLEtBQW9DLEVBQXJDLEVBQXlDaUMsS0FBekMsS0FBbUQsRUFBMUQ7QUFDRCxHOzs0QkFFRGdlLFcsd0JBQVl6bEIsTyxFQUFTenZCLEMsRUFBR3BLLEksRUFBTTtBQUM1Qix5QkFBa0I2NUIsT0FBbEIsa0hBQTJCO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQSxVQUFuQndILE1BQW1COztBQUN6QkEsYUFBT2ozQixDQUFQLEVBQVVwSyxJQUFWO0FBQ0Q7QUFDRixHOzs0QkFFRHUrQyxXLHdCQUFZbjBDLEMsRUFBRztBQUNiLFFBQUcsS0FBS1QsT0FBUixFQUFpQjtBQUNmLFVBQU0yM0IsUUFBUUwsZ0JBQWdCaWQsYUFBaEIsQ0FBOEI5ekMsQ0FBOUIsQ0FBZDtBQUNBLFdBQUtrMUMsV0FBTCxDQUFpQixLQUFLcGdCLFVBQUwsQ0FBZ0IsYUFBaEIsRUFBK0I5MEIsRUFBRW0xQyxNQUFqQyxFQUF5Q2plLEtBQXpDLENBQWpCLEVBQWtFbDNCLENBQWxFO0FBQ0Q7QUFDRixHOzs0QkFFRG8wQyxTLHNCQUFVcDBDLEMsRUFBRztBQUNYLFFBQUcsS0FBS28xQyxNQUFSLEVBQWdCO0FBQ2QsV0FBS1gsVUFBTDtBQUNEO0FBQ0QsUUFBRyxLQUFLbDFDLE9BQVIsRUFBaUI7QUFDZixVQUFNMjNCLFFBQVFMLGdCQUFnQmlkLGFBQWhCLENBQThCOXpDLENBQTlCLENBQWQ7QUFDQSxXQUFLazFDLFdBQUwsQ0FBaUIsS0FBS3BnQixVQUFMLENBQWdCLFdBQWhCLEVBQTZCOTBCLEVBQUVtMUMsTUFBL0IsRUFBdUNqZSxLQUF2QyxDQUFqQixFQUFnRWwzQixDQUFoRTtBQUNBLFdBQUtvMUMsTUFBTCxHQUFjO0FBQ1ozZ0QsV0FBR3VMLEVBQUVxbkIsS0FETztBQUVacHpCLFdBQUcrTCxFQUFFc25CLEtBRk87QUFHWm1JLGlCQUFTLEtBQUtxRixVQUFMLENBQWdCLFdBQWhCLEVBQTZCOTBCLEVBQUVtMUMsTUFBL0IsRUFBdUNqZSxLQUF2QztBQUhHLE9BQWQ7QUFLQSxXQUFLZ2UsV0FBTCxDQUFpQixLQUFLRSxNQUFMLENBQVkzbEIsT0FBN0IsRUFBc0N6dkIsQ0FBdEMsRUFBeUM7QUFDdkM0RCxlQUFPO0FBRGdDLE9BQXpDO0FBR0Q7QUFDRixHOzs0QkFFRHl3QyxTLHNCQUFVcjBDLEMsRUFBRztBQUNYLFFBQUcsS0FBS1QsT0FBUixFQUFpQjtBQUNmLFVBQU0yM0IsUUFBUUwsZ0JBQWdCaWQsYUFBaEIsQ0FBOEI5ekMsQ0FBOUIsQ0FBZDtBQUNBLFdBQUtrMUMsV0FBTCxDQUFpQixLQUFLcGdCLFVBQUwsQ0FBZ0IsV0FBaEIsRUFBNkI5MEIsRUFBRW0xQyxNQUEvQixFQUF1Q2plLEtBQXZDLENBQWpCLEVBQWdFbDNCLENBQWhFO0FBQ0Q7QUFDRixHOzs0QkFFRHcwQyxZLHlCQUFheDBDLEMsRUFBRztBQUNkLFFBQUcsS0FBS1QsT0FBTCxJQUFnQixLQUFLNjFDLE1BQXhCLEVBQWdDO0FBQzlCLFdBQUtGLFdBQUwsQ0FBaUIsS0FBS0UsTUFBTCxDQUFZM2xCLE9BQTdCLEVBQXNDenZCLENBQXRDLEVBQXlDO0FBQ3ZDNEQsZUFBTyxNQURnQztBQUV2Q2hMLFlBQUlvSCxFQUFFcW5CLEtBQUYsR0FBUSxLQUFLK3RCLE1BQUwsQ0FBWTNnRCxDQUZlO0FBR3ZDWCxZQUFJa00sRUFBRXNuQixLQUFGLEdBQVEsS0FBSzh0QixNQUFMLENBQVluaEQ7QUFIZSxPQUF6QztBQUtBLFdBQUttaEQsTUFBTCxHQUFjO0FBQ1ozZ0QsV0FBR3VMLEVBQUVxbkIsS0FETztBQUVacHpCLFdBQUcrTCxFQUFFc25CLEtBRk87QUFHWm1JLGlCQUFTLEtBQUsybEIsTUFBTCxDQUFZM2xCO0FBSFQsT0FBZDtBQUtEO0FBQ0YsRzs7NEJBRUQ2a0IsTyxvQkFBUXQwQyxDLEVBQUc7QUFDVCxRQUFHLEtBQUtULE9BQVIsRUFBaUI7QUFDZixVQUFNMjNCLFFBQVFMLGdCQUFnQmlkLGFBQWhCLENBQThCOXpDLENBQTlCLENBQWQ7QUFDQSxXQUFLazFDLFdBQUwsQ0FBaUIsS0FBS3BnQixVQUFMLENBQWdCLFNBQWhCLEVBQTJCOTBCLEVBQUVtMUMsTUFBN0IsRUFBcUNqZSxLQUFyQyxDQUFqQixFQUE4RGwzQixDQUE5RDtBQUNEO0FBQ0YsRzs7NEJBRUR5MEMsVSx1QkFBV3owQyxDLEVBQUc7QUFDWixRQUFHLEtBQUtvMUMsTUFBUixFQUFnQjtBQUNkLFdBQUtGLFdBQUwsQ0FBaUIsS0FBS0UsTUFBTCxDQUFZM2xCLE9BQTdCLEVBQXNDenZCLENBQXRDLEVBQXlDO0FBQ3ZDNEQsZUFBTztBQURnQyxPQUF6QztBQUdBLGFBQU8sS0FBS3d4QyxNQUFaO0FBQ0Q7QUFDRixHOzs0QkFFRGIsVSx1QkFBV3YwQyxDLEVBQUc7QUFDWixRQUFHLEtBQUtULE9BQVIsRUFBaUI7QUFDZixVQUFNMjNCLFFBQVFMLGdCQUFnQmlkLGFBQWhCLENBQThCOXpDLENBQTlCLENBQWQ7QUFDQSxXQUFLazFDLFdBQUwsQ0FBaUIsS0FBS3BnQixVQUFMLENBQWdCLFlBQWhCLEVBQThCLENBQTlCLEVBQWlDb0MsS0FBakMsQ0FBakIsRUFBMERsM0IsQ0FBMUQ7QUFDRDtBQUNGLEc7OzRCQUVEcTFDLE0sbUJBQU9yMUMsQyxFQUFHQyxJLEVBQU07QUFDZCxRQUFHLEtBQUtWLE9BQVIsRUFBaUI7QUFDZixVQUFNMjNCLFFBQVFMLGdCQUFnQmlkLGFBQWhCLENBQThCOXpDLENBQTlCLENBQWQ7QUFDQSxXQUFLazFDLFdBQUwsQ0FBaUIsS0FBS3BnQixVQUFMLENBQWdCNzBCLElBQWhCLEVBQXNCRCxFQUFFbTFDLE1BQXhCLEVBQWdDamUsS0FBaEMsQ0FBakIsRUFBeURsM0IsQ0FBekQ7QUFDRDtBQUNGLEc7OzRCQUVEMDBDLEssa0JBQU0xMEMsQyxFQUFHO0FBQ1AsU0FBS3ExQyxNQUFMLENBQVlyMUMsQ0FBWixFQUFlLE9BQWY7QUFDRCxHOzs0QkFFRDIwQyxRLHFCQUFTMzBDLEMsRUFBRztBQUNWLFNBQUtxMUMsTUFBTCxDQUFZcjFDLENBQVosRUFBZSxVQUFmO0FBQ0QsRzs7NEJBRURzMUMsUyxzQkFBVXQxQyxDLEVBQUdrM0IsSyxFQUFPYixPLEVBQVM7QUFDM0IsUUFBTWtmLE1BQU0xZSxnQkFBZ0JxZCxXQUFoQixDQUE0QjdkLE9BQTVCLENBQVo7QUFDQSxTQUFLbWYsV0FBTCxnQkFDS0QsR0FETDtBQUVFOWxCLGVBQVMsS0FBS3FGLFVBQUwsQ0FBZ0IsV0FBaEIsRUFBNkJ1QixRQUFRbGlDLE1BQXJDLEVBQTZDK2lDLEtBQTdDLENBRlg7QUFHRWpDLFlBQU1vQixRQUFRbGlDLE1BSGhCO0FBSUUraUM7QUFKRjtBQU1BLFNBQUtnZSxXQUFMLENBQWlCLEtBQUtNLFdBQUwsQ0FBaUIvbEIsT0FBbEMsRUFBMkN6dkIsQ0FBM0M7QUFDRTRELGFBQU87QUFEVCxPQUVLMnhDLEdBRkw7QUFJRCxHOzs0QkFFRFgsVSx1QkFBVzUwQyxDLEVBQUc7QUFDWixRQUFHLEtBQUt3MUMsV0FBUixFQUFxQjtBQUNuQixXQUFLVixRQUFMLENBQWM5MEMsQ0FBZDtBQUNEO0FBQ0QsUUFBRyxLQUFLVCxPQUFSLEVBQWlCO0FBQ2YsVUFBTTIzQixRQUFRTCxnQkFBZ0JpZCxhQUFoQixDQUE4Qjl6QyxDQUE5QixDQUFkO0FBQUEsVUFBZ0RxMkIsVUFBVXIyQixFQUFFcTJCLE9BQUYsSUFBYXIyQixFQUFFczJCLGFBQUYsQ0FBZ0JELE9BQXZGO0FBQ0EsV0FBSzZlLFdBQUwsQ0FBaUIsS0FBS3BnQixVQUFMLENBQWdCLFlBQWhCLEVBQThCdUIsUUFBUWxpQyxNQUF0QyxFQUE4QytpQyxLQUE5QyxDQUFqQixFQUF1RWwzQixDQUF2RTtBQUNBLFdBQUtzMUMsU0FBTCxDQUFldDFDLENBQWYsRUFBa0JrM0IsS0FBbEIsRUFBeUJiLE9BQXpCO0FBQ0Q7QUFDRixHOzs0QkFFRHdlLFMsc0JBQVU3MEMsQyxFQUFHO0FBQ1gsUUFBRyxLQUFLVCxPQUFSLEVBQWlCO0FBQ2YsVUFBTTIzQixRQUFRTCxnQkFBZ0JpZCxhQUFoQixDQUE4Qjl6QyxDQUE5QixDQUFkO0FBQUEsVUFBZ0RxMkIsVUFBVXIyQixFQUFFcTJCLE9BQUYsSUFBYXIyQixFQUFFczJCLGFBQUYsQ0FBZ0JELE9BQXZGO0FBQ0EsV0FBSzZlLFdBQUwsQ0FBaUIsS0FBS3BnQixVQUFMLENBQWdCLFdBQWhCLEVBQTZCdUIsUUFBUWxpQyxNQUFyQyxFQUE2QytpQyxLQUE3QyxDQUFqQixFQUFzRWwzQixDQUF0RTtBQUNBLFVBQUcsS0FBS3cxQyxXQUFSLEVBQXFCO0FBQ25CLFlBQUcsS0FBS0EsV0FBTCxDQUFpQnZnQixJQUFqQixLQUF3Qm9CLFFBQVFsaUMsTUFBaEMsSUFBMEMsS0FBS3FoRCxXQUFMLENBQWlCdGUsS0FBakIsS0FBeUJBLEtBQXRFLEVBQTZFO0FBQzNFLGNBQU1xZSxNQUFNMWUsZ0JBQWdCcWQsV0FBaEIsQ0FBNEI3ZCxPQUE1QixDQUFaO0FBQ0EsZUFBSzZlLFdBQUwsQ0FBaUIsS0FBS00sV0FBTCxDQUFpQi9sQixPQUFsQyxFQUEyQ3p2QixDQUEzQztBQUNFNEQsbUJBQU8sTUFEVDtBQUVFaEwsZ0JBQUkyOEMsSUFBSTlnRCxDQUFKLEdBQU0sS0FBSytnRCxXQUFMLENBQWlCL2dELENBRjdCO0FBR0VYLGdCQUFJeWhELElBQUl0aEQsQ0FBSixHQUFNLEtBQUt1aEQsV0FBTCxDQUFpQnZoRDtBQUg3QixhQUlLc2hELEdBSkw7QUFNQSxlQUFLQyxXQUFMLGdCQUNLLEtBQUtBLFdBRFYsRUFFS0QsR0FGTDtBQUlELFNBWkQsTUFhSztBQUNILGVBQUtULFFBQUwsQ0FBYzkwQyxDQUFkO0FBQ0EsZUFBS3MxQyxTQUFMLENBQWV0MUMsQ0FBZixFQUFrQmszQixLQUFsQixFQUF5QmIsT0FBekI7QUFDRDtBQUNGO0FBQ0Y7QUFDRixHOzs0QkFFRHllLFEscUJBQVM5MEMsQyxFQUFHO0FBQ1YsUUFBRyxLQUFLdzFDLFdBQVIsRUFBcUI7QUFDbkIsV0FBS04sV0FBTCxDQUFpQixLQUFLTSxXQUFMLENBQWlCL2xCLE9BQWxDLEVBQTJDenZCLENBQTNDLEVBQThDO0FBQzVDNEQsZUFBTztBQURxQyxPQUE5QztBQUdBLGFBQU8sS0FBSzR4QyxXQUFaO0FBQ0Q7QUFDRixHOzs0QkFFRHpoQyxHLGdCQUFJL1QsQyxFQUFHQyxJLEVBQU07QUFDWCxRQUFHLEtBQUtWLE9BQVIsRUFBaUI7QUFDZixVQUFNMjNCLFFBQVFMLGdCQUFnQmlkLGFBQWhCLENBQThCOXpDLENBQTlCLENBQWQ7QUFDQSxXQUFLazFDLFdBQUwsQ0FBaUIsS0FBS3BnQixVQUFMLENBQWdCNzBCLElBQWhCLEVBQXNCRCxFQUFFeTFDLE9BQXhCLEVBQWlDdmUsS0FBakMsQ0FBakIsRUFBMERsM0IsQ0FBMUQ7QUFDRDtBQUNGLEc7OzRCQUVEKzBDLE8sb0JBQVEvMEMsQyxFQUFHO0FBQ1QsU0FBSytULEdBQUwsQ0FBUy9ULENBQVQsRUFBWSxTQUFaO0FBQ0QsRzs7NEJBRURnMUMsUSxxQkFBU2gxQyxDLEVBQUc7QUFDVixTQUFLK1QsR0FBTCxDQUFTL1QsQ0FBVCxFQUFZLFVBQVo7QUFDRCxHOzs0QkFFRGkxQyxLLGtCQUFNajFDLEMsRUFBRztBQUNQLFNBQUsrVCxHQUFMLENBQVMvVCxDQUFULEVBQVksT0FBWjtBQUNELEc7OzRCQUVEeEMsTyxzQkFBVTtBQUNSLFNBQUtULE9BQUwsQ0FBYWtLLEdBQWIsQ0FBaUIsYUFBakIsRUFBZ0MsS0FBSzdELEtBQUwsQ0FBVyt3QyxXQUEzQzs7QUFFQSxTQUFLcDNDLE9BQUwsQ0FBYWtLLEdBQWIsQ0FBaUIsV0FBakIsRUFBOEIsS0FBSzdELEtBQUwsQ0FBV2d4QyxTQUF6QztBQUNBLFNBQUtyM0MsT0FBTCxDQUFha0ssR0FBYixDQUFpQixXQUFqQixFQUE4QixLQUFLN0QsS0FBTCxDQUFXaXhDLFNBQXpDO0FBQ0EsU0FBS3QzQyxPQUFMLENBQWFrSyxHQUFiLENBQWlCLFNBQWpCLEVBQTRCLEtBQUs3RCxLQUFMLENBQVdreEMsT0FBdkM7QUFDQSxTQUFLdjNDLE9BQUwsQ0FBYWtLLEdBQWIsQ0FBaUIsWUFBakIsRUFBK0IsS0FBSzdELEtBQUwsQ0FBV214QyxVQUExQzs7QUFFQSxpQkFBRSxLQUFLejNDLEdBQVAsRUFBWW1LLEdBQVosQ0FBZ0IsV0FBaEIsRUFBNkIsS0FBSzdELEtBQUwsQ0FBV294QyxZQUF4QztBQUNBLGlCQUFFLEtBQUsxM0MsR0FBUCxFQUFZbUssR0FBWixDQUFnQixTQUFoQixFQUEyQixLQUFLN0QsS0FBTCxDQUFXcXhDLFVBQXRDOztBQUVBLFNBQUsxM0MsT0FBTCxDQUFha0ssR0FBYixDQUFpQixPQUFqQixFQUEwQixLQUFLN0QsS0FBTCxDQUFXc3hDLEtBQXJDO0FBQ0EsU0FBSzMzQyxPQUFMLENBQWFrSyxHQUFiLENBQWlCLFVBQWpCLEVBQTZCLEtBQUs3RCxLQUFMLENBQVd1eEMsUUFBeEM7O0FBRUEsU0FBSzUzQyxPQUFMLENBQWFrSyxHQUFiLENBQWlCLFlBQWpCLEVBQStCLEtBQUs3RCxLQUFMLENBQVd3eEMsVUFBMUM7QUFDQSxTQUFLNzNDLE9BQUwsQ0FBYWtLLEdBQWIsQ0FBaUIsV0FBakIsRUFBOEIsS0FBSzdELEtBQUwsQ0FBV3l4QyxTQUF6QztBQUNBLFNBQUs5M0MsT0FBTCxDQUFha0ssR0FBYixDQUFpQixVQUFqQixFQUE2QixLQUFLN0QsS0FBTCxDQUFXMHhDLFFBQXhDOztBQUVBLGlCQUFFLEtBQUtqNEMsR0FBUCxFQUFZb0ssR0FBWixDQUFnQixTQUFoQixFQUEyQixLQUFLN0QsS0FBTCxDQUFXMnhDLE9BQXRDO0FBQ0EsaUJBQUUsS0FBS2w0QyxHQUFQLEVBQVlvSyxHQUFaLENBQWdCLFVBQWhCLEVBQTRCLEtBQUs3RCxLQUFMLENBQVc0eEMsUUFBdkM7QUFDQSxpQkFBRSxLQUFLbjRDLEdBQVAsRUFBWW9LLEdBQVosQ0FBZ0IsT0FBaEIsRUFBeUIsS0FBSzdELEtBQUwsQ0FBVzZ4QyxLQUFwQztBQUNELEc7Ozs7O0FBdlNrQnBlLGUsQ0FFWjZlLE8sR0FBVTtBQUNmQyxRQUFNLENBRFM7QUFFZkMsU0FBTyxDQUZRO0FBR2ZDLE9BQUs7QUFIVSxDO0FBRkVoZixlLENBUVpFLFksR0FBZTtBQUNwQnNOLFFBQU0sQ0FEYztBQUVwQkMsVUFBUSxDQUZZO0FBR3BCdE4sU0FBTztBQUhhLEM7a0JBUkhILGU7Ozs7Ozs7Ozs7Ozs7SUNGQTFmLFU7Ozs7O1lBTWJWLFMsd0JBQVk7QUFDbEIsU0FBT1UsV0FBVzIrQixvQkFBWCxJQUFtQzMrQixXQUFXNCtCLGlCQUE5QyxJQUFtRTUrQixXQUFXNitCLGdCQUFyRjtBQUNBLEU7O1lBRU10L0IsUyx3QkFBWTtBQUNsQixNQUFHUyxXQUFXMitCLG9CQUFkLEVBQW9DO0FBQ25DLFVBQU9qb0MsU0FBU29vQyxrQkFBaEI7QUFDQSxHQUZELE1BR0ssSUFBRzkrQixXQUFXNCtCLGlCQUFkLEVBQWlDO0FBQ3JDLFVBQU9sb0MsU0FBU3FvQyxhQUFoQjtBQUNBLEdBRkksTUFHQSxJQUFHLytCLFdBQVc2K0IsZ0JBQWQsRUFBZ0M7QUFDcEMsVUFBTyxDQUFDLENBQUNub0MsU0FBU3NvQyxtQkFBbEI7QUFDQSxHQUZJLE1BR0E7QUFDSjMrQyxXQUFRNCtDLE1BQVIsQ0FBZSxLQUFmO0FBQ0E7QUFDRCxFOztZQUVNdnBDLGdCLDZCQUFpQjlQLE8sRUFBUzhaLE8sRUFBUztBQUN6QyxNQUFJOVosUUFBUThQLGdCQUFaLEVBQThCO0FBQzFCOVAsV0FBUThQLGdCQUFSLENBQXlCLHdCQUF6QixFQUFtRGdLLE9BQW5ELEVBQTRELEtBQTVEO0FBQ0E5WixXQUFROFAsZ0JBQVIsQ0FBeUIscUJBQXpCLEVBQWdEZ0ssT0FBaEQsRUFBeUQsS0FBekQ7QUFDQTlaLFdBQVE4UCxnQkFBUixDQUF5QixrQkFBekIsRUFBNkNnSyxPQUE3QyxFQUFzRCxLQUF0RDtBQUNBOVosV0FBUThQLGdCQUFSLENBQXlCLG9CQUF6QixFQUErQ2dLLE9BQS9DLEVBQXdELEtBQXhEO0FBQ0g7QUFDRCxFOztZQUVNQyxtQixnQ0FBb0IvWixPLEVBQVM4WixPLEVBQVM7QUFDNUMsTUFBSTlaLFFBQVErWixtQkFBWixFQUFpQztBQUM3Qi9aLFdBQVErWixtQkFBUixDQUE0Qix3QkFBNUIsRUFBc0RELE9BQXRELEVBQStELEtBQS9EO0FBQ0E5WixXQUFRK1osbUJBQVIsQ0FBNEIscUJBQTVCLEVBQW1ERCxPQUFuRCxFQUE0RCxLQUE1RDtBQUNBOVosV0FBUStaLG1CQUFSLENBQTRCLGtCQUE1QixFQUFnREQsT0FBaEQsRUFBeUQsS0FBekQ7QUFDQTlaLFdBQVErWixtQkFBUixDQUE0QixvQkFBNUIsRUFBa0RELE9BQWxELEVBQTJELEtBQTNEO0FBQ0g7QUFDRCxFOztZQUVNRyxPLG9CQUFRamEsTyxFQUFTO0FBQ3ZCQSxZQUFVQSxXQUFXOFEsU0FBUzdRLElBQTlCO0FBQ0EsTUFBR21hLFdBQVcyK0Isb0JBQWQsRUFBb0M7QUFDbkMvNEMsV0FBUXM1Qyx1QkFBUjtBQUNBLEdBRkQsTUFHSyxJQUFHbC9CLFdBQVc0K0IsaUJBQWQsRUFBaUM7QUFDckNoNUMsV0FBUXU1QyxvQkFBUjtBQUNBLEdBRkksTUFHQSxJQUFHbi9CLFdBQVc2K0IsZ0JBQWQsRUFBZ0M7QUFDcENqNUMsV0FBUXc1QyxtQkFBUjtBQUNBLEdBRkksTUFHQTtBQUNKLytDLFdBQVE0K0MsTUFBUixDQUFlLEtBQWY7QUFDQTtBQUNELEU7O1lBRU1uL0IsTSxxQkFBUztBQUNmLE1BQUdFLFdBQVcyK0Isb0JBQWQsRUFBb0M7QUFDbkNqb0MsWUFBUzJvQyxzQkFBVDtBQUNBLEdBRkQsTUFFTSxJQUFHci9CLFdBQVc0K0IsaUJBQWQsRUFBaUM7QUFDdENsb0MsWUFBUzRvQyxtQkFBVDtBQUNBLEdBRkssTUFHRCxJQUFHdC9CLFdBQVc2K0IsZ0JBQWQsRUFBZ0M7QUFDcENub0MsWUFBUzZvQyxnQkFBVDtBQUNBLEdBRkksTUFHQTtBQUNKbC9DLFdBQVE0K0MsTUFBUixDQUFlLEtBQWY7QUFDQTtBQUNELEU7Ozs7O0FBdkVtQmovQixVLENBRWIyK0Isb0IsR0FBdUIsQ0FBQyxDQUFDam9DLFNBQVMyb0Msc0I7QUFGckJyL0IsVSxDQUdiNCtCLGlCLEdBQW9CLENBQUMsQ0FBQ2xvQyxTQUFTNG9DLG1CO0FBSGxCdC9CLFUsQ0FJYjYrQixnQixHQUFtQixDQUFDLENBQUNub0MsU0FBUzhvQyxlQUFULENBQXlCSixtQjtrQkFKakNwL0IsVTs7Ozs7Ozs7Ozs7QUNEckI7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7Ozs7Ozs7OztJQUVxQnBWLGdCOzs7QUFFbkIsNEJBQVl0RixPQUFaLEVBQXFCQyxLQUFyQixFQUE0QkMsTUFBNUIsRUFBb0NDLEtBQXBDLEVBQTJDb0YsR0FBM0MsRUFBZ0RSLEtBQWhELEVBQXVETSxRQUF2RCxFQUFpRTtBQUFBOztBQUFBLGlEQUMvRCxzQkFBTXJGLE9BQU4sRUFBZUMsS0FBZixFQUFzQkMsTUFBdEIsRUFBOEJDLEtBQTlCLENBRCtEOztBQUcvRCxVQUFLZzZDLEdBQUwsR0FBVyxNQUFJeGpELHdCQUFjNkQsU0FBZCxFQUFmO0FBQ0EsUUFBTXN2QyxTQUFTLGFBQUUsaUJBQWUsTUFBS3FRLEdBQXBCLEdBQXdCLFNBQXhCLEdBQW9DNTBDLEdBQXBDLEdBQTBDLHFEQUE1QyxDQUFmO0FBQ0EsaUJBQUUsTUFBS2xGLEdBQUwsQ0FBU0UsSUFBWCxFQUFpQnUyQixNQUFqQixDQUF3QmdULE1BQXhCO0FBQ0EsVUFBSy9PLEtBQUwsR0FBYStPLE9BQU8sQ0FBUCxDQUFiOztBQUVBLFVBQUtuakMsS0FBTCxHQUFhLEVBQWI7O0FBRUEsUUFBR3RCLFFBQUgsRUFBYTtBQUNYQSxlQUFTLE1BQUswMUIsS0FBTCxDQUFXSSxhQUFwQjtBQUNEOztBQUVELFFBQUcsTUFBSzk2QixHQUFMLENBQVM4eEMsY0FBVCxDQUF3QmlJLFVBQXhCLENBQW1DLGtEQUFuQyxFQUF1RixLQUF2RixDQUFILEVBQWtHO0FBQUU7QUFDbEcsWUFBSzU0QyxLQUFMLEdBQWEsSUFBSWl4QyxLQUFKLEVBQWI7QUFDQSxZQUFLOXJDLEtBQUwsQ0FBVzB6QyxTQUFYLEdBQXVCLFlBQUs7QUFDMUIsY0FBSzk0QyxXQUFMLENBQWlCLE1BQUtDLEtBQXRCO0FBQ0EsY0FBS2EsWUFBTDtBQUNELE9BSEQ7QUFJQSxtQkFBRSxNQUFLYixLQUFQLEVBQWN1cEIsRUFBZCxDQUFpQixNQUFqQixFQUF5QixNQUFLcGtCLEtBQUwsQ0FBVzB6QyxTQUFwQztBQUNBLFlBQUtDLFNBQUwsR0FBaUIsSUFBSS9OLG1CQUFKLENBQWMsTUFBS3hSLEtBQUwsQ0FBV0ksYUFBekIsRUFBd0MsTUFBS0osS0FBTCxDQUFXaVAsZUFBbkQsRUFBb0VqbEMsS0FBcEUsQ0FBakI7QUFDRCxLQXRCOEQsQ0FzQjdEOztBQUVGLFVBQUs0QixLQUFMLENBQVc0ekMsU0FBWCxHQUF1QixZQUFLO0FBQzFCLFVBQUcsQ0FBQyxNQUFLeGYsS0FBTCxDQUFXaVAsZUFBWCxDQUEyQmpDLEtBQTNCLENBQWlDN3RDLE9BQWpDLENBQXlDLEtBQXpDLENBQUosRUFBcUQ7QUFDbkQsY0FBS3VJLFdBQUwsR0FBbUIsWUFBSztBQUN0QixnQkFBS0wsa0JBQUw7QUFDQSxnQkFBS0MsWUFBTDtBQUNELFNBSEQ7QUFJQSxjQUFLRSxVQUFMO0FBQ0QsT0FORCxNQU9LO0FBQ0gwVCxtQkFBVyxZQUFLO0FBQ2QsY0FBRyxNQUFLOGtCLEtBQVIsRUFBZTtBQUNiLGtCQUFLOTZCLEtBQUwsR0FBYSxhQUFFLE1BQUs4NkIsS0FBTCxDQUFXaVAsZUFBWCxDQUEyQnpwQyxJQUE3QixFQUFtQ04sS0FBbkMsRUFBYjtBQUNBLGtCQUFLQyxNQUFMLEdBQWMsYUFBRSxNQUFLNjZCLEtBQUwsQ0FBV2lQLGVBQVgsQ0FBMkJ6cEMsSUFBN0IsRUFBbUNMLE1BQW5DLEVBQWQ7QUFDQSxrQkFBS1UsSUFBTCxHQUFZLE1BQUtWLE1BQUwsR0FBWSxNQUFLRCxLQUFqQixHQUF1QixNQUFLVSxJQUF4QztBQUNBbXBDLG1CQUFPdDBCLEdBQVAsQ0FBVyxPQUFYLEVBQW9CLE1BQUt2VixLQUFMLEdBQVcsSUFBL0IsRUFBcUN1VixHQUFyQyxDQUF5QyxRQUF6QyxFQUFtRCxNQUFLdFYsTUFBTCxHQUFZLElBQS9EO0FBQ0E0cEMsbUJBQU85OUIsTUFBUCxDQUFjLEVBQUNLLE1BQU0sQ0FBQyxNQUFLcE0sS0FBTixHQUFZLEdBQW5CLEVBQXdCMHpCLEtBQUssQ0FBN0IsRUFBZDtBQUNBLGdCQUFHLE1BQUsybUIsU0FBUixFQUFtQjtBQUNqQixvQkFBS0UsU0FBTCxHQUFpQixJQUFJM1EsMkJBQUosQ0FBc0JDLE1BQXRCLEVBQThCLE1BQUsvTyxLQUFMLENBQVdpUCxlQUFYLENBQTJCenBDLElBQXpELEVBQStELE1BQUtELE9BQXBFLENBQWpCO0FBQ0Esb0JBQUtrNkMsU0FBTCxDQUFlOU8sZUFBZixDQUErQixNQUFLbnBDLFVBQUwsQ0FBZ0I4ZixJQUFoQixPQUEvQjtBQUNEO0FBQ0Qsa0JBQUs1ZixXQUFMLEdBQW1CLFlBQUs7QUFDdEIsb0JBQUt3UixNQUFMO0FBQ0QsYUFGRDtBQUdBLGtCQUFLMVIsVUFBTDtBQUNEO0FBQ0YsU0FoQkQsRUFnQkcsR0FoQkg7QUFpQkQ7QUFDRixLQTNCRDtBQTRCQSxpQkFBRSxNQUFLdzRCLEtBQUwsQ0FBV0ksYUFBYixFQUE0QnBRLEVBQTVCLENBQStCLE1BQS9CLEVBQXVDLE1BQUtwa0IsS0FBTCxDQUFXNHpDLFNBQWxEO0FBcEQrRDtBQXFEaEU7OzZCQUVENzNDLGUsOEJBQWtCO0FBQ2hCLFdBQU8sS0FBS3E0QixLQUFMLENBQVdpUCxlQUFsQjtBQUNELEc7OzZCQUVELzFCLE0scUJBQVM7QUFBQTs7QUFDUCxRQUFHLEtBQUtxbUMsU0FBUixFQUFtQjtBQUNqQixXQUFLQSxTQUFMLENBQWV0TixLQUFmLENBQXFCLEtBQUt3TixTQUFMLENBQWVsNkMsT0FBcEMsRUFBNkMsRUFBQ0osUUFBUSxLQUFLQSxNQUFMLEdBQVksSUFBckIsRUFBMkJELE9BQU8sS0FBS0EsS0FBTCxHQUFXLElBQTdDLEVBQTdDLEVBQ0c0WCxJQURILENBQ1EsVUFBQ3M5QixPQUFELEVBQVk7QUFDaEIsZUFBSzN6QyxLQUFMLENBQVcrRCxHQUFYLEdBQWlCNHZDLE9BQWpCO0FBQ0QsT0FISCxFQUlHMTRCLEtBSkgsQ0FJUyxVQUFDbkgsS0FBRCxFQUFVO0FBQ2Z2YSxnQkFBUXVhLEtBQVIsQ0FBYyxhQUFkLEVBQTZCQSxLQUE3QjtBQUNBLGVBQUt0VSxlQUFMO0FBQ0EsZUFBS3FCLFlBQUw7QUFDRCxPQVJIO0FBU0QsS0FWRCxNQVdLO0FBQ0gsNkJBQVksS0FBSzA0QixLQUFMLENBQVdpUCxlQUFYLENBQTJCenBDLElBQXZDLEVBQTZDLEVBQUN5eUMsU0FBUyxLQUFWLEVBQTdDLEVBQ0VuN0IsSUFERixDQUNPLFVBQUN1eEIsTUFBRCxFQUFXO0FBQ2QsZUFBSzduQyxXQUFMLENBQWlCNm5DLE1BQWpCO0FBQ0EsZUFBSy9tQyxZQUFMO0FBQ0QsT0FKSDtBQUtEO0FBQ0YsRzs7NkJBRUR0QixPLHNCQUFVO0FBQ1IsaUJBQUUsS0FBS1MsS0FBUCxFQUFjZ0osR0FBZCxDQUFrQixNQUFsQixFQUEwQixLQUFLN0QsS0FBTCxDQUFXMHpDLFNBQXJDO0FBQ0EsaUJBQUUsS0FBS3RmLEtBQUwsQ0FBV0ksYUFBYixFQUE0QjN3QixHQUE1QixDQUFnQyxNQUFoQyxFQUF3QyxLQUFLN0QsS0FBTCxDQUFXNHpDLFNBQW5EO0FBQ0EsaUJBQUUsS0FBS2w2QyxHQUFMLENBQVNFLElBQVgsRUFBaUJ1a0IsSUFBakIsQ0FBc0IsTUFBSSxLQUFLcTFCLEdBQS9CLEVBQW9DbmxDLE1BQXBDO0FBQ0EsUUFBRyxLQUFLeFQsS0FBUixFQUFlO0FBQ2IsV0FBS0EsS0FBTCxDQUFXK0QsR0FBWCxHQUFpQixFQUFqQjtBQUNBLGFBQU8sS0FBSy9ELEtBQVo7QUFDRDtBQUNELFNBQUt1NUIsS0FBTCxDQUFXeDFCLEdBQVgsR0FBaUIsRUFBakI7QUFDQSxXQUFPLEtBQUt3MUIsS0FBWjtBQUNBLHlCQUFNaDZCLE9BQU47QUFDRCxHOzs2QkFFRG13QixRLHFCQUFTM3RCLEMsRUFBR2xELEcsRUFBS3JJLEMsRUFBR1IsQyxFQUFHO0FBQ3JCLFFBQUcsS0FBS2dqRCxTQUFSLEVBQW1CO0FBQ2pCLFdBQUtBLFNBQUwsQ0FBZXRwQixRQUFmLENBQXdCM3RCLENBQXhCLEVBQTJCbEQsR0FBM0IsRUFBZ0NySSxDQUFoQyxFQUFtQ1IsQ0FBbkM7QUFDRDtBQUNGLEc7OztFQW5HMkN1SSxtQjs7a0JBQXpCdUYsZ0I7Ozs7Ozs7Ozs7O0FDTnJCOztBQUNBOzs7O0FBQ0E7Ozs7Ozs7O0lBRXFCbzZCLGdCOzZCQUVuQnJvQyxFLGVBQUdDLEMsRUFBRUUsQyxFQUFHO0FBQ04sUUFBTW1xQixJQUFFbnFCLEVBQUUsQ0FBRixDQUFSO0FBQUEsUUFBY1YsSUFBRVUsRUFBRSxDQUFGLENBQWhCO0FBQ0EsV0FBTyxDQUNMLENBQUMsS0FBSzByQyxDQUFOLEdBQVFscEMsS0FBSzBVLEdBQUwsQ0FBUzVYLENBQVQsQ0FESCxFQUVMNnFCLENBRkssQ0FBUDtBQUlELEc7OzZCQUVEMGlCLFMsc0JBQVVKLEMsRUFBRztBQUNYLFFBQUkzc0MsSUFBRSxDQUFOO0FBQUEsUUFBU0MsS0FBRyxLQUFLdUMsQ0FBTCxDQUFPdkMsRUFBbkI7QUFBQSxRQUF1QnVmLEtBQUssS0FBS0EsRUFBakM7QUFDQSxXQUFNeGYsSUFBRTJzQyxDQUFSLEVBQVc7QUFDVCxVQUFHM3NDLElBQUVDLEVBQUYsR0FBSzBzQyxDQUFSLEVBQVc7QUFDVDFzQyxhQUFHMHNDLElBQUUzc0MsQ0FBTDtBQUNEO0FBQ0R3ZixXQUFHblosb0JBQVV2RyxHQUFWLENBQWMsS0FBS0MsRUFBTCxDQUFRZ3JCLElBQVIsQ0FBYSxFQUFDNmdCLEdBQUcsS0FBS3BwQyxDQUFMLENBQU9vcEMsQ0FBWCxFQUFiLENBQWQsRUFBMkMsQ0FBM0MsRUFBOEMzckMsRUFBOUMsRUFBa0R1ZixFQUFsRCxDQUFIO0FBQ0F4ZixXQUFHQyxFQUFIO0FBQ0Q7QUFDRCxXQUFPdWYsRUFBUDtBQUNELEc7OzZCQUVEMmpDLFUsdUJBQVdyaUMsTSxFQUFRO0FBQ2pCLFFBQUk5Z0IsSUFBRSxDQUFOO0FBQUEsUUFBU0MsS0FBRyxLQUFLdUMsQ0FBTCxDQUFPdkMsRUFBbkI7QUFBQSxRQUF1QnVmLEtBQUssS0FBS0EsRUFBakM7QUFDQSxXQUFNOWMsS0FBS00sR0FBTCxDQUFTd2MsR0FBRyxDQUFILElBQU1zQixNQUFmLElBQXVCLElBQTdCLEVBQW1DO0FBQ2pDLFVBQU1nc0IsTUFBSXptQyxvQkFBVXZHLEdBQVYsQ0FBYyxLQUFLQyxFQUFMLENBQVFnckIsSUFBUixDQUFhLEVBQUM2Z0IsR0FBRyxLQUFLcHBDLENBQUwsQ0FBT29wQyxDQUFYLEVBQWIsQ0FBZCxFQUEyQyxDQUEzQyxFQUE4QzNyQyxFQUE5QyxFQUFrRHVmLEVBQWxELENBQVY7QUFDQSxVQUFHc3RCLElBQUksQ0FBSixJQUFPLENBQVAsSUFBWUEsSUFBSSxDQUFKLElBQU9oc0IsTUFBbkIsSUFBNkJnc0IsSUFBSSxDQUFKLElBQU8sQ0FBUCxJQUFZQSxJQUFJLENBQUosSUFBT2hzQixNQUFuRCxFQUEyRDtBQUN6RDdnQixjQUFJLENBQUo7QUFDRCxPQUZELE1BR0s7QUFDSHVmLGFBQUtzdEIsR0FBTDtBQUNBOXNDLGFBQUdDLEVBQUg7QUFDRDtBQUNGO0FBQ0QsV0FBT0QsQ0FBUDtBQUNELEc7OzZCQUVEcXpCLE0sbUJBQU9zWixDLEVBQUc7QUFDUixTQUFLbnRCLEVBQUwsR0FBVSxLQUFLdXRCLFNBQUwsQ0FBZUosQ0FBZixDQUFWOztBQUVBLFNBQUszc0MsQ0FBTCxJQUFRMnNDLENBQVI7QUFDQSxRQUFHLEtBQUszc0MsQ0FBTCxJQUFRLEtBQUt3QyxDQUFMLENBQU80Z0QsY0FBbEIsRUFBa0M7QUFDaEMsV0FBS3BqRCxDQUFMLEdBQVMsQ0FBVDtBQUNBLFVBQU1xQixJQUFJLE9BQUtxQixLQUFLNkMsR0FBTCxDQUFTLEtBQUtsQixDQUFMLENBQU9zRSxLQUFoQixFQUF1QixLQUFLdEUsQ0FBTCxDQUFPdUUsTUFBOUIsQ0FBZjtBQUFBLFVBQ01wSixJQUFJLEtBQUtnZ0IsRUFBTCxDQUFRLENBQVIsQ0FEVjtBQUFBLFVBRU1rakIsS0FBSyxNQUFJLEtBQUtyK0IsQ0FBTCxDQUFPc0UsS0FGdEI7QUFBQSxVQUdNZzZCLEtBQUssTUFBSSxLQUFLdCtCLENBQUwsQ0FBT3VFLE1BSHRCO0FBQUEsVUFJTU8sTUFBTSxLQUFLQSxHQUpqQjs7QUFNQUEsVUFBSWs2QyxTQUFKLENBQWMsQ0FBZCxFQUFpQixDQUFqQixFQUFvQixLQUFLaC9DLENBQUwsQ0FBT3NFLEtBQTNCLEVBQWtDLEtBQUt0RSxDQUFMLENBQU91RSxNQUF6QztBQUNBTyxVQUFJUSxTQUFKO0FBQ0FSLFVBQUlTLFNBQUosR0FBZ0JDLHFCQUFXQyxVQUFYLENBQXNCLEtBQUt0SCxDQUFMLENBQU9xRyxLQUE3QixFQUFtQyxDQUFuQyxDQUFoQjtBQUNBTSxVQUFJWSxJQUFKLENBQVMsQ0FBVCxFQUFZLENBQVosRUFBZSxLQUFLMUYsQ0FBTCxDQUFPc0UsS0FBdEIsRUFBNkIsS0FBS3RFLENBQUwsQ0FBT3VFLE1BQXBDO0FBQ0FPLFVBQUlhLElBQUo7O0FBRUFiLFVBQUlRLFNBQUo7QUFDQVIsVUFBSW02QyxVQUFKLEdBQWlCLEVBQWpCO0FBQ0FuNkMsVUFBSVMsU0FBSixHQUFnQkMscUJBQVdDLFVBQVgsQ0FBc0JELHFCQUFXcUQsWUFBWCxDQUF3QixLQUFLMUssQ0FBTCxDQUFPcUcsS0FBL0IsRUFBcUMsR0FBckMsQ0FBdEIsRUFBZ0VuRyxLQUFLTSxHQUFMLENBQVMsS0FBS3djLEVBQUwsQ0FBUSxDQUFSLElBQVcsSUFBcEIsQ0FBaEUsQ0FBaEI7QUFDQXJXLFVBQUlvNkMsV0FBSixHQUFrQjE1QyxxQkFBV0MsVUFBWCxDQUFzQkQscUJBQVdxRCxZQUFYLENBQXdCLEtBQUsxSyxDQUFMLENBQU9xRyxLQUEvQixFQUFxQyxDQUFyQyxDQUF0QixFQUE4RCxHQUE5RCxDQUFsQjtBQUNBTSxVQUFJcTZDLGFBQUosR0FBb0IsQ0FBcEI7QUFDQXI2QyxVQUFJczZDLGFBQUosR0FBb0IsQ0FBcEI7QUFDQXQ2QyxVQUFJdTZDLElBQUosR0FBUyxVQUFRaGhELEtBQUtDLEtBQUwsQ0FBVyxPQUFLdEIsQ0FBaEIsQ0FBUixHQUEyQixVQUFwQztBQUNBOEgsVUFBSXNvQyxTQUFKLEdBQWdCLFFBQWhCO0FBQ0F0b0MsVUFBSXc2QyxZQUFKLEdBQW1CLFFBQW5CO0FBQ0F4NkMsVUFBSXk2QyxRQUFKLENBQWEsY0FBRyxZQUFILENBQWIsRUFBOEJsaEIsRUFBOUIsRUFBaUNDLEVBQWpDOztBQUVBLFVBQU1wL0IsS0FBSyxFQUFYO0FBQUEsVUFBZXNnRCxLQUFHLElBQUVuaEQsS0FBS3lRLEVBQVAsR0FBVTVQLEVBQTVCLENBekJnQyxDQXlCRDtBQUMvQjRGLFVBQUlvNkMsV0FBSixHQUFrQjE1QyxxQkFBV0MsVUFBWCxDQUFzQkQscUJBQVdxRCxZQUFYLENBQXdCLEtBQUsxSyxDQUFMLENBQU9xRyxLQUEvQixFQUFxQyxDQUFyQyxDQUF0QixFQUE4RCxHQUE5RCxDQUFsQjtBQUNBLFdBQUksSUFBSXZILElBQUUsQ0FBTixFQUFTd2lELEtBQUd0a0QsQ0FBWixFQUFldWtELEtBQUcsTUFBSTFpRCxDQUExQixFQUE2QkMsSUFBRWlDLEVBQS9CLEVBQW1DLEVBQUVqQyxDQUFGLEVBQUt5aUQsTUFBSSxHQUFULEVBQWNELE1BQUlELEVBQXJELEVBQXlEO0FBQ3ZEMTZDLFlBQUlRLFNBQUo7QUFDQVIsWUFBSVMsU0FBSixHQUFnQkMscUJBQVdDLFVBQVgsQ0FBc0JELHFCQUFXcUQsWUFBWCxDQUF3QixLQUFLMUssQ0FBTCxDQUFPcUcsS0FBL0IsRUFBcUMsQ0FBQ3RGLEtBQUdqQyxDQUFKLElBQU9pQyxFQUE1QyxDQUF0QixFQUFzRSxPQUFLQSxLQUFHakMsQ0FBUixJQUFXaUMsRUFBakYsQ0FBaEI7QUFDQSxZQUFNeWdELEtBQUd0aEIsS0FBR3JoQyxJQUFFcUIsS0FBSzBVLEdBQUwsQ0FBUzBzQyxFQUFULENBQWQ7QUFBQSxZQUE0QkcsS0FBR3RoQixLQUFHdGhDLElBQUVxQixLQUFLeVUsR0FBTCxDQUFTMnNDLEVBQVQsQ0FBcEM7QUFBQSxZQUFrREksS0FBR3hoQixLQUFHcmhDLElBQUVxQixLQUFLMFUsR0FBTCxDQUFTMHNDLEtBQUdELEVBQVosQ0FBMUQ7QUFBQSxZQUEyRU0sS0FBR3hoQixLQUFHdGhDLElBQUVxQixLQUFLeVUsR0FBTCxDQUFTMnNDLEtBQUdELEVBQVosQ0FBbkY7QUFDQTE2QyxZQUFJcTZDLGFBQUosR0FBb0IsT0FBS1UsS0FBR0YsRUFBUixDQUFwQjtBQUNBNzZDLFlBQUlzNkMsYUFBSixHQUFvQixPQUFLVSxLQUFHRixFQUFSLENBQXBCO0FBQ0E5NkMsWUFBSWk3QyxHQUFKLENBQVFKLEVBQVIsRUFBWUMsRUFBWixFQUFnQkYsRUFBaEIsRUFBb0IsQ0FBcEIsRUFBdUJyaEQsS0FBS3lRLEVBQUwsR0FBUSxDQUEvQixFQUFrQyxDQUFsQztBQUNBaEssWUFBSWEsSUFBSjtBQUNEO0FBQ0QsVUFBRyxLQUFLZ0IsUUFBUixFQUFrQjtBQUNoQixhQUFLQSxRQUFMLENBQWMsS0FBSzNHLENBQW5CLEVBQXNCLEtBQUs3QixDQUFMLENBQU9xRyxLQUE3QjtBQUNEO0FBQ0Y7QUFDRixHOzs2QkFFRHc3QyxRLHVCQUFXO0FBQ1QsV0FBTyxLQUFLaGdELENBQVo7QUFDRCxHOzs2QkFFRG9GLE8sc0JBQVU7QUFDUixTQUFLcEYsQ0FBTCxDQUFPc0UsS0FBUCxHQUFlLENBQWY7QUFDQSxTQUFLdEUsQ0FBTCxDQUFPdUUsTUFBUCxHQUFnQixDQUFoQjtBQUNBLFdBQU8sS0FBS08sR0FBWjtBQUNBLFdBQU8sS0FBSzlFLENBQVo7QUFDRCxHOzs2QkFFRGtrQyxZLHlCQUFhdmtDLEMsRUFBRztBQUNkLFFBQU1LLElBQUksYUFBRSxvQkFBa0IsS0FBS0EsQ0FBTCxDQUFPc0UsS0FBUCxHQUFhM0UsQ0FBL0IsR0FBaUMsWUFBakMsR0FBOEMsS0FBS0ssQ0FBTCxDQUFPdUUsTUFBckQsR0FBNEQsYUFBOUQsRUFBNkUsQ0FBN0UsQ0FBVjtBQUFBLFFBQTJGTyxNQUFNOUUsRUFBRWlILFVBQUYsQ0FBYSxJQUFiLENBQWpHO0FBQUEsUUFDQXRMLElBQUksS0FBS21qRCxVQUFMLENBQWdCLEtBQUszakMsRUFBTCxDQUFRLENBQVIsSUFBVzljLEtBQUtLLElBQUwsQ0FBVSxLQUFLeWMsRUFBTCxDQUFRLENBQVIsQ0FBVixJQUFzQixDQUF0QixHQUF3QjljLEtBQUt5USxFQUF4RCxDQURKO0FBQUEsUUFDaUVsVCxLQUFHRCxLQUFHZ0UsSUFBRSxDQUFMLENBRHBFO0FBRGMsUUFHUG8vQyxjQUhPLEdBR1csS0FBSzVnRCxDQUhoQixDQUdQNGdELGNBSE87O0FBSWQsU0FBSzVnRCxDQUFMLENBQU80Z0QsY0FBUCxHQUF3QixDQUF4QjtBQUNBLFNBQUksSUFBSTloRCxJQUFFLENBQVYsRUFBYUEsSUFBRTBDLENBQWYsRUFBa0IsRUFBRTFDLENBQXBCLEVBQXVCO0FBQ3JCLFdBQUsreEIsTUFBTCxDQUFZcHpCLEVBQVo7QUFDQWtKLFVBQUlpQixTQUFKLENBQWMsS0FBSy9GLENBQW5CLEVBQXNCL0MsSUFBRSxLQUFLK0MsQ0FBTCxDQUFPc0UsS0FBL0IsRUFBc0MsQ0FBdEM7QUFDRDtBQUNELFNBQUtuRyxDQUFMLENBQU80Z0QsY0FBUCxHQUF3QkEsY0FBeEI7QUFDQSxXQUFPLytDLENBQVA7QUFDRCxHOztBQUVELDRCQUFZc0UsS0FBWixFQUFtQkMsTUFBbkIsRUFBMkJDLEtBQTNCLEVBQWtDO0FBQUE7O0FBQ2hDLFFBQU1xeEIsS0FBSyxhQUFFLG9CQUFrQnZ4QixLQUFsQixHQUF3QixZQUF4QixHQUFxQ0MsTUFBckMsR0FBNEMsYUFBOUMsQ0FBWDtBQUNBLFNBQUt2RSxDQUFMLEdBQVM2MUIsR0FBRyxDQUFILENBQVQ7QUFDQSxTQUFLMTNCLENBQUwsR0FBUztBQUNQb3BDLFNBQUcsR0FESTtBQUVQM3JDLFVBQUksSUFBRSxFQUZDO0FBR1A0SSxrQkFITztBQUlQdTZDLHNCQUFnQjtBQUpULEtBQVQ7QUFNQSxTQUFLajZDLEdBQUwsR0FBVyxLQUFLOUUsQ0FBTCxDQUFPaUgsVUFBUCxDQUFrQixJQUFsQixDQUFYO0FBQ0EsU0FBS2tVLEVBQUwsR0FBVSxDQUFDLENBQUMsQ0FBRixFQUFLOWMsS0FBS3lRLEVBQUwsR0FBUSxDQUFiLENBQVY7QUFDQSxTQUFLblQsQ0FBTCxHQUFTLEtBQUt3QyxDQUFMLENBQU80Z0QsY0FBaEI7QUFDRDs7Ozs7a0JBdkhrQmhiLGdCOzs7Ozs7Ozs7OztBQ0pyQjs7OztJQUVxQjdlLGlCO0FBRW5CLDZCQUFZbGQsSUFBWixFQUEyRDtBQUFBLFFBQXpDaTRDLFlBQXlDLHVFQUE1QixJQUE0QjtBQUFBLFFBQXRCQyxVQUFzQix1RUFBWGw1QyxTQUFXOztBQUFBOztBQUN6RCxTQUFLZ0IsSUFBTCxHQUFZQSxJQUFaO0FBQ0EsU0FBS21kLFFBQUwsR0FBZ0IsQ0FBaEI7QUFDQSxTQUFLODZCLFlBQUwsR0FBb0JBLFlBQXBCO0FBQ0EsU0FBS0UsYUFBTCxHQUFxQkQsY0FBY2g3QixrQkFBa0JrN0IsaUJBQXJEO0FBQ0EsU0FBS2hvQixVQUFMO0FBQ0Q7O29CQUVNZ29CLGlCLDhCQUFrQmo3QixRLEVBQVU7QUFDakMsV0FBTyxDQUFDLDZDQUFELEVBQWdEQSxRQUFoRCxFQUEwRCxHQUExRCxFQUErRDFoQixJQUEvRCxDQUFvRSxFQUFwRSxDQUFQO0FBQ0QsRzs7OEJBRUQyQixPLHNCQUFVO0FBQ1IsU0FBSzY2QyxZQUFMLEdBQW9CLEtBQXBCO0FBQ0EsU0FBSzduQixVQUFMO0FBQ0EsV0FBTyxLQUFLcHdCLElBQVo7QUFDRCxHOzs4QkFFRHNnQixXLHdCQUFZbHFCLEMsRUFBRztBQUNiLFNBQUsrbUIsUUFBTCxHQUFnQi9tQixDQUFoQjtBQUNBLFNBQUtnNkIsVUFBTDtBQUNELEc7OzhCQUVEQSxVLHlCQUFhO0FBQ1gsUUFBRyxLQUFLcHdCLElBQVIsRUFBYzs7QUFFWixXQUFLQSxJQUFMLENBQVU4d0IsUUFBVixDQUFtQixvQkFBbkIsRUFBeUM7QUFDdkN6TCxnQkFBUSxJQUQrQjtBQUV2Q3dMLGlCQUFTLEtBQUtvbkIsWUFGeUI7QUFHdkMzb0IsZ0JBQVE7QUFIK0IsT0FBekM7O0FBTUEsV0FBS3R2QixJQUFMLENBQVU4d0IsUUFBVixDQUFtQixvQkFBbkIsRUFBeUM7QUFDdkN2aUIsZUFBTyxLQUFLNHBDLGFBQUwsQ0FBbUIsS0FBS2g3QixRQUF4QixDQURnQztBQUV2QzBULGlCQUFTO0FBRjhCLE9BQXpDOztBQUtBLDJCQUFnQixLQUFLN3dCLElBQUwsQ0FBVTA1QixRQUFWLEVBQWhCLGtIQUFzQztBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQUEsWUFBOUI5OUIsSUFBOEI7O0FBQ3BDLGFBQUtvRSxJQUFMLENBQVU4d0IsUUFBVixDQUFtQmwxQixJQUFuQixFQUF5QjtBQUN2QnlwQixrQkFBUSxLQURlO0FBRXZCd0wsbUJBQVMsSUFGYztBQUd2QnZCLGtCQUFRO0FBSGUsU0FBekI7QUFLRDs7QUFFRCxXQUFLdHZCLElBQUwsQ0FBVTh3QixRQUFWLENBQW1CLFVBQW5CLEVBQStCO0FBQzdCRCxpQkFBUyxJQURvQjtBQUU3QnRpQixlQUFPO0FBRnNCLE9BQS9COztBQUtBLFdBQUt2TyxJQUFMLENBQVU4d0IsUUFBVixDQUFtQixTQUFuQixFQUE4QjtBQUM1QkQsaUJBQVMsSUFEbUI7QUFFNUJ4TCxnQkFBUSxLQUZvQjtBQUc1QjlXLGVBQU87QUFIcUIsT0FBOUI7QUFNRDtBQUNGLEc7Ozs7O2tCQTNEa0IyTyxpQjs7Ozs7Ozs7Ozs7QUNGckI7O0FBQ0E7Ozs7Ozs7Ozs7OztJQUVxQm03QixtQjs7O0FBRW5CLCtCQUFZNTdDLEdBQVosRUFBaUJDLEdBQWpCLEVBQXNCQyxPQUF0QixFQUErQjtBQUFBOztBQUFBLGlEQUM3QiwyQkFBTUYsR0FBTixFQUFXQyxHQUFYLENBRDZCOztBQUc3QixVQUFLQyxPQUFMLEdBQWVBLE9BQWY7QUFDQSxVQUFLcUcsS0FBTCxHQUFhO0FBQ1g5QyxlQUFTLE1BQUtBLE9BQUwsQ0FBYXdlLElBQWI7QUFERSxLQUFiO0FBR0EsaUJBQUUsTUFBSy9oQixPQUFQLEVBQWdCeXFCLEVBQWhCLENBQW1CLDhDQUFuQixFQUFtRSxNQUFLcGtCLEtBQUwsQ0FBVzlDLE9BQTlFO0FBQ0EsaUJBQUUsTUFBS3hELEdBQVAsRUFBWTBxQixFQUFaLENBQWUsU0FBZixFQUEwQixNQUFLcGtCLEtBQUwsQ0FBVzlDLE9BQXJDO0FBUjZCO0FBUzlCOztnQ0FFRDlDLE8sc0JBQVU7QUFDUixpQkFBRSxLQUFLVCxPQUFQLEVBQWdCa0ssR0FBaEIsQ0FBb0IsOENBQXBCLEVBQW9FLEtBQUs3RCxLQUFMLENBQVc5QyxPQUEvRTtBQUNBLGlCQUFFLEtBQUt4RCxHQUFQLEVBQVltSyxHQUFaLENBQWdCLFNBQWhCLEVBQTJCLEtBQUs3RCxLQUFMLENBQVc5QyxPQUF0QztBQUNELEc7OztFQWhCOENoQix3Qjs7a0JBQTVCbTVDLG1COzs7Ozs7Ozs7Ozs7O0FDSHJCOztBQUNBOzs7Ozs7OztJQUVxQnZvQixlO0FBRW5CLDJCQUFZMXNCLE1BQVosRUFBb0JrMUMsV0FBcEIsRUFBMkQ7QUFBQSxRQUExQkMsU0FBMEIsdUVBQWhCLEtBQUtBLFNBQVc7O0FBQUE7O0FBQ3pELFNBQUtuMUMsTUFBTCxHQUFjQSxNQUFkO0FBQ0EsU0FBS2sxQyxXQUFMLEdBQW1CQSxXQUFuQjtBQUNBLFNBQUtDLFNBQUwsR0FBaUJBLFNBQWpCO0FBQ0EsU0FBS2xyQyxNQUFMLEdBQWNqSyxPQUFPaUssTUFBckI7QUFDQSxTQUFLMVEsT0FBTCxHQUFlLEtBQUt5RyxNQUFMLENBQVl6RyxPQUEzQjtBQUNBLFNBQUs2N0MsV0FBTCxHQUFtQixFQUFDeDZCLEdBQUcsQ0FBSixFQUFPL2hCLEdBQUcsQ0FBVixFQUFuQjtBQUNBLFNBQUt3OEMsZ0JBQUwsR0FBd0IsS0FBS3IxQyxNQUFMLENBQVkzRyxHQUFaLENBQWdCZzhDLGdCQUFoQixJQUFvQyxDQUE1RDtBQUNBLFNBQUt6cEIsS0FBTCxHQUFhNXJCLE9BQU82ckIsUUFBUCxFQUFiO0FBQ0EsU0FBSzF3QixLQUFMLEdBQWEsQ0FBYjs7QUFFQSxTQUFLaEcsR0FBTCxHQUFXLElBQVg7QUFDQSxTQUFLbkMsQ0FBTCxHQUFTLElBQUluRSxZQUFNK0ksT0FBVixFQUFUO0FBQ0EsU0FBS3FtQyxFQUFMLEdBQVUsSUFBSXB2QyxZQUFNOEksT0FBVixFQUFWOztBQUVBLFNBQUtvRSxPQUFMLEdBQWUsS0FBZjs7QUFFQWlFLFdBQU8rakIsaUJBQVAsQ0FBeUIsS0FBS0gsTUFBTCxDQUFZdEksSUFBWixDQUFpQixJQUFqQixDQUF6Qjs7QUFFQSxTQUFLdkwsRUFBTCxHQUFVO0FBQ1J1bEMsVUFBSSxDQURJO0FBRVJDLFVBQUksQ0FGSTtBQUdSdGtELFNBQUcsQ0FISztBQUlSUixTQUFHO0FBSkssS0FBVjtBQU1BLFNBQUttN0IsS0FBTCxDQUFXaEksTUFBWDtBQUNBLFNBQUszWixNQUFMLENBQVlzRCxpQkFBWjtBQUNBLFFBQUlpb0MsTUFBTSxLQUFLQyxxQkFBTCxFQUFWO0FBQUEsUUFBd0N6akQsSUFBRSxJQUExQztBQUNBLFNBQUswakQsT0FBTCxDQUFhLEVBQUN6a0QsR0FBRyxDQUFDZSxDQUFELEdBQUd3akQsSUFBSTE4QyxHQUFKLENBQVE3SCxDQUFmLEVBQWtCUixHQUFHLENBQUN1QixDQUFELEdBQUd3akQsSUFBSTE4QyxHQUFKLENBQVFySSxDQUFoQyxFQUFiO0FBQ0Q7OzRCQUVEaWxELE8sb0JBQVF6WCxFLEVBQUk7QUFDVixTQUFLclMsS0FBTCxDQUFXaUcsR0FBWCxDQUFlb00sR0FBR2h0QyxDQUFILEdBQUssS0FBSytPLE1BQUwsQ0FBWTlHLEtBQVosRUFBcEIsRUFBeUMsQ0FBQytrQyxHQUFHeHRDLENBQUosR0FBTSxLQUFLdVAsTUFBTCxDQUFZN0csTUFBWixFQUEvQztBQUNELEc7OzRCQUVEdzhDLFMsc0JBQVUzaUQsQyxFQUFHO0FBQ1hBLE1BQUU0aUQsT0FBRixDQUFVLEtBQUszckMsTUFBZjtBQUNBLFdBQU87QUFDTGhaLFNBQUcsTUFBSStCLEVBQUUvQixDQURKO0FBRUxSLFNBQUcsTUFBSXVDLEVBQUV2QztBQUZKLEtBQVA7QUFJRCxHOzs0QkFFRGdsRCxxQixvQ0FBd0I7QUFDdEIsUUFBTUQsTUFBTSxLQUFLTixXQUFMLEVBQVo7QUFBQSxRQUNFVyxLQUFLLENBQUNMLElBQUkxL0MsR0FBSixDQUFRN0UsQ0FBVCxFQUFZdWtELElBQUl6L0MsR0FBSixDQUFROUUsQ0FBcEIsQ0FEUDtBQUFBLFFBRUV5VSxLQUFLLENBQUMsQ0FBRCxFQUFJLENBQUosQ0FGUDtBQUFBLFFBR0Vvd0MsS0FBSyxDQUFDTixJQUFJMS9DLEdBQUosQ0FBUTNCLENBQVQsRUFBWXFoRCxJQUFJei9DLEdBQUosQ0FBUTVCLENBQXBCLENBSFA7O0FBS0EsUUFBTUwsS0FBSyxFQUFYO0FBQUEsUUFBZW9CLE1BQU0sRUFBQ2EsS0FBSyxFQUFOLEVBQVVELEtBQUssRUFBZixFQUFyQjtBQUNBLHlCQUFhKy9DLEVBQWIsa0hBQWlCO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQSxVQUFUNWtELENBQVM7O0FBQ2YsNEJBQWF5VSxFQUFiLHlIQUFpQjtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQUEsWUFBVGpWLENBQVM7O0FBQ2YsOEJBQWFxbEQsRUFBYix5SEFBaUI7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBLGNBQVQzaEQsQ0FBUzs7QUFDZkwsYUFBR2hDLElBQUgsQ0FBUSxLQUFLNmpELFNBQUwsQ0FBZSxLQUFLM2lELENBQUwsQ0FBT2tCLEdBQVAsQ0FBV2pELENBQVgsRUFBYVIsQ0FBYixFQUFlMEQsQ0FBZixDQUFmLENBQVI7QUFDRDtBQUNGO0FBQ0Y7O0FBRURMLE9BQUcrWSxJQUFILENBQVEsVUFBQ2pYLEVBQUQsRUFBSzBSLEVBQUw7QUFBQSxhQUFXMVIsR0FBRzNFLENBQUgsR0FBS3FXLEdBQUdyVyxDQUFuQjtBQUFBLEtBQVI7QUFDQWlFLFFBQUlZLEdBQUosQ0FBUTdFLENBQVIsR0FBWTZDLEdBQUcsQ0FBSCxFQUFNN0MsQ0FBbEI7QUFDQWlFLFFBQUlhLEdBQUosQ0FBUTlFLENBQVIsR0FBWTZDLEdBQUdBLEdBQUduRCxNQUFILEdBQVUsQ0FBYixFQUFnQk0sQ0FBNUI7QUFDQTZDLE9BQUcrWSxJQUFILENBQVEsVUFBQ2pYLEVBQUQsRUFBSzBSLEVBQUw7QUFBQSxhQUFXMVIsR0FBR25GLENBQUgsR0FBSzZXLEdBQUc3VyxDQUFuQjtBQUFBLEtBQVI7QUFDQXlFLFFBQUlZLEdBQUosQ0FBUXJGLENBQVIsR0FBWXFELEdBQUcsQ0FBSCxFQUFNckQsQ0FBbEI7QUFDQXlFLFFBQUlhLEdBQUosQ0FBUXRGLENBQVIsR0FBWXFELEdBQUdBLEdBQUduRCxNQUFILEdBQVUsQ0FBYixFQUFnQkYsQ0FBNUI7O0FBRUF5RSxRQUFJZ0UsS0FBSixHQUFZaEUsSUFBSWEsR0FBSixDQUFROUUsQ0FBUixHQUFVaUUsSUFBSVksR0FBSixDQUFRN0UsQ0FBOUI7QUFDQWlFLFFBQUlpRSxNQUFKLEdBQWFqRSxJQUFJYSxHQUFKLENBQVF0RixDQUFSLEdBQVV5RSxJQUFJWSxHQUFKLENBQVFyRixDQUEvQjs7QUFFQXlFLFFBQUk0RCxHQUFKLEdBQVU7QUFDUjdILFNBQUcsT0FBS2lFLElBQUlhLEdBQUosQ0FBUTlFLENBQVIsR0FBVWlFLElBQUlZLEdBQUosQ0FBUTdFLENBQXZCLENBREs7QUFFUlIsU0FBRyxPQUFLeUUsSUFBSWEsR0FBSixDQUFRdEYsQ0FBUixHQUFVeUUsSUFBSVksR0FBSixDQUFRckYsQ0FBdkI7QUFGSyxLQUFWOztBQUtBLFdBQU95RSxHQUFQO0FBQ0QsRzs7NEJBRUQ2Z0QsUyxzQkFBVWIsVyxFQUFhO0FBQ3JCLFNBQUtBLFdBQUwsR0FBbUJBLFdBQW5CO0FBQ0QsRzs7NEJBRURDLFMsd0JBQVk7QUFDVixXQUFPLElBQVA7QUFDRCxHOzs0QkFFRGEsVyx3QkFBWTF4QyxDLEVBQUd4TyxHLEVBQUtDLEcsRUFBSztBQUN2QixRQUFJa2dELE9BQU8sQ0FBWDtBQUNBLFFBQUczeEMsSUFBRSxDQUFMLEVBQVE7QUFDTixVQUFHeE8sTUFBSSxDQUFDLEdBQVIsRUFBYTtBQUNYbWdELGVBQU8sQ0FBQyxHQUFELEdBQUtuZ0QsR0FBWjtBQUNELE9BRkQsTUFHSyxJQUFHQyxNQUFJLEdBQVAsRUFBWTtBQUNma2dELGVBQU8sTUFBSWxnRCxHQUFYO0FBQ0Q7QUFDRixLQVBELE1BUUs7QUFDSCxVQUFHRCxNQUFJLENBQUMsR0FBUixFQUFhO0FBQ1htZ0QsZUFBTyxDQUFDLEdBQUQsR0FBS25nRCxHQUFaO0FBQ0QsT0FGRCxNQUdLLElBQUdDLE1BQUksR0FBUCxFQUFZO0FBQ2ZrZ0QsZUFBTyxNQUFJbGdELEdBQVg7QUFDRDtBQUNGO0FBQ0QsV0FBT2tnRCxJQUFQO0FBQ0QsRzs7NEJBRURDLFEsdUJBQVc7QUFDVCxRQUFNVixNQUFNLEtBQUtDLHFCQUFMLEVBQVo7QUFBQSxRQUNFVSxLQUFLLEtBQUtmLFdBQUwsQ0FBaUJ4NkIsQ0FBakIsR0FBbUI0NkIsSUFBSXQ4QyxLQUQ5QjtBQUFBLFFBRUVrOUMsS0FBSyxLQUFLaEIsV0FBTCxDQUFpQnY4QyxDQUFqQixHQUFtQjI4QyxJQUFJcjhDLE1BRjlCO0FBR0EsV0FBTyxJQUFFbEcsS0FBSzZDLEdBQUwsQ0FBU3FnRCxFQUFULEVBQWFDLEVBQWIsQ0FBVDtBQUNELEc7OzRCQUVEQyxVLHVCQUFXblosQyxFQUFHO0FBQ1osUUFBSXNZLE1BQU0sS0FBS0MscUJBQUwsRUFBVjtBQUFBLFFBQ0VVLEtBQUssS0FBS2YsV0FBTCxDQUFpQng2QixDQUFqQixHQUFtQjQ2QixJQUFJdDhDLEtBRDlCO0FBQUEsUUFFRWs5QyxLQUFLLEtBQUtoQixXQUFMLENBQWlCdjhDLENBQWpCLEdBQW1CMjhDLElBQUlyOEMsTUFGOUI7QUFBQSxRQUdFbUwsSUFBSXJSLEtBQUs2QyxHQUFMLENBQVNxZ0QsRUFBVCxFQUFhQyxFQUFiLENBSE47O0FBS0EsUUFBRyxLQUFLakIsU0FBTCxNQUFvQmxpRCxLQUFLTSxHQUFMLENBQVMsSUFBRStRLENBQUYsR0FBSSxLQUFLbkosS0FBbEIsSUFBeUIsS0FBS2hHLEdBQXJELEVBQTBEO0FBQ3hELFVBQU1nRyxRQUFRLElBQUVtSixDQUFGLEdBQUksT0FBSyxLQUFLbkosS0FBTCxHQUFXLElBQUVtSixDQUFsQixDQUFsQjtBQUNBLFdBQUtzbkIsS0FBTCxDQUFXMkMsUUFBWCxDQUFvQixLQUFLM0MsS0FBTCxDQUFXc3FCLFFBQVgsTUFBdUI1eEMsSUFBRW5KLEtBQXpCLENBQXBCO0FBQ0EsV0FBS3l3QixLQUFMLENBQVdoSSxNQUFYO0FBQ0EsV0FBSzNaLE1BQUwsQ0FBWXNELGlCQUFaO0FBQ0Fpb0MsWUFBTSxLQUFLQyxxQkFBTCxFQUFOO0FBQ0VVLFdBQUssS0FBS2YsV0FBTCxDQUFpQng2QixDQUFqQixHQUFtQjQ2QixJQUFJdDhDLEtBQTVCO0FBQ0FrOUMsV0FBSyxLQUFLaEIsV0FBTCxDQUFpQnY4QyxDQUFqQixHQUFtQjI4QyxJQUFJcjhDLE1BQTVCO0FBQ0FtTCxVQUFJclIsS0FBSzZDLEdBQUwsQ0FBU3FnRCxFQUFULEVBQWFDLEVBQWIsQ0FBSjtBQUNIOztBQUVELFFBQU1uWSxLQUFLLEtBQUtBLEVBQWhCO0FBQ0EsUUFBRzM1QixJQUFFLElBQUUsS0FBS25QLEdBQVosRUFBaUI7QUFDZjhvQyxTQUFHL3BDLEdBQUgsQ0FBTyxDQUFDc2hELElBQUkxOEMsR0FBSixDQUFRN0gsQ0FBaEIsRUFBbUIsQ0FBQ3VrRCxJQUFJMThDLEdBQUosQ0FBUXJJLENBQTVCO0FBQ0QsS0FGRCxNQUdLO0FBQ0h3dEMsU0FBRy9wQyxHQUFILENBQU8sS0FBSzhoRCxXQUFMLENBQWlCRyxFQUFqQixFQUFxQlgsSUFBSTEvQyxHQUFKLENBQVE3RSxDQUE3QixFQUFnQ3VrRCxJQUFJei9DLEdBQUosQ0FBUTlFLENBQXhDLENBQVAsRUFDTyxLQUFLK2tELFdBQUwsQ0FBaUJJLEVBQWpCLEVBQXFCWixJQUFJMS9DLEdBQUosQ0FBUXJGLENBQTdCLEVBQWdDK2tELElBQUl6L0MsR0FBSixDQUFRdEYsQ0FBeEMsQ0FEUDtBQUVEOztBQUVELFFBQUd3QyxLQUFLb0QsSUFBTCxDQUFVLEtBQUswWixFQUFMLENBQVF1bEMsRUFBUixHQUFXLEtBQUt2bEMsRUFBTCxDQUFRdWxDLEVBQW5CLEdBQXNCLEtBQUt2bEMsRUFBTCxDQUFRd2xDLEVBQVIsR0FBVyxLQUFLeGxDLEVBQUwsQ0FBUXdsQyxFQUFuRCxJQUF1RCxLQUF2RCxJQUFnRXRYLEdBQUd0dEMsTUFBSCxLQUFZLEtBQS9FLEVBQXNGO0FBQ3BGLFVBQUlILEtBQUssSUFBRSxFQUFYO0FBQUEsVUFBZUQsSUFBRSxDQUFqQjtBQUFBLFVBQW9Cd2Ysa0JBQ2YsS0FBS0EsRUFEVTtBQUVsQjllLFdBQUcsQ0FGZTtBQUdsQlIsV0FBRztBQUhlLFFBQXBCO0FBS0FzZixTQUFHdW1DLEVBQUgsR0FBUSxVQUFDaEIsRUFBRCxFQUFLQyxFQUFMLEVBQVN0a0QsQ0FBVCxFQUFZUixDQUFaO0FBQUEsZUFBa0I7QUFDeEJRLGFBQUcsTUFBSWd0QyxHQUFHaHRDLENBQUgsR0FBS0EsQ0FBVCxDQURxQjtBQUV4QlIsYUFBRyxNQUFJd3RDLEdBQUd4dEMsQ0FBSCxHQUFLQSxDQUFUO0FBRnFCLFNBQWxCO0FBQUEsT0FBUjtBQUlBLGFBQU1GLElBQUUyc0MsQ0FBUixFQUFXO0FBQ1QsWUFBRzNzQyxJQUFFQyxFQUFGLEdBQUswc0MsQ0FBUixFQUFXO0FBQ1Qxc0MsZUFBSzBzQyxJQUFFM3NDLENBQVA7QUFDRDtBQUNEd2YsYUFBSyxLQUFLdXRCLFNBQUwsQ0FBZXZ0QixFQUFmLEVBQW1CdmYsRUFBbkIsQ0FBTDtBQUNBRCxhQUFLQyxFQUFMO0FBQ0Q7QUFDRCxXQUFLa2xELE9BQUwsQ0FBYTNsQyxFQUFiO0FBQ0EsV0FBS0EsRUFBTCxHQUFVQSxFQUFWO0FBQ0Q7QUFDRixHOzs0QkFFRHV0QixTLHNCQUFVdnRCLEUsRUFBSXZmLEUsRUFBSTtBQUFBLHdCQUNPb0csb0JBQVV2RyxHQUFWLENBQ3JCLEtBQUtDLEVBQUwsQ0FBUWdyQixJQUFSLENBQWF2TCxFQUFiLENBRHFCLEVBRXJCLENBRnFCLEVBR3JCdmYsRUFIcUIsRUFJckIsQ0FBQ3VmLEdBQUd1bEMsRUFBSixFQUFRdmxDLEdBQUd3bEMsRUFBWCxFQUFleGxDLEdBQUc5ZSxDQUFsQixFQUFxQjhlLEdBQUd0ZixDQUF4QixDQUpxQixDQURQO0FBQUEsUUFDVDZrRCxFQURTO0FBQUEsUUFDTEMsRUFESztBQUFBLFFBQ0R0a0QsQ0FEQztBQUFBLFFBQ0VSLENBREY7O0FBT2hCLHdCQUNLc2YsRUFETDtBQUVFdWxDLFlBRkYsRUFFTUMsTUFGTixFQUVVdGtELElBRlYsRUFFYVI7QUFGYjtBQUlELEc7OzRCQUVESCxFLGVBQUdDLEMsRUFBRWdtRCxDLEVBQUc7QUFBQSxRQUNDakIsRUFERCxHQUNpQmlCLENBRGpCO0FBQUEsUUFDS2hCLEVBREwsR0FDaUJnQixDQURqQjtBQUFBLFFBQ1N0bEQsQ0FEVCxHQUNpQnNsRCxDQURqQjtBQUFBLFFBQ1k5bEQsQ0FEWixHQUNpQjhsRCxDQURqQjtBQUFBLFFBQ29CQyxFQURwQixHQUN5QixFQUR6QjtBQUFBLFFBQzZCRixFQUQ3QixHQUNrQyxLQUFLQSxFQUFMLENBQVFoQixFQUFSLEVBQVlDLEVBQVosRUFBZ0J0a0QsQ0FBaEIsRUFBbUJSLENBQW5CLENBRGxDOztBQUVOLFdBQU8sQ0FDTDZsRCxHQUFHcmxELENBQUgsR0FBS3VsRCxLQUFHbEIsRUFESCxFQUVMZ0IsR0FBRzdsRCxDQUFILEdBQUsrbEQsS0FBR2pCLEVBRkgsRUFHTEQsRUFISyxFQUlMQyxFQUpLLENBQVA7QUFNRCxHOzs0QkFFRDN4QixNLG1CQUFPcHpCLEUsRUFBSTtBQUNULFFBQUcsS0FBS3VMLE9BQUwsSUFBZ0IsS0FBS201QyxXQUF4QixFQUFxQztBQUNuQyxXQUFLbUIsVUFBTCxDQUFnQjdsRCxFQUFoQjtBQUNEO0FBQ0YsRzs7Ozs7a0JBN0xrQms4QixlOzs7Ozs7Ozs7OztBQ0hyQjs7Ozs7Ozs7SUFFcUIrcEIsSzs7O0FBRW5CLGlCQUFZbDZDLE1BQVosRUFBb0I2TixVQUFwQixFQUFnQztBQUFBOztBQUFBLGlEQUM5QixnQ0FEOEI7O0FBRS9CLFVBQUs3TixNQUFMLEdBQWNBLE1BQWQ7QUFDQSxVQUFLNk4sVUFBTCxHQUFrQkEsY0FBY0MsU0FBUzdRLElBQXpDOztBQUVBO0FBQ0EsVUFBS3VDLE9BQUwsR0FBZSxJQUFmOztBQUVBO0FBQ0EsVUFBS3NWLE1BQUwsR0FBYyxJQUFJeGlCLFlBQU0rSSxPQUFWLEVBQWQ7O0FBRUE7QUFDQSxVQUFLOCtDLFdBQUwsR0FBbUIsQ0FBbkI7QUFDQSxVQUFLdHpDLFdBQUwsR0FBbUJ3TSxRQUFuQjs7QUFFQTtBQUNBLFVBQUsrbUMsT0FBTCxHQUFlLENBQWY7QUFDQSxVQUFLQyxPQUFMLEdBQWVobkMsUUFBZjs7QUFFQTtBQUNBO0FBQ0EsVUFBSzhmLGFBQUwsR0FBcUIsQ0FBckIsQ0FyQitCLENBcUJQO0FBQ3hCLFVBQUtDLGFBQUwsR0FBcUIxOEIsS0FBS3lRLEVBQTFCLENBdEIrQixDQXNCRDs7QUFFOUI7QUFDQTtBQUNBLFVBQUs4ckIsZUFBTCxHQUF1QixDQUFDNWYsUUFBeEIsQ0ExQitCLENBMEJHO0FBQ2xDLFVBQUs2ZixlQUFMLEdBQXVCN2YsUUFBdkIsQ0EzQitCLENBMkJFOztBQUVqQztBQUNBO0FBQ0EsVUFBS2luQyxhQUFMLEdBQXFCLEtBQXJCO0FBQ0EsVUFBS0MsYUFBTCxHQUFxQixJQUFyQjs7QUFFQTtBQUNBO0FBQ0EsVUFBS0MsVUFBTCxHQUFrQixJQUFsQjtBQUNBLFVBQUtDLFNBQUwsR0FBaUIsR0FBakI7O0FBRUE7QUFDQSxVQUFLQyxZQUFMLEdBQW9CLElBQXBCO0FBQ0EsVUFBS0MsV0FBTCxHQUFtQixHQUFuQjs7QUFFQTtBQUNBLFVBQUtDLFNBQUwsR0FBaUIsSUFBakI7O0FBRUE7QUFDQTtBQUNBLFVBQUtDLFVBQUwsR0FBa0IsS0FBbEI7QUFDQSxVQUFLQyxlQUFMLEdBQXVCLEdBQXZCLENBakQrQixDQWlESDs7QUFFNUI7QUFDQSxVQUFLQyxPQUFMLEdBQWUsTUFBS2ptQyxNQUFMLENBQVlsUSxLQUFaLEVBQWY7QUFDQSxVQUFLbzJDLFNBQUwsR0FBaUIsTUFBS2g3QyxNQUFMLENBQVlzSyxRQUFaLENBQXFCMUYsS0FBckIsRUFBakI7QUFDQSxVQUFLcTJDLEtBQUwsR0FBYSxNQUFLajdDLE1BQUwsQ0FBWXVsQixJQUF6Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxVQUFLMjFCLGFBQUwsR0FBcUIsWUFBWTtBQUNoQyxhQUFPQyxVQUFVQyxHQUFqQjtBQUNBLEtBRkQ7O0FBSUEsVUFBS0MsaUJBQUwsR0FBeUIsWUFBWTtBQUNwQyxhQUFPRixVQUFVRyxLQUFqQjtBQUNBLEtBRkQ7O0FBSUEsVUFBS0MsS0FBTCxHQUFhLFlBQVk7QUFDeEJDLFlBQU0xbUMsTUFBTixDQUFhamEsSUFBYixDQUFrQjJnRCxNQUFNVCxPQUF4QjtBQUNBUyxZQUFNeDdDLE1BQU4sQ0FBYXNLLFFBQWIsQ0FBc0J6UCxJQUF0QixDQUEyQjJnRCxNQUFNUixTQUFqQztBQUNBUSxZQUFNeDdDLE1BQU4sQ0FBYXVsQixJQUFiLEdBQW9CaTJCLE1BQU1QLEtBQTFCOztBQUVBTyxZQUFNeDdDLE1BQU4sQ0FBYXk3QyxzQkFBYjtBQUNBRCxZQUFNaG5DLGFBQU4sQ0FBb0JrbkMsV0FBcEI7O0FBRUFGLFlBQU1uMEIsTUFBTjtBQUNBLEtBVEQ7O0FBV0MsVUFBSzBLLE9BQUwsR0FBZSxZQUErQjtBQUFBLFVBQXRCd0QsS0FBc0IsdUVBQWhCLEtBQUtrbEIsU0FBVzs7QUFDNUMsVUFBTWtCLFNBQVMsS0FBS2xCLFNBQXBCO0FBQ0EsV0FBS0EsU0FBTCxHQUFpQmxsQixLQUFqQjtBQUNBcW1CLGNBQVFDLGNBQVI7QUFDQSxXQUFLcEIsU0FBTCxHQUFpQmtCLE1BQWpCO0FBQ0QsS0FMRDs7QUFPQSxVQUFLOXBCLE1BQUwsR0FBYyxZQUErQjtBQUFBLFVBQXRCMEQsS0FBc0IsdUVBQWhCLEtBQUtrbEIsU0FBVzs7QUFDM0MsVUFBTWtCLFNBQVMsS0FBS2xCLFNBQXBCO0FBQ0EsV0FBS0EsU0FBTCxHQUFpQmxsQixLQUFqQjtBQUNBdW1CLGVBQVNELGNBQVQ7QUFDQSxXQUFLcEIsU0FBTCxHQUFpQmtCLE1BQWpCO0FBQ0QsS0FMRDs7QUFPQSxVQUFLaEMsUUFBTCxHQUFnQixZQUFXO0FBQ3pCLGFBQU8vNkMsS0FBUDtBQUNELEtBRkQ7O0FBSUEsVUFBS296QixRQUFMLEdBQWdCLFVBQVMrcEIsUUFBVCxFQUFtQjtBQUNqQ245QyxjQUFRbTlDLFFBQVI7QUFDRCxLQUZEOztBQUlEO0FBQ0EsVUFBSzEwQixNQUFMLEdBQWMsWUFBVztBQUN4QixVQUFJM2UsU0FBUyxJQUFJcFcsWUFBTStJLE9BQVYsRUFBYjtBQUNBO0FBQ0EsVUFBSTJnRCxPQUFPLElBQUkxcEQsWUFBTTJwRCxVQUFWLEdBQXVCQyxrQkFBdkIsQ0FBMENsOEMsT0FBT204QyxFQUFqRCxFQUFxRCxJQUFJN3BELFlBQU0rSSxPQUFWLENBQWtCLENBQWxCLEVBQXFCLENBQXJCLEVBQXdCLENBQXhCLENBQXJELENBQVg7QUFDQSxVQUFJK2dELGNBQWNKLEtBQUtwM0MsS0FBTCxHQUFhcUUsT0FBYixFQUFsQjtBQUNBLFVBQUlvekMsZUFBZSxJQUFJL3BELFlBQU0rSSxPQUFWLEVBQW5CO0FBQ0EsVUFBSWloRCxpQkFBaUIsSUFBSWhxRCxZQUFNMnBELFVBQVYsRUFBckI7O0FBRUEsYUFBTyxTQUFTNTBCLE1BQVQsR0FBbUI7QUFDekIsWUFBSS9jLFdBQVdreEMsTUFBTXg3QyxNQUFOLENBQWFzSyxRQUE1QjtBQUNBNUIsZUFBTzdOLElBQVAsQ0FBWXlQLFFBQVosRUFBc0JSLEdBQXRCLENBQTBCMHhDLE1BQU0xbUMsTUFBaEM7QUFDQTtBQUNBcE0sZUFBTzZ6QyxlQUFQLENBQXVCUCxJQUF2QjtBQUNBO0FBQ0FiLGtCQUFVcUIsY0FBVixDQUF5Qjl6QyxNQUF6QjtBQUNBLFlBQUc4eUMsTUFBTVgsVUFBVCxFQUFxQjtBQUNwQjRCLHFCQUFXQyxzQkFBWDtBQUNBO0FBQ0R2QixrQkFBVUcsS0FBVixJQUFtQnFCLGVBQWVyQixLQUFsQztBQUNBSCxrQkFBVUMsR0FBVixJQUFpQnVCLGVBQWV2QixHQUFoQztBQUNBO0FBQ0FELGtCQUFVRyxLQUFWLEdBQWtCNWtELEtBQUs4QyxHQUFMLENBQVNnaUQsTUFBTXZvQixlQUFmLEVBQWdDdjhCLEtBQUs2QyxHQUFMLENBQVNpaUQsTUFBTXRvQixlQUFmLEVBQWdDaW9CLFVBQVVHLEtBQTFDLENBQWhDLENBQWxCO0FBQ0E7QUFDQUgsa0JBQVVDLEdBQVYsR0FBZ0Ixa0QsS0FBSzhDLEdBQUwsQ0FBU2dpRCxNQUFNcm9CLGFBQWYsRUFBOEJ6OEIsS0FBSzZDLEdBQUwsQ0FBU2lpRCxNQUFNcG9CLGFBQWYsRUFBOEIrbkIsVUFBVUMsR0FBeEMsQ0FBOUIsQ0FBaEI7QUFDQUQsa0JBQVV5QixRQUFWO0FBQ0F6QixrQkFBVTBCLE1BQVYsSUFBb0JqK0MsS0FBcEI7QUFDQTtBQUNBdThDLGtCQUFVMEIsTUFBVixHQUFtQm5tRCxLQUFLOEMsR0FBTCxDQUFTZ2lELE1BQU1yQixXQUFmLEVBQTRCempELEtBQUs2QyxHQUFMLENBQVNpaUQsTUFBTTMwQyxXQUFmLEVBQTRCczBDLFVBQVUwQixNQUF0QyxDQUE1QixDQUFuQjtBQUNBO0FBQ0FyQixjQUFNMW1DLE1BQU4sQ0FBYW5PLEdBQWIsQ0FBaUJtMkMsU0FBakI7QUFDQXAwQyxlQUFPcTBDLGdCQUFQLENBQXdCNUIsU0FBeEI7QUFDQTtBQUNBenlDLGVBQU82ekMsZUFBUCxDQUF1QkgsV0FBdkI7QUFDQTl4QyxpQkFBU3pQLElBQVQsQ0FBYzJnRCxNQUFNMW1DLE1BQXBCLEVBQTRCbk8sR0FBNUIsQ0FBZ0MrQixNQUFoQztBQUNBOHlDLGNBQU14N0MsTUFBTixDQUFhZzlDLE1BQWIsQ0FBb0J4QixNQUFNMW1DLE1BQTFCOztBQUVBLFlBQUcwbUMsTUFBTWxCLGFBQU4sS0FBc0IsSUFBekIsRUFBK0I7QUFDOUJxQyx5QkFBZXJCLEtBQWYsSUFBd0IsSUFBRUUsTUFBTWpCLGFBQWhDO0FBQ0FvQyx5QkFBZXZCLEdBQWYsSUFBc0IsSUFBRUksTUFBTWpCLGFBQTlCO0FBQ0EsU0FIRCxNQUdPO0FBQ05vQyx5QkFBZWhsRCxHQUFmLENBQW1CLENBQW5CLEVBQXNCLENBQXRCLEVBQXlCLENBQXpCO0FBQ0E7O0FBRURpSCxnQkFBUSxDQUFSO0FBQ0FrK0Msa0JBQVVubEQsR0FBVixDQUFjLENBQWQsRUFBaUIsQ0FBakIsRUFBb0IsQ0FBcEI7O0FBRUE7QUFDQTtBQUNBOztBQUVBLFlBQUdzbEQsZUFDRlosYUFBYW5zQyxpQkFBYixDQUErQnNyQyxNQUFNeDdDLE1BQU4sQ0FBYXNLLFFBQTVDLElBQXdENHlDLEdBRHRELElBRUYsS0FBSSxJQUFFWixlQUFlYSxHQUFmLENBQW1CM0IsTUFBTXg3QyxNQUFOLENBQWFva0IsVUFBaEMsQ0FBTixJQUFxRDg0QixHQUZ0RCxFQUUyRDs7QUFFMUQxQixnQkFBTWhuQyxhQUFOLENBQW9Ca25DLFdBQXBCOztBQUVBVyx1QkFBYXhoRCxJQUFiLENBQWtCMmdELE1BQU14N0MsTUFBTixDQUFhc0ssUUFBL0I7QUFDQWd5Qyx5QkFBZXpoRCxJQUFmLENBQW9CMmdELE1BQU14N0MsTUFBTixDQUFhb2tCLFVBQWpDO0FBQ0E2NEIsd0JBQWMsS0FBZDs7QUFFQSxpQkFBTyxJQUFQO0FBQ0E7QUFDRCxlQUFPLEtBQVA7QUFDQSxPQXZERDtBQXdEQSxLQWhFYSxFQUFkOztBQWtFQyxVQUFLeC9DLE9BQUwsR0FBZSxZQUFXLENBRXpCLENBRkQ7O0FBSUQ7QUFDQTtBQUNBO0FBQ0EsUUFBSSs5QyxhQUFKO0FBQ0EsUUFBSUUsY0FBYyxFQUFFeDdDLE1BQU0sUUFBUixFQUFsQjtBQUNBLFFBQUlnOUMsTUFBTSxJQUFWO0FBQ0E7QUFDQSxRQUFJL0IsWUFBWSxJQUFJN29ELFlBQU04cUQsU0FBVixFQUFoQjtBQUNBLFFBQUlULGlCQUFpQixJQUFJcnFELFlBQU04cUQsU0FBVixFQUFyQjs7QUFFQSxRQUFJeCtDLFFBQVEsQ0FBWjtBQUNBLFFBQUlrK0MsWUFBWSxJQUFJeHFELFlBQU0rSSxPQUFWLEVBQWhCO0FBQ0EsUUFBSTRoRCxjQUFjLEtBQWxCOztBQUVBLGFBQVNQLG9CQUFULEdBQWdDO0FBQy9CLGFBQU8sSUFBSWhtRCxLQUFLeVEsRUFBVCxHQUFjLEVBQWQsR0FBbUIsRUFBbkIsR0FBd0JxMEMsTUFBTVYsZUFBckM7QUFDQTs7QUFFRCxhQUFTZSxZQUFULEdBQXdCO0FBQ3ZCLGFBQU9ubEQsS0FBS3kxQixHQUFMLENBQVMsSUFBVCxFQUFlcXZCLE1BQU1mLFNBQXJCLENBQVA7QUFDQTs7QUFFRCxhQUFTZ0MsVUFBVCxDQUFvQjc0QyxLQUFwQixFQUEyQjtBQUMxQis0QyxxQkFBZXJCLEtBQWYsSUFBd0IxM0MsS0FBeEI7QUFDQTs7QUFFRCxhQUFTeTVDLFFBQVQsQ0FBa0J6NUMsS0FBbEIsRUFBeUI7QUFDeEIrNEMscUJBQWV2QixHQUFmLElBQXNCeDNDLEtBQXRCO0FBQ0E7O0FBRUQsUUFBSTA1QyxVQUFVLFlBQVc7QUFDeEIsVUFBSTdtRCxJQUFJLElBQUluRSxZQUFNK0ksT0FBVixFQUFSO0FBQ0EsYUFBTyxTQUFTaWlELE9BQVQsQ0FBaUJ2ekMsUUFBakIsRUFBMkJ3ekMsWUFBM0IsRUFBeUM7QUFDL0M5bUQsVUFBRSttRCxtQkFBRixDQUFzQkQsWUFBdEIsRUFBb0MsQ0FBcEMsRUFEK0MsQ0FDUDtBQUN4QzltRCxVQUFFZ25ELGNBQUYsQ0FBaUIsQ0FBRTF6QyxRQUFuQjtBQUNBK3lDLGtCQUFVbjJDLEdBQVYsQ0FBY2xRLENBQWQ7QUFDQSxPQUpEO0FBS0EsS0FQYSxFQUFkOztBQVNBLFFBQUlpbkQsUUFBUSxZQUFXO0FBQ3RCLFVBQUlqbkQsSUFBSSxJQUFJbkUsWUFBTStJLE9BQVYsRUFBUjtBQUNBLGFBQU8sU0FBU3FpRCxLQUFULENBQWUzekMsUUFBZixFQUF5Qnd6QyxZQUF6QixFQUF1QztBQUM3QzltRCxVQUFFK21ELG1CQUFGLENBQXNCRCxZQUF0QixFQUFvQyxDQUFwQyxFQUQ2QyxDQUNMO0FBQ3hDOW1ELFVBQUVnbkQsY0FBRixDQUFpQjF6QyxRQUFqQjtBQUNBK3lDLGtCQUFVbjJDLEdBQVYsQ0FBY2xRLENBQWQ7QUFDQSxPQUpEO0FBS0EsS0FQVyxFQUFaOztBQVNBO0FBQ0Era0QsVUFBTWxtQixHQUFOLEdBQVksWUFBVztBQUN0QixVQUFJNXNCLFNBQVMsSUFBSXBXLFlBQU0rSSxPQUFWLEVBQWI7QUFDQSxhQUFPLFNBQVNpNkIsR0FBVCxDQUFhcW9CLE1BQWIsRUFBcUIzbkIsTUFBckIsRUFBNkI7QUFDbkMsWUFBSWg1QixVQUFVdytDLE1BQU0zdEMsVUFBcEI7QUFDQSxZQUFHMnRDLE1BQU14N0MsTUFBTixZQUF3QjFOLFlBQU1zckQsaUJBQWpDLEVBQW9EO0FBQ25EO0FBQ0EsY0FBSXR6QyxXQUFXa3hDLE1BQU14N0MsTUFBTixDQUFhc0ssUUFBNUI7QUFDQTVCLGlCQUFPN04sSUFBUCxDQUFZeVAsUUFBWixFQUFzQlIsR0FBdEIsQ0FBMEIweEMsTUFBTTFtQyxNQUFoQztBQUNBLGNBQUkrb0MsaUJBQWlCbjFDLE9BQU90VSxNQUFQLEVBQXJCO0FBQ0E7QUFDQXlwRCw0QkFBa0JubkQsS0FBS29uRCxHQUFMLENBQVV0QyxNQUFNeDdDLE1BQU4sQ0FBYTJOLEdBQWIsR0FBbUIsQ0FBcEIsR0FBeUJqWCxLQUFLeVEsRUFBOUIsR0FBbUMsS0FBNUMsQ0FBbEI7QUFDQTtBQUNBbTJDLGtCQUFRLElBQUlLLE1BQUosR0FBYUUsY0FBYixHQUE4QjdnRCxRQUFRK2dELFlBQTlDLEVBQTREdkMsTUFBTXg3QyxNQUFOLENBQWF3TixNQUF6RTtBQUNBa3dDLGdCQUFNLElBQUkxbkIsTUFBSixHQUFhNm5CLGNBQWIsR0FBOEI3Z0QsUUFBUStnRCxZQUE1QyxFQUEwRHZDLE1BQU14N0MsTUFBTixDQUFhd04sTUFBdkU7QUFDQSxTQVZELE1BVU8sSUFBR2d1QyxNQUFNeDdDLE1BQU4sWUFBd0IxTixZQUFNMHJELGtCQUFqQyxFQUFxRDtBQUMzRDtBQUNBVixrQkFBUUssVUFBU25DLE1BQU14N0MsTUFBTixDQUFhZ0osS0FBYixHQUFtQnd5QyxNQUFNeDdDLE1BQU4sQ0FBYStJLElBQXpDLElBQWlEeXlDLE1BQU14N0MsTUFBTixDQUFhdWxCLElBQTlELEdBQXFFdm9CLFFBQVFpaEQsV0FBckYsRUFBa0d6QyxNQUFNeDdDLE1BQU4sQ0FBYXdOLE1BQS9HO0FBQ0Frd0MsZ0JBQU0xbkIsVUFBU3dsQixNQUFNeDdDLE1BQU4sQ0FBYXF3QixHQUFiLEdBQWlCbXJCLE1BQU14N0MsTUFBTixDQUFhaytDLE1BQXZDLElBQWlEMUMsTUFBTXg3QyxNQUFOLENBQWF1bEIsSUFBOUQsR0FBcUV2b0IsUUFBUStnRCxZQUFuRixFQUFpR3ZDLE1BQU14N0MsTUFBTixDQUFhd04sTUFBOUc7QUFDQSxTQUpNLE1BSUE7QUFDTjtBQUNBL1Ysa0JBQVFDLElBQVIsQ0FBYSw0RUFBYjtBQUNBOGpELGdCQUFNWixTQUFOLEdBQWtCLEtBQWxCO0FBQ0E7QUFDRCxPQXJCRDtBQXNCQSxLQXhCVyxFQUFaOztBQTBCQSxhQUFTZ0IsT0FBVCxDQUFpQnVDLFVBQWpCLEVBQTZCO0FBQzFCLFVBQUczQyxNQUFNeDdDLE1BQU4sWUFBd0IxTixZQUFNc3JELGlCQUFqQyxFQUFvRDtBQUNyRGgvQyxpQkFBU3UvQyxVQUFUO0FBQ0EsT0FGQyxNQUVLLElBQUczQyxNQUFNeDdDLE1BQU4sWUFBd0IxTixZQUFNMHJELGtCQUFqQyxFQUFxRDtBQUMzRHhDLGNBQU14N0MsTUFBTixDQUFhdWxCLElBQWIsR0FBb0I3dUIsS0FBSzhDLEdBQUwsQ0FBU2dpRCxNQUFNcEIsT0FBZixFQUF3QjFqRCxLQUFLNkMsR0FBTCxDQUFTaWlELE1BQU1uQixPQUFmLEVBQXdCbUIsTUFBTXg3QyxNQUFOLENBQWF1bEIsSUFBYixHQUFvQjQ0QixVQUE1QyxDQUF4QixDQUFwQjtBQUNBM0MsY0FBTXg3QyxNQUFOLENBQWF5N0Msc0JBQWI7QUFDQXdCLHNCQUFjLElBQWQ7QUFDQSxPQUpNLE1BSUE7QUFDTnhsRCxnQkFBUUMsSUFBUixDQUFhLG1GQUFiO0FBQ0E4akQsY0FBTWhCLFVBQU4sR0FBbUIsS0FBbkI7QUFDQTtBQUNEOztBQUVELGFBQVNzQixRQUFULENBQWtCcUMsVUFBbEIsRUFBOEI7QUFDM0IsVUFBRzNDLE1BQU14N0MsTUFBTixZQUF3QjFOLFlBQU1zckQsaUJBQWpDLEVBQW9EO0FBQ3JEaC9DLGlCQUFTdS9DLFVBQVQ7QUFDQSxPQUZDLE1BRUssSUFBRzNDLE1BQU14N0MsTUFBTixZQUF3QjFOLFlBQU0wckQsa0JBQWpDLEVBQXFEO0FBQzNEeEMsY0FBTXg3QyxNQUFOLENBQWF1bEIsSUFBYixHQUFvQjd1QixLQUFLOEMsR0FBTCxDQUFTZ2lELE1BQU1wQixPQUFmLEVBQXdCMWpELEtBQUs2QyxHQUFMLENBQVNpaUQsTUFBTW5CLE9BQWYsRUFBd0JtQixNQUFNeDdDLE1BQU4sQ0FBYXVsQixJQUFiLEdBQW9CNDRCLFVBQTVDLENBQXhCLENBQXBCO0FBQ0EzQyxjQUFNeDdDLE1BQU4sQ0FBYXk3QyxzQkFBYjtBQUNBd0Isc0JBQWMsSUFBZDtBQUNBLE9BSk0sTUFJQTtBQUNOeGxELGdCQUFRQyxJQUFSLENBQWEsbUZBQWI7QUFDQThqRCxjQUFNaEIsVUFBTixHQUFtQixLQUFuQjtBQUNBO0FBQ0Q7O0FBRUE7O0FBRUEsYUFBUzVrQixNQUFULENBQWdCaUosS0FBaEIsRUFBdUJocEMsSUFBdkIsRUFBNkI7QUFDM0IsVUFBRzJsRCxNQUFNaDhDLE9BQU4sSUFBaUJnOEMsTUFBTWQsWUFBdkIsSUFBdUM3a0QsS0FBS2dPLEtBQUwsS0FBYSxNQUF2RCxFQUErRDtBQUM3RCxZQUFJN0csVUFBVXcrQyxNQUFNM3RDLFVBQXBCO0FBQ0E7QUFDQTR1QyxtQkFBVyxJQUFJL2xELEtBQUt5USxFQUFULEdBQWN0UixLQUFLZ0QsRUFBbkIsR0FBd0JtRSxRQUFRaWhELFdBQWhDLEdBQThDekMsTUFBTWIsV0FBL0Q7QUFDQTtBQUNBMEMsaUJBQVMsSUFBSTNtRCxLQUFLeVEsRUFBVCxHQUFjdFIsS0FBSzlCLEVBQW5CLEdBQXdCaUosUUFBUStnRCxZQUFoQyxHQUErQ3ZDLE1BQU1iLFdBQTlEO0FBQ0FhLGNBQU1uMEIsTUFBTjtBQUNEO0FBQ0Y7O0FBRUQsYUFBU2lPLEdBQVQsQ0FBYXVKLEtBQWIsRUFBb0JocEMsSUFBcEIsRUFBMEI7QUFDeEIsVUFBRzJsRCxNQUFNaDhDLE9BQU4sSUFBaUJnOEMsTUFBTVosU0FBdkIsSUFBb0Mva0QsS0FBS2dPLEtBQUwsS0FBYSxNQUFwRCxFQUE0RDtBQUMxRDIzQyxjQUFNbG1CLEdBQU4sQ0FBVXovQixLQUFLZ0QsRUFBZixFQUFtQmhELEtBQUs5QixFQUF4QjtBQUNBeW5ELGNBQU1uMEIsTUFBTjtBQUNEO0FBQ0Y7O0FBRUQsYUFBUysyQixXQUFULENBQXFCdmYsS0FBckIsRUFBNEJocEMsSUFBNUIsRUFBa0M7QUFDaEMsVUFBRzJsRCxNQUFNaDhDLE9BQU4sSUFBaUJnOEMsTUFBTWhCLFVBQXZCLElBQXFDM2tELEtBQUtnTyxLQUFMLEtBQWEsTUFBckQsRUFBNkQ7QUFDM0QsWUFBR2hPLEtBQUs5QixFQUFMLEdBQVEsQ0FBWCxFQUFjO0FBQ1o2bkQsa0JBQVFDLGNBQVI7QUFDRCxTQUZELE1BRU8sSUFBR2htRCxLQUFLOUIsRUFBTCxHQUFRLENBQVgsRUFBYztBQUNuQituRCxtQkFBU0QsY0FBVDtBQUNEO0FBQ0RMLGNBQU1uMEIsTUFBTjtBQUNEO0FBQ0Y7O0FBRUQsYUFBU2czQixVQUFULENBQW9CeGYsS0FBcEIsRUFBMkI7QUFDekIsVUFBRzJjLE1BQU1oOEMsT0FBTixJQUFpQmc4QyxNQUFNaEIsVUFBMUIsRUFBc0M7QUFDcEMsWUFBRzNiLE1BQU03SSxNQUFOLEdBQWEsQ0FBaEIsRUFBbUI7QUFDakI4bEIsbUJBQVNELGNBQVQ7QUFDRCxTQUZELE1BRU8sSUFBR2hkLE1BQU03SSxNQUFOLEdBQWEsQ0FBaEIsRUFBbUI7QUFDeEI0bEIsa0JBQVFDLGNBQVI7QUFDRDtBQUNETCxjQUFNbjBCLE1BQU47QUFDRDtBQUNGOztBQUVELFVBQUtxSSxPQUFMLEdBQWU7QUFDYmtHLG9CQURhO0FBRWJOLGNBRmE7QUFHYjhvQiw4QkFIYTtBQUliQzs7QUFHSDtBQVBnQixLQUFmLENBUUQsTUFBS2gzQixNQUFMO0FBbFUrQjtBQW1VL0I7OztFQXJVZ0MvMEIsWUFBTW1pQixlOztrQkFBcEJ5bEMsSzs7Ozs7Ozs7Ozs7QUNGckI7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUVBOzs7Ozs7Ozs7Ozs7SUFFcUIvM0MsUTs7O0FBRW5CLG9CQUFZekYsT0FBWixFQUFxQkMsS0FBckIsRUFBNEJDLE1BQTVCLEVBQW9DQyxLQUFwQyxFQUEyQzJqQixHQUEzQyxFQUFnRHhvQixDQUFoRCxFQUFtRDtBQUFBOztBQUFBLGlEQUNqRCxzQkFBTTBFLE9BQU4sRUFBZUMsS0FBZixFQUFzQkMsTUFBdEIsRUFBOEJDLEtBQTlCLENBRGlEOztBQUdqRCxVQUFLd3BCLEtBQUwsR0FBYSxFQUFiO0FBQ0EsVUFBS3J1QixDQUFMLEdBQVNBLENBQVQ7QUFDQSxVQUFLd29CLEdBQUwsR0FBV0EsR0FBWDtBQUNBLFVBQUsvcEIsQ0FBTCxHQUFTLEVBQUMvQixHQUFHLENBQUosRUFBT1IsR0FBRyxDQUFWLEVBQWEwRCxHQUFHLENBQWhCLEVBQW1CRCxLQUFLLGFBQVNqRCxDQUFULEVBQVdSLENBQVgsRUFBYTBELENBQWIsRUFBZ0I7QUFDL0MsYUFBS2xELENBQUwsR0FBT0EsQ0FBUCxDQUFVLEtBQUtSLENBQUwsR0FBT0EsQ0FBUCxDQUFVLEtBQUswRCxDQUFMLEdBQU9BLENBQVA7QUFDcEIsZUFBTyxJQUFQO0FBQ0QsT0FIUSxFQUdOK1gsV0FBVyxtQkFBU2hhLENBQVQsRUFBWTtBQUN4QixZQUFNakIsSUFBRWlCLEVBQUVBLENBQUYsQ0FBSSxDQUFKLEVBQU8sQ0FBUCxJQUFVLEtBQUtqQixDQUFmLEdBQWlCaUIsRUFBRUEsQ0FBRixDQUFJLENBQUosRUFBTyxDQUFQLElBQVUsS0FBS3pCLENBQWhDLEdBQWtDeUIsRUFBRUEsQ0FBRixDQUFJLENBQUosRUFBTyxDQUFQLElBQVUsS0FBS2lDLENBQXpEO0FBQUEsWUFDTTFELElBQUV5QixFQUFFQSxDQUFGLENBQUksQ0FBSixFQUFPLENBQVAsSUFBVSxLQUFLakIsQ0FBZixHQUFpQmlCLEVBQUVBLENBQUYsQ0FBSSxDQUFKLEVBQU8sQ0FBUCxJQUFVLEtBQUt6QixDQUFoQyxHQUFrQ3lCLEVBQUVBLENBQUYsQ0FBSSxDQUFKLEVBQU8sQ0FBUCxJQUFVLEtBQUtpQyxDQUR6RDtBQUFBLFlBRU1BLElBQUVqQyxFQUFFQSxDQUFGLENBQUksQ0FBSixFQUFPLENBQVAsSUFBVSxLQUFLakIsQ0FBZixHQUFpQmlCLEVBQUVBLENBQUYsQ0FBSSxDQUFKLEVBQU8sQ0FBUCxJQUFVLEtBQUt6QixDQUFoQyxHQUFrQ3lCLEVBQUVBLENBQUYsQ0FBSSxDQUFKLEVBQU8sQ0FBUCxJQUFVLEtBQUtpQyxDQUZ6RDtBQUdBLGFBQUtsRCxDQUFMLEdBQU9BLENBQVA7QUFDQSxhQUFLUixDQUFMLEdBQU9BLENBQVA7QUFDQSxhQUFLMEQsQ0FBTCxHQUFPQSxDQUFQO0FBQ0EsZUFBTyxJQUFQO0FBQ0QsT0FYUSxFQUFUO0FBWUEsVUFBS2pDLENBQUwsR0FBUyxFQUFDQSxHQUFHLENBQUMsQ0FBQyxDQUFELEVBQUcsQ0FBSCxFQUFLLENBQUwsQ0FBRCxFQUFTLENBQUMsQ0FBRCxFQUFHLENBQUgsRUFBSyxDQUFMLENBQVQsRUFBaUIsQ0FBQyxDQUFELEVBQUcsQ0FBSCxFQUFLLENBQUwsQ0FBakIsQ0FBSixFQUErQmdDLEtBQUssYUFBUzJtRCxHQUFULEVBQWFDLEdBQWIsRUFBaUJDLEdBQWpCLEVBQXFCQyxHQUFyQixFQUF5QkMsR0FBekIsRUFBNkJDLEdBQTdCLEVBQWlDQyxHQUFqQyxFQUFxQ0MsR0FBckMsRUFBeUNDLEdBQXpDLEVBQThDO0FBQ3pGLGFBQUtucEQsQ0FBTCxHQUFPLENBQUMsQ0FBQzJvRCxHQUFELEVBQUtDLEdBQUwsRUFBU0MsR0FBVCxDQUFELEVBQWUsQ0FBQ0MsR0FBRCxFQUFLQyxHQUFMLEVBQVNDLEdBQVQsQ0FBZixFQUE2QixDQUFDQyxHQUFELEVBQUtDLEdBQUwsRUFBU0MsR0FBVCxDQUE3QixDQUFQO0FBQ0EsZUFBTyxJQUFQO0FBQ0QsT0FIUSxFQUFUOztBQUtBLFVBQUszL0MsV0FBTCxHQUFtQixZQUFLO0FBQ3RCLFlBQUtxaEIsR0FBTCxDQUFTdEcsVUFBVCxDQUFvQixNQUFLdkosTUFBTCxDQUFZb08sSUFBWixPQUFwQjtBQUNELEtBRkQ7QUFHQS9MLFlBQVFDLE9BQVIsR0FDRXNCLElBREYsQ0FDTztBQUFBLGFBQUssTUFBS2lNLEdBQUwsQ0FBU3RHLFVBQVQsQ0FBb0IsTUFBSzdJLElBQUwsQ0FBVTBOLElBQVYsT0FBcEIsQ0FBTDtBQUFBLEtBRFA7QUExQmlEO0FBNEJsRDs7cUJBRURELFEscUJBQVN1SCxLLEVBQU87QUFDZCxTQUFLQSxLQUFMLEdBQWFBLE1BQU0wNEIsSUFBTixFQUFiO0FBQ0EsUUFBRyxLQUFLM2YsV0FBUixFQUFxQjtBQUNuQixXQUFLNGYsT0FBTCxDQUFhLEtBQUs1ZixXQUFsQjtBQUNBO0FBQ0Q7QUFDRixHOztxQkFFRDZmLFEscUJBQVM1cEQsQyxFQUFHO0FBQ1YsV0FBTztBQUNMc0gsYUFBT3RILEVBQUUsQ0FBRixJQUFLQSxFQUFFLENBQUYsQ0FEUDtBQUVMdUgsY0FBUXZILEVBQUUsQ0FBRixJQUFLQSxFQUFFLENBQUY7QUFGUixLQUFQO0FBSUQsRzs7cUJBRUQ2cEQsVSx1QkFBV3ZwRCxDLEVBQUdhLEMsRUFBRzFELEMsRUFBRztBQUNsQixRQUFNb0ksT0FBTyxFQUFiO0FBQUEsUUFBaUJ6RSxJQUFJLEtBQUtBLENBQTFCO0FBQ0FBLE1BQUVrQixHQUFGLENBQU1uQixFQUFFOUIsQ0FBUixFQUFXOEIsRUFBRXRDLENBQWIsRUFBZ0IsQ0FBaEIsRUFBbUJ5YixTQUFuQixDQUE2QmhhLENBQTdCO0FBQ0F1RixTQUFLM0YsSUFBTCxDQUFVLEVBQUNiLEdBQUcrQixFQUFFL0IsQ0FBTixFQUFTUixHQUFHdUMsRUFBRXZDLENBQWQsRUFBVjtBQUNBdUMsTUFBRWtCLEdBQUYsQ0FBTW5CLEVBQUU5QixDQUFSLEVBQVc4QixFQUFFdEMsQ0FBRixHQUFJcEIsRUFBRThKLE1BQWpCLEVBQXlCLENBQXpCLEVBQTRCK1MsU0FBNUIsQ0FBc0NoYSxDQUF0QztBQUNBdUYsU0FBSzNGLElBQUwsQ0FBVSxFQUFDYixHQUFHK0IsRUFBRS9CLENBQU4sRUFBU1IsR0FBR3VDLEVBQUV2QyxDQUFkLEVBQVY7QUFDQXVDLE1BQUVrQixHQUFGLENBQU1uQixFQUFFOUIsQ0FBRixHQUFJNUIsRUFBRTZKLEtBQVosRUFBbUJuRyxFQUFFdEMsQ0FBRixHQUFJcEIsRUFBRThKLE1BQXpCLEVBQWlDLENBQWpDLEVBQW9DK1MsU0FBcEMsQ0FBOENoYSxDQUE5QztBQUNBdUYsU0FBSzNGLElBQUwsQ0FBVSxFQUFDYixHQUFHK0IsRUFBRS9CLENBQU4sRUFBU1IsR0FBR3VDLEVBQUV2QyxDQUFkLEVBQVY7QUFDQXVDLE1BQUVrQixHQUFGLENBQU1uQixFQUFFOUIsQ0FBRixHQUFJNUIsRUFBRTZKLEtBQVosRUFBbUJuRyxFQUFFdEMsQ0FBckIsRUFBd0IsQ0FBeEIsRUFBMkJ5YixTQUEzQixDQUFxQ2hhLENBQXJDO0FBQ0F1RixTQUFLM0YsSUFBTCxDQUFVLEVBQUNiLEdBQUcrQixFQUFFL0IsQ0FBTixFQUFTUixHQUFHdUMsRUFBRXZDLENBQWQsRUFBVjtBQUNBLFdBQU9nSCxJQUFQO0FBQ0QsRzs7cUJBRURrRSxlLDhCQUFrQjtBQUNoQixXQUFPLElBQVA7QUFDRCxHOztxQkFFRHd1QixRLHFCQUFTM3RCLEMsRUFBR2xELEcsRUFBS3JJLEMsRUFBR1IsQyxFQUFHO0FBQ3JCLFFBQUcsS0FBS2s0QixjQUFSLEVBQXdCO0FBQ3RCLFdBQUtBLGNBQUwsQ0FBb0I3ckIsT0FBcEIsQ0FBNEJOLENBQTVCLEVBQStCLEVBQUNsRCxRQUFELEVBQU1ySSxJQUFOLEVBQVNSLElBQVQsRUFBL0I7QUFDRDtBQUNGLEc7O3FCQUVEaXJELGMsMkJBQWVDLEssRUFBTztBQUFBOztBQUNwQixRQUFNcHJELElBQUksS0FBS3VxQyxRQUFMLENBQWM1dUIsU0FBeEI7QUFBQSxRQUNFMHZDLFVBQVUsRUFEWjtBQUVBLFNBQUsxcEQsQ0FBTCxDQUFPZ0MsR0FBUCxDQUNFM0QsRUFBRSxDQUFGLENBREYsRUFDT0EsRUFBRSxDQUFGLENBRFAsRUFDWSxDQURaLEVBRUVBLEVBQUUsQ0FBRixDQUZGLEVBRU9BLEVBQUUsQ0FBRixDQUZQLEVBRVksQ0FGWixFQUdFQSxFQUFFLENBQUYsQ0FIRixFQUdPQSxFQUFFLENBQUYsQ0FIUCxFQUdZLENBSFo7O0FBS0EseUJBQWdCb3JELEtBQWhCLGtIQUF1QjtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQUEsVUFBZnRnQixJQUFlOztBQUNyQixVQUFJQSxLQUFLd2dCLE9BQUwsS0FBZSxNQUFuQixFQUEyQjtBQUN6QixZQUFNdmhELE9BQU8rZ0MsS0FBSy9nQyxJQUFsQjtBQUFBLFlBQ0V3aEQsT0FBTztBQUNMN3FELGFBQUdxSixLQUFLLENBQUwsQ0FERTtBQUVMN0osYUFBRzZKLEtBQUssQ0FBTDtBQUZFLFNBRFQ7QUFBQSxZQUtFeWhELE1BQU0sS0FBS1AsUUFBTCxDQUFjbGhELElBQWQsQ0FMUjtBQU1BLFlBQU0rVyxVQUFTLElBQUkycUMsb0JBQUosQ0FBZSxLQUFLUCxVQUFMLENBQWdCLEtBQUt2cEQsQ0FBckIsRUFBd0I0cEQsSUFBeEIsRUFBOEJDLEdBQTlCLEVBQW1DdDdDLEdBQW5DLENBQXVDLFVBQUMxTixDQUFEO0FBQUEsaUJBQU8sRUFBQzlCLEdBQUc4QixFQUFFOUIsQ0FBRixHQUFJLE9BQUs2cEMsUUFBTCxDQUFjNWhDLEtBQXRCLEVBQTZCekksR0FBRyxJQUFFc0MsRUFBRXRDLENBQUYsR0FBSSxPQUFLcXFDLFFBQUwsQ0FBYzNoQyxNQUFwRCxFQUFQO0FBQUEsU0FBdkMsQ0FBZixDQUFmO0FBQ0FrWSxnQkFBT2dxQixJQUFQLEdBQWNBLElBQWQ7QUFDQWhxQixnQkFBTzNVLFFBQVAsR0FBa0IsS0FBS3UvQyxPQUFMLENBQWEzZ0MsSUFBYixDQUFrQixJQUFsQixDQUFsQjtBQUNBc2dDLGdCQUFROXBELElBQVIsQ0FBYXVmLE9BQWI7QUFDRDtBQUNGO0FBQ0QsUUFBR3VxQyxRQUFRanJELE1BQVgsRUFBbUI7QUFDakIsV0FBS2c0QixjQUFMLEdBQXNCLElBQUkxWCw4QkFBSixDQUF5QixLQUFLNVgsR0FBOUIsRUFBbUMsS0FBS0MsR0FBeEMsRUFBNkMwaUQscUJBQVc1K0MsSUFBeEQsRUFBOEQsS0FBS3pCLGVBQUwsRUFBOUQsQ0FBdEI7QUFDQSw0QkFBa0JpZ0QsT0FBbEIseUhBQTJCO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQSxZQUFuQnZxQyxNQUFtQjs7QUFDekIsYUFBS3NYLGNBQUwsQ0FBb0JyWCxTQUFwQixDQUE4QkQsTUFBOUI7QUFDRDtBQUNGO0FBQ0YsRzs7cUJBRURrcUMsTyxvQkFBUTVmLFcsRUFBYTtBQUNuQixTQUFLQSxXQUFMLEdBQW1CQSxXQUFuQjtBQUNBLFFBQUcsS0FBSy9ZLEtBQUwsS0FBYSxFQUFoQixFQUFvQjtBQUNsQixXQUFLczVCLE1BQUwsR0FBYyxJQUFJenFDLGdCQUFKLENBQVdrcUIsWUFBWUMsS0FBWixDQUFrQm43QixHQUFsQixDQUFzQixVQUFDbzdCLElBQUQ7QUFBQSxlQUFTQSxLQUFLN3BCLEdBQWQ7QUFBQSxPQUF0QixDQUFYLEVBQXFELEtBQUs0USxLQUExRCxFQUFpRSxFQUFDbFEsVUFBVSxLQUFYLEVBQWpFLENBQWQ7QUFDRDtBQUNGLEc7O3FCQUVEeXBDLFUseUJBQWE7QUFBQTs7QUFDWCxRQUFHLEtBQUtELE1BQVIsRUFBZ0I7QUFDZCxVQUFNdC9DLE9BQU8sS0FBS3lDLElBQUwsQ0FBVXpDLElBQXZCO0FBQUEsVUFDRXcvQyxTQUFTLGFBQUUsNkRBQUYsRUFBaUVydUMsUUFBakUsQ0FBMEUsTUFBMUUsQ0FEWDtBQUFBLFVBQzhGc3VDLFVBQVVELE9BQU8sQ0FBUCxDQUR4RztBQUFBLFVBRUVFLGFBQWFGLE9BQU9uM0MsTUFBUCxHQUFnQkssSUFGL0I7QUFHQSw0QkFBZSxLQUFLNDJDLE1BQUwsQ0FBWXRwQyxPQUFaLEVBQWYseUhBQXNDO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQSxZQUE5QjJwQyxHQUE4Qjs7QUFDbEMsWUFBTTFnQixPQUFPLEtBQUtGLFdBQUwsQ0FBaUJDLEtBQWpCLENBQXVCMmdCLElBQUl2dkMsS0FBM0IsQ0FBYjtBQUFBLFlBQ016YyxJQUFJZCxZQUFNK3NELElBQU4sQ0FBV3R3QyxTQUFYLENBQXFCLEtBQUs0dUIsUUFBTCxDQUFjNXVCLFNBQW5DLEVBQThDMnZCLEtBQUszdkIsU0FBbkQsQ0FEVjtBQUFBLFlBRU1wTixRQUFRLEtBQUs2OEIsV0FBTCxDQUFpQjF5QixNQUFqQixDQUF3QjR5QixLQUFLNGdCLFFBQTdCLENBRmQ7QUFBQSxZQUdNdDhDLFFBQVFsTixLQUFLeXBELEtBQUwsQ0FBV25zRCxFQUFFLENBQUYsQ0FBWCxFQUFpQkEsRUFBRSxDQUFGLENBQWpCLEtBQXdCdU8sTUFBTTY5QyxRQUFOLEdBQWdCMXBELEtBQUt5USxFQUFMLEdBQVUsQ0FBMUIsR0FBNkIsQ0FBckQsQ0FIZDtBQUFBLFlBSU1rNUMsYUFBYTNwRCxLQUFLb0QsSUFBTCxDQUFXOUYsRUFBRSxDQUFGLElBQU9BLEVBQUUsQ0FBRixDQUFSLEdBQWlCQSxFQUFFLENBQUYsSUFBT0EsRUFBRSxDQUFGLENBQWxDLENBSm5CO0FBQUEsWUFLTXNzRCxhQUFhLzlDLE1BQU1nK0MsTUFBTixHQUNDaCtDLE1BQU1nK0MsTUFBTixHQUFlRixVQURoQixHQUVFOTlDLE1BQU1pK0MsT0FBTixHQUFlLENBQUMsSUFBSWorQyxNQUFNaStDLE9BQVgsSUFBc0JILFVBQXJDLEdBQWlEQSxVQVB0RTtBQVFBUixlQUFPMXRDLElBQVAsQ0FBWW10QixLQUFLN3BCLEdBQUwsQ0FBU1csTUFBVCxDQUFnQixDQUFoQixFQUFtQjRwQyxJQUFJdDNDLE1BQXZCLElBQStCLFFBQS9CLEdBQXdDNDJCLEtBQUs3cEIsR0FBTCxDQUFTVyxNQUFULENBQWdCNHBDLElBQUl0M0MsTUFBcEIsRUFBNEJzM0MsSUFBSTVyRCxNQUFoQyxDQUF4QyxHQUFnRixTQUFoRixHQUEwRmtyQyxLQUFLN3BCLEdBQUwsQ0FBU1csTUFBVCxDQUFnQjRwQyxJQUFJdDNDLE1BQUosR0FBV3MzQyxJQUFJNXJELE1BQS9CLENBQXRHOztBQUVBMHJELGdCQUFRdjlDLEtBQVIsQ0FBY2dqQyxRQUFkLEdBQXlCOGEsYUFBVyxJQUFwQztBQUNBUCxnQkFBUXY5QyxLQUFSLENBQWMraUMsVUFBZCxHQUEyQi9pQyxNQUFNK2lDLFVBQWpDOztBQUVBLFlBQU1tYixXQUFXWixPQUFPcitCLElBQVAsQ0FBWSxNQUFaLENBQWpCO0FBQUEsWUFDSWsvQixTQUFTbitDLE1BQU02OUMsUUFBTixHQUFnQjlnQixLQUFLMWlDLE1BQUwsR0FBWSxLQUFLMmhDLFFBQUwsQ0FBYzMvQixLQUExQyxHQUFpRDBnQyxLQUFLM2lDLEtBQUwsR0FBVyxLQUFLNGhDLFFBQUwsQ0FBYzMvQixLQUR2RjtBQUFBLFlBRUlqQyxRQUFRa2pELE9BQU9sakQsS0FBUCxFQUZaO0FBQUEsWUFHSWdrRCxpQkFBaUIsQ0FBQ0YsU0FBUy8zQyxNQUFULEdBQWtCSyxJQUFsQixHQUF1QmczQyxVQUF4QixJQUFvQ3BqRCxLQUh6RDtBQUlBLGFBQUtoSCxDQUFMLENBQU9nQyxHQUFQLENBQ0UsQ0FERixFQUNJLENBREosRUFDTSxDQUROLEVBRUUsQ0FGRixFQUVJLENBRkosRUFFTSxDQUZOLEVBR0UzRCxFQUFFLENBQUYsSUFBS3NzRCxhQUFXNXBELEtBQUt5VSxHQUFMLENBQVN2SCxLQUFULENBSGxCLEVBR2tDNVAsRUFBRSxDQUFGLElBQUtzc0QsYUFBVzVwRCxLQUFLMFUsR0FBTCxDQUFTeEgsS0FBVCxDQUhsRCxFQUdrRSxDQUhsRTtBQUlBLFlBQUkxSSxPQUFPLEtBQUtna0QsVUFBTCxDQUFnQixLQUFLdnBELENBQXJCLEVBQXdCLEVBQUNqQixHQUFHaXNELGlCQUFlRCxNQUFuQixFQUEyQnhzRCxHQUFHLENBQTlCLEVBQXhCLEVBQTBELEVBQUN5SSxPQUFPK2pELFNBQU9ELFNBQVM5akQsS0FBVCxFQUFQLEdBQXdCQSxLQUFoQyxFQUF1Q0MsUUFBUTZqRCxTQUFTN2pELE1BQVQsRUFBL0MsRUFBMUQsQ0FBWDtBQUNBMUIsZUFBT0EsS0FBS2dKLEdBQUwsQ0FBUyxVQUFDMU4sQ0FBRDtBQUFBLGlCQUFPLEVBQUM5QixHQUFHOEIsRUFBRTlCLENBQUYsR0FBSSxPQUFLNnBDLFFBQUwsQ0FBYzVoQyxLQUF0QixFQUE2QnpJLEdBQUcsSUFBRXNDLEVBQUV0QyxDQUFGLEdBQUksT0FBS3FxQyxRQUFMLENBQWMzaEMsTUFBcEQsRUFBUDtBQUFBLFNBQVQsQ0FBUDtBQUNBLGFBQUsyQixTQUFMLENBQWVyRCxJQUFmO0FBQ0g7QUFDRDJrRCxhQUFPbnVDLE1BQVA7QUFDRDtBQUNGLEc7O3FCQUVEZ3VDLE8sb0JBQVF6L0MsQyxFQUFHcEssSSxFQUFNO0FBQ2YsUUFBRyxLQUFLNkcsT0FBTCxDQUFhOFgsYUFBaEIsRUFBK0I7QUFDN0IsV0FBSzlYLE9BQUwsQ0FBYThYLGFBQWIsQ0FBMkI7QUFDekJ0VSxjQUFNLGVBRG1CO0FBRXpCMitCLGVBQU81K0IsQ0FGa0I7QUFHekI4K0Isb0JBQVlscEMsS0FBS2lmLE1BQUwsQ0FBWWdxQjtBQUhDLE9BQTNCO0FBS0Q7QUFDRixHOztxQkFFRDhoQixZLDJCQUFlO0FBQ2IsUUFBTWhpRCxRQUFRdkwsd0JBQWMwQixTQUFkLENBQXdCLEtBQUswUixJQUFMLENBQVU5SixLQUFsQyxFQUF5QyxLQUFLOEosSUFBTCxDQUFVN0osTUFBbkQsRUFBMkQsS0FBS1MsSUFBaEUsRUFBc0UsS0FBS0MsSUFBM0UsQ0FBZDtBQUNBLFFBQUcsQ0FBQyxLQUFLaWhDLFFBQU4sSUFBa0I3bkMsS0FBS00sR0FBTCxDQUFTLEtBQUt1bkMsUUFBTCxDQUFjMy9CLEtBQWQsR0FBb0JBLEtBQTdCLElBQW9DLElBQXpELEVBQStEO0FBQzdELFdBQUsyL0IsUUFBTCxHQUFnQixLQUFLejdCLElBQUwsQ0FBVTA3QixXQUFWLENBQXNCLEVBQUM1L0IsWUFBRCxFQUF0QixDQUFoQjtBQUNBLFVBQUcsS0FBS3NCLElBQUwsS0FBWSxNQUFmLEVBQXVCO0FBQ3JCLFlBQUcsS0FBS0EsSUFBTCxLQUFZLE9BQWYsRUFBd0I7QUFDdEIsZUFBS3ErQixRQUFMLENBQWNzaUIsT0FBZCxJQUF5QixNQUFJLEtBQUt0aUIsUUFBTCxDQUFjNWhDLEtBQTNDO0FBQ0EsZUFBSzRoQyxRQUFMLENBQWM1dUIsU0FBZCxDQUF3QixDQUF4QixLQUE4QixNQUFJLEtBQUs0dUIsUUFBTCxDQUFjNWhDLEtBQWhEO0FBQ0Q7QUFDRCxhQUFLNGhDLFFBQUwsQ0FBYzVoQyxLQUFkLElBQXVCLENBQXZCO0FBQ0Q7QUFDRCxXQUFLVSxJQUFMLEdBQVksS0FBS1YsS0FBTCxHQUFhLEtBQUs0aEMsUUFBTCxDQUFjNWhDLEtBQXZDO0FBQ0EsV0FBS1csSUFBTCxHQUFZLEtBQUtWLE1BQUwsR0FBYyxLQUFLMmhDLFFBQUwsQ0FBYzNoQyxNQUF4QztBQUNEO0FBQ0YsRzs7cUJBRUR5VSxJLG1CQUFPO0FBQUE7O0FBQ0wsU0FBS25SLElBQUwsR0FBWSxLQUFLc2dCLEdBQUwsQ0FBU2pILFdBQVQsQ0FBcUIsS0FBS3ZoQixDQUExQixDQUFaO0FBQ0EsU0FBS3dvQixHQUFMLENBQVN0SCxPQUFULENBQWlCLEtBQUtsaEIsQ0FBdEIsRUFDRXVjLElBREYsQ0FDTyxVQUFDelIsSUFBRCxFQUFTO0FBQ1osYUFBS0EsSUFBTCxHQUFZQSxJQUFaO0FBQ0EsYUFBSzJELElBQUwsR0FBWTBSLGNBQUltQixXQUFKLENBQWdCeFcsSUFBaEIsQ0FBWjtBQUNBLFVBQUcsT0FBSzVDLElBQUwsS0FBWSxNQUFmLEVBQXVCO0FBQ3JCLGVBQUt1RyxJQUFMLENBQVU5SixLQUFWLElBQW1CLENBQW5CO0FBQ0Q7QUFDRG1HLFdBQUtnK0MsY0FBTCxHQUNFdnNDLElBREYsQ0FDTyxPQUFLNHFDLGNBQUwsQ0FBb0JwZ0MsSUFBcEIsQ0FBeUIsTUFBekIsQ0FEUDtBQUVBamMsV0FBS3E4QixjQUFMLEdBQ0U1cUIsSUFERixDQUNPLE9BQUt5cUMsT0FBTCxDQUFhamdDLElBQWIsQ0FBa0IsTUFBbEIsQ0FEUDtBQUVBLGFBQUs2aEMsWUFBTDtBQUNBLGFBQUszaEQsVUFBTDtBQUNELEtBYkgsRUFjRWthLEtBZEYsQ0FjUSxVQUFDbFosQ0FBRCxFQUFNO0FBQ1Z4SSxjQUFRdWEsS0FBUixDQUFjLDRCQUEwQixPQUFLaGEsQ0FBTCxHQUFPLENBQWpDLENBQWQ7QUFDQVAsY0FBUXVhLEtBQVIsQ0FBYy9SLENBQWQ7QUFDQSxhQUFLaEIsVUFBTDtBQUNELEtBbEJIO0FBbUJELEc7O3FCQUVEekIsYSwwQkFBYzdFLEcsRUFBSztBQUNqQix5QkFBTTZFLGFBQU4sWUFBb0I3RSxHQUFwQjtBQUNBLFFBQUcsS0FBS21LLElBQVIsRUFBYztBQUNaLFdBQUs4OUMsWUFBTDtBQUNEO0FBQ0YsRzs7cUJBRURqd0MsTSxtQkFBT21HLE8sRUFBUztBQUFBOztBQUNkLFFBQUcsS0FBS2hVLElBQVIsRUFBYztBQUNaLFdBQUtBLElBQUwsQ0FBVTZOLE1BQVYsQ0FBaUI7QUFDZm93Qyx1QkFBZSxLQUFLNWlELE9BQUwsRUFEQTtBQUVmb2dDLGtCQUFVLEtBQUtBO0FBRkEsT0FBakIsRUFHR3hsQixPQUhILENBSUF4RSxJQUpBLENBSUssWUFBSztBQUNSLGVBQUtxckMsVUFBTDtBQUNBLGVBQUt2aEQsTUFBTDtBQUNBLGVBQUtVLFlBQUw7QUFDRCxPQVJEO0FBU0QsS0FWRCxNQVdLO0FBQ0gsV0FBS3JCLGVBQUw7QUFDQSxXQUFLcUIsWUFBTDtBQUNEO0FBQ0YsRzs7O0VBdE5tQ3RDLG1COztrQkFBakIwRixROzs7Ozs7Ozs7OztBQ1RyQjs7OztJQUVxQnVjLE07QUFFbkIsa0JBQVkwYSxTQUFaLEVBQXVCcDJCLEtBQXZCLEVBQThCO0FBQUE7O0FBQzVCLFNBQUtvMkIsU0FBTCxHQUFpQkEsU0FBakI7QUFDQSxTQUFLcDJCLEtBQUwsR0FBYUEsS0FBYjtBQUNBLFNBQUtnK0MsV0FBTCxHQUFtQixFQUFuQjtBQUNBNW5CLGNBQVVqbkIsSUFBVixDQUFlLHlRQVdiWixXQVhhLEVBQWY7QUFZQSxTQUFLOFUsS0FBTCxHQUFhK1MsVUFBVTVYLElBQVYsQ0FBZSxjQUFmLENBQWI7QUFDQSxTQUFLdkMsT0FBTCxHQUFlbWEsVUFBVTVYLElBQVYsQ0FBZSxVQUFmLENBQWY7QUFDQSxTQUFLc3VCLE1BQUwsR0FBYzFXLFVBQVU1WCxJQUFWLENBQWUsU0FBZixDQUFkOztBQUVBLFNBQUtuZSxLQUFMLEdBQWE7QUFDWDQ5QyxnQkFBVSxLQUFLQSxRQUFMLENBQWNsaUMsSUFBZCxDQUFtQixJQUFuQixDQURDO0FBRVhtaUMsZUFBUyxLQUFLQSxPQUFMLENBQWFuaUMsSUFBYixDQUFrQixJQUFsQjtBQUZFLEtBQWI7O0FBS0EsU0FBS3NILEtBQUwsQ0FBV29CLEVBQVgsQ0FBYyxTQUFkLEVBQXlCLEtBQUtwa0IsS0FBTCxDQUFXNjlDLE9BQXBDO0FBQ0EsU0FBS2ppQyxPQUFMLENBQWF3SSxFQUFiLENBQWdCLE9BQWhCLEVBQXlCLEtBQUtwa0IsS0FBTCxDQUFXNDlDLFFBQXBDO0FBQ0Q7O21CQUVEeGpELE8sc0JBQVU7QUFDUixTQUFLd2hCLE9BQUwsQ0FBYS9YLEdBQWIsQ0FBaUIsT0FBakIsRUFBMEIsS0FBSzdELEtBQUwsQ0FBVzQ5QyxRQUFyQztBQUNBLFNBQUs1NkIsS0FBTCxDQUFXbmYsR0FBWCxDQUFlLFNBQWYsRUFBMEIsS0FBSzdELEtBQUwsQ0FBVzY5QyxPQUFyQztBQUNELEc7O21CQUVERCxRLHFCQUFTaGhELEMsRUFBRztBQUNWQSxNQUFFNHVCLGNBQUY7QUFDQSxRQUFHLEtBQUswVCxVQUFMLEtBQWtCbGpDLFNBQXJCLEVBQWdDO0FBQzlCLFVBQUl5VixTQUFTLGFBQUU3VSxFQUFFNlUsTUFBSixDQUFiO0FBQ0EsVUFBRyxDQUFDQSxPQUFPakMsUUFBUCxDQUFnQixRQUFoQixDQUFKLEVBQStCO0FBQzdCLFlBQU03ZSxJQUFJOGdCLE9BQU8wTSxJQUFQLENBQVksU0FBWixDQUFWO0FBQ0EsWUFBR3h0QixFQUFFSSxNQUFMLEVBQWE7QUFDWDBnQixtQkFBUzlnQixDQUFUO0FBQ0QsU0FGRCxNQUdLO0FBQ0gsaUJBQU04Z0IsT0FBTzFnQixNQUFQLElBQWlCLENBQUMwZ0IsT0FBT2pDLFFBQVAsQ0FBZ0IsUUFBaEIsQ0FBeEIsRUFBbUQ7QUFDakRpQyxxQkFBUyxhQUFFQSxPQUFPLENBQVAsRUFBVS9ILFVBQVosQ0FBVDtBQUNEO0FBQ0Y7QUFDRjtBQUNELFVBQU1qSyxPQUFPZ1MsT0FBT2dNLElBQVAsQ0FBWSxNQUFaLENBQWI7QUFDQSxVQUFHaGUsU0FBT3pELFNBQVYsRUFBcUI7QUFDbkIsYUFBS2tqQyxVQUFMLENBQWdCemYsU0FBU2hnQixJQUFULENBQWhCO0FBQ0Q7QUFDRjtBQUNGLEc7O21CQUVEbytDLE8sc0JBQVU7QUFBQTs7QUFDUixRQUFHLEtBQUtyaUMsT0FBUixFQUFpQjtBQUNmLFVBQU1zaUMsYUFBYSxLQUFLQSxVQUFMLEdBQWtCMXVDLEtBQUtDLEdBQUwsRUFBckM7QUFDQUMsaUJBQVcsWUFBSztBQUNkLFlBQUd3dUMsZUFBZSxNQUFLQSxVQUF2QixFQUFtQztBQUNqQyxnQkFBS3RpQyxPQUFMLENBQWEsTUFBS3dILEtBQUwsQ0FBVyxDQUFYLEVBQWN6WCxLQUFkLENBQW9CbXdDLElBQXBCLEVBQWI7QUFDRDtBQUNGLE9BSkQsRUFJRyxJQUpIO0FBS0Q7QUFDRixHOzttQkFFRC8vQixVLHVCQUFXQyxPLEVBQVNDLFEsRUFBVTtBQUM1QixRQUFHLEtBQUs4aEMsV0FBTCxDQUFpQjVzRCxNQUFqQixJQUEyQjZxQixRQUFRLENBQVIsTUFBYSxLQUFLK2hDLFdBQUwsQ0FBaUIsQ0FBakIsQ0FBM0MsRUFBZ0U7QUFDOUQsV0FBS0EsV0FBTCxHQUFtQixFQUFuQjtBQUNBLFdBQUsvaEMsT0FBTCxDQUFhOU0sSUFBYixDQUFrQixFQUFsQjtBQUNEO0FBQ0QsUUFBTWl2QyxRQUFRLEVBQWQ7QUFDQSxTQUFJLElBQUk5ckQsSUFBRSxLQUFLMHJELFdBQUwsQ0FBaUI1c0QsTUFBM0IsRUFBbUNrQixJQUFFMnBCLFFBQVE3cUIsTUFBN0MsRUFBcUQsRUFBRWtCLENBQXZELEVBQTBEO0FBQ3hELFVBQU0yNkMsU0FBU2h4QixRQUFRM3BCLENBQVIsQ0FBZjtBQUNBOHJELFlBQU03ckQsSUFBTixDQUFXLCtCQUE2QjA2QyxPQUFPbnRDLElBQXBDLEdBQXlDLElBQXBEO0FBQ0VzK0MsWUFBTTdyRCxJQUFOLENBQVcsY0FBWDtBQUNFNnJELFlBQU03ckQsSUFBTixDQUFXLFVBQVEwNkMsT0FBTzk1QixRQUFQLENBQWdCcmEsSUFBaEIsQ0FBcUIsYUFBckIsQ0FBUixHQUE0QyxRQUF2RDtBQUNGc2xELFlBQU03ckQsSUFBTixDQUFXLE1BQVg7QUFDRjZyRCxZQUFNN3JELElBQU4sQ0FBVyxRQUFYO0FBQ0Q7QUFDRCxpQkFBRTZyRCxNQUFNdGxELElBQU4sQ0FBVyxFQUFYLENBQUYsRUFBa0IwVixRQUFsQixDQUEyQixLQUFLeU4sT0FBaEM7QUFDQSxTQUFLK2hDLFdBQUwsYUFBdUIvaEMsT0FBdkI7QUFDQSxRQUFHQyxhQUFXN2YsU0FBZCxFQUF5QjtBQUN2QixXQUFLeXdDLE1BQUwsQ0FBWTM5QixJQUFaLENBQWlCLEVBQWpCO0FBQ0QsS0FGRCxNQUdLO0FBQ0gsV0FBSzI5QixNQUFMLENBQVkzOUIsSUFBWixDQUFpQitNLFdBQVMsTUFBVCxHQUFnQixLQUFLbGMsS0FBdEM7QUFDRDtBQUNGLEc7Ozs7O2tCQTNGa0IwYixNOzs7Ozs7Ozs7OztBQ0ZyQjs7QUFDQTs7OztBQUNBOzs7Ozs7Ozs7Ozs7SUFFcUJ4YyxXOzs7QUFFbkIsdUJBQVl4RixPQUFaLEVBQXFCQyxLQUFyQixFQUE0QkMsTUFBNUIsRUFBb0NDLEtBQXBDLEVBQTJDb0YsR0FBM0MsRUFBZ0Q7QUFBQTs7QUFBQSxpREFDOUMsc0JBQU12RixPQUFOLEVBQWVDLEtBQWYsRUFBc0JDLE1BQXRCLEVBQThCQyxLQUE5QixDQUQ4Qzs7QUFHOUMsVUFBS3dHLEtBQUwsR0FBYSxFQUFiO0FBQ0EsVUFBS25GLEtBQUwsR0FBYSxJQUFJaXhDLEtBQUosRUFBYjtBQUNBLFVBQUtqeEMsS0FBTCxDQUFXbWpELFdBQVgsR0FBeUIsV0FBekI7QUFDQSxVQUFLaCtDLEtBQUwsQ0FBVzB6QyxTQUFYLEdBQXVCLFlBQUs7QUFDMUIsWUFBS3A2QyxLQUFMLEdBQWEsTUFBS3VCLEtBQUwsQ0FBV3ZCLEtBQXhCO0FBQ0EsWUFBS0MsTUFBTCxHQUFjLE1BQUtzQixLQUFMLENBQVd0QixNQUF6QjtBQUNBLFlBQUtVLElBQUwsR0FBWSxNQUFLVixNQUFMLEdBQVksTUFBS0QsS0FBakIsR0FBdUIsTUFBS1UsSUFBeEM7QUFDQSxZQUFLOEIsV0FBTCxHQUFtQixZQUFLO0FBQ3RCLGNBQUtsQixXQUFMLENBQWlCLE1BQUtDLEtBQXRCO0FBQ0EsY0FBS2EsWUFBTDtBQUNELE9BSEQ7QUFJQSxZQUFLRSxVQUFMO0FBQ0QsS0FURDtBQVVBLFVBQUtvRSxLQUFMLENBQVdpK0MsVUFBWCxHQUF3QixZQUFLO0FBQzNCLFlBQUtuaUQsV0FBTCxHQUFtQixZQUFLO0FBQ3RCLGNBQUtMLGtCQUFMO0FBQ0EsY0FBS0MsWUFBTDtBQUNELE9BSEQ7QUFJQSxZQUFLRSxVQUFMO0FBQ0QsS0FORDtBQU9BLGlCQUFFLE1BQUtmLEtBQVAsRUFBY3VwQixFQUFkLENBQWlCLE1BQWpCLEVBQXlCLE1BQUtwa0IsS0FBTCxDQUFXMHpDLFNBQXBDLEVBQStDdHZCLEVBQS9DLENBQWtELE9BQWxELEVBQTJELE1BQUtwa0IsS0FBTCxDQUFXaStDLFVBQXRFO0FBQ0EsVUFBS3BqRCxLQUFMLENBQVcrRCxHQUFYLEdBQWlCM0csZ0JBQU1DLFlBQU4sQ0FBbUIwRyxHQUFuQixDQUFqQjtBQXhCOEM7QUF5Qi9DOzt3QkFFRHhFLE8sc0JBQVU7QUFDUixpQkFBRSxLQUFLUyxLQUFQLEVBQWNnSixHQUFkLENBQWtCLE1BQWxCLEVBQTBCLEtBQUs3RCxLQUFMLENBQVcwekMsU0FBckMsRUFBZ0Q3dkMsR0FBaEQsQ0FBb0QsT0FBcEQsRUFBNkQsS0FBSzdELEtBQUwsQ0FBV2krQyxVQUF4RTtBQUNBLFNBQUtwakQsS0FBTCxDQUFXK0QsR0FBWCxHQUFpQixFQUFqQjtBQUNBLFdBQU8sS0FBSy9ELEtBQVo7QUFDQSx5QkFBTVQsT0FBTjtBQUNELEc7OztFQWxDc0NoQixtQjs7a0JBQXBCeUYsVzs7Ozs7Ozs7Ozs7QUNKckI7Ozs7SUFFcUJvNkIsZTtBQUNuQiwyQkFBWWlsQixHQUFaLEVBQWlCQyxVQUFqQixFQUE2QkMsU0FBN0IsRUFBd0NDLFFBQXhDLEVBQWtEQyxnQkFBbEQsRUFBb0U7QUFBQTs7QUFFbEUsUUFBTW4rQixVQUFVLElBQUlseEIsWUFBTTBTLE9BQVYsRUFBaEI7QUFDQXdlLFlBQVFFLFNBQVIsR0FBb0JweEIsWUFBTXF4QixZQUExQjtBQUNBSCxZQUFRdGxCLEtBQVIsR0FBZ0JxakQsR0FBaEI7QUFDQS85QixZQUFRcGUsV0FBUixHQUFzQixJQUF0Qjs7QUFFRDtBQUNDLFNBQUtvZSxPQUFMLEdBQWVBLE9BQWY7QUFDRCxTQUFLbytCLGVBQUwsR0FBdUJKLFVBQXZCO0FBQ0EsU0FBS0ssYUFBTCxHQUFxQkosU0FBckI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFLSyxhQUFMLEdBQXFCSixRQUFyQjtBQUNBbCtCLFlBQVFyZSxNQUFSLENBQWV4TixHQUFmLENBQW1CLElBQUUsS0FBS2lxRCxlQUExQixFQUEyQyxJQUFFLEtBQUtDLGFBQWxEOztBQUVBO0FBQ0EsU0FBS0UsbUJBQUwsR0FBMkJKLGdCQUEzQjs7QUFFQTtBQUNBLFNBQUtLLGtCQUFMLEdBQTBCLENBQTFCOztBQUVBO0FBQ0EsU0FBS0MsV0FBTCxHQUFtQixDQUFuQjtBQUNBOzs0QkFFRDU2QixNLG1CQUFPNjZCLFEsRUFBVTtBQUNmLFNBQUtGLGtCQUFMLElBQTJCRSxRQUEzQjtBQUNBLFdBQU0sS0FBS0Ysa0JBQUwsR0FBMEIsS0FBS0QsbUJBQXJDLEVBQTBEO0FBQ3hELFdBQUtDLGtCQUFMLElBQTJCLEtBQUtELG1CQUFoQztBQUNBLFFBQUUsS0FBS0UsV0FBUDtBQUNBLFVBQUcsS0FBS0EsV0FBTCxJQUFvQixLQUFLSCxhQUE1QixFQUNFLEtBQUtHLFdBQUwsR0FBbUIsQ0FBbkI7QUFDRixVQUFJRSxnQkFBZ0IsS0FBS0YsV0FBTCxHQUFpQixLQUFLTCxlQUExQztBQUNBLFdBQUtwK0IsT0FBTCxDQUFhOWEsTUFBYixDQUFvQmhVLENBQXBCLEdBQXdCeXRELGdCQUFjLEtBQUtQLGVBQTNDO0FBQ0EsVUFBSVEsYUFBYTFyRCxLQUFLOEYsS0FBTCxDQUFXLEtBQUt5bEQsV0FBTCxHQUFpQixLQUFLTCxlQUFqQyxDQUFqQjtBQUNBLFdBQUtwK0IsT0FBTCxDQUFhOWEsTUFBYixDQUFvQnhVLENBQXBCLEdBQXdCa3VELGFBQVcsS0FBS1AsYUFBeEM7QUFDRDtBQUNGLEc7OzRCQUVEcGtELE8sc0JBQVU7QUFDUixRQUFNOGpELE1BQU0sS0FBSy85QixPQUFMLENBQWF0bEIsS0FBekI7QUFDQXFqRCxRQUFJM2tELE1BQUosR0FBYTJrRCxJQUFJNWtELEtBQUosR0FBWSxDQUF6QjtBQUNBLFNBQUs2bUIsT0FBTCxDQUFhL2xCLE9BQWI7QUFDRCxHOzs7OztrQkE5Q2tCNitCLGU7Ozs7Ozs7Ozs7O0FDRnJCOztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7Ozs7Ozs7O0lBR3FCK2xCLHdCOzs7QUFFbkIsb0NBQVl2bEQsR0FBWixFQUFpQkMsR0FBakIsRUFBc0J5ZCxXQUF0QixFQUFtQzNaLElBQW5DLEVBQXlDO0FBQUE7O0FBQUEsaURBQ3ZDLGdDQUFNL0QsR0FBTixFQUFXQyxHQUFYLEVBQWdCeWQsWUFBWXhkLE9BQTVCLENBRHVDOztBQUV2QzFCLG9CQUFNUyxPQUFOLFFBQW9CLElBQUl1bUQsNkJBQUosQ0FBd0I5bkMsV0FBeEIsRUFBcUMzWixJQUFyQyxDQUFwQjtBQUZ1QztBQUd4Qzs7cUNBRURkLFcsd0JBQVlDLE0sRUFBUTtBQUNsQixXQUFPQSxPQUFPQSxNQUFQLENBQWM2RixRQUFkLENBQXVCeW1CLGFBQTlCO0FBQ0QsRzs7cUNBRUR4UixrQiwrQkFBbUI3YSxDLEVBQUc7QUFDcEIsUUFBTXluQyxXQUFXLGFBQUUsS0FBSzFxQyxPQUFQLENBQWpCO0FBQ0EsUUFBTTBMLFNBQVNnL0IsU0FBU2gvQixNQUFULEVBQWY7QUFDQSxTQUFLK1IsTUFBTCxDQUFZL2xCLENBQVosR0FBaUIsQ0FBQ3VMLEVBQUVxbkIsS0FBRixHQUFRNWUsT0FBT0ssSUFBaEIsSUFBc0IyK0IsU0FBUy9xQyxLQUFULEVBQXZCLEdBQXlDLENBQXpDLEdBQTJDLENBQTNEO0FBQ0EsU0FBSzhkLE1BQUwsQ0FBWXZtQixDQUFaLEdBQWdCLEVBQUUsQ0FBQytMLEVBQUVzbkIsS0FBRixHQUFRN2UsT0FBTzJuQixHQUFoQixJQUFxQnFYLFNBQVM5cUMsTUFBVCxFQUF2QixJQUEwQyxDQUExQyxHQUE0QyxDQUE1RDtBQUNBLFdBQU8sS0FBSzZkLE1BQVo7QUFDRCxHOzs7RUFqQm1EaStCLDZCOztrQkFBakMySix3Qjs7Ozs7Ozs7Ozs7QUNOckI7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7Ozs7Ozs7SUFHcUJFLHdCOzs7QUFFbkIsb0NBQVl6bEQsR0FBWixFQUFpQkMsR0FBakIsRUFBc0J5ZCxXQUF0QixFQUFtQzNaLElBQW5DLEVBQXlDO0FBQUE7O0FBQUEsaURBQ3ZDLGdDQUFNL0QsR0FBTixFQUFXQyxHQUFYLEVBQWdCeWQsWUFBWXhkLE9BQTVCLENBRHVDOztBQUV2QzFCLG9CQUFNUyxPQUFOLFFBQW9CLElBQUl1bUQsNkJBQUosQ0FBd0I5bkMsV0FBeEIsRUFBcUMzWixJQUFyQyxDQUFwQjtBQUZ1QztBQUd4Qzs7cUNBRURkLFcsd0JBQVlDLE0sRUFBUTtBQUNsQixXQUFPQSxPQUFPQSxNQUFQLENBQWM2RixRQUFkLENBQXVCMm1CLGFBQTlCO0FBQ0QsRzs7cUNBRUQxUixrQiwrQkFBbUI3YSxDLEVBQUc7QUFDcEIsUUFBTXluQyxXQUFXLGFBQUUsS0FBSzFxQyxPQUFQLENBQWpCO0FBQUEsUUFBa0MwTCxTQUFTZy9CLFNBQVNoL0IsTUFBVCxFQUEzQztBQUFBLFFBQ0U0dEIsVUFBVXIyQixFQUFFcTJCLE9BQUYsSUFBYXIyQixFQUFFczJCLGFBQUYsQ0FBZ0JELE9BRHpDO0FBQUEsUUFDa0RELFFBQVFDLFFBQVFsaUMsTUFBUixHQUFnQmtpQyxRQUFRLENBQVIsQ0FBaEIsR0FBNEIsQ0FBQyxLQUFLa3NCLFdBQUwsSUFBb0IsQ0FBQyxFQUFDbDdCLE9BQU8sQ0FBUixFQUFXQyxPQUFPLENBQWxCLEVBQUQsQ0FBckIsRUFBNkMsQ0FBN0MsQ0FEdEY7QUFBQSxRQUVFRCxRQUFRK08sTUFBTS9PLEtBRmhCO0FBQUEsUUFFdUJDLFFBQVE4TyxNQUFNOU8sS0FGckM7QUFHQSxTQUFLaTdCLFdBQUwsR0FBbUJsc0IsUUFBUWxpQyxNQUFSLEdBQWdCa2lDLE9BQWhCLEdBQXlCLEtBQUtrc0IsV0FBakQ7QUFDQSxTQUFLL25DLE1BQUwsQ0FBWS9sQixDQUFaLEdBQWlCLENBQUM0eUIsUUFBTTVlLE9BQU9LLElBQWQsSUFBb0IyK0IsU0FBUy9xQyxLQUFULEVBQXJCLEdBQXVDLENBQXZDLEdBQXlDLENBQXpEO0FBQ0EsU0FBSzhkLE1BQUwsQ0FBWXZtQixDQUFaLEdBQWdCLEVBQUUsQ0FBQ3F6QixRQUFNN2UsT0FBTzJuQixHQUFkLElBQW1CcVgsU0FBUzlxQyxNQUFULEVBQXJCLElBQXdDLENBQXhDLEdBQTBDLENBQTFEO0FBQ0EsV0FBTyxLQUFLNmQsTUFBWjtBQUNELEc7OztFQW5CbURnb0MsNkI7O2tCQUFqQ0Ysd0I7Ozs7Ozs7Ozs7Ozs7QUNOckI7O0FBQ0E7Ozs7Ozs7O0lBRXFCcGpDLFU7QUFFbkIsc0JBQVl6aUIsT0FBWixFQUFxQjA4QixTQUFyQixFQUFnQ3NwQixhQUFoQyxFQUErQ2o4QyxJQUEvQyxFQUE2RTtBQUFBOztBQUFBLFFBQXhCckcsS0FBd0IsdUVBQWxCLEVBQUNpZixPQUFPLE1BQUksR0FBWixFQUFrQjs7QUFBQTs7QUFDM0UsU0FBSytaLFNBQUwsR0FBaUJBLFNBQWpCO0FBQ0EsU0FBSzVpQyxDQUFMLEdBQVM0SixLQUFUO0FBQ0EsU0FBS3NpRCxhQUFMLEdBQXFCQSxhQUFyQjtBQUNBLFNBQUtqOEMsSUFBTCxHQUFZQSxJQUFaO0FBQ0EsU0FBS3EvQixNQUFMLEdBQWMsYUFBRSxVQUFGLEVBQWMsQ0FBZCxDQUFkO0FBQ0EsU0FBS3ZMLFlBQUwsR0FBb0IsSUFBSS80QixzQkFBSixjQUNmOUUsT0FEZTtBQUVsQlEsb0JBQWMsS0FBSzRvQyxNQUZEO0FBR2xCMW9DLHVCQUFpQixLQUFLMG9DLE1BQUwsQ0FBWXhtQyxVQUFaLENBQXVCLElBQXZCO0FBSEMsT0FBcEI7QUFLQSxTQUFLaWQsVUFBTCxHQUFrQixFQUFsQjtBQUNBLFNBQUksSUFBSWpuQixJQUFFLENBQVYsRUFBYUEsSUFBRW1SLElBQWYsRUFBcUIsRUFBRW5SLENBQXZCLEVBQTBCO0FBQ3hCLFVBQU1zTSxPQUFPLEtBQUs4Z0QsYUFBTCxDQUFtQnB0RCxDQUFuQixDQUFiO0FBQ0EsV0FBS2luQixVQUFMLENBQWdCaG5CLElBQWhCLGNBQ0txTSxJQURMO0FBRUU2TyxlQUFPbmIsQ0FGVDtBQUdFaWpCLGdCQUFRM1csS0FBSzFCLElBQUwsS0FBWSxpQkFIdEI7QUFJRXlpRCxpQkFBUyxJQUpYO0FBS0VDLG1CQUFXLElBTGI7QUFNRW5lLGVBQU83aUMsS0FBSzZpQyxLQUFMLElBQWNudkM7QUFOdkI7QUFRRDs7QUFFRCxTQUFLK04sS0FBTCxHQUFhO0FBQ1hna0IsY0FBUSxLQUFLQSxNQUFMLENBQVl0SSxJQUFaLENBQWlCLElBQWpCLENBREc7QUFFWGtpQyxnQkFBVSxrQkFBQ2hoRCxDQUFELEVBQU07QUFDZEEsVUFBRTR1QixjQUFGO0FBQ0EsWUFBRyxNQUFLMFQsVUFBUixFQUFvQjtBQUNsQixjQUFJM3JCLE9BQU8zVyxFQUFFNlUsTUFBYjtBQUNBLGlCQUFNOEIsUUFBUSxDQUFDQSxLQUFLaXNDLGFBQXBCLEVBQW1DO0FBQ2pDanNDLG1CQUFPQSxLQUFLN0osVUFBWjtBQUNEO0FBQ0QsZ0JBQUt3MUIsVUFBTCxDQUFnQjNyQixLQUFLaXNDLGFBQUwsQ0FBbUJweUMsS0FBbkM7QUFDRDtBQUNGO0FBWFUsS0FBYjtBQWFBLFNBQUsyb0IsU0FBTCxDQUFlM1IsRUFBZixDQUFrQixRQUFsQixFQUE0QixLQUFLcGtCLEtBQUwsQ0FBV2drQixNQUF2QztBQUNEOzt1QkFFRHJnQixPLHNCQUFVO0FBQ1IsV0FBTyxLQUFLUCxJQUFaO0FBQ0QsRzs7dUJBRURoSCxTLHNCQUFVaW1CLE0sRUFBUTtBQUNoQixTQUFLQSxNQUFMLEdBQWNBLE1BQWQ7QUFDQSxTQUFLMkIsTUFBTDtBQUNELEc7O3VCQUVENXBCLE8sc0JBQVU7QUFDUixTQUFLMjdCLFNBQUwsQ0FBZTVYLElBQWYsQ0FBb0IsR0FBcEIsRUFBeUJ0YSxHQUF6QixDQUE2QixPQUE3QixFQUFzQyxLQUFLN0QsS0FBTCxDQUFXNDlDLFFBQWpEO0FBQ0EsU0FBSzduQixTQUFMLENBQWVseUIsR0FBZixDQUFtQixRQUFuQixFQUE2QixLQUFLN0QsS0FBTCxDQUFXZ2tCLE1BQXhDO0FBQ0EsU0FBSytSLFNBQUwsQ0FBZWpuQixJQUFmLENBQW9CLEVBQXBCO0FBQ0EsU0FBSzJ6QixNQUFMLENBQVlscEMsTUFBWixHQUFxQixLQUFLa3BDLE1BQUwsQ0FBWW5wQyxLQUFaLEdBQW9CLENBQXpDO0FBQ0EsV0FBTyxLQUFLbXBDLE1BQVo7QUFDRCxHOzt1QkFFRHZpQixJLGlCQUFLcS9CLFMsRUFBVztBQUFBOztBQUNkLFNBQUs5bUIsT0FBTCxHQUFlLElBQWY7QUFDQSxRQUFNZSxVQUFVLEtBQUt0QyxZQUFMLENBQWtCNTRCLEtBQWxCLENBQXdCaWhELFNBQXhCLEVBQW1DQSxVQUFVL29DLE1BQVYsS0FBbUJ4YSxTQUFuQixHQUE4QnVqRCxVQUFVbnlDLEtBQXhDLEdBQStDbXlDLFVBQVUvb0MsTUFBNUYsRUFBb0csS0FBS3JqQixDQUFMLENBQU82b0IsS0FBUCxHQUFhLEdBQWpILEVBQXNILEdBQXRILENBQWhCO0FBQ0F3ZCxZQUFRNzlCLFFBQVIsR0FBbUIsVUFBQzhtQyxNQUFELEVBQVc7QUFDNUIsYUFBS2dkLFFBQUwsQ0FBY0YsU0FBZCxFQUF5QjljLE9BQU80RSxTQUFQLENBQWlCLFdBQWpCLENBQXpCO0FBQ0FrWSxnQkFBVXJxQyxNQUFWLEdBQW1CLElBQW5CO0FBQ0Fza0IsY0FBUXAvQixPQUFSO0FBQ0EsYUFBS3ErQixPQUFMLEdBQWUsS0FBZjtBQUNBOW9CLGNBQVFDLE9BQVIsR0FBa0JzQixJQUFsQixDQUF1QjtBQUFBLGVBQUssT0FBSzhTLE1BQUwsRUFBTDtBQUFBLE9BQXZCO0FBQ0QsS0FORDtBQU9ELEc7O3VCQUVEMDdCLFMsd0JBQVk7QUFDVixRQUFNci9DLFFBQVEsS0FBSzAxQixTQUFMLENBQWU0cEIsU0FBZixFQUFkO0FBQUEsUUFBMENyL0MsT0FBT0QsUUFBUSxLQUFLMDFCLFNBQUwsQ0FBZXg4QixNQUFmLEVBQXpEO0FBQUEsUUFBa0ZqRSxNQUFNLEVBQXhGO0FBQ0EseUJBQXFCLEtBQUs0akIsVUFBMUIsa0hBQXNDO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQSxVQUE5QnFtQyxTQUE4Qjs7QUFDcEMsVUFBR2xzRCxLQUFLOEMsR0FBTCxDQUFTb3BELFVBQVVsL0MsS0FBbkIsRUFBMEJBLEtBQTFCLElBQWlDaE4sS0FBSzZDLEdBQUwsQ0FBU3FwRCxVQUFVai9DLElBQW5CLEVBQXlCQSxJQUF6QixDQUFwQyxFQUFvRTtBQUNsRWhMLFlBQUlwRCxJQUFKLENBQVNxdEQsU0FBVDtBQUNEO0FBQ0Y7QUFDRCxXQUFPanFELEdBQVA7QUFDRCxHOzt1QkFFRDB1QixNLHFCQUFTO0FBQ1AsUUFBRyxDQUFDLEtBQUt5VSxPQUFOLElBQWlCLEtBQUtnSyxNQUF0QixJQUFnQyxLQUFLcGdCLE1BQXhDLEVBQWdEO0FBQzlDLFVBQUcsQ0FBQyxLQUFLdTlCLEtBQVQsRUFBZ0I7QUFDZCxhQUFLdHlDLE1BQUw7QUFDRDtBQUNELFVBQU1nZixTQUFTLEtBQUtvekIsU0FBTCxFQUFmO0FBQ0EsNEJBQXFCcHpCLE1BQXJCLHlIQUE2QjtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQUEsWUFBckJpekIsU0FBcUI7O0FBQzNCLFlBQUcsQ0FBQ0EsVUFBVXJxQyxNQUFkLEVBQXNCO0FBQ3BCLGVBQUtnTCxJQUFMLENBQVVxL0IsU0FBVjtBQUNBO0FBQ0Q7QUFDRjtBQUNGO0FBQ0YsRzs7dUJBRURFLFEscUJBQVNGLFMsRUFBV3JCLEcsRUFBSztBQUN2QnFCLGNBQVVyQixHQUFWLEdBQWdCQSxHQUFoQjtBQUNBcUIsY0FBVUEsU0FBVixDQUFvQjF3QyxHQUFwQixDQUF3QixrQkFBeEIsRUFBNEMsQ0FBQyxRQUFELEVBQVdxdkMsR0FBWCxFQUFlLEtBQWYsRUFBc0J6bEQsSUFBdEIsQ0FBMkIsRUFBM0IsQ0FBNUM7QUFDQThtRCxjQUFVQSxTQUFWLENBQW9CenZDLFdBQXBCLENBQWdDLFNBQWhDO0FBQ0QsRzs7dUJBRUR4QyxNLHFCQUFTO0FBQ1AsUUFBTTdCLFdBQVcsQ0FBQywwQkFBRCxDQUFqQjtBQUNBLFNBQUksSUFBSXhaLElBQUUsQ0FBVixFQUFhQSxJQUFFLEtBQUttUixJQUFwQixFQUEwQixFQUFFblIsQ0FBNUIsRUFBK0I7QUFDN0J3WixlQUFTdlosSUFBVCxDQUFjLENBQUMsaUhBQUQsRUFBb0hELElBQUUsQ0FBdEgsRUFBd0gsSUFBeEgsRUFBOEhBLElBQUUsQ0FBaEksRUFBbUksa0JBQW5JLEVBQXVKd0csSUFBdkosQ0FBNEosRUFBNUosQ0FBZDtBQUNEO0FBQ0RnVCxhQUFTdlosSUFBVCxDQUFjLFFBQWQ7QUFDQSxTQUFLNmpDLFNBQUwsQ0FBZTVGLE1BQWYsQ0FBc0Ixa0IsU0FBU2hULElBQVQsQ0FBYyxFQUFkLENBQXRCO0FBQ0EsUUFBTXVqQyxRQUFRLEtBQUtqRyxTQUFMLENBQWU1WCxJQUFmLENBQW9CLE9BQXBCLENBQWQ7QUFBQSxRQUE0QzdsQixPQUFPLEtBQUt5OUIsU0FBTCxDQUFlNVgsSUFBZixDQUFvQixhQUFwQixFQUFtQzlZLE1BQW5DLEdBQTRDMm5CLEdBQS9GO0FBQ0EsU0FBSSxJQUFJLzZCLE1BQUUsQ0FBVixFQUFhQSxNQUFFK3BDLE1BQU1qckMsTUFBckIsRUFBNkIsRUFBRWtCLEdBQS9CLEVBQWtDO0FBQ2hDLFVBQU1ncUMsT0FBTyxhQUFFRCxNQUFNL3BDLEdBQU4sQ0FBRixDQUFiO0FBQ0EsV0FBS2luQixVQUFMLENBQWdCam5CLEdBQWhCLEVBQW1CcXRELE9BQW5CLEdBQTZCcmpCLEtBQUs5ZCxJQUFMLENBQVUsVUFBVixDQUE3QjtBQUNBLFdBQUtqRixVQUFMLENBQWdCam5CLEdBQWhCLEVBQW1Cc3RELFNBQW5CLEdBQStCdGpCLEtBQUs5ZCxJQUFMLENBQVUsWUFBVixDQUEvQjtBQUNBLFdBQUtqRixVQUFMLENBQWdCam5CLEdBQWhCLEVBQW1Cb08sS0FBbkIsR0FBMkI0N0IsS0FBSzUyQixNQUFMLEdBQWMybkIsR0FBZCxHQUFrQjEwQixJQUE3QztBQUNBLFdBQUs0Z0IsVUFBTCxDQUFnQmpuQixHQUFoQixFQUFtQnFPLElBQW5CLEdBQTBCLEtBQUs0WSxVQUFMLENBQWdCam5CLEdBQWhCLEVBQW1Cb08sS0FBbkIsR0FBeUI0N0IsS0FBSzFpQyxNQUFMLEVBQW5EO0FBQ0EsVUFBRyxLQUFLMmYsVUFBTCxDQUFnQmpuQixHQUFoQixFQUFtQmlqQixNQUF0QixFQUE4QjtBQUM1QixhQUFLdXFDLFFBQUwsQ0FBYyxLQUFLdm1DLFVBQUwsQ0FBZ0JqbkIsR0FBaEIsQ0FBZCxFQUFrQyxLQUFLaW5CLFVBQUwsQ0FBZ0JqbkIsR0FBaEIsRUFBbUIyTSxHQUFyRDtBQUNEO0FBQ0QsVUFBTXFULEtBQUtncUIsS0FBSzlkLElBQUwsQ0FBVSxHQUFWLENBQVg7QUFDQSxXQUFJLElBQUloc0IsSUFBRSxDQUFWLEVBQWFBLElBQUU4ZixHQUFHbGhCLE1BQWxCLEVBQTBCLEVBQUVvQixDQUE1QixFQUErQjtBQUM3QixZQUFNaEMsSUFBSThoQixHQUFHOWYsQ0FBSCxDQUFWO0FBQ0FoQyxVQUFFcXZELGFBQUYsR0FBa0IsS0FBS3RtQyxVQUFMLENBQWdCam5CLEdBQWhCLENBQWxCO0FBQ0Q7QUFDRjtBQUNELFNBQUs4akMsU0FBTCxDQUFlNVgsSUFBZixDQUFvQixHQUFwQixFQUF5QmlHLEVBQXpCLENBQTRCLE9BQTVCLEVBQXFDLEtBQUtwa0IsS0FBTCxDQUFXNDlDLFFBQWhEO0FBQ0EsU0FBS2dDLEtBQUwsR0FBYSxJQUFiO0FBQ0QsRzs7Ozs7a0JBL0hrQjlqQyxVOzs7Ozs7Ozs7OztBQ0hyQjs7QUFDQTs7Ozs7Ozs7Ozs7O0lBRXFCK2pDLGM7OztBQUVuQiwwQkFBWXBtRCxHQUFaLEVBQWlCQyxHQUFqQixFQUFzQkMsT0FBdEIsRUFBK0I7QUFBQTs7QUFBQSxpREFDN0IsMkJBQU1GLEdBQU4sRUFBV0MsR0FBWCxDQUQ2Qjs7QUFHN0IsVUFBS0MsT0FBTCxHQUFlQSxPQUFmO0FBQ0EsVUFBS3FHLEtBQUwsR0FBYTtBQUNYOUMsZUFBUyxNQUFLQSxPQUFMLENBQWF3ZSxJQUFiO0FBREUsS0FBYjtBQUdBLGlCQUFFLE1BQUsvaEIsT0FBUCxFQUFnQnlxQixFQUFoQixDQUFtQixzQkFBbkIsRUFBMkMsTUFBS3BrQixLQUFMLENBQVc5QyxPQUF0RDtBQUNBLGlCQUFFLE1BQUt4RCxHQUFQLEVBQVkwcUIsRUFBWixDQUFlLFVBQWYsRUFBMkIsTUFBS3BrQixLQUFMLENBQVc5QyxPQUF0QztBQVI2QjtBQVM5Qjs7MkJBRUQ5QyxPLHNCQUFVO0FBQ1IsaUJBQUUsS0FBS1QsT0FBUCxFQUFnQmtLLEdBQWhCLENBQW9CLHNCQUFwQixFQUE0QyxLQUFLN0QsS0FBTCxDQUFXOUMsT0FBdkQ7QUFDQSxpQkFBRSxLQUFLeEQsR0FBUCxFQUFZbUssR0FBWixDQUFnQixVQUFoQixFQUE0QixLQUFLN0QsS0FBTCxDQUFXOUMsT0FBdkM7QUFDRCxHOzs7RUFoQnlDaEIsd0I7O2tCQUF2QjJqRCxjOzs7Ozs7Ozs7Ozs7O0FDSHJCOzs7O0lBRXFCNW9CLEk7T0F5Qlo2b0IsYSwwQkFBYzFtQyxJLEVBQU00dkIsUyxFQUFXejlCLEssRUFBTztBQUMzQyxRQUFHQSxLQUFILEVBQVU7QUFDUjZOLFdBQUsxSixRQUFMLENBQWNzNUIsU0FBZDtBQUNELEtBRkQsTUFHSztBQUNINXZCLFdBQUt0SixXQUFMLENBQWlCazVCLFNBQWpCO0FBQ0Q7QUFDRixHOztPQUVNK1csaUIsOEJBQWtCM21DLEksRUFBTTRtQyxhLEVBQWV6MEMsSyxFQUFPO0FBQ25ELFFBQUdBLEtBQUgsRUFBVTtBQUNSNk4sV0FBS3FFLElBQUwsQ0FBVXVpQyxhQUFWLEVBQXlCejBDLEtBQXpCO0FBQ0QsS0FGRCxNQUdLO0FBQ0g2TixXQUFLNm1DLFVBQUwsQ0FBZ0JELGFBQWhCO0FBQ0Q7QUFDRixHOztPQUVNemtCLFkseUJBQWFsRixRLEVBQVVscUIsRSxFQUFJdlAsQyxFQUFHcEssSSxFQUFNO0FBQ3pDLHlCQUFtQjZqQyxRQUFuQixrSEFBNkI7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBLFVBQXJCNWlCLE9BQXFCOztBQUMzQixVQUFHQSxRQUFRdEgsRUFBUixDQUFILEVBQWdCO0FBQ2RzSCxnQkFBUXRILEVBQVIsRUFBWXZQLENBQVosRUFBZXBLLElBQWY7QUFDRCxPQUZELE1BR0ssSUFBR2loQixRQUFRekMsYUFBWCxFQUEwQjtBQUM3QnlDLGdCQUFRekMsYUFBUixDQUFzQjdFLEVBQXRCLEVBQTBCdlAsQ0FBMUIsRUFBNkJwSyxJQUE3QjtBQUNEO0FBQ0Y7QUFDRixHOztPQUVNOHBCLFcsd0JBQVluUSxFLEVBQUlpcUIsVyxFQUFheDVCLEMsRUFBR3BLLEksRUFBTTtBQUMzQ3lrQyxTQUFLc0UsWUFBTCxDQUFrQm5GLFlBQVlqcUIsRUFBWixDQUFsQixFQUFtQ0EsRUFBbkMsRUFBdUN2UCxDQUF2QyxFQUEwQ3BLLElBQTFDO0FBQ0QsRzs7T0FFTTB0RCxlLDRCQUFnQnRqRCxDLEVBQUc7QUFDeEJBLE1BQUU0dUIsY0FBRjtBQUNBLFFBQUcsQ0FBQyxLQUFLcFMsSUFBTCxDQUFVNUosUUFBVixDQUFtQixVQUFuQixDQUFKLEVBQW9DO0FBQ2xDeW5CLFdBQUszYSxXQUFMLENBQWlCLEtBQUtuUSxFQUF0QixFQUEwQixLQUFLaXFCLFdBQS9CLEVBQTRDeDVCLENBQTVDO0FBQ0Q7QUFDRixHOztPQUVNdWpELGdCLDZCQUFpQnZqRCxDLEVBQUc7QUFDekJxNkIsU0FBSzNhLFdBQUwsQ0FBaUIsS0FBS25RLEVBQXRCLEVBQTBCLEtBQUtpcUIsV0FBL0IsRUFBNEN4NUIsQ0FBNUMsRUFBK0NBLEVBQUU2VSxNQUFGLENBQVNsRyxLQUF4RDtBQUNELEc7O09BRU02MEMsZSw0QkFBZ0J4akQsQyxFQUFHO0FBQ3hCQSxNQUFFNHVCLGNBQUY7QUFDQXlMLFNBQUszYSxXQUFMLENBQWlCLEtBQUtuUSxFQUF0QixFQUEwQixLQUFLaXFCLFdBQS9CLEVBQTRDeDVCLENBQTVDO0FBQ0QsRzs7QUFFRDs7O2lCQUNBODVCLFEsdUJBQVc7QUFDVCxXQUFPLElBQVA7QUFDRCxHOztpQkFFREMsVSx5QkFBYTtBQUNYLFdBQU8sSUFBUDtBQUNELEc7O2lCQUVEQyxTLHdCQUFZO0FBQ1YsV0FBTyxJQUFQO0FBQ0QsRzs7aUJBRURDLFEsdUJBQVc7QUFDVCxXQUFPLElBQVA7QUFDRCxHOztpQkFFREMsVywwQkFBYztBQUNaLFdBQU8sRUFBUDtBQUNELEc7O2lCQUVEVixXLHdCQUFZanFCLEUsRUFBSTtBQUNkLFdBQU8sS0FBS2txQixRQUFaO0FBQ0QsRztBQUNEOztpQkFFQUMsUyxzQkFBVUQsUSxFQUFVbHFCLEUsRUFBSXZQLEMsRUFBR3BLLEksRUFBTXk2QyxFLEVBQUk7QUFBQTs7QUFDbkMsU0FBSzVrQixRQUFMLENBQWNsYyxFQUFkLElBQW9CO0FBQ2xCZ0QsaUJBQVcsSUFBSUMsSUFBSixHQUFXaXhDLE9BQVg7QUFETyxLQUFwQjtBQUdBL3dDLGVBQVcsWUFBSztBQUNkLFVBQU1ILFlBQVksSUFBSUMsSUFBSixHQUFXaXhDLE9BQVgsRUFBbEI7QUFBQSxVQUF3Q0MsVUFBVSxNQUFLajRCLFFBQUwsQ0FBY2xjLEVBQWQsQ0FBbEQ7QUFDQSxVQUFHbTBDLFdBQVdueEMsWUFBVW14QyxRQUFRbnhDLFNBQWxCLElBQTZCODlCLEVBQTNDLEVBQStDO0FBQzdDaFcsYUFBS3NFLFlBQUwsQ0FBa0JsRixRQUFsQixFQUE0QmxxQixFQUE1QixFQUFnQ3ZQLENBQWhDLEVBQW1DcEssSUFBbkM7QUFDQSxlQUFPLE1BQUs2MUIsUUFBTCxDQUFjbGMsRUFBZCxDQUFQO0FBQ0Q7QUFDRixLQU5ELEVBTUc4Z0MsRUFOSDtBQU9ELEc7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztpQkFFQXNULFMsc0JBQVU1UixJLEVBQU02UixLLEVBQU87QUFDckIsUUFBTUMsUUFBUSxFQUFkOztBQURxQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQUEsVUFFYjduRCxJQUZhOztBQUduQjRuRCxZQUFNNW5ELElBQU4sSUFBYyxFQUFkOztBQUhtQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQUEsWUFJWFQsR0FKVzs7QUFLakJzb0QsY0FBTXZ1RCxJQUFOLENBQ0UsSUFBSXlkLE9BQUosQ0FBWSxVQUFDQyxPQUFELEVBQVVrYSxNQUFWLEVBQW9CO0FBQzlCbDZCLGtCQUFFMGdCLEdBQUYsQ0FBTW5ZLEdBQU4sRUFBVyxVQUFDM0YsSUFBRCxFQUFTO0FBQ2xCZ3VELGtCQUFNNW5ELElBQU4sRUFBWTFHLElBQVosQ0FBaUIsRUFBQ2lHLFFBQUQsRUFBTTNGLFVBQU4sRUFBakI7QUFDQW9kO0FBQ0QsV0FIRCxFQUdHeWxCLElBSEgsQ0FHUSxVQUFDLy9CLEdBQUQsRUFBUTtBQUNkdzBCLG1CQUFPeDBCLEdBQVA7QUFDRCxXQUxEO0FBTUQsU0FQRCxDQURGO0FBTGlCOztBQUluQiw0QkFBZXE1QyxLQUFLLzFDLElBQUwsQ0FBZix5SEFBMkI7QUFBQTs7QUFBQTs7QUFBQTtBQVcxQjtBQWZrQjs7QUFFckIsMEJBQWdCK0gsT0FBT0MsSUFBUCxDQUFZK3RDLElBQVosQ0FBaEIseUhBQW1DO0FBQUE7O0FBQUE7O0FBQUE7QUFjbEM7QUFDRCxXQUFPaC9CLFFBQVFpRyxHQUFSLENBQVk2cUMsS0FBWixDQUFQO0FBQ0QsRzs7aUJBRURDLFcsd0JBQVluVixPLEVBQVNwekMsRyxFQUFLO0FBQ3hCQSxVQUFNQSxJQUFJRSxPQUFKLENBQVksS0FBWixFQUFtQixHQUFuQixDQUFOO0FBQ0EsUUFBR0YsSUFBSWdhLE1BQUosQ0FBVyxDQUFYLE1BQWdCLEdBQWhCLElBQXVCaGEsSUFBSSthLFdBQUosR0FBa0JrSSxNQUFsQixDQUF5QixPQUF6QixNQUFvQyxDQUE5RCxFQUFpRTtBQUMvRG13QixnQkFBVUEsUUFBUWx6QyxPQUFSLENBQWdCLEtBQWhCLEVBQXVCLEdBQXZCLENBQVY7QUFDQSxVQUFNbEYsSUFBSW80QyxRQUFRb1YsV0FBUixDQUFvQixHQUFwQixDQUFWO0FBQ0F4b0QsWUFBTSxDQUFDLENBQUNoRixDQUFELEdBQUlvNEMsUUFBUXg0QixNQUFSLENBQWUsQ0FBZixFQUFrQjVmLElBQUUsQ0FBcEIsQ0FBSixHQUE0QixFQUE3QixJQUFpQ2dGLEdBQXZDOztBQUVBLFVBQU15b0QsUUFBUXpvRCxJQUFJQyxLQUFKLENBQVUsR0FBVixDQUFkO0FBQ0FELFlBQU0sRUFBTjtBQUNBLDRCQUFnQnlvRCxLQUFoQix5SEFBdUI7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBLFlBQWZDLElBQWU7O0FBQ3JCLFlBQUdBLFNBQU8sR0FBVixFQUFlLENBQ2QsQ0FERCxNQUVLLElBQUdBLFNBQU8sSUFBVixFQUFnQjtBQUNuQixjQUFHMW9ELElBQUlwSCxNQUFKLElBQWMsRUFBRW9ILElBQUlwSCxNQUFKLEtBQWEsQ0FBYixJQUFrQm9ILElBQUksQ0FBSixNQUFTLEVBQTdCLENBQWpCLEVBQW1EO0FBQ2pEQSxnQkFBSXdqQyxHQUFKO0FBQ0Q7QUFDRixTQUpJLE1BS0E7QUFDSHhqQyxjQUFJakcsSUFBSixDQUFTMnVELElBQVQ7QUFDRDtBQUNGO0FBQ0Qxb0QsWUFBTUEsSUFBSU0sSUFBSixDQUFTLEdBQVQsQ0FBTjtBQUNEOztBQUVELFdBQU9OLEdBQVA7QUFDRCxHOztpQkFFRDJvRCxhLDBCQUFjM3BELEMsRUFBRztBQUNmLFFBQU03QixNQUFNLEVBQVo7QUFDQSwwQkFBZ0JxTCxPQUFPQyxJQUFQLENBQVl6SixDQUFaLENBQWhCLHlIQUFnQztBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQUEsVUFBeEJ5QixLQUF3Qjs7QUFDOUJ0RCxVQUFJcEQsSUFBSixDQUFTLENBQUMwRyxLQUFELEVBQU8sSUFBUCxFQUFhekIsRUFBRXlCLEtBQUYsQ0FBYixFQUFzQixHQUF0QixFQUEyQkgsSUFBM0IsQ0FBZ0MsRUFBaEMsQ0FBVDtBQUNEO0FBQ0QsV0FBT25ELElBQUltRCxJQUFKLENBQVMsR0FBVCxDQUFQO0FBQ0QsRzs7aUJBRURzb0QsZSw4QkFBa0I7QUFDaEIsUUFBRyxLQUFLM3NCLEtBQVIsRUFBZTtBQUNiLFVBQUcvZ0MsS0FBS00sR0FBTCxDQUFTLEtBQUt5Z0MsS0FBTCxDQUFXOTZCLEtBQVgsR0FBaUIsS0FBS29nQixlQUFMLENBQXFCcGdCLEtBQXJCLEVBQTFCLElBQXdELENBQXhELElBQTZEakcsS0FBS00sR0FBTCxDQUFTLEtBQUt5Z0MsS0FBTCxDQUFXNzZCLE1BQVgsR0FBa0IsS0FBS21nQixlQUFMLENBQXFCbmdCLE1BQXJCLEVBQTNCLElBQTBELENBQTFILEVBQTZIO0FBQzNILGFBQUt5bkQsUUFBTDtBQUNEO0FBQ0QxeEMsaUJBQVcsS0FBS3l4QyxlQUFMLENBQXFCcmxDLElBQXJCLENBQTBCLElBQTFCLENBQVgsRUFBNEMsR0FBNUM7QUFDRDtBQUNGLEc7O2lCQUVEc2xDLFEsdUJBQVc7QUFDVCxTQUFLNXNCLEtBQUwsQ0FBVzk2QixLQUFYLEdBQW1CLEtBQUtvZ0IsZUFBTCxDQUFxQnBnQixLQUFyQixFQUFuQjtBQUNBLFNBQUs4NkIsS0FBTCxDQUFXNzZCLE1BQVgsR0FBb0IsS0FBS21nQixlQUFMLENBQXFCbmdCLE1BQXJCLEVBQXBCO0FBQ0QsRzs7aUJBRUR1bUMsUyxzQkFBVWh4QixJLEVBQU07QUFDZCxXQUFPQSxLQUFLelcsT0FBTCxDQUFhLHNCQUFiLEVBQXFDLFVBQUM0b0QsRUFBRCxFQUFJQyxFQUFKO0FBQUEsYUFBVSxjQUFHQSxFQUFILENBQVY7QUFBQSxLQUFyQyxDQUFQO0FBQ0QsRzs7aUJBRURDLG9CLG1DQUF1QjtBQUFBOztBQUNyQixRQUFHLEtBQUs1ekIsY0FBTCxJQUF1QixLQUFLQSxjQUFMLENBQW9CNnpCLFVBQTlDLEVBQTBEO0FBQ3hELFVBQUlsc0MsU0FBUyxJQUFiOztBQUR3RDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQUEsWUFFaERtc0MsS0FGZ0Q7O0FBR3RELFlBQU1qc0IsT0FBT2lzQixNQUFNLENBQU4sQ0FBYjtBQUNBLFlBQU1uRCxNQUFNLElBQUlwUyxLQUFKLEVBQVo7QUFDQW9TLFlBQUlsUyxPQUFKLEdBQWM7QUFBQSxpQkFBSyxPQUFLemUsY0FBTCxDQUFvQjZ6QixVQUFwQixDQUErQmhzQixJQUEvQixDQUFMO0FBQUEsU0FBZDtBQUNBOG9CLFlBQUl0L0MsR0FBSixHQUFVdzJCLEtBQUs1OEIsSUFBZjtBQU5zRDs7QUFFeEQsNEJBQWlCLEtBQUs4b0QsTUFBdEIseUhBQThCO0FBQUE7O0FBQUE7O0FBQUE7QUFLN0I7QUFDRjtBQUNGLEc7O0FBRUQsZ0JBQVk1bkMsZUFBWixFQUE2QjdkLE1BQTdCLEVBQWtEO0FBQUE7O0FBQUEsUUFBYjhlLFFBQWEsdUVBQUosRUFBSTs7QUFBQTs7QUFDaEQsU0FBSzBOLFFBQUwsR0FBZ0IsRUFBaEI7QUFDQSxTQUFLcm9CLEtBQUwsR0FBYTtBQUNYZ2hELGdCQUFVLEtBQUtBLFFBQUwsQ0FBY3RsQyxJQUFkLENBQW1CLElBQW5CO0FBREMsS0FBYjtBQUdBLFNBQUtoQyxlQUFMLEdBQXVCLGFBQUVBLGVBQUYsQ0FBdkI7QUFDQSxTQUFLNm5DLEtBQUwsR0FBYSxtQkFBbUIvakQsSUFBbkIsQ0FBd0IwTixVQUFVQyxTQUFsQyxLQUFnRCxDQUFDeGMsT0FBTzZ5RCxRQUFyRTtBQUNBLFNBQUs5bkMsZUFBTCxDQUFxQjVLLElBQXJCLENBQTBCLCtCQUE2QixLQUFLeXlDLEtBQUwsR0FBWSxFQUFaLEdBQWdCLDRCQUE3QyxJQUEyRSw0QkFBckc7O0FBRUEsU0FBS250QixLQUFMLEdBQWEsS0FBSzFhLGVBQUwsQ0FBcUJ5RSxJQUFyQixDQUEwQixRQUExQixFQUFvQyxDQUFwQyxDQUFiO0FBQ0EsUUFBRyxLQUFLaVcsS0FBTCxDQUFXSSxhQUFYLENBQXlCaXRCLElBQTVCLEVBQWtDO0FBQ2hDLFdBQUtydEIsS0FBTCxDQUFXSSxhQUFYLENBQXlCaXRCLElBQXpCO0FBQ0Q7QUFDRCxRQUFHLEtBQUtGLEtBQVIsRUFBZTtBQUNiLG1CQUFFLEtBQUs3bkMsZUFBTCxDQUFxQixDQUFyQixFQUF3QlksYUFBeEIsQ0FBc0NDLFdBQXhDLEVBQXFENkosRUFBckQsQ0FBd0QsUUFBeEQsRUFBa0UsS0FBS3BrQixLQUFMLENBQVdnaEQsUUFBN0U7QUFDQSxXQUFLQSxRQUFMO0FBQ0ExeEMsaUJBQVcsS0FBS3l4QyxlQUFMLENBQXFCcmxDLElBQXJCLENBQTBCLElBQTFCLENBQVgsRUFBNEMsR0FBNUM7QUFDRDs7QUFFRCxTQUFLcWEsU0FBTCxHQUFpQixhQUFFLEtBQUszQixLQUFMLENBQVdpUCxlQUFYLENBQTJCenBDLElBQTdCLENBQWpCO0FBQ0EsU0FBS204QixTQUFMLENBQWVsbkIsR0FBZixDQUFtQixRQUFuQixFQUE2QixHQUE3QjtBQUNBLFNBQUtULElBQUwsR0FBWSxhQUFFLEtBQUtnbUIsS0FBTCxDQUFXaVAsZUFBWCxDQUEyQmoxQixJQUE3QixDQUFaO0FBQ0EsU0FBS3ZTLE1BQUwsR0FBY0EsTUFBZDtBQUNBLFNBQUt3NkIsUUFBTCxHQUFnQixFQUFoQjs7QUFFQSxRQUFNVyxTQUFTcmMsU0FBUzdMLElBQVQsR0FBZTZMLFNBQVNxYyxNQUF4QixHQUFnQyxLQUFLRixXQUFMLEdBQW1CRSxNQUFsRTtBQUNBLFFBQUkyWCxhQUFKO0FBQUEsUUFBVTZSLGNBQVY7QUFBQSxRQUFpQnRyQixjQUFqQjtBQUFBLFFBQXdCd3NCLHFCQUF4QjtBQUNBLFFBQUcsT0FBTy9tQyxRQUFQLEtBQWtCLFVBQXJCLEVBQWlDO0FBQy9CZzBCLGFBQU8sRUFBUDtBQUNBNlIsY0FBUTdsQyxVQUFSO0FBQ0F1YSxjQUFRLEVBQVI7QUFDQXdzQixxQkFBZWxCLE1BQU01bkQsSUFBckI7QUFDRCxLQUxELE1BTUs7QUFDSHM4QixjQUFRdmEsU0FBU3VhLEtBQVQsSUFBa0IsS0FBSzRCLFdBQUwsR0FBbUI1QixLQUE3QztBQUNBeVosYUFBTztBQUNMdGxDLGdCQUFRc1IsU0FBU3RSLE1BQVQsSUFBbUIsS0FBS3l0QixXQUFMLEdBQW1CenRCLE1BRHpDO0FBRUx5RixjQUFNLENBQUM2TCxTQUFTN0wsSUFBVCxJQUFpQixLQUFLZ29CLFdBQUwsR0FBbUJob0IsSUFBckMsQ0FGRDtBQUdMa29CLGdCQUFRQSxTQUFRLENBQUNBLE1BQUQsQ0FBUixHQUFrQjtBQUhyQixPQUFQO0FBS0EwcUIscUJBQWUvbUMsU0FBUy9oQixJQUF4QjtBQUNBNG5ELGNBQVEsRUFBUjtBQUNEO0FBQ0QsUUFBR2tCLFlBQUgsRUFBaUI7QUFDZixXQUFLM3JCLFNBQUwsQ0FBZXJtQixRQUFmLENBQXdCZ3lDLFlBQXhCO0FBQ0Q7QUFDRCxTQUFLbkIsU0FBTCxDQUFlNVIsSUFBZixFQUFxQjZSLEtBQXJCLEVBQTRCdHZDLElBQTVCLENBQWlDLFlBQUs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQUEsWUFDNUJoUyxLQUQ0Qjs7QUFFbEMsWUFBSXlpRCxVQUFVemlELE1BQU0xTSxJQUFwQjtBQUFBLFlBQTBCMkYsTUFBTStHLE1BQU0vRyxHQUF0QztBQUNBd3BELGtCQUFVQSxRQUFRdHBELE9BQVIsQ0FBZ0IsdUJBQWhCLEVBQXlDLFVBQUNyRyxDQUFELEVBQUk0dkQsRUFBSixFQUFVO0FBQzNELGlCQUFPLENBQUMsUUFBRCxFQUFXLE9BQUtsQixXQUFMLENBQWlCdm9ELEdBQWpCLEVBQXNCeXBELEVBQXRCLENBQVgsRUFBc0MsS0FBdEMsRUFBNkNucEQsSUFBN0MsQ0FBa0QsRUFBbEQsQ0FBUDtBQUNELFNBRlMsQ0FBVjtBQUdBLGlEQUE0QmtwRCxPQUE1QixlQUErQ3h6QyxRQUEvQyxDQUF3RCxPQUFLQyxJQUE3RDtBQU5rQzs7QUFDcEMsNEJBQWlCb3lDLE1BQU1uM0MsTUFBdkIseUhBQStCO0FBQUE7O0FBQUE7O0FBQUE7QUFNOUI7O0FBRUQsYUFBSzBzQixTQUFMLENBQWVqbkIsSUFBZixDQUFvQixPQUFLZ3hCLFNBQUwsQ0FBZTBnQixNQUFNMXhDLElBQU4sQ0FBVyxDQUFYLEVBQWN0YyxJQUE3QixDQUFwQjs7QUFFQSxhQUFLOHVELE1BQUwsR0FBYyxFQUFkO0FBQ0EsNEJBQWdCcHNCLEtBQWhCLHlIQUF1QjtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQUEsWUFBZkUsS0FBZTs7QUFDckIsZUFBS2tzQixNQUFMLENBQVlwdkQsSUFBWixDQUFpQixhQUFFLENBQUMsUUFBRCxFQUFXLE9BQUs0dUQsYUFBTCxDQUFtQjFyQixLQUFuQixDQUFYLEVBQXFDLEdBQXJDLEVBQTBDMzhCLElBQTFDLENBQStDLEVBQS9DLENBQUYsRUFBc0QwVixRQUF0RCxDQUErRCxPQUFLQyxJQUFwRSxDQUFqQjtBQUNEOztBQUVELFVBQUdveUMsTUFBTXhwQixNQUFOLENBQWEsQ0FBYixDQUFILEVBQW9CO0FBQ2xCLFlBQU1ocEIsT0FBT2dCLEtBQUt3eEMsTUFBTXhwQixNQUFOLENBQWEsQ0FBYixFQUFnQnhrQyxJQUFyQixDQUFiO0FBQ0EsZUFBSys2QixjQUFMLEdBQXNCdmYsS0FBSyxPQUFLK25CLFNBQVYsQ0FBdEI7QUFDRCxPQUhELE1BSUs7QUFDSCxlQUFLeEksY0FBTCxHQUFzQixFQUF0QjtBQUNEOztBQUVELGFBQUtzMEIsWUFBTCxHQUFvQixFQUFwQjtBQUNBLDRCQUFjLE9BQUtuckIsUUFBTCxFQUFkLHlIQUErQjtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQUEsWUFBdkJ2cUIsRUFBdUI7O0FBQzdCLGVBQUswMUMsWUFBTCxDQUFrQjExQyxFQUFsQixJQUF3QixPQUFLNHBCLFNBQUwsQ0FBZTVYLElBQWYsQ0FBb0IsTUFBSWhTLEVBQXhCLENBQXhCO0FBQ0EsZUFBS25NLEtBQUwsQ0FBV21NLEVBQVgsSUFBaUI4cUIsS0FBS2lwQixlQUFMLENBQXFCeGtDLElBQXJCLENBQTBCLEVBQUMwYSxhQUFhLE9BQUtBLFdBQUwsQ0FBaUIxYSxJQUFqQixDQUFzQixNQUF0QixDQUFkLEVBQTJDdlAsTUFBM0MsRUFBK0NpTixNQUFNLE9BQUt5b0MsWUFBTCxDQUFrQjExQyxFQUFsQixDQUFyRCxFQUExQixDQUFqQjtBQUNBLGVBQUswMUMsWUFBTCxDQUFrQjExQyxFQUFsQixFQUFzQmlZLEVBQXRCLENBQXlCLE9BQXpCLEVBQWtDLE9BQUtwa0IsS0FBTCxDQUFXbU0sRUFBWCxDQUFsQztBQUNEOztBQUVELGFBQUsyMUMsY0FBTCxHQUFzQixFQUF0QjtBQUNBLDZCQUFjLE9BQUtuckIsVUFBTCxFQUFkLGdJQUFpQztBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQUEsWUFBekJ4cUIsR0FBeUI7O0FBQy9CLGVBQUsyMUMsY0FBTCxDQUFvQjMxQyxHQUFwQixJQUEwQixPQUFLNHBCLFNBQUwsQ0FBZTVYLElBQWYsQ0FBb0IsTUFBSWhTLEdBQXhCLENBQTFCO0FBQ0Q7O0FBRUQsYUFBSzQxQyxhQUFMLEdBQXFCLEVBQXJCO0FBQ0EsNkJBQWMsT0FBS25yQixTQUFMLEVBQWQsZ0lBQWdDO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQSxZQUF4QnpxQixJQUF3Qjs7QUFDOUIsZUFBSzQxQyxhQUFMLENBQW1CNTFDLElBQW5CLElBQXlCLE9BQUs0cEIsU0FBTCxDQUFlNVgsSUFBZixDQUFvQixNQUFJaFMsSUFBeEIsQ0FBekI7QUFDQSxlQUFLbk0sS0FBTCxDQUFXbU0sSUFBWCxJQUFpQjhxQixLQUFLa3BCLGdCQUFMLENBQXNCemtDLElBQXRCLENBQTJCLEVBQUMwYSxhQUFhLE9BQUtBLFdBQUwsQ0FBaUIxYSxJQUFqQixDQUFzQixNQUF0QixDQUFkLEVBQTJDdlAsUUFBM0MsRUFBK0NpTixNQUFNLE9BQUsyb0MsYUFBTCxDQUFtQjUxQyxJQUFuQixDQUFyRCxFQUEzQixDQUFqQjtBQUNBLGVBQUs0MUMsYUFBTCxDQUFtQjUxQyxJQUFuQixFQUF1QmlZLEVBQXZCLENBQTBCLE9BQTFCLEVBQW1DLE9BQUtwa0IsS0FBTCxDQUFXbU0sSUFBWCxDQUFuQztBQUNEOztBQUVELGFBQUs2MUMsWUFBTCxHQUFvQixFQUFwQjtBQUNBLDZCQUFjLE9BQUt2ckIsUUFBTCxFQUFkLGdJQUErQjtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQUEsWUFBdkJ0cUIsSUFBdUI7O0FBQzdCLGVBQUs2MUMsWUFBTCxDQUFrQjcxQyxJQUFsQixJQUF3QixPQUFLNHBCLFNBQUwsQ0FBZTVYLElBQWYsQ0FBb0IsTUFBSWhTLElBQXhCLENBQXhCO0FBQ0EsZUFBS25NLEtBQUwsQ0FBV21NLElBQVgsSUFBaUI4cUIsS0FBS21wQixlQUFMLENBQXFCMWtDLElBQXJCLENBQTBCLEVBQUMwYSxhQUFhLE9BQUtBLFdBQUwsQ0FBaUIxYSxJQUFqQixDQUFzQixNQUF0QixDQUFkLEVBQTJDdlAsUUFBM0MsRUFBK0NpTixNQUFNLE9BQUs0b0MsWUFBTCxDQUFrQjcxQyxJQUFsQixDQUFyRCxFQUExQixDQUFqQjtBQUNBLGVBQUs2MUMsWUFBTCxDQUFrQjcxQyxJQUFsQixFQUFzQmlZLEVBQXRCLENBQXlCLFFBQXpCLEVBQW1DLE9BQUtwa0IsS0FBTCxDQUFXbU0sSUFBWCxDQUFuQztBQUNEOztBQUVELGFBQUs4MUMsWUFBTCxHQUFvQixFQUFwQjtBQUNBLDZCQUFjLE9BQUtwckIsUUFBTCxFQUFkLGdJQUErQjtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQUEsWUFBdkIxcUIsSUFBdUI7O0FBQzdCLGVBQUs4MUMsWUFBTCxDQUFrQjkxQyxJQUFsQixJQUF3QixPQUFLNHBCLFNBQUwsQ0FBZTVYLElBQWYsQ0FBb0IsTUFBSWhTLElBQXhCLENBQXhCO0FBQ0Q7O0FBRUQsYUFBSysxQyxZQUFMLEdBQW9CLENBQ2xCO0FBQ0VyaEQsYUFBSyxPQUFLZ2hELFlBRFo7QUFFRU0sZ0JBQVEsT0FBS0MsbUJBQUwsQ0FBeUIxbUMsSUFBekIsQ0FBOEIsTUFBOUI7QUFGVixPQURrQixFQUtsQjtBQUNFN2EsYUFBSyxPQUFLaWhELGNBRFo7QUFFRUssZ0JBQVEsT0FBS0UscUJBQUwsQ0FBMkIzbUMsSUFBM0IsQ0FBZ0MsTUFBaEM7QUFGVixPQUxrQixFQVNsQjtBQUNFN2EsYUFBSyxPQUFLa2hELGFBRFo7QUFFRUksZ0JBQVEsT0FBS0csb0JBQUwsQ0FBMEI1bUMsSUFBMUIsQ0FBK0IsTUFBL0I7QUFGVixPQVRrQixFQWFsQjtBQUNFN2EsYUFBSyxPQUFLb2hELFlBRFo7QUFFRUUsZ0JBQVEsT0FBS0ksbUJBQUwsQ0FBeUI3bUMsSUFBekIsQ0FBOEIsTUFBOUI7QUFGVixPQWJrQixDQUFwQjs7QUFtQkEsYUFBS3NhLFFBQUw7O0FBRUEsVUFBRyxPQUFLbjZCLE1BQVIsRUFBZ0I7QUFDZCxlQUFLQSxNQUFMO0FBQ0Q7O0FBRUQsYUFBS3NsRCxvQkFBTDtBQUNELEtBakZELEVBa0ZBcnJDLEtBbEZBLENBa0ZNLFVBQUN4Z0IsR0FBRDtBQUFBLGFBQVFsQixRQUFRdWEsS0FBUixDQUFjclosR0FBZCxDQUFSO0FBQUEsS0FsRk47QUFtRkQ7O2lCQUVEOEUsTyxzQkFBVTtBQUNSLFdBQU8sS0FBSzZuRCxZQUFaO0FBQ0EsMkJBQWMsS0FBS3ZyQixRQUFMLEVBQWQsZ0lBQStCO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQSxVQUF2QnZxQixFQUF1Qjs7QUFDN0IsV0FBSzAxQyxZQUFMLENBQWtCMTFDLEVBQWxCLEVBQXNCdEksR0FBdEIsQ0FBMEIsT0FBMUIsRUFBbUMsS0FBSzdELEtBQUwsQ0FBV21NLEVBQVgsQ0FBbkM7QUFDRDtBQUNELFdBQU8sS0FBSzAxQyxZQUFaO0FBQ0EsV0FBTyxLQUFLQyxjQUFaO0FBQ0EsMkJBQWMsS0FBS2xyQixTQUFMLEVBQWQsZ0lBQWdDO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQSxVQUF4QnpxQixJQUF3Qjs7QUFDOUIsV0FBSzQxQyxhQUFMLENBQW1CNTFDLElBQW5CLEVBQXVCdEksR0FBdkIsQ0FBMkIsT0FBM0IsRUFBb0MsS0FBSzdELEtBQUwsQ0FBV21NLElBQVgsQ0FBcEM7QUFDRDtBQUNELFdBQU8sS0FBSzQxQyxhQUFaO0FBQ0EsMkJBQWMsS0FBS3RyQixRQUFMLEVBQWQsZ0lBQStCO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQSxVQUF2QnRxQixJQUF1Qjs7QUFDN0IsV0FBSzYxQyxZQUFMLENBQWtCNzFDLElBQWxCLEVBQXNCdEksR0FBdEIsQ0FBMEIsUUFBMUIsRUFBb0MsS0FBSzdELEtBQUwsQ0FBV21NLElBQVgsQ0FBcEM7QUFDRDtBQUNELFdBQU8sS0FBSzYxQyxZQUFaOztBQUVBLEtBQUMsS0FBS3owQixjQUFMLENBQW9CbnpCLE9BQXJCLElBQWdDLEtBQUttekIsY0FBTCxDQUFvQm56QixPQUFwQixFQUFoQztBQUNBLFdBQU8sS0FBS216QixjQUFaOztBQUVBLFFBQUcsS0FBS2cwQixLQUFSLEVBQWU7QUFDYixtQkFBRSxLQUFLN25DLGVBQUwsQ0FBcUIsQ0FBckIsRUFBd0JZLGFBQXhCLENBQXNDQyxXQUF4QyxFQUFxRDFXLEdBQXJELENBQXlELFFBQXpELEVBQW1FLEtBQUs3RCxLQUFMLENBQVdnaEQsUUFBOUU7QUFDRDtBQUNELFNBQUt0bkMsZUFBTCxDQUFxQjVLLElBQXJCLENBQTBCLEVBQTFCO0FBQ0EsV0FBTyxLQUFLc2xCLEtBQVo7QUFDRCxHOztpQkFFRC9aLFksMkJBQWU7QUFDYixXQUFPLEtBQUswYixTQUFMLENBQWUsQ0FBZixDQUFQO0FBQ0QsRzs7aUJBRUQxSSxrQixpQ0FBcUI7QUFDbkIsV0FBTyxLQUFLM1QsZUFBTCxDQUFxQixDQUFyQixDQUFQO0FBQ0QsRzs7aUJBRUR3QixVLHVCQUFXekgsTyxFQUFTO0FBQ2xCLFNBQUs0aUIsUUFBTCxDQUFjbmtDLElBQWQsQ0FBbUJ1aEIsT0FBbkI7QUFDRCxHOztpQkFFRHVpQixRLHVCQUFXLENBRVYsQzs7T0FFTXdzQixlLDRCQUFnQnBwQyxJLEVBQU1qYSxRLEVBQVVxQixLLEVBQU9paUQsYSxFQUFlO0FBQzNELFFBQUdycEMsUUFBUUEsS0FBSyxDQUFMLENBQVgsRUFBb0I7QUFDbEIsVUFBTXNwQyxrQkFDRHZqRCxRQURDLEVBRURxQixLQUZDLENBQU47QUFJQSxXQUFJLElBQUk1SCxNQUFSLElBQWdCOHBELEVBQWhCLEVBQW9CO0FBQ2xCLFlBQUdBLEdBQUc3cEQsY0FBSCxDQUFrQkQsTUFBbEIsS0FBMkI2cEQsY0FBYzdwRCxNQUFkLENBQTlCLEVBQW1EO0FBQ2pENnBELHdCQUFjN3BELE1BQWQsRUFBb0J3Z0IsSUFBcEIsRUFBMEJzcEMsR0FBRzlwRCxNQUFILENBQTFCO0FBQ0Q7QUFDRjtBQUNGO0FBQ0YsRzs7aUJBRUR3cEQsbUIsZ0NBQW9CajJDLEUsRUFBSTNMLEssRUFBTztBQUM3QnkyQixTQUFLdXJCLGVBQUwsQ0FDRSxLQUFLWCxZQUFMLENBQWtCMTFDLEVBQWxCLENBREYsRUFFRTtBQUNFMGhCLGVBQVMsSUFEWDtBQUVFdkIsY0FBUSxLQUZWO0FBR0VqSyxjQUFRO0FBSFYsS0FGRixFQU9FN2hCLEtBUEYsRUFRRXkyQixLQUFLMHJCLGlCQVJQO0FBVUQsRzs7aUJBRUROLHFCLGtDQUFzQmwyQyxFLEVBQUkzTCxLLEVBQU87QUFDL0J5MkIsU0FBS3VyQixlQUFMLENBQ0UsS0FBS1YsY0FBTCxDQUFvQjMxQyxFQUFwQixDQURGLEVBRUU7QUFDRTBoQixlQUFTLElBRFg7QUFFRXZCLGNBQVEsS0FGVjtBQUdFakssY0FBUTtBQUhWLEtBRkYsRUFPRTdoQixLQVBGLEVBUUV5MkIsS0FBSzJyQixtQkFSUDtBQVVELEc7O2lCQUVETixvQixpQ0FBcUJuMkMsRSxFQUFJM0wsSyxFQUFPO0FBQzlCeTJCLFNBQUt1ckIsZUFBTCxDQUNFLEtBQUtULGFBQUwsQ0FBbUI1MUMsRUFBbkIsQ0FERixFQUVFO0FBQ0UwaEIsZUFBUyxJQURYO0FBRUV4TCxjQUFRLElBRlY7QUFHRTlXLGFBQU87QUFIVCxLQUZGLEVBT0UvSyxLQVBGLEVBUUV5MkIsS0FBSzRyQixrQkFSUDtBQVVELEc7O2lCQUVETixtQixnQ0FBb0JwMkMsRSxFQUFJM0wsSyxFQUFPO0FBQzdCeTJCLFNBQUt1ckIsZUFBTCxDQUNFLEtBQUtQLFlBQUwsQ0FBa0I5MUMsRUFBbEIsQ0FERixFQUVFO0FBQ0UwaEIsZUFBUyxJQURYO0FBRUV0aUIsYUFBTztBQUZULEtBRkYsRUFNRS9LLEtBTkYsRUFPRXkyQixLQUFLNnJCLGlCQVBQO0FBU0QsRzs7aUJBRUR0c0Isa0IsaUNBQXFCLENBRXBCLEM7O2lCQUVEMUksUSxxQkFBUzNoQixFLEVBQUkzTCxLLEVBQU87QUFDbEIsMkJBQWdCLEtBQUswaEQsWUFBckIsZ0lBQW1DO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQSxVQUEzQmptQixJQUEyQjs7QUFDakMsVUFBR0EsS0FBS3A3QixHQUFMLENBQVNzTCxFQUFULENBQUgsRUFBaUI7QUFDZjh2QixhQUFLa21CLE1BQUwsQ0FBWWgyQyxFQUFaLEVBQWdCM0wsS0FBaEI7QUFDQSxhQUFLZzJCLGtCQUFMLENBQXdCcnFCLEVBQXhCLEVBQTRCM0wsS0FBNUI7QUFDQTtBQUNEO0FBQ0Y7QUFDRixHOzs7OztBQXRka0J5MkIsSSxDQUVaMHJCLGlCLEdBQW9CO0FBQ3pCOTBCLFdBQVMsaUJBQUN6VSxJQUFELEVBQU83TixLQUFQO0FBQUEsV0FBZ0IwckIsS0FBSzZvQixhQUFMLENBQW1CMW1DLElBQW5CLEVBQXlCLFFBQXpCLEVBQW1DLENBQUM3TixLQUFwQyxDQUFoQjtBQUFBLEdBRGdCO0FBRXpCK2dCLFVBQVEsZ0JBQUNsVCxJQUFELEVBQU83TixLQUFQO0FBQUEsV0FBZ0IwckIsS0FBSzZvQixhQUFMLENBQW1CMW1DLElBQW5CLEVBQXlCLFFBQXpCLEVBQW1DN04sS0FBbkMsQ0FBaEI7QUFBQSxHQUZpQjtBQUd6QjhXLFVBQVEsZ0JBQUNqSixJQUFELEVBQU83TixLQUFQO0FBQUEsV0FBZ0IwckIsS0FBSzZvQixhQUFMLENBQW1CMW1DLElBQW5CLEVBQXlCLFVBQXpCLEVBQXFDLENBQUM3TixLQUF0QyxDQUFoQjtBQUFBO0FBSGlCLEM7QUFGUjByQixJLENBUVoyckIsbUIsR0FBc0I7QUFDM0IvMEIsV0FBUyxpQkFBQ3pVLElBQUQsRUFBTzdOLEtBQVA7QUFBQSxXQUFnQjByQixLQUFLNm9CLGFBQUwsQ0FBbUIxbUMsSUFBbkIsRUFBeUIsUUFBekIsRUFBbUMsQ0FBQzdOLEtBQXBDLENBQWhCO0FBQUEsR0FEa0I7QUFFM0IrZ0IsVUFBUSxnQkFBQ2xULElBQUQsRUFBTzdOLEtBQVA7QUFBQSxXQUFnQjByQixLQUFLNm9CLGFBQUwsQ0FBbUIxbUMsSUFBbkIsRUFBeUIsUUFBekIsRUFBbUM3TixLQUFuQyxDQUFoQjtBQUFBLEdBRm1CO0FBRzNCOFcsVUFBUSxnQkFBQ2pKLElBQUQsRUFBTzdOLEtBQVA7QUFBQSxXQUFnQjByQixLQUFLNm9CLGFBQUwsQ0FBbUIxbUMsSUFBbkIsRUFBeUIsVUFBekIsRUFBcUMsQ0FBQzdOLEtBQXRDLENBQWhCO0FBQUE7QUFIbUIsQztBQVJWMHJCLEksQ0FjWjRyQixrQixHQUFxQjtBQUMxQmgxQixXQUFTLGlCQUFDelUsSUFBRCxFQUFPN04sS0FBUDtBQUFBLFdBQWdCMHJCLEtBQUs2b0IsYUFBTCxDQUFtQjFtQyxJQUFuQixFQUF5QixRQUF6QixFQUFtQyxDQUFDN04sS0FBcEMsQ0FBaEI7QUFBQSxHQURpQjtBQUUxQkEsU0FBTyxlQUFDNk4sSUFBRCxFQUFPN04sTUFBUDtBQUFBLFdBQWdCNk4sS0FBSyxDQUFMLEVBQVE3TixLQUFSLEdBQWdCQSxNQUFoQztBQUFBLEdBRm1CO0FBRzFCOFcsVUFBUSxnQkFBQ2pKLElBQUQsRUFBTzdOLEtBQVA7QUFBQSxXQUFnQjByQixLQUFLOG9CLGlCQUFMLENBQXVCM21DLElBQXZCLEVBQTZCLFVBQTdCLEVBQXlDLENBQUM3TixLQUExQyxDQUFoQjtBQUFBO0FBSGtCLEM7QUFkVDByQixJLENBb0JaNnJCLGlCLEdBQW9CO0FBQ3pCajFCLFdBQVMsaUJBQUN6VSxJQUFELEVBQU83TixLQUFQO0FBQUEsV0FBZ0IwckIsS0FBSzZvQixhQUFMLENBQW1CMW1DLElBQW5CLEVBQXlCLFFBQXpCLEVBQW1DLENBQUM3TixLQUFwQyxDQUFoQjtBQUFBLEdBRGdCO0FBRXpCQSxTQUFPLGVBQUM2TixJQUFELEVBQU83TixPQUFQO0FBQUEsV0FBZ0I2TixLQUFLMnBDLElBQUwsQ0FBVXgzQyxPQUFWLENBQWhCO0FBQUE7QUFGa0IsQztrQkFwQlIwckIsSTs7Ozs7Ozs7Ozs7OztBQ0ZyQjs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7Ozs7Ozs7SUFFcUI3YyxXOzs7QUFFbkIsdUJBQVkzZ0IsR0FBWixFQUFpQkMsR0FBakIsRUFBc0JxOEIsU0FBdEIsRUFBbUQ7QUFBQSxRQUFsQml0QixVQUFrQix1RUFBUCxLQUFPOztBQUFBOztBQUFBLGlEQUNqRCxnQ0FEaUQ7O0FBRWpELFVBQUtDLGVBQUwsR0FBdUIsSUFBdkI7QUFDQSxVQUFLeHBELEdBQUwsR0FBV0EsR0FBWDtBQUNBLFVBQUtDLEdBQUwsR0FBV0EsR0FBWDtBQUNBLFVBQUs0VSxVQUFMLEdBQWtCeW5CLFNBQWxCO0FBQ0EsVUFBS210QixlQUFMLEdBQXVCLEVBQXZCO0FBQ0EsVUFBS0MsSUFBTCxHQUFZLE1BQUtDLE9BQUwsRUFBWjs7QUFFQSxVQUFLQyxLQUFMLEdBQWEsSUFBSXAwRCxZQUFNcTBELEtBQVYsRUFBYjs7QUFFQSxVQUFLanNDLFNBQUwsR0FBaUIsSUFBSXBvQixZQUFNczBELFNBQVYsRUFBakI7O0FBRUEsVUFBS3gyQyxLQUFMLEdBQWEsSUFBSTlkLFlBQU11MEQsS0FBVixFQUFiO0FBQ0EsVUFBS0MsUUFBTCxHQUFnQixJQUFJeDBELFlBQU11MEQsS0FBVixFQUFoQjs7QUFFQSxVQUFLbjVDLE1BQUwsR0FBYyxJQUFJcGIsWUFBTXNyRCxpQkFBVixDQUE0QixFQUE1QixFQUFnQyxNQUFLamhELEtBQUwsS0FBYSxNQUFLQyxNQUFMLEVBQTdDLEVBQTRELEdBQTVELEVBQWlFLElBQWpFLENBQWQ7QUFDQSxRQUFNZ0MsUUFBUSxDQUFkOztBQUVBLFVBQUs4TyxNQUFMLENBQVlwRCxRQUFaLENBQXFCNVYsQ0FBckIsR0FBeUIsQ0FBekI7QUFDQSxVQUFLZ1osTUFBTCxDQUFZcEQsUUFBWixDQUFxQnBXLENBQXJCLEdBQXlCLE1BQUkwSyxLQUE3QjtBQUNBLFVBQUs4TyxNQUFMLENBQVlwRCxRQUFaLENBQXFCMVMsQ0FBckIsR0FBeUIsQ0FBekI7O0FBRUEsVUFBS212RCxRQUFMLEdBQWdCLElBQUl6MEQsWUFBTTAwRCxhQUFWLENBQXdCLEVBQUNDLE9BQU8sSUFBUixFQUFjQyxXQUFXenBDLFlBQVkwcEMsWUFBWixFQUF6QixFQUFxREMsV0FBVyxJQUFoRSxFQUF4QixDQUFoQjtBQUNBLFVBQUtMLFFBQUwsQ0FBY3Q0QyxhQUFkLENBQTRCLFFBQTVCLEVBQXNDLENBQXRDO0FBQ0EsVUFBS3M0QyxRQUFMLENBQWNNLGFBQWQsQ0FBNEIsTUFBS3ZxRCxHQUFMLENBQVNnOEMsZ0JBQXJDO0FBQ0EsVUFBS2lPLFFBQUwsQ0FBY3I0QyxPQUFkLENBQXNCLE1BQUsvUixLQUFMLEVBQXRCLEVBQW9DLE1BQUtDLE1BQUwsRUFBcEM7O0FBRUEsVUFBSytVLFVBQUwsQ0FBZ0I2aEIsTUFBaEIsQ0FBdUIsTUFBS3V6QixRQUFMLENBQWNsNUMsVUFBckM7O0FBRUEsVUFBS3k1QyxXQUFMLEdBQW1CLElBQUluNkMsdUJBQUosRUFBbkI7QUFDQSxVQUFLbTZDLFdBQUwsQ0FBaUI1NEMsT0FBakIsQ0FBeUIsTUFBSy9SLEtBQUwsRUFBekIsRUFBdUMsTUFBS0MsTUFBTCxFQUF2QztBQUNBLGlCQUFFLE1BQUswcUQsV0FBTCxDQUFpQno1QyxVQUFuQixFQUErQnFFLEdBQS9CLENBQW1DO0FBQ25DNUgsZ0JBQVUsVUFEeUI7QUFFbkMrbEIsV0FBSyxDQUY4QjtBQUduQzhQLGNBQVEsQ0FIMkI7QUFJbkM1ekIsZUFBUztBQUowQixLQUFuQztBQU1BLFVBQUtvRixVQUFMLENBQWdCNmhCLE1BQWhCLENBQXVCLE1BQUs4ekIsV0FBTCxDQUFpQno1QyxVQUF4Qzs7QUFFQSxVQUFLN1EsT0FBTCxHQUFlLE1BQUtzcUQsV0FBTCxDQUFpQno1QyxVQUFoQzs7QUFFQSxVQUFLeVYsYUFBTCxHQUFxQixJQUFJaHhCLFlBQU1pMUQsYUFBVixFQUFyQjs7QUFFQSxVQUFLbjNDLEtBQUwsQ0FBV3pKLEdBQVgsQ0FBZSxJQUFJclUsWUFBTWsxRCxZQUFWLENBQXVCLFFBQXZCLENBQWYsRUE1Q2lELENBNENBOztBQUVqRCxVQUFLQyxLQUFMLEdBQWEsSUFBSW4xRCxZQUFNbzFELGdCQUFWLENBQTJCLFFBQTNCLEVBQXFDLENBQXJDLENBQWI7QUFDQSxVQUFLRCxLQUFMLENBQVduOUMsUUFBWCxDQUFvQjNTLEdBQXBCLENBQXdCLENBQXhCLEVBQTJCLElBQUVpSCxLQUE3QixFQUFvQyxDQUFwQztBQUNBLFVBQUs2b0QsS0FBTCxDQUFXL2hELFVBQVgsR0FBd0IsS0FBeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFLMEssS0FBTCxDQUFXekosR0FBWCxDQUFlLE1BQUs4Z0QsS0FBcEI7O0FBRUEsVUFBS0UsUUFBTCxHQUFnQixJQUFJek4sZUFBSixDQUFVLE1BQUt4c0MsTUFBZixFQUF1QixNQUFLMVEsT0FBNUIsQ0FBaEI7QUFDQSxVQUFLMnFELFFBQUwsQ0FBYzd5QyxNQUFkLENBQXFCNWdCLENBQXJCLEdBQXlCLEdBQXpCOztBQUVBLFFBQU00eUQsV0FBVyxhQUFFLE1BQUtRLFdBQUwsQ0FBaUJ6NUMsVUFBbkIsRUFBK0IyVCxJQUEvQixDQUFvQyxLQUFwQyxDQUFqQjtBQUFBLFFBQTZEb21DLFlBQVksSUFBSXQxRCxZQUFNK0ksT0FBVixFQUF6RTtBQUNBLFVBQUtzc0QsUUFBTCxDQUFjNzZDLGdCQUFkLENBQStCLFFBQS9CLEVBQXlDLFlBQUs7QUFDNUMsWUFBS1ksTUFBTCxDQUFZbW1DLGlCQUFaLENBQThCK1QsU0FBOUI7QUFDQWQsZUFBUzUwQyxHQUFULENBQWEsU0FBYixFQUF3QjAxQyxVQUFVMXpELENBQVYsR0FBWSxNQUFLd1osTUFBTCxDQUFZcEQsUUFBWixDQUFxQnBXLENBQWpDLEdBQW1DLENBQW5DLEdBQXNDLE1BQXRDLEdBQThDLE9BQXRFO0FBQ0EsWUFBS3EwQixXQUFMO0FBQ0QsS0FKRDs7QUFNQSxRQUFHODlCLFVBQUgsRUFBZTtBQUNiLFlBQUtqMkMsS0FBTCxDQUFXekosR0FBWCxDQUFlLElBQUlyVSxZQUFNdTFELFVBQVYsQ0FBcUIsQ0FBckIsQ0FBZjtBQUNEOztBQUVELFVBQUt4a0QsS0FBTCxHQUFhO0FBQ1h5a0Qsc0JBQWdCLE1BQUtBLGNBQUwsQ0FBb0Ivb0MsSUFBcEIsT0FETDtBQUVYZ3BDLGVBQVMsTUFBS0EsT0FBTCxDQUFhaHBDLElBQWI7QUFGRSxLQUFiOztBQUtBLGlCQUFFLE1BQUtqaUIsR0FBUCxFQUFZMnFCLEVBQVosQ0FBZSxRQUFmLEVBQXlCLE1BQUtwa0IsS0FBTCxDQUFXeWtELGNBQXBDOztBQUVBLFVBQUtyN0IsV0FBTCxHQUFtQixJQUFJNDFCLGtDQUFKLENBQTZCLE1BQUt2bEQsR0FBbEMsRUFBdUMsTUFBS0MsR0FBNUMsUUFBbkI7QUFDQSxVQUFLMnZCLFdBQUwsR0FBbUIsSUFBSTYxQixrQ0FBSixDQUE2QixNQUFLemxELEdBQWxDLEVBQXVDLE1BQUtDLEdBQTVDLFFBQW5CO0FBQ0EsUUFBTWlyRCxhQUFhLEVBQUM5bkQsTUFBTSxXQUFQLEVBQW5CO0FBQ0EsVUFBS3VzQixXQUFMLENBQWlCanNCLE1BQWpCLEdBQTBCLFVBQUN4RCxPQUFELEVBQVVpRCxDQUFWLEVBQWU7QUFDdkMsVUFBTWdvRCxRQUFRLENBQUMsWUFBRCxFQUFlLFdBQWYsRUFBNEIsWUFBNUIsRUFBMEMsVUFBMUMsQ0FBZDtBQUFBLFVBQXFFQyxXQUFXLFNBQVhBLFFBQVcsQ0FBQzF4RCxDQUFELEVBQUk2QixDQUFKO0FBQUEsZUFBUzdCLE1BQUk2QixDQUFKLElBQVNwRixRQUFFaTFELFFBQUYsQ0FBVzF4RCxDQUFYLEVBQWM2QixDQUFkLENBQWxCO0FBQUEsT0FBaEY7QUFDQSxVQUFHNEgsRUFBRUMsSUFBRixLQUFTLFdBQVosRUFBeUI7QUFDdkI4bkQsbUJBQVcxZ0MsS0FBWCxHQUFtQnJuQixFQUFFcW5CLEtBQXJCO0FBQ0EwZ0MsbUJBQVd6Z0MsS0FBWCxHQUFtQnRuQixFQUFFc25CLEtBQXJCO0FBQ0Q7QUFDRCxhQUFPdG5CLEVBQUUrb0MsYUFBRixJQUFtQixDQUFDaWYsTUFBTXJ4RCxPQUFOLENBQWNxSixFQUFFQyxJQUFoQixDQUFwQixJQUE2Q2dvRCxTQUFTbHJELE9BQVQsRUFBa0JpRCxFQUFFNlUsTUFBcEIsQ0FBN0MsSUFBNEVvekMsU0FBU2xyRCxPQUFULEVBQWtCaUQsRUFBRStvQyxhQUFwQixDQUE1RSxnQkFBb0gvb0MsQ0FBcEgsRUFBMEgrbkQsVUFBMUgsSUFBdUkvbkQsQ0FBOUk7QUFDRCxLQVBEO0FBUUEsVUFBSzBuQixJQUFMLEdBQVksSUFBSXVyQixjQUFKLENBQVMsTUFBS3AyQyxHQUFkLEVBQW1CLE1BQUtDLEdBQXhCLFFBQVo7O0FBRUEsVUFBSytxRCxjQUFMO0FBQ0EsVUFBS0MsT0FBTDtBQS9GaUQ7QUFnR2xEOzt3QkFFRHRCLE8sc0JBQVU7QUFDUixRQUFNNWxELE9BQU8sYUFBRSw2REFBRixFQUFpRTJRLFFBQWpFLENBQTBFLEtBQUtHLFVBQS9FLENBQWI7QUFBQSxRQUNBdGMsSUFBSSxJQUFJL0MsWUFBTThJLE9BQVYsQ0FBa0Irc0QsT0FBT3hyRCxLQUFQLEdBQWFrRSxLQUFLbEUsS0FBTCxFQUEvQixFQUE2Q3dyRCxPQUFPdnJELE1BQVAsR0FBY2lFLEtBQUtqRSxNQUFMLEVBQTNELENBREo7QUFFQWlFLFNBQUs2USxNQUFMO0FBQ0EsV0FBT3JjLEVBQUVqQixNQUFGLEVBQVA7QUFDRCxHOzt3QkFFRG0wQixXLDBCQUFjO0FBQ1osU0FBS2svQixLQUFMLENBQVc1aEQsUUFBWCxDQUFvQlQsV0FBcEIsR0FBa0MsSUFBbEM7QUFDRCxHOzt3QkFFRDNILE8sc0JBQVU7QUFDUixXQUFPLEtBQUs0RixLQUFMLENBQVcwa0QsT0FBbEI7QUFDQSxpQkFBRSxLQUFLanJELEdBQVAsRUFBWW9LLEdBQVosQ0FBZ0IsUUFBaEIsRUFBMEIsS0FBSzdELEtBQUwsQ0FBV3lrRCxjQUFyQztBQUNBLFNBQUtyN0IsV0FBTCxDQUFpQmh2QixPQUFqQjtBQUNBLFNBQUtpdkIsV0FBTCxDQUFpQmp2QixPQUFqQjtBQUNBLFNBQUtrcUIsSUFBTCxDQUFVbHFCLE9BQVY7QUFDQSxTQUFLa3FELFFBQUwsQ0FBY2xxRCxPQUFkO0FBQ0QsRzs7d0JBRURkLEssb0JBQVE7QUFDTixXQUFPLEtBQUtnVixVQUFMLENBQWdCaFYsS0FBaEIsRUFBUDtBQUNELEc7O3dCQUVEQyxNLHFCQUFTO0FBQ1AsV0FBTyxLQUFLK1UsVUFBTCxDQUFnQi9VLE1BQWhCLEVBQVA7QUFDRCxHOzt3QkFFRDB6QixnQiw2QkFBaUI3NUIsQyxFQUFHO0FBQ2xCLFNBQUtneEQsS0FBTCxDQUFXVyxTQUFYLEdBQXVCM3hELENBQXZCO0FBQ0QsRzs7d0JBRURvNUIsUSx1QkFBVztBQUNULFdBQU8sS0FBSzIyQixJQUFMLEdBQVUsRUFBakI7QUFDRCxHOzt3QkFFRGwzQixRLHVCQUFXO0FBQ1QsV0FBTyxLQUFLcTRCLFFBQVo7QUFDRCxHOzt3QkFFRC9ULGdCLDZCQUFpQi92QyxLLEVBQU87QUFDdEIsU0FBSzhqRCxRQUFMLENBQWNub0QsT0FBZCxHQUF3QnFFLEtBQXhCO0FBQ0QsRzs7d0JBRUR5dkMsZ0IsK0JBQW1CO0FBQ2pCLFdBQU8sS0FBS3FVLFFBQUwsQ0FBY25vRCxPQUFyQjtBQUNELEc7O3dCQUVEc29ELGMsNkJBQWlCO0FBQUE7O0FBQ2YsUUFBRyxLQUFLbnJELEtBQUwsS0FBYSxDQUFiLElBQWtCLEtBQUtDLE1BQUwsS0FBYyxDQUFuQyxFQUFzQztBQUNwQyxVQUFNeXJELGVBQWUsU0FBZkEsWUFBZSxDQUFDMzZDLE1BQUQsRUFBVztBQUM5QkEsZUFBTzQ2QyxNQUFQLEdBQWdCLE9BQUszckQsS0FBTCxLQUFhLE9BQUtDLE1BQUwsRUFBN0I7QUFDQThRLGVBQU8rdEMsc0JBQVA7QUFDRCxPQUhEO0FBQUEsVUFJQThNLGlCQUFpQixTQUFqQkEsY0FBaUIsQ0FBQ3hCLFFBQUQsRUFBYTtBQUM1QkEsaUJBQVNyNEMsT0FBVCxDQUFpQixPQUFLL1IsS0FBTCxFQUFqQixFQUErQixPQUFLQyxNQUFMLEVBQS9CO0FBQ0QsT0FORDs7QUFRQXlyRCxtQkFBYSxLQUFLMzZDLE1BQWxCO0FBQ0E2NkMscUJBQWUsS0FBS3hCLFFBQXBCO0FBQ0F3QixxQkFBZSxLQUFLakIsV0FBcEI7QUFDQSxXQUFLLytCLFdBQUw7O0FBRUEsV0FBSy9ULGFBQUwsQ0FBbUIsRUFBQ3RVLE1BQU0sUUFBUCxFQUFuQjtBQUNELEtBZkQsTUFnQks7QUFDSHlTLGlCQUFXLFlBQUs7QUFDZCxlQUFLbTFDLGNBQUw7QUFDRCxPQUZELEVBRUcsR0FGSDtBQUdEO0FBQ0YsRzs7d0JBRUQ1L0IsUyxzQkFBVWxvQixNLEVBQVE7QUFDaEIsU0FBS29RLEtBQUwsQ0FBV3pKLEdBQVgsQ0FBZTNHLE1BQWY7QUFDRCxHOzt3QkFFRHcvQixZLHlCQUFheC9CLE0sRUFBUTtBQUNuQixTQUFLOG1ELFFBQUwsQ0FBY25nRCxHQUFkLENBQWtCM0csTUFBbEI7QUFDRCxHOzt3QkFFRHkvQixlLDRCQUFnQnovQixNLEVBQVE7QUFDdEIsU0FBSzhtRCxRQUFMLENBQWNwMUMsTUFBZCxDQUFxQjFSLE1BQXJCO0FBQ0QsRzs7d0JBRUR3b0IsWSx5QkFBYXhvQixNLEVBQVE7QUFDbkIsU0FBS29RLEtBQUwsQ0FBV3NCLE1BQVgsQ0FBa0IxUixNQUFsQjtBQUNELEc7O3dCQUVEK25ELE8sc0JBQVU7QUFDUixRQUFHLEtBQUsxa0QsS0FBTCxDQUFXMGtELE9BQWQsRUFBdUI7QUFDckJTLDRCQUFzQixLQUFLbmxELEtBQUwsQ0FBVzBrRCxPQUFqQztBQUNEO0FBQ0QsU0FBS3AzQyxNQUFMO0FBQ0QsRzs7d0JBRUQ2VyxpQiw4QkFBa0JqVixHLEVBQUs7QUFDckIsU0FBS2cwQyxlQUFMLENBQXFCaHhELElBQXJCLENBQTBCZ2QsR0FBMUI7QUFDRCxHOzt3QkFFRGtXLG9CLGlDQUFxQmxXLEcsRUFBSztBQUN4QixRQUFNamQsSUFBSSxLQUFLaXhELGVBQUwsQ0FBcUIzdkQsT0FBckIsQ0FBNkIyYixHQUE3QixDQUFWO0FBQ0EsUUFBRyxDQUFDamQsQ0FBSixFQUFPO0FBQ0wsV0FBS2l4RCxlQUFMLENBQXFCenNDLE1BQXJCLENBQTRCeGtCLENBQTVCLEVBQStCLENBQS9CO0FBQ0Q7QUFDRixHOzt3QkFFRHFiLE0scUJBQVM7QUFDUCxRQUFNODNDLFlBQVksS0FBSy9CLEtBQUwsQ0FBV2dDLFFBQVgsRUFBbEI7QUFDQSxTQUFLZixRQUFMLENBQWN0Z0MsTUFBZCxDQUFxQm9oQyxTQUFyQjtBQUNBLHlCQUFlLEtBQUtsQyxlQUFwQixrSEFBcUM7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBLFVBQTdCaDBDLEdBQTZCOztBQUNuQ0EsVUFBSWsyQyxTQUFKO0FBQ0Q7QUFDRCxTQUFLbkIsV0FBTCxDQUFpQjMyQyxNQUFqQixDQUF3QixLQUFLbTJDLFFBQTdCLEVBQXVDLEtBQUtwNUMsTUFBNUM7QUFDQSxRQUFJaUQsU0FBUyxJQUFiO0FBQ0EsUUFBRyxLQUFLMjFDLGVBQVIsRUFBeUI7QUFDdkIzMUMsZUFBUyxLQUFUO0FBQ0EsNEJBQWEsS0FBS1AsS0FBTCxDQUFXTixRQUF4Qix5SEFBa0M7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBLFlBQTFCdFYsQ0FBMEI7O0FBQ2hDbVcsaUJBQVNBLFVBQVVuVyxFQUFFcUwsUUFBRixDQUFXVCxXQUE5QjtBQUNBNUssVUFBRXFMLFFBQUYsQ0FBV1QsV0FBWCxHQUF5QixLQUF6QjtBQUNEO0FBQ0Y7QUFDRCxRQUFHdUwsTUFBSCxFQUFXO0FBQ1QsV0FBS28yQyxRQUFMLENBQWNwMkMsTUFBZCxDQUFxQixLQUFLUCxLQUExQixFQUFpQyxLQUFLMUMsTUFBdEM7QUFDRDtBQUNGLEc7O2NBRU15NUMsWSwyQkFBZTtBQUNwQixRQUFNLzJDLFFBQVEsSUFBSTlkLFlBQU11MEQsS0FBVixFQUFkO0FBQ0F6MkMsVUFBTXpKLEdBQU4sQ0FBVSxJQUFJclUsWUFBTWsxRCxZQUFWLENBQXVCLFFBQXZCLENBQVY7O0FBRUEsUUFBTTk1QyxTQUFTLElBQUlwYixZQUFNc3JELGlCQUFWLENBQTRCLEVBQTVCLEVBQWdDLENBQWhDLEVBQW1DLENBQW5DLEVBQXNDLEdBQXRDLENBQWY7QUFDQWx3QyxXQUFPcEQsUUFBUCxDQUFnQjNTLEdBQWhCLENBQW9CLENBQXBCLEVBQXVCLENBQXZCLEVBQTBCLENBQTFCO0FBQ0ErVixXQUFPc3ZDLE1BQVAsQ0FBYyxDQUFkLEVBQWlCLENBQWpCLEVBQW9CLENBQXBCOztBQUVBLFFBQU0rSixXQUFXLElBQUl6MEQsWUFBTTAwRCxhQUFWLEVBQWpCO0FBQ0FELGFBQVN0NEMsYUFBVCxDQUF1QixRQUF2QjtBQUNBczRDLGFBQVNyNEMsT0FBVCxDQUFpQixDQUFqQixFQUFvQixDQUFwQjs7QUFFQSxRQUFNclcsSUFBSXlWLFNBQVNDLGFBQVQsQ0FBdUIsUUFBdkIsQ0FBVjtBQUFBLFFBQTRDNVEsTUFBTTlFLEVBQUVpSCxVQUFGLENBQWEsSUFBYixDQUFsRDtBQUNBakgsTUFBRXNFLEtBQUYsR0FBVXRFLEVBQUV1RSxNQUFGLEdBQVcsQ0FBckI7QUFDQU8sUUFBSVMsU0FBSixHQUFnQixTQUFoQjtBQUNBVCxRQUFJNnRDLFFBQUosQ0FBYSxDQUFiLEVBQWdCLENBQWhCLEVBQW1CM3lDLEVBQUVzRSxLQUFyQixFQUE0QnRFLEVBQUV1RSxNQUE5QjtBQUNBLFFBQU01SSxJQUFJLElBQUkxQixZQUFNMFMsT0FBVixDQUFrQjNNLENBQWxCLENBQVY7QUFDQXJFLE1BQUVvUixXQUFGLEdBQWdCLElBQWhCOztBQUVBZ0wsVUFBTXpKLEdBQU4sQ0FBVSxJQUFJclUsWUFBTW1ULElBQVYsQ0FDUixJQUFJblQsWUFBTXVwQyxhQUFWLENBQXdCLENBQXhCLEVBQTJCLENBQTNCLEVBQThCLENBQTlCLEVBQWlDLENBQWpDLENBRFEsRUFFUixJQUFJdnBDLFlBQU1nVCxpQkFBVixDQUE0QixFQUFDcEIsS0FBS2xRLENBQU4sRUFBNUIsQ0FGUSxDQUFWOztBQUtBK3lELGFBQVNwMkMsTUFBVCxDQUFnQlAsS0FBaEIsRUFBdUIxQyxNQUF2Qjs7QUFFQSxhQUFTaTdDLFFBQVQsQ0FBa0J0d0QsQ0FBbEIsRUFBcUIzRCxDQUFyQixFQUF3QlIsQ0FBeEIsRUFBMkI7QUFDekIsVUFBTXFELEtBQUssSUFBSW0zQyxVQUFKLENBQWUsQ0FBZixDQUFYO0FBQ0FyMkMsUUFBRXV3RCxVQUFGLENBQWFsMEQsQ0FBYixFQUFnQlIsQ0FBaEIsRUFBbUIsQ0FBbkIsRUFBc0IsQ0FBdEIsRUFBeUJtRSxFQUFFd3dELElBQTNCLEVBQWlDeHdELEVBQUV5d0QsYUFBbkMsRUFBa0R2eEQsRUFBbEQ7QUFDQSxhQUFPQSxFQUFQO0FBQ0Q7QUFDRCxRQUFNZixJQUFJbXlELFNBQVM1QixTQUFTbDVDLFVBQVQsQ0FBb0J2TyxVQUFwQixDQUErQixPQUEvQixLQUEyQ3luRCxTQUFTbDVDLFVBQVQsQ0FBb0J2TyxVQUFwQixDQUErQixvQkFBL0IsQ0FBcEQsRUFBMEcsQ0FBMUcsRUFBNkcsQ0FBN0csQ0FBVjtBQUNBLFdBQU85SSxFQUFFLENBQUYsTUFBTyxHQUFQLElBQVlBLEVBQUUsQ0FBRixNQUFPLENBQW5CLElBQXNCQSxFQUFFLENBQUYsTUFBTyxDQUE3QixHQUFnQyxPQUFoQyxHQUF5QyxTQUFoRDtBQUNELEc7OztFQW5Rc0NsRSxZQUFNbWlCLGU7O2tCQUExQmdKLFc7Ozs7Ozs7Ozs7O0FDUHJCOzs7Ozs7Ozs7Ozs7SUFFcUJ3bEIsZ0I7OztBQUVuQiw0QkFBWTVpQyxJQUFaLEVBQWtCO0FBQUE7O0FBQUEsaURBQ2hCLHNCQURnQjs7QUFFaEIsVUFBS0EsSUFBTCxHQUFZQSxJQUFaO0FBQ0EsVUFBSzZ3QixPQUFMLEdBQWUsS0FBZjtBQUhnQjtBQUlqQjs7NkJBRURpQixLLG9CQUFRO0FBQ04sU0FBS2pCLE9BQUwsR0FBZSxDQUFDLEtBQUtBLE9BQXJCO0FBQ0EsU0FBS3VSLFVBQUw7QUFDRCxHOzs2QkFFRDN2QixJLG1CQUFPO0FBQ0wsU0FBS29lLE9BQUwsR0FBZSxLQUFmO0FBQ0EsU0FBS3VSLFVBQUw7QUFDRCxHOzs2QkFFREEsVSx5QkFBYTtBQUNYLFFBQUcsS0FBS3pqQyxRQUFSLEVBQWtCO0FBQ2hCLFdBQUtBLFFBQUw7QUFDRDtBQUNELFNBQUt5eEIsVUFBTDtBQUNELEc7OzZCQUVEQSxVLHlCQUFhO0FBQ1gsUUFBRyxLQUFLcHdCLElBQVIsRUFBYztBQUNaLFdBQUtBLElBQUwsQ0FBVTh3QixRQUFWLENBQW1CLGFBQW5CLEVBQWtDO0FBQ2hDekwsZ0JBQVEsSUFEd0I7QUFFaEN3TCxpQkFBUyxLQUFLQSxPQUZrQjtBQUdoQ3ZCLGdCQUFRO0FBSHdCLE9BQWxDO0FBS0Q7QUFDRixHOzs7RUFqQzJDdmIsb0I7O2tCQUF6QjZ1QixnQjs7Ozs7Ozs7Ozs7OztJQ0RBblUsVTs7Ozs7YUFDWnpkLEksbUJBQU87QUFDWixRQUFHLENBQUN5ZCxXQUFXclcsSUFBZixFQUFxQjtBQUNuQnFXLGlCQUFXclcsSUFBWCxHQUFrQixJQUFJekYsT0FBSixDQUFZLFVBQUNDLE9BQUQsRUFBWTtBQUN4QyxZQUFHLENBQUNqaEIsT0FBTyxJQUFQLENBQUosRUFBa0I7QUFDaEJBLGlCQUFPLElBQVAsSUFBZTtBQUNiOHBDLHFCQUFTLENBREk7QUFFYnZqQixvQkFBUTtBQUZLLFdBQWY7QUFJRDtBQUNELFlBQUcsQ0FBQ3ZtQixPQUFPLFVBQVAsQ0FBSixFQUF3QjtBQUN0QkEsaUJBQU8sVUFBUCxJQUFxQjtBQUNuQixvQkFBUTtBQURXLFdBQXJCO0FBR0Q7QUFDRCxZQUFHLENBQUMrOEIsR0FBRytNLE9BQVAsRUFBZ0I7QUFDZC9NLGFBQUcrTSxPQUFILEdBQWEsQ0FBYjtBQUNBLFdBQUMsWUFBVztBQUNWLGdCQUFJNWxDLElBQUksRUFBUjtBQUNBNjRCLGVBQUd4ckIsS0FBSCxHQUFXLFVBQVN0TCxDQUFULEVBQVk7QUFDckIsa0JBQUc4MkIsR0FBR3hXLE1BQU4sRUFBYztBQUNadGdCO0FBQ0QsZUFGRCxNQUdLO0FBQ0gvQixrQkFBRVgsSUFBRixDQUFPMEMsQ0FBUDtBQUNEO0FBQ0YsYUFQRDtBQVFBakcsbUJBQU8rMkQsU0FBUCxHQUFtQixZQUFXO0FBQzVCaDZCLGlCQUFHeFcsTUFBSCxHQUFZLENBQVo7QUFDQSxtQkFBSSxJQUFJampCLElBQUksQ0FBWixFQUFlQSxJQUFJWSxFQUFFOUIsTUFBckIsRUFBNkJrQixHQUE3QixFQUFrQztBQUNoQyxvQkFBSTtBQUNGWSxvQkFBRVosQ0FBRjtBQUNELGlCQUZELENBR0EsT0FBTzJLLENBQVAsRUFBVSxDQUFFO0FBQ2I7QUFDRGdUO0FBQ0QsYUFURDtBQVVBOGIsZUFBR2k2QixTQUFILEdBQWUsVUFBUzN3RCxDQUFULEVBQVk7QUFDekIsbUJBQUksSUFBSTVDLENBQVIsSUFBYTRDLENBQWIsRUFBZ0I7QUFDZCxvQkFBR0EsRUFBRTZELGNBQUYsQ0FBaUJ6RyxDQUFqQixDQUFILEVBQXdCO0FBQ3RCd3pELDJCQUFTeHpELENBQVQsSUFBYzRDLEVBQUU1QyxDQUFGLENBQWQ7QUFDRDtBQUNGO0FBQ0YsYUFORDtBQU9BLGdCQUFJakMsSUFBSXNhLFNBQVNDLGFBQVQsQ0FBdUIsUUFBdkIsQ0FBUjtBQUNBdmEsY0FBRTBNLElBQUYsR0FBUyxpQkFBVDtBQUNBMU0sY0FBRWdjLEVBQUYsR0FBTyxzQkFBUDtBQUNBaGMsY0FBRXlPLEdBQUYsR0FBUSx3RUFBUjtBQUNBek8sY0FBRTAxRCxLQUFGLEdBQVUsS0FBVjtBQUNBLGdCQUFJN3dELElBQUl5VixTQUFTcTdDLGFBQWpCO0FBQ0EsZ0JBQUc5d0QsQ0FBSCxFQUFNO0FBQ0osa0JBQUlMLElBQUlLLEVBQUUrd0QsS0FBRixJQUFXL3dELEVBQUUrMEMsWUFBRixDQUFlLE9BQWYsQ0FBbkI7QUFDQSxrQkFBR3AxQyxDQUFILEVBQU07QUFDSnhFLGtCQUFFdzVDLFlBQUYsQ0FBZSxPQUFmLEVBQXdCaDFDLENBQXhCO0FBQ0Q7QUFDRjtBQUNELGdCQUFJdEUsSUFBSW9hLFNBQVN1N0Msb0JBQVQsQ0FBOEIsUUFBOUIsRUFBd0MsQ0FBeEMsQ0FBUjtBQUNBMzFELGNBQUVxWixVQUFGLENBQWF1OEMsWUFBYixDQUEwQjkxRCxDQUExQixFQUE2QkUsQ0FBN0I7QUFDRCxXQXpDRDtBQTBDRDtBQUNGLE9BekRpQixDQUFsQjtBQTBERDtBQUNELFdBQU9vN0IsV0FBV3JXLElBQWxCO0FBQ0QsRzs7Ozs7a0JBL0RrQnFXLFU7Ozs7Ozs7Ozs7O0FDRHJCOzs7Ozs7Ozs7Ozs7SUFFcUJ6QyxZOzs7QUFFbkIsd0JBQVkzM0IsQ0FBWixFQUFlUixDQUFmLEVBQWtCbUIsQ0FBbEIsRUFBcUI7QUFBQTs7QUFBQSxpREFDbkIsa0JBRG1COztBQUVuQixVQUFLbUIsQ0FBTCxHQUFTO0FBQ1A5QixVQURPO0FBRVBSLFVBRk87QUFHUG1CO0FBSE8sS0FBVDtBQUZtQjtBQU9wQjs7eUJBRUQ0ZixnQiw2QkFBaUJoVixDLEVBQUdwSyxJLEVBQU07QUFDeEIsUUFBSThDLFlBQUo7QUFEd0IsUUFFakJqRSxDQUZpQixHQUVUbUIsSUFGUyxDQUVqQm5CLENBRmlCO0FBQUEsUUFFZFIsQ0FGYyxHQUVUMkIsSUFGUyxDQUVkM0IsQ0FGYztBQUFBLFFBRUhzQyxDQUZHLEdBRUMsS0FBS0EsQ0FGTjs7QUFHeEIsUUFBRyxDQUFDOUIsSUFBRThCLEVBQUU5QixDQUFMLEtBQVNBLElBQUU4QixFQUFFOUIsQ0FBYixJQUFnQixDQUFDUixJQUFFc0MsRUFBRXRDLENBQUwsS0FBU0EsSUFBRXNDLEVBQUV0QyxDQUFiLENBQWhCLElBQWlDc0MsRUFBRW5CLENBQUYsR0FBSW1CLEVBQUVuQixDQUExQyxFQUE2QztBQUMzQ3NELFlBQU07QUFDSm1jLGdCQUFRLElBREo7QUFFSmpmO0FBRkksT0FBTjtBQUlEO0FBQ0QsV0FBTzhDLEdBQVA7QUFDRCxHOzs7RUFyQnVDcWpCLGdCOztrQkFBckJxUSxZOzs7Ozs7Ozs7OztBQ0ZyQjs7OztBQUNBOzs7Ozs7Ozs7Ozs7SUFFcUJvekIsVTs7O0FBRW5CLHNCQUFZdmtELElBQVosRUFBa0I7QUFBQTs7QUFBQSxpREFDaEIsa0JBRGdCOztBQUVoQixVQUFLQSxJQUFMLEdBQVlBLElBQVo7QUFGZ0I7QUFHakI7O3VCQUVEK1osZ0IsNkJBQWlCaFYsQyxFQUFHekosQyxFQUFHO0FBQ3JCLFdBQU9uRCx3QkFBY3lGLFlBQWQsQ0FBMkIsS0FBS29DLElBQWhDLEVBQXNDMUUsQ0FBdEMsSUFBMEM7QUFDL0NzZSxjQUFRLElBRHVDO0FBRS9DamYsWUFBTVc7QUFGeUMsS0FBMUMsR0FHSjZJLFNBSEg7QUFJRCxHOzs7RUFacUMyYyxnQjs7a0JBQW5CeWpDLFU7Ozs7OztBQ0hyQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSyxVQUFVLElBQTJCO0FBQzFDO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsbUNBQW1DLEdBQUc7QUFDdEM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDRDQUE0QyxHQUFHO0FBQy9DO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTtBQUNBLDRDQUE0QyxHQUFHO0FBQy9DO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQSxLQUFLOzs7QUFHTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMENBQTBDLCtCQUErQjtBQUN6RSwwQ0FBMEMsOEJBQThCO0FBQ3hFLDBDQUEwQywrQkFBK0I7QUFDekUsMENBQTBDLG9DQUFvQzs7QUFFOUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLHNCQUFzQjtBQUN2RDs7QUFFQTtBQUNBLDZDQUE2QyxRQUFROztBQUVyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLHNDQUFzQztBQUMzRTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxDQUFDOzs7Ozs7OztBQy9ORDtBQUNBLGVBQWUsS0FBc0QsaUZBQWlGLGtCQUFrQixpQkFBaUIsY0FBYyxxQkFBcUIsU0FBUyxjQUFjLFlBQVksb0JBQW9CLHFEQUFxRCxJQUFJLHdDQUF3QyxnQ0FBZ0MsTUFBTSxPQUFPLGVBQWUsWUFBWSxlQUFlLHVDQUF1QztBQUNsZix5QkFBeUIsS0FBSyxtSEFBbUgsc0ZBQXNGLEtBQUssT0FBTywwREFBMEQsNEJBQTRCLGdCQUFnQixJQUFJLGdDQUFnQyxrQkFBa0IsbURBQW1ELHlCQUF5QjtBQUMzZCxtQ0FBbUMsU0FBUyxtQkFBbUIsYUFBYSwwQkFBMEIsd0JBQXdCLHdKQUF3SixVQUFVLFdBQVcsNEJBQTRCLGFBQWEseUJBQXlCLG1EQUFtRCxxQkFBcUIsY0FBYyxvQkFBb0IsY0FBYztBQUNyZSxvQkFBb0IsY0FBYyxpQkFBaUIsb0JBQW9CLE9BQU8sMkJBQTJCLGdCQUFnQixnQkFBZ0IsY0FBYyxnQkFBZ0Isb0JBQW9CLGNBQWMsa0RBQWtELHFDQUFxQyx3QkFBd0IsY0FBYyxpQkFBaUIsc0NBQXNDLFNBQVMiLCJmaWxlIjoianMvZGlzdC8zZGZsaXBib29rLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gaWRlbnRpdHkgZnVuY3Rpb24gZm9yIGNhbGxpbmcgaGFybW9ueSBpbXBvcnRzIHdpdGggdGhlIGNvcnJlY3QgY29udGV4dFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5pID0gZnVuY3Rpb24odmFsdWUpIHsgcmV0dXJuIHZhbHVlOyB9O1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbiBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbiBcdFx0XHR9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA3NCk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gd2VicGFjay9ib290c3RyYXAgMTNjNGY0OGE4MmYzODkxYWJkZDUiLCJjb25zdCBfJCA9IEdMT0JBTF9MSUJTLmpRdWVyeT8gd2luZG93LmpRdWVyeTogcmVxdWlyZSgnanF1ZXJ5JyksXHJcbiAgICAgIF9odG1sMmNhbnZhcyA9IEdMT0JBTF9MSUJTLmh0bWwyY2FudmFzPyB3aW5kb3cuaHRtbDJjYW52YXM6IHJlcXVpcmUoJ2h0bWwyY2FudmFzJyksXHJcbiAgICAgIF9USFJFRSA9IEdMT0JBTF9MSUJTLlRIUkVFPyB3aW5kb3cuVEhSRUU6IHJlcXVpcmUoJ3RocmVlJyksXHJcbiAgICAgIF9SZWFjdCA9IEdMT0JBTF9MSUJTLlJlYWN0PyB3aW5kb3cuUmVhY3Q6IHJlcXVpcmUoJ3JlYWN0JyksXHJcbiAgICAgIF9SZWFjdERPTSA9IEdMT0JBTF9MSUJTLlJlYWN0PyB3aW5kb3cuUmVhY3RET006IHJlcXVpcmUoJ3JlYWN0LWRvbScpLFxyXG4gICAgICBfUERGSlMgPSBHTE9CQUxfTElCUy5QREZKUz8gd2luZG93LnBkZmpzTGliOiByZXF1aXJlKCdwZGZqcycpLFxyXG4gICAgICBfdHIgPSAocyk9PiAod2luZG93LmliZXJlemFuc2t5IHx8IHt9KS50ciAmJiB3aW5kb3cuaWJlcmV6YW5za3kudHIocykgfHwgcztcclxuXHJcbmV4cG9ydCB7XHJcbiAgXyQgYXMgJCxcclxuICBfaHRtbDJjYW52YXMgYXMgaHRtbDJjYW52YXMsXHJcbiAgX1RIUkVFIGFzIFRIUkVFLFxyXG4gIF9SZWFjdCBhcyBSZWFjdCxcclxuICBfUmVhY3RET00gYXMgUmVhY3RET00sXHJcbiAgX1BERkpTIGFzIFBERkpTLFxyXG4gIF90ciBhcyB0clxyXG59O1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9jb21tb24vbGlicy5qcyIsImNvbnN0IF8kID0gR0xPQkFMX0xJQlMualF1ZXJ5PyB3aW5kb3cualF1ZXJ5OiByZXF1aXJlKCdqcXVlcnknKSxcclxuICAgICAgX2h0bWwyY2FudmFzID0gR0xPQkFMX0xJQlMuaHRtbDJjYW52YXM/IHdpbmRvdy5odG1sMmNhbnZhczogcmVxdWlyZSgnaHRtbDJjYW52YXMnKSxcclxuICAgICAgX1RIUkVFID0gR0xPQkFMX0xJQlMuVEhSRUU/IHdpbmRvdy5USFJFRTogcmVxdWlyZSgndGhyZWUnKSxcclxuICAgICAgX1BERkpTID0gR0xPQkFMX0xJQlMuUERGSlM/IHdpbmRvdy5QREZKUzogcmVxdWlyZSgncGRmanMnKSxcclxuICAgICAgX3RyID0gKHMpPT4gKHdpbmRvdy5pYmVyZXphbnNreSB8fCB7fSkudHIgJiYgd2luZG93LmliZXJlemFuc2t5LnRyKHMpIHx8IHM7XHJcblxyXG5pZih3aW5kb3cuRkIzRF9MT0NBTEUpIHtcclxuICB3aW5kb3cuaWJlcmV6YW5za3kgPSB7XHJcbiAgICAuLi53aW5kb3cuaWJlcmV6YW5za3ksXHJcbiAgICB0cjogKHMpPT4gKEZCM0RfTE9DQUxFLmRpY3Rpb25hcnkgfHwge30pW3NdIHx8IHNcclxuICB9O1xyXG59XHJcblxyXG5leHBvcnQge1xyXG4gIF8kIGFzICQsXHJcbiAgX2h0bWwyY2FudmFzIGFzIGh0bWwyY2FudmFzLFxyXG4gIF9USFJFRSBhcyBUSFJFRSxcclxuICBfUERGSlMgYXMgUERGSlMsXHJcbiAgX3RyIGFzIHRyXHJcbn07XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2pzL2xpYnMuanMiLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBCYXNlTWF0aFV0aWxzIHtcclxuICBzdGF0aWMgc3VtID0gW0Jhc2VNYXRoVXRpbHMuc3VtMSwgQmFzZU1hdGhVdGlscy5zdW0yLCBCYXNlTWF0aFV0aWxzLnN1bTMsIEJhc2VNYXRoVXRpbHMuc3VtNF07XHJcbiAgc3RhdGljIGVwcyA9IDFlLTQ7XHJcblxyXG4gIHN0YXRpYyBzdW0xKGthLGEsa2IsYikge1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAga2EqYVswXStrYipiWzBdXHJcbiAgICBdO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIHN1bTIoa2EsYSxrYixiKSB7XHJcbiAgICByZXR1cm4gW1xyXG4gICAgICBrYSphWzBdK2tiKmJbMF0sXHJcbiAgICAgIGthKmFbMV0ra2IqYlsxXVxyXG4gICAgXTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBzdW0zKGthLGEsa2IsYikge1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAga2EqYVswXStrYipiWzBdLFxyXG4gICAgICBrYSphWzFdK2tiKmJbMV0sXHJcbiAgICAgIGthKmFbMl0ra2IqYlsyXVxyXG4gICAgXTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBzdW00KGthLGEsa2IsYikge1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAga2EqYVswXStrYipiWzBdLFxyXG4gICAgICBrYSphWzFdK2tiKmJbMV0sXHJcbiAgICAgIGthKmFbMl0ra2IqYlsyXSxcclxuICAgICAga2EqYVszXStrYipiWzNdXHJcbiAgICBdO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIHJrNChkeSwgdCwgZHQsIHksIHN1bT1CYXNlTWF0aFV0aWxzLnN1bVt5Lmxlbmd0aC0xXSkge1xyXG4gICAgY29uc3QgazE9ZHkodCx5KSxcclxuICAgICAgICAgIGsyPWR5KHQrZHQvMixzdW0oMSx5LGR0LzIsazEpKSxcclxuICAgICAgICAgIGszPWR5KHQrZHQvMixzdW0oMSx5LGR0LzIsazIpKSxcclxuICAgICAgICAgIGs0PWR5KHQrZHQsc3VtKDEseSxkdCxrMykpO1xyXG4gICAgcmV0dXJuIHN1bSgxLHksZHQvNixzdW0oMSxzdW0oMSxrMSwyLGsyKSwxLHN1bSgyLGszLDEsazQpKSk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZXh0cmFwb2xhdGVMaW5lYXIoeCx5LHhpKSB7XHJcbiAgICByZXR1cm4geVswXSsoeVsxXS15WzBdKS8oeFsxXS14WzBdKSooeGkteFswXSk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgaW50ZXJwb2xhdGVMaW5lYXIoeCx5LHhpKSB7XHJcbiAgICBsZXQgeWk7XHJcbiAgICBpZih4WzBdPnhbMV0pIHtcclxuICAgICAgeD14LnJldmVyc2UoKTtcclxuICAgICAgeT15LnJldmVyc2UoKTtcclxuICAgIH1cclxuICAgIGlmKHhpPHhbMF0pIHtcclxuICAgICAgeWk9eVswXTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYoeGk+eFsxXSkge1xyXG4gICAgICB5aT15WzFdO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHlpPUJhc2VNYXRoVXRpbHMuZXh0cmFwb2xhdGVMaW5lYXIoeCx5LHhpKTtcclxuICAgIH1cclxuICAgIHJldHVybiB5aTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBjYWxjU2NhbGUoc3JjVywgc3JjSCwgZHN0VywgZHN0SCkge1xyXG4gICAgcmV0dXJuIGRzdFcvc3JjVzsgLy8gTWF0aC5taW4oZHN0Vy9zcmNXLCBkc3RIL3NyY0gpXHJcbiAgfVxyXG5cclxuICBzdGF0aWMgbXVsTShhLCBiKSB7XHJcbiAgICBjb25zdCByPVtdO1xyXG4gICAgZm9yKGxldCBpPTA7aTxhLmxlbmd0aDsrK2kpIHtcclxuICAgICAgci5wdXNoKFtdKTtcclxuICAgICAgZm9yKGxldCBqPTA7ajxiWzBdLmxlbmd0aDsrK2opIHtcclxuICAgICAgICByW2ldW2pdID0gMDtcclxuICAgICAgICBmb3IobGV0IGs9MDtrPGIubGVuZ3RoOysraykge1xyXG4gICAgICAgICAgcltpXVtqXSs9YVtpXVtrXSpiW2tdW2pdO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHI7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgdHJhbnNNKG0pIHtcclxuICAgIGNvbnN0IHI9W107XHJcbiAgICBmb3IobGV0IGk9MDtpPG0ubGVuZ3RoOysraSkge1xyXG4gICAgICBmb3IobGV0IGo9MDtqPG1bMF0ubGVuZ3RoOysraikge1xyXG4gICAgICAgIGlmKCFyW2pdKSB7XHJcbiAgICAgICAgICByW2pdPVtdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByW2pdW2ldPW1baV1bal07XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiByO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIG1hdChkYXRhKSB7XHJcbiAgICBsZXQgcz0wO1xyXG4gICAgZm9yKGxldCB4IG9mIGRhdGEpIHtcclxuICAgICAgcys9eDtcclxuICAgIH1cclxuICAgIHJldHVybiBzL2RhdGEubGVuZ3RoO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGRpc3AoZGF0YSkge1xyXG4gICAgY29uc3QgTT1CYXNlTWF0aFV0aWxzLm1hdChkYXRhKTtcclxuICAgIGxldCBzPTA7XHJcbiAgICBmb3IobGV0IHggb2YgZGF0YSkge1xyXG4gICAgICBzKz0oeC1NKSooeC1NKTtcclxuICAgIH1cclxuICAgIHJldHVybiBzL2RhdGEubGVuZ3RoO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIHByZWRpY3QxKGRhdGEsIG51bSkge1xyXG4gICAgY29uc3Qgcj1bXSwgbD1kYXRhLmxlbmd0aCwgRD1CYXNlTWF0aFV0aWxzLmRpc3AoZGF0YSk7XHJcbiAgICBpZihEPGwgJiYgbD4xKSB7XHJcbiAgICAgIGNvbnN0IGFtPVtdLCBibT1bXTtcclxuICAgICAgZm9yKGxldCBpPTA7aTxsOysraSkge1xyXG4gICAgICAgIGFtLnB1c2goW2ksMV0pO1xyXG4gICAgICAgIGJtLnB1c2goW2RhdGFbaV1dKTtcclxuICAgICAgfVxyXG4gICAgICBjb25zdCB0YT1CYXNlTWF0aFV0aWxzLnRyYW5zTShhbSksIGE9QmFzZU1hdGhVdGlscy5tdWxNKHRhLGFtKSwgYj1CYXNlTWF0aFV0aWxzLm11bE0odGEsYm0pLFxyXG4gICAgICBkPShhWzBdWzBdKmFbMV1bMV0tYVsxXVswXSphWzBdWzFdKSxcclxuICAgICAgcD1bXHJcbiAgICAgICAgLShhWzBdWzFdKmJbMV1bMF0tYlswXVswXSphWzFdWzFdKS9kLFxyXG4gICAgICAgIChhWzBdWzBdKmJbMV1bMF0tYVsxXVswXSpiWzBdWzBdKS9kXHJcbiAgICAgIF07XHJcbiAgICAgIGZvcihsZXQgaT0wO2k8bnVtOysraSkge1xyXG4gICAgICAgIGNvbnN0IHYgPSBNYXRoLnJvdW5kKHBbMF0qKGkrbCkrcFsxXSk7XHJcbiAgICAgICAgaWYoci5pbmRleE9mKHYpPT09LTEpIHtcclxuICAgICAgICAgIHIucHVzaCh2KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiByO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIHByZWRpY3QoZGF0YSwgbnVtKSB7XHJcbiAgICBjb25zdCByPVtdLCBsPWRhdGEubGVuZ3RoO1xyXG4gICAgbGV0IHNnbnM9MDtcclxuICAgIGZvcihsZXQgaT0wO2k8bC0xOysraSkge1xyXG4gICAgICBzZ25zKz1NYXRoLnNpZ24oZGF0YVtpKzFdLWRhdGFbaV0pO1xyXG4gICAgfVxyXG4gICAgaWYoTWF0aC5hYnMoc2ducyk8PShsLTEpJTIpIHtcclxuICAgICAgc2ducyA9IC0xO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHNnbnMgPSBNYXRoLnNpZ24oc2ducyk7XHJcbiAgICB9XHJcbiAgICBmb3IobGV0IGk9MCwgY3VyPWRhdGFbbC0xXTsgaTxudW0gJiYgY3VyPjA7ICsraSkge1xyXG4gICAgICBjdXIrPXNnbnM7XHJcbiAgICAgIHIucHVzaChjdXIpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHI7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZ2V0VW5pcXVlKCkge1xyXG4gICAgcmV0dXJuIE1hdGguY2VpbCgxZTkqTWF0aC5yYW5kb20oKSk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgc2V0U3BsaW5lUG9pbnRzKHNwbGluZSwgcHMpIHtcclxuICAgIGlmKHNwbGluZS5wb2ludHMubGVuZ3RoIT09cHMueC5sZW5ndGgpIHtcclxuICAgICAgY29uc29sZS53YXJuKCdzZXRTcGxpbmVQb2ludHM6IGJhZCBwb2ludHMnKTtcclxuICAgIH1cclxuICAgIGZvcihsZXQgaT0wOyBpPHNwbGluZS5wb2ludHMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgc3BsaW5lLnBvaW50c1tpXS5zZXQocHMueFtpXSwgcHMueVtpXSwgcHMuej8gcHMueltpXTogMCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgbWFwbDJMKGxzLCBsZW4sIG4sIGYpIHtcclxuICAgIGNvbnN0IGRMID0gbGVuLyhuLTEpO1xyXG4gICAgbGV0IEw9MDtcclxuICAgIGZvcihsZXQgaT0wLCBkPWxzWzBdOyBpPGxzLmxlbmd0aC0xICYmIEw8bGVuKzAuMSpkTDsgKytpLCBkKz1sc1tpXSkge1xyXG4gICAgICBpZihNYXRoLmFicyhMLWQpPE1hdGguYWJzKEwtZC1sc1tpKzFdKSkge1xyXG4gICAgICAgIGYoaSwgTCk7XHJcbiAgICAgICAgTCs9ZEw7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGlmKEw8bGVuKzAuMSpkTCkge1xyXG4gICAgICBjb25zb2xlLndhcm4oJ21hcGwyTDogbHMgaXMgbm90IGVub3VnaHQnKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHN0YXRpYyBkZXQyKGEsYixjLGQpIHtcclxuICAgIHJldHVybiBhKmQtYipjO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIHNvbHZlMkxpbihhMSxiMSxhMixiMikge1xyXG4gICAgbGV0IHJlcztcclxuICAgIGNvbnN0IGQ9QmFzZU1hdGhVdGlscy5kZXQyKGExWzBdLGExWzFdLGEyWzBdLGEyWzFdKTtcclxuICAgIGlmKE1hdGguYWJzKGQpPkJhc2VNYXRoVXRpbHMuZXBzKSB7XHJcbiAgICAgIGNvbnN0IGR4PUJhc2VNYXRoVXRpbHMuZGV0MihiMSxhMVsxXSxiMixhMlsxXSksIGR5PUJhc2VNYXRoVXRpbHMuZGV0MihhMVswXSxiMSxhMlswXSxiMik7XHJcbiAgICAgIHJlcyA9IHtcclxuICAgICAgICB4OiBkeC9kLFxyXG4gICAgICAgIHk6IGR5L2RcclxuICAgICAgfTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXM7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgaXNJbnNpZGVQb2x5KHBzLCBwKSB7XHJcbiAgICBsZXQgZG9uZSA9IGZhbHNlLCBjdDtcclxuICAgIGZvcihsZXQgaT0wOyBpPHBzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgIGlmKEJhc2VNYXRoVXRpbHMudjJkaXN0KHAsIHBzW2ldKTxCYXNlTWF0aFV0aWxzLmVwcykge1xyXG4gICAgICAgIGN0PTE7XHJcbiAgICAgICAgZG9uZSA9IHRydWU7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHdoaWxlKCFkb25lKSB7XHJcbiAgICAgIGRvbmUgPSB0cnVlO1xyXG4gICAgICBjdCA9IDA7XHJcbiAgICAgIGxldCBucCA9IHt4OiBwLngrTWF0aC5yYW5kb20oKS0wLjUsIHk6IHAueStNYXRoLnJhbmRvbSgpLTAuNX0sIHJuID0ge3g6IG5wLngtcC54LCB5OiBucC55LXAueX0sIGExPVtybi55LCAtcm4ueF0sIGIxPXAueCpybi55LXAueSpybi54O1xyXG4gICAgICBmb3IobGV0IGk9MDsgaTxwcy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgIGNvbnN0IHAwPXBzW2ldLCBwMT1wc1soaSsxKSVwcy5sZW5ndGhdLCBuID0ge3g6IHAxLngtcDAueCwgeTogcDEueS1wMC55fSwgYTI9W24ueSwgLW4ueF0sIGIyPXAwLngqbi55LXAwLnkqbi54LFxyXG4gICAgICAgICAgaXAgPSBCYXNlTWF0aFV0aWxzLnNvbHZlMkxpbihhMSxiMSxhMixiMik7XHJcbiAgICAgICAgaWYoaXApIHtcclxuICAgICAgICAgIGlmKEJhc2VNYXRoVXRpbHMudjJkaXN0KGlwLCBwMCk8QmFzZU1hdGhVdGlscy5lcHMgfHwgQmFzZU1hdGhVdGlscy52MmRpc3QoaXAsIHAxKTxCYXNlTWF0aFV0aWxzLmVwcykge1xyXG4gICAgICAgICAgICBkb25lID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZWxzZSBpZihpcC54Pk1hdGgubWluKHAwLngscDEueCktQmFzZU1hdGhVdGlscy5lcHMmJmlwLng8TWF0aC5tYXgocDAueCxwMS54KStCYXNlTWF0aFV0aWxzLmVwcyAmJlxyXG4gICAgICAgICAgICAgICAgICBpcC55Pk1hdGgubWluKHAwLnkscDEueSktQmFzZU1hdGhVdGlscy5lcHMmJmlwLnk8TWF0aC5tYXgocDAueSxwMS55KStCYXNlTWF0aFV0aWxzLmVwcykge1xyXG4gICAgICAgICAgICBpZihCYXNlTWF0aFV0aWxzLnYyZGlzdChpcCwgcCk8QmFzZU1hdGhVdGlscy5lcHMpIHtcclxuICAgICAgICAgICAgICBjdD0xO1xyXG4gICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgIGNvbnN0IHRuPXt4OiBpcC54LXAueCwgeTogaXAueS1wLnl9O1xyXG4gICAgICAgICAgICAgIGN0ICs9IHRuLngqcm4ueCt0bi55KnJuLnk+MDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGN0JTI7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgaXNJbnNpZGVDb252UG9seShwcywgcCkge1xyXG4gICAgbGV0IHNnID0gWzAsIDBdO1xyXG4gICAgZm9yKGxldCBpPTA7IGk8cHMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgY29uc3QgcDA9cHNbaV0sIHAxPXBzWyhpKzEpJXBzLmxlbmd0aF0sIGE9e3g6IHAwLngtcC54LCB5OiBwMC55LXAueX0sIGI9e3g6IHAxLngtcC54LCB5OiBwMS55LXAueX07XHJcbiAgICAgICsrc2dbKGEueCpiLnktYS55KmIueDwwKSswXTtcclxuICAgIH1cclxuICAgIHJldHVybiB+c2cuaW5kZXhPZihwcy5sZW5ndGgpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIHYybGVuKHYyKSB7XHJcbiAgICByZXR1cm4gTWF0aC5zcXJ0KHYyLngqdjIueCt2Mi55KnYyLnkpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIHYyZGlzdCh2MjEsIHYyMikge1xyXG4gICAgcmV0dXJuIEJhc2VNYXRoVXRpbHMudjJsZW4oe1xyXG4gICAgICB4OiB2MjIueC12MjEueCxcclxuICAgICAgeTogdjIyLnktdjIxLnlcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGNvbXB1dGVTcXVhcmUocHMpIHtcclxuICAgIGNvbnN0IGEgPSBbXTtcclxuICAgIGxldCBwID0gMDtcclxuICAgIGZvcihsZXQgaT0wOyBpPHBzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgIGEucHVzaChCYXNlTWF0aFV0aWxzLnYyZGlzdChwc1tpXSwgcHNbKGkrMSklcHMubGVuZ3RoXSkpO1xyXG4gICAgICBwICs9IDAuNSphW2ldO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIE1hdGguc3FydChwKihwLWFbMF0pKihwLWFbMV0pKihwLWFbMl0pKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBjb21wdXRlSW50ZXJwQ29lZnModHJpLCBwKSB7XHJcbiAgICBjb25zdCBzID0gQmFzZU1hdGhVdGlscy5jb21wdXRlU3F1YXJlKHRyaSksIGNvZWZzPVtdLCBsID0gdHJpLmxlbmd0aDtcclxuICAgIGZvcihsZXQgaT0wOyBpPGw7ICsraSkge1xyXG4gICAgICBjb2Vmc1tpXSA9IEJhc2VNYXRoVXRpbHMuY29tcHV0ZVNxdWFyZShbcCwgdHJpWyhpKzEpJWxdLCB0cmlbKGkrMiklbF1dKS9zO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNvZWZzO1xyXG4gIH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvQmFzZU1hdGhVdGlscy5qcyIsImltcG9ydCB7VEhSRUV9IGZyb20gJy4uL2xpYnMnO1xyXG5pbXBvcnQgQmFzZU1hdGhVdGlscyBmcm9tICcuL0Jhc2VNYXRoVXRpbHMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWF0aFV0aWxzIGV4dGVuZHMgQmFzZU1hdGhVdGlscyB7XHJcbiAgc3RhdGljIHYxID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcclxuXHJcbiAgc3RhdGljIHNwbGl0U3BsaW5lKHNwbGluZSwgTikge1xyXG4gICAgY29uc3QgbyA9IHtsZW46IDAsIGxzOiBbMF19LCBkbD0xL047XHJcbiAgICBmb3IobGV0IGk9MDsgaTw9TjsgKytpKSB7XHJcbiAgICAgIGNvbnN0IHAgPSBzcGxpbmUuZ2V0UG9pbnQoaSpkbCk7XHJcbiAgICAgIGlmKGkpIHtcclxuICAgICAgICBjb25zdCBkID0gTWF0aFV0aWxzLnYxLmRpc3RhbmNlVG8ocCk7XHJcbiAgICAgICAgby5sZW4gKz0gZDtcclxuICAgICAgICBvLmxzLnB1c2goZCk7XHJcbiAgICAgIH1cclxuICAgICAgTWF0aFV0aWxzLnYxLmNvcHkocCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbztcclxuICB9XHJcblxyXG4gIHN0YXRpYyBnZXRMaW5lYXJJbmRlY2VzKHNwbGluZSwgbikge1xyXG4gICAgY29uc3QgZGVsID0gNTAwMCwgZERlbCA9IDEvZGVsO1xyXG4gICAgY29uc3QgbHM9WzBdO1xyXG4gICAgbGV0IGwgPSAwO1xyXG4gICAgZm9yKGxldCBpPTA7IGk8PWRlbDsgKytpKSB7XHJcbiAgICAgIGNvbnN0IHAgPSBzcGxpbmUuZ2V0UG9pbnQoaSpkRGVsKTtcclxuICAgICAgaWYoaSkge1xyXG4gICAgICAgIGNvbnN0IGQ9TWF0aFV0aWxzLnYxLmRpc3RhbmNlVG8ocCk7XHJcbiAgICAgICAgbCArPSBkO1xyXG4gICAgICAgIGxzLnB1c2goZCk7XHJcbiAgICAgIH1cclxuICAgICAgTWF0aFV0aWxzLnYxLmNvcHkocCk7XHJcbiAgICB9XHJcbiAgICBscy5wdXNoKDFlNyk7XHJcblxyXG4gICAgY29uc3QgcmVzID0gW10sIGRsID0gbC8obi0xKTtcclxuICAgIGZvcihsZXQgaT0wLCBMPTAsIGQ9bHNbMF07IGk8bHMubGVuZ3RoLTE7ICsraSwgZCs9bHNbaV0pIHtcclxuICAgICAgaWYoTWF0aC5hYnMoTC1kKTxNYXRoLmFicyhMLWQtbHNbaSsxXSkpIHtcclxuICAgICAgICByZXMucHVzaChpKmREZWwpO1xyXG4gICAgICAgIEwrPWRsO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHJlcztcclxuICB9XHJcblxyXG4gIHN0YXRpYyByZWZpbmVQb2x5KHBvbHksIG1heERsKSB7XHJcbiAgICBjb25zdCByZXMgPSBbXTtcclxuICAgIGZvcihsZXQgaT0wOyBpPHBvbHkubGVuZ3RoOyArK2kpIHtcclxuICAgICAgY29uc3QgcDAgPSBwb2x5W2ldLCBwMSA9IHBvbHlbKGkrMSklcG9seS5sZW5ndGhdLCBsID0gQmFzZU1hdGhVdGlscy52MmRpc3QocDAsIHAxKSwgbiA9IE1hdGguY2VpbChsL21heERsKSwgZGwgPSBsL247XHJcbiAgICAgIHJlcy5wdXNoKHAwKTtcclxuICAgICAgZm9yKGxldCBqPTE7IGo8bjsgKytqKSB7XHJcbiAgICAgICAgcmVzLnB1c2gobmV3IFRIUkVFLlZlY3RvcjIoXHJcbiAgICAgICAgICBwMC54K2oqZGwqKHAxLngtcDAueCkvbCxcclxuICAgICAgICAgIHAwLnkraipkbCoocDEueS1wMC55KS9sXHJcbiAgICAgICAgKSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiByZXM7XHJcbiAgfVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9jb21tb24vY2xhc3Nlcy9NYXRoVXRpbHMuanMiLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBVdGlscyB7XHJcblxyXG4gIHN0YXRpYyBub3JtYWxpemVVcmwodXJsKSB7XHJcbiAgICBmdW5jdGlvbiBzcGxpdChzKSB7XHJcbiAgICAgIHJldHVybiBzLnJlcGxhY2UoL1xcXFwvZywgJy8nKS5zcGxpdCgnLycpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgYmFzZSA9IHNwbGl0KHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcclxuICAgIHVybCA9IHNwbGl0KHVybCk7XHJcbiAgICBpZihiYXNlWzJdPT09dXJsWzJdKSB7XHJcbiAgICAgIHVybFswXSA9IGJhc2VbMF07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdXJsLmpvaW4oJy8nKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBleHRlbmRzKGRlciwgYmFzZSkge1xyXG4gICAgZm9yKGxldCBuYW1lIGluIGJhc2UpIHtcclxuICAgICAgaWYoIWRlci5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xyXG4gICAgICAgIGRlcltuYW1lXSA9IGJhc2VbbmFtZV07XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHN0YXRpYyBkZWZhdWx0Q21wKGEsIGIpIHtcclxuICAgIHJldHVybiBhLWI7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgbG93ZXJCb3VuZChhLCB4LCBjbXApIHtcclxuICAgIGNtcCA9IGNtcCB8fCBVdGlscy5kZWZhdWx0Q21wO1xyXG4gICAgbGV0IGwgPSAwLCBoID0gYS5sZW5ndGgtMTtcclxuICAgIHdoaWxlKGgtbD4xKSB7XHJcbiAgICAgIGxldCBtaWQgPSBNYXRoLmZsb29yKChsICsgaCkgLyAyKTtcclxuICAgICAgaWYoY21wKHgsIGFbbWlkXSk8MCkge1xyXG4gICAgICAgIGggPSBtaWQ7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgbCA9IG1pZDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNtcCh4LCBhW2hdKT49MD8gaDogbDtcclxuICB9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL1V0aWxzLmpzIiwiaW1wb3J0IHskfSBmcm9tICcuLi9saWJzJztcclxuaW1wb3J0IEdyYXBoVXRpbHMgZnJvbSAnLi9HcmFwaFV0aWxzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEltYWdlQmFzZSB7XHJcblxyXG4gIHN0YXRpYyByZW5kZXJDYW52YXMgPSAgJCgnPGNhbnZhcz4nKVswXTtcclxuICBzdGF0aWMgcmVuZGVyQ2FudmFzQ3R4ID0gSW1hZ2VCYXNlLnJlbmRlckNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihjb250ZXh0LCB3aWR0aCwgaGVpZ2h0LCBjb2xvcikge1xyXG4gICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcclxuICAgIHRoaXMud25kID0gY29udGV4dC53bmQ7XHJcbiAgICB0aGlzLmRvYyA9IGNvbnRleHQuZG9jO1xyXG4gICAgdGhpcy5lbGVtZW50ID0gY29udGV4dC5lbGVtZW50IHx8IGNvbnRleHQuZG9jLmJvZHk7XHJcbiAgICB0aGlzLmMgPSBjb250ZXh0LnJlbmRlckNhbnZhcyB8fCBJbWFnZUJhc2UucmVuZGVyQ2FudmFzO1xyXG4gICAgdGhpcy5jdHggPSBjb250ZXh0LnJlbmRlckNhbnZhc0N0eCB8fCBJbWFnZUJhc2UucmVuZGVyQ2FudmFzQ3R4O1xyXG4gICAgdGhpcy5yZXNXID0gdGhpcy53aWR0aCA9IHdpZHRoO1xyXG4gICAgdGhpcy5yZXNIID0gdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XHJcbiAgICB0aGlzLmNvbG9yID0gY29sb3I7XHJcbiAgfVxyXG5cclxuICBzZXRSZW5kZXJDYW52YXMoYywgY3R4KSB7XHJcbiAgICB0aGlzLmMgPSBjO1xyXG4gICAgdGhpcy5jdHggPSBjdHg7XHJcbiAgfVxyXG5cclxuICBzZXRSZXNvbHV0aW9uKHJlcykge1xyXG4gICAgY29uc3QgayA9IHJlcy53aWR0aC90aGlzLnJlc1c7XHJcbiAgICB0aGlzLnJlc1cgPSByZXMud2lkdGg7XHJcbiAgICB0aGlzLnJlc0ggPSBrKnRoaXMucmVzSDsgLy8gcmVzLmhlaWdodDtcclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoKSB7XHJcblxyXG4gIH1cclxuXHJcbiAgcmVuZGVyQmxhbmtQYWdlKCkge1xyXG4gICAgdGhpcy5jdHguYmVnaW5QYXRoKCk7XHJcbiAgICB0aGlzLmN0eC5maWxsU3R5bGUgPSBHcmFwaFV0aWxzLmNvbG9yMlJnYmEodGhpcy5jb2xvciwgMSk7XHJcbiAgICB0aGlzLmN0eC5yZWN0KDAsIDAsIHRoaXMuYy53aWR0aCwgdGhpcy5jLmhlaWdodCk7XHJcbiAgICB0aGlzLmN0eC5maWxsKCk7XHJcbiAgfVxyXG5cclxuICByZW5kZXJJbWFnZShpbWFnZSkge1xyXG4gICAgdGhpcy5wdXNoQ3R4KCk7XHJcbiAgICB0aGlzLmN0eC5kcmF3SW1hZ2UoaW1hZ2UsIDAsIDApO1xyXG4gICAgdGhpcy5wb3BDdHgoKTtcclxuICB9XHJcblxyXG4gIG5vcm1Ub0NvbnYocCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgeDogcC54KnRoaXMuYy53aWR0aCxcclxuICAgICAgeTogKDEtcC55KSp0aGlzLmMuaGVpZ2h0XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgcmVuZGVySGl0KHBvbHkpIHtcclxuICAgIGNvbnN0IGN0eCA9IHRoaXMuY3R4O1xyXG4gICAgY3R4LmZpbGxTdHlsZSA9ICdyZ2JhKDI1NSwyNTUsMCwwLjQpJztcclxuICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgIGxldCBwID0gdGhpcy5ub3JtVG9Db252KHBvbHlbMF0pO1xyXG4gICAgY3R4Lm1vdmVUbyhwLngsIHAueSk7XHJcbiAgICBmb3IobGV0IGk9MTsgaTxwb2x5Lmxlbmd0aDsgKytpKSB7XHJcbiAgICAgIHAgPSB0aGlzLm5vcm1Ub0NvbnYocG9seVtpXSk7XHJcbiAgICAgIGN0eC5saW5lVG8ocC54LCBwLnkpO1xyXG4gICAgfVxyXG4gICAgY3R4LmNsb3NlUGF0aCgpO1xyXG4gICAgY3R4LmZpbGwoKTtcclxuICB9XHJcblxyXG4gIHB1c2hDdHgoKSB7XHJcbiAgICBpZih0aGlzLnJlc1chPXRoaXMuYy53aWR0aCkge1xyXG4gICAgICB0aGlzLmMud2lkdGggPSB0aGlzLnJlc1c7XHJcbiAgICB9XHJcbiAgICBpZih0aGlzLnJlc0ghPXRoaXMuYy5oZWlnaHQpIHtcclxuICAgICAgdGhpcy5jLmhlaWdodCA9IHRoaXMucmVzSDtcclxuICAgIH1cclxuICAgIHRoaXMuY3R4LnNhdmUoKTtcclxuICAgIHRoaXMuY3R4LnNjYWxlKHRoaXMuYy53aWR0aC90aGlzLndpZHRoLCB0aGlzLmMuaGVpZ2h0L3RoaXMuaGVpZ2h0KTtcclxuICAgIHJldHVybiB0aGlzLmN0eDtcclxuICB9XHJcblxyXG4gIHBvcEN0eCgpIHtcclxuICAgIHRoaXMuY3R4LnJlc3RvcmUoKTtcclxuICB9XHJcblxyXG4gIHJlbmRlck5vdEZvdW5kUGFnZSgpIHtcclxuICAgIHRoaXMucmVuZGVyQmxhbmtQYWdlKCk7XHJcbiAgfVxyXG5cclxuICBmaW5pc2hSZW5kZXIoKSB7XHJcbiAgICBpZih0aGlzLm9uQ2hhbmdlKSB7XHJcbiAgICAgIHRoaXMub25DaGFuZ2UodGhpcy5jKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGZpbmlzaExvYWQoKSB7XHJcbiAgICBpZih0aGlzLm9uTG9hZCkge1xyXG4gICAgICB0aGlzLm9uTG9hZCgpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHRoaXMuc3RhcnRSZW5kZXIoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldFNpbXVsYXRlZERvYygpIHtcclxuICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgfVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9jb21tb24vY2xhc3Nlcy9JbWFnZUJhc2UuanMiLCJpbXBvcnQgeyR9IGZyb20gJy4uL2xpYnMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRXZlbnRDb252ZXJ0ZXIge1xyXG5cclxuICAvLyB2aXJ0dWFsc1xyXG4gIC8vIGdldE9iamVjdChlLCBkYXRhKTtcclxuICAvLyBnZXRDYWxsYmFjayhvYmplY3QpO1xyXG4gIC8vIHRlc3Qob2JqZWN0MSwgb2JqZWN0MSk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHduZCwgZG9jKSB7XHJcbiAgICB0aGlzLnduZCA9IHduZDtcclxuICAgIHRoaXMuZG9jID0gZG9jO1xyXG4gICAgdGhpcy5lbmFibGVkID0gdHJ1ZTtcclxuICB9XHJcblxyXG4gIHNldEVuYWJsZSh2bCkge1xyXG4gICAgaWYoIXZsKSB7XHJcbiAgICAgIGlmKHRoaXMubUNhcE9iamVjdCkge1xyXG4gICAgICAgIHRoaXMubm90aWZ5KHRoaXMubUNhcE9iamVjdCwgJC5FdmVudCgnbW91c2V1cCcpLCAnbW91c2V1cCcpO1xyXG4gICAgICAgIHRoaXMubUNhcE9iamVjdCA9IHVuZGVmaW5lZDtcclxuICAgICAgfVxyXG4gICAgICBpZih0aGlzLm1Ib3ZPYmplY3QpIHtcclxuICAgICAgICB0aGlzLm5vdGlmeSh0aGlzLm1Ib3ZPYmplY3QsICQuRXZlbnQoJ21vdXNlb3V0JyksICdtb3VzZW91dCcpO1xyXG4gICAgICAgIHRoaXMubUhvdk9iamVjdCA9IHVuZGVmaW5lZDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgdGhpcy5lbmFibGVkID0gdmw7XHJcbiAgfVxyXG5cclxuICBnZXRDYWxsYmFjayhvYmplY3QpIHtcclxuICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgfVxyXG5cclxuICBub3RpZnkob2JqZWN0LCBlLCB0eXBlKSB7XHJcbiAgICBjb25zdCBjYWxsYmFjayA9IHRoaXMuZ2V0Q2FsbGJhY2sob2JqZWN0KTtcclxuICAgIGlmKGNhbGxiYWNrKSB7XHJcbiAgICAgIGNvbnN0IHByb3BzID0ge1xyXG4gICAgICAgIC4uLmUsXHJcbiAgICAgICAgdHlwZSxcclxuICAgICAgICB2aWV3OiB0aGlzLnduZFxyXG4gICAgICB9O1xyXG4gICAgICBjb25zdCBqRSA9ICQuRXZlbnQodHlwZSwgcHJvcHMpO1xyXG4gICAgICBjYWxsYmFjayhqRSwgb2JqZWN0KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNvbnZlcnQoZSwgZGF0YSkge1xyXG4gICAgaWYoIXRoaXMuZW5hYmxlZCkgcmV0dXJuO1xyXG5cclxuICAgIGlmKHRoaXMuZmlsdGVyKSB7XHJcbiAgICAgIGUgPSB0aGlzLmZpbHRlcih0aGlzLmVsZW1lbnQsIGUpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IG9iamVjdCA9IHRoaXMuZ2V0T2JqZWN0KGUsIGRhdGEpLFxyXG4gICAgICBub3RpZnkgPSB+ZS50eXBlLmluZGV4T2YoJ3RvdWNoJyk/IHRoaXMuY29udmVydFRvdWNoKGUsIGRhdGEsIG9iamVjdCk6IHRoaXMuY29udmVydE1vdXNlKGUsIGRhdGEsIG9iamVjdCk7XHJcbiAgICBpZihub3RpZnkgJiYgb2JqZWN0KSB7XHJcbiAgICAgIHRoaXMubm90aWZ5KG9iamVjdCwgZSwgZS50eXBlKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNvbnZlcnRUb3VjaChlLCBkYXRhLCBvYmplY3QpIHtcclxuICAgIGxldCBub3RpZnkgPSB0cnVlO1xyXG4gICAgc3dpdGNoKGUudHlwZSkge1xyXG4gICAgICBjYXNlICd0b3VjaHN0YXJ0Jzoge1xyXG4gICAgICAgIGlmKHRoaXMudENhcE9iamVjdCkge1xyXG4gICAgICAgICAgdGhpcy5ub3RpZnkodGhpcy50Q2FwT2JqZWN0LCBlLCAndG91Y2hlbmQnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy50Q2FwT2JqZWN0ID0gb2JqZWN0O1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICAgIGNhc2UgJ3RvdWNoZW5kJzoge1xyXG4gICAgICAgIGlmKHRoaXMudENhcE9iamVjdCAmJiAhdGhpcy50ZXN0KHRoaXMudENhcE9iamVjdCwgb2JqZWN0KSkge1xyXG4gICAgICAgICAgdGhpcy5ub3RpZnkodGhpcy50Q2FwT2JqZWN0LCBlLCAndG91Y2hlbmQnKTtcclxuICAgICAgICAgIG5vdGlmeSA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmKG9iamVjdCAmJiB0aGlzLnRlc3QodGhpcy50Q2FwT2JqZWN0LCBvYmplY3QpKSB7XHJcbiAgICAgICAgICB0aGlzLm5vdGlmeShvYmplY3QsIGUsICd0b3VjaHRhcCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnRDYXBPYmplY3QgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgY2FzZSAndG91Y2h0YXAnOiB7XHJcbiAgICAgICAgbm90aWZ5ID0gZmFsc2U7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBub3RpZnk7XHJcbiAgfVxyXG5cclxuICBjb252ZXJ0TW91c2UoZSwgZGF0YSwgb2JqZWN0KSB7XHJcbiAgICBsZXQgbm90aWZ5ID0gdHJ1ZTtcclxuICAgIHN3aXRjaChlLnR5cGUpIHtcclxuICAgICAgY2FzZSAnbW91c2Vkb3duJzoge1xyXG4gICAgICAgIGlmKHRoaXMubUNhcE9iamVjdCkge1xyXG4gICAgICAgICAgdGhpcy5ub3RpZnkodGhpcy5tQ2FwT2JqZWN0LCBlLCAnbW91c2V1cCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLm1DYXBPYmplY3QgPSBvYmplY3Q7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgY2FzZSAnbW91c2V1cCc6IHtcclxuICAgICAgICBpZih0aGlzLm1DYXBPYmplY3QgJiYgIXRoaXMudGVzdCh0aGlzLm1DYXBPYmplY3QsIG9iamVjdCkpIHtcclxuICAgICAgICAgIHRoaXMubm90aWZ5KHRoaXMubUNhcE9iamVjdCwgZSwgJ21vdXNldXAnKTtcclxuICAgICAgICAgIG5vdGlmeSA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgICBjYXNlICdjbGljayc6IHtcclxuICAgICAgICBub3RpZnkgPSB0aGlzLnRlc3QodGhpcy5tQ2FwT2JqZWN0LCBvYmplY3QpO1xyXG4gICAgICAgIHRoaXMubUNhcE9iamVjdCA9IHVuZGVmaW5lZDtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgICBjYXNlICdtb3VzZWVudGVyJzpcclxuICAgICAgY2FzZSAnbW91c2VvdmVyJzpcclxuICAgICAgY2FzZSAnbW91c2Vtb3ZlJzoge1xyXG4gICAgICAgIGlmKCF0aGlzLnRlc3QodGhpcy5tSG92T2JqZWN0LCBvYmplY3QpICYmIHRoaXMubUhvdk9iamVjdCkge1xyXG4gICAgICAgICAgdGhpcy5ub3RpZnkodGhpcy5tSG92T2JqZWN0LCBlLCAnbW91c2VvdXQnKTtcclxuICAgICAgICAgIHRoaXMubUhvdk9iamVjdCA9IHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYoIXRoaXMubUhvdk9iamVjdCAmJiBvYmplY3QpIHtcclxuICAgICAgICAgIHRoaXMubm90aWZ5KG9iamVjdCwgZSwgJ21vdXNlb3ZlcicpO1xyXG4gICAgICAgICAgdGhpcy5tSG92T2JqZWN0ID0gb2JqZWN0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBub3RpZnkgPSBlLnR5cGUgPT09ICdtb3VzZW1vdmUnO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICAgIGNhc2UgJ21vdXNlbGVhdmUnOlxyXG4gICAgICBjYXNlICdtb3VzZW91dCc6IHtcclxuICAgICAgICBpZih0aGlzLm1Ib3ZPYmplY3QpIHtcclxuICAgICAgICAgIHRoaXMubm90aWZ5KHRoaXMubUhvdk9iamVjdCwgZSwgJ21vdXNlb3V0Jyk7XHJcbiAgICAgICAgICB0aGlzLm1Ib3ZPYmplY3QgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG5vdGlmeSA9IGZhbHNlO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbm90aWZ5O1xyXG4gIH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvRXZlbnRDb252ZXJ0ZXIuanMiLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBHcmFwaFV0aWxzIHtcclxuXHJcbiAgc3RhdGljIGV4dHJhcG9sYXRlTGluZWFyKHgseSx4aSkge1xyXG4gICAgcmV0dXJuIHlbMF0rKHlbMV0teVswXSkvKHhbMV0teFswXSkqKHhpLXhbMF0pO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGludGVycG9sYXRlMDEoeTEseTIsdCkge1xyXG4gICAgcmV0dXJuIEdyYXBoVXRpbHMuZXh0cmFwb2xhdGVMaW5lYXIoWzAsMV0sW3kxLHkyXSx0KTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBnZXRDb2xvckJ5dGVzKGNvbG9yKSB7XHJcbiAgICByZXR1cm4gWyhjb2xvcj4+MTYpJjB4RkYsIChjb2xvcj4+OCkmMHhGRiwgY29sb3ImMHhGRl07XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgaW52ZXJzZUNvbG9yKGNvbG9yLCB0PTEpIHtcclxuICAgIGNvbnN0IGJzPUdyYXBoVXRpbHMuZ2V0Q29sb3JCeXRlcyhjb2xvciksXHJcbiAgICAgICAgICBpYnM9WzB4RkYtYnNbMF0sMHhGRi1ic1sxXSwweEZGLWJzWzJdXSxcclxuICAgICAgICAgIG5icz1bTWF0aC5yb3VuZChHcmFwaFV0aWxzLmludGVycG9sYXRlMDEoYnNbMF0saWJzWzBdLHQpKSxNYXRoLnJvdW5kKEdyYXBoVXRpbHMuaW50ZXJwb2xhdGUwMShic1sxXSxpYnNbMV0sdCkpLE1hdGgucm91bmQoR3JhcGhVdGlscy5pbnRlcnBvbGF0ZTAxKGJzWzJdLGlic1syXSx0KSldO1xyXG4gICAgcmV0dXJuIEdyYXBoVXRpbHMuYnl0ZXMyQ29sb3IobmJzKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBjb2xvcjJSZ2JhKGNvbG9yLCBhKSB7XHJcbiAgICByZXR1cm4gR3JhcGhVdGlscy5ieXRlczJSZ2JhKEdyYXBoVXRpbHMuZ2V0Q29sb3JCeXRlcyhjb2xvciksIGEpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGJ5dGVzMlJnYmEoYnMsIGEpIHtcclxuICAgIHJldHVybiAncmdiYSgnK2JzLmpvaW4oJywnKSsnLCcrYSsnKSc7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgYnl0ZXMyQ29sb3IoYnMpIHtcclxuICAgIHJldHVybiBic1syXXwoYnNbMV08PDgpfChic1swXTw8MTYpXHJcbiAgfVxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL0dyYXBoVXRpbHMuanMiLCJpbXBvcnQgQ2FjaGUgZnJvbSAnLi9DYWNoZSc7XHJcbmltcG9ydCBCbGFua0ltYWdlIGZyb20gJy4vQmxhbmtJbWFnZSc7XHJcbmltcG9ydCBTdGF0aWNJbWFnZSBmcm9tICcuL1N0YXRpY0ltYWdlJztcclxuaW1wb3J0IFBkZkltYWdlIGZyb20gJy4vUGRmSW1hZ2UnO1xyXG5pbXBvcnQgSW50ZXJhY3RpdmVJbWFnZSBmcm9tICcuL0ludGVyYWN0aXZlSW1hZ2UnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW1hZ2VGYWN0b3J5IHtcclxuXHJcbiAgY29uc3RydWN0b3IoY29udGV4dCwgY2FjaGUpIHtcclxuICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XHJcbiAgICB0aGlzLmNhY2hlID0gY2FjaGUgfHwgbmV3IENhY2hlKCk7XHJcbiAgfVxyXG5cclxuICBidWlsZChpbmZvLCBuPTAsIHdpZHRoVGV4ZWxzPTIxMCwgaGVpZ2h0VGV4ZWxzPTI5NywgY29sb3I9MHhGRkZGRkYsIGluamVjdG9yPXVuZGVmaW5lZCkge1xyXG4gICAgbGV0IGltYWdlO1xyXG4gICAgc3dpdGNoKGluZm8udHlwZSkge1xyXG4gICAgICBjYXNlICdodG1sJzoge1xyXG4gICAgICAgIGltYWdlID0gbmV3IEludGVyYWN0aXZlSW1hZ2UodGhpcy5jb250ZXh0LCB3aWR0aFRleGVscywgaGVpZ2h0VGV4ZWxzLCBjb2xvciwgaW5mby5zcmMsIHRoaXMuY2FjaGUsIGluamVjdG9yKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgICBjYXNlICdpbWFnZSc6IHtcclxuICAgICAgICBpbWFnZSA9IG5ldyBTdGF0aWNJbWFnZSh0aGlzLmNvbnRleHQsIHdpZHRoVGV4ZWxzLCBoZWlnaHRUZXhlbHMsIGNvbG9yLCBpbmZvLnNyYyk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgY2FzZSAncGRmJzoge1xyXG4gICAgICAgIGltYWdlID0gbmV3IFBkZkltYWdlKHRoaXMuY29udGV4dCwgd2lkdGhUZXhlbHMsIGhlaWdodFRleGVscywgY29sb3IsIGluZm8uc3JjLCBuKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgICBjYXNlICdibGFuayc6XHJcbiAgICAgIGRlZmF1bHQ6IHtcclxuICAgICAgICBpbWFnZSA9IG5ldyBCbGFua0ltYWdlKHRoaXMuY29udGV4dCwgd2lkdGhUZXhlbHMsIGhlaWdodFRleGVscywgY29sb3IpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gaW1hZ2U7XHJcbiAgfVxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL0ltYWdlRmFjdG9yeS5qcyIsImltcG9ydCB7cHJvcHMgYXMgIGJvb2tQcm9wc30gZnJvbSAnLi4vcHJvcHMvYm9vayc7XHJcbmltcG9ydCBCYXNlTWF0aFV0aWxzIGZyb20gJ0Jhc2VNYXRoVXRpbHMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQm9va1Byb3BzQnVpbGRlciB7XHJcbiAgY29uc3RydWN0b3Iob25SZWFkeSwgc3R5bGUpIHtcclxuICAgIHRoaXMub25SZWFkeSA9IG9uUmVhZHk7XHJcbiAgICB0aGlzLmRlZmF1bHRzID0gYm9va1Byb3BzKHN0eWxlKTtcclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoKSB7XHJcblxyXG4gIH1cclxuXHJcbiAgY2FsY1NpemUod2lkdGgsIGhlaWdodCkge1xyXG4gICAgY29uc3Qgc2NhbGUgPSBCYXNlTWF0aFV0aWxzLmNhbGNTY2FsZSh3aWR0aCwgaGVpZ2h0LCB0aGlzLmRlZmF1bHRzLndpZHRoLCB0aGlzLmRlZmF1bHRzLmhlaWdodCk7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB3aWR0aDogc2NhbGUqd2lkdGgsXHJcbiAgICAgIGhlaWdodDogc2NhbGUqaGVpZ2h0XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgY2FsY1RleGVscyh3aWR0aCwgaGVpZ2h0KSB7XHJcbiAgICBjb25zdCBzaGVldCA9IHRoaXMuZGVmYXVsdHMuc2hlZXQsIHNjYWxlID0gQmFzZU1hdGhVdGlscy5jYWxjU2NhbGUod2lkdGgsIGhlaWdodCwgc2hlZXQud2lkdGhUZXhlbHMsIHNoZWV0LmhlaWdodFRleGVscyk7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB3aWR0aFRleGVsczogc2NhbGUqd2lkdGgsXHJcbiAgICAgIGhlaWdodFRleGVsczogc2NhbGUqaGVpZ2h0XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgY2FsY1Byb3BzKHdpZHRoLCBoZWlnaHQpIHtcclxuICAgIHRoaXMucHJvcHMgPSB7XHJcbiAgICAgIC4uLnRoaXMuZGVmYXVsdHMsXHJcbiAgICAgIC4uLnRoaXMuY2FsY1NpemUod2lkdGgsIGhlaWdodCksXHJcbiAgICAgIHNoZWV0OiB7XHJcbiAgICAgICAgLi4udGhpcy5kZWZhdWx0cy5zaGVldCxcclxuICAgICAgICAuLi50aGlzLmNhbGNUZXhlbHMod2lkdGgsIGhlaWdodClcclxuICAgICAgfSxcclxuICAgICAgY292ZXI6IHtcclxuICAgICAgICAuLi50aGlzLmRlZmF1bHRzLmNvdmVyLFxyXG4gICAgICB9LFxyXG4gICAgICBwYWdlOiB7XHJcbiAgICAgICAgLi4udGhpcy5kZWZhdWx0cy5wYWdlLFxyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgY2FsY1NoZWV0cyhwYWdlcykge1xyXG4gICAgcmV0dXJuIHRoaXMuc2hlZXRzID0gTWF0aC5jZWlsKE1hdGgubWF4KDAsIHBhZ2VzLTQpLzIpO1xyXG4gIH1cclxuXHJcbiAgZ2V0U2hlZXRzKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuc2hlZXRzO1xyXG4gIH1cclxuXHJcbiAgZ2V0UHJvcHMoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5wcm9wcztcclxuICB9XHJcblxyXG4gIGdldFBhZ2VDYWxsYmFjaygpIHtcclxuICAgIHJldHVybiB0aGlzLmJpbmRzLnBhZ2VDYWxsYmFjaztcclxuICB9XHJcblxyXG4gIHJlYWR5KCkge1xyXG4gICAgaWYodGhpcy5vblJlYWR5KSB7XHJcbiAgICAgIHRoaXMub25SZWFkeSh0aGlzLmdldFByb3BzKCksIHRoaXMuZ2V0U2hlZXRzKCksIHRoaXMuZ2V0UGFnZUNhbGxiYWNrKCkpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9qcy9jbGFzc2VzL0Jvb2tQcm9wc0J1aWxkZXIuanMiLCJpbXBvcnQge1RIUkVFfSBmcm9tICcuLi9saWJzJztcclxuaW1wb3J0IHNoZWV0QmxvY2sgZnJvbSAnLi4vbW9kZWxzL3NoZWV0QmxvY2snO1xyXG5pbXBvcnQgTWF0aFV0aWxzIGZyb20gJ01hdGhVdGlscyc7XHJcbmltcG9ydCBUaHJlZVV0aWxzIGZyb20gJ1RocmVlVXRpbHMnO1xyXG4vLyBpbXBvcnQgVGhyZWVNYXJrdXAgZnJvbSAnLi9UaHJlZU1hcmt1cCc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTaGVldEJsb2NrIHtcclxuXHJcbiAgY29uc3RydWN0b3IodmlzdWFsLCBwLCBmaXJzdCwgbGFzdCwgYW5nbGU9MCwgc3RhdGU9J2Nsb3NlZCcsIGhlaWdodD0wKSB7XHJcbiAgICB0aGlzLnZpc3VhbCA9IHZpc3VhbDtcclxuICAgIHRoaXMucCA9IHtcclxuICAgICAgLi4ucCxcclxuICAgICAgZmlyc3QsXHJcbiAgICAgIGxhc3RcclxuICAgIH07XHJcbiAgICBjb25zdCBwcm9wcyA9IHRoaXMuZ2V0UHJvcHMoKTtcclxuXHJcbiAgICBjb25zdCBsb2FkZWRQb2ludHMgPSB0aGlzLmxvYWRQb2ludHMoKTtcclxuICAgIE9iamVjdC5rZXlzKGxvYWRlZFBvaW50cykubWFwKChrKT0+IHtcclxuICAgICAgdGhpc1trXSA9IGxvYWRlZFBvaW50c1trXVtwcm9wcy5zaGFwZV0gfHwgbG9hZGVkUG9pbnRzW2tdWzBdO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy5wU3BsaW5lID0gbmV3IFRIUkVFLkNhdG11bGxSb21DdXJ2ZTMoW10pO1xyXG4gICAgZm9yKGxldCBpPTA7IGk8dGhpcy5pbnRlcnBvbGF0aW9uUG9pbnRzLnhbMF0ubGVuZ3RoOyArK2kpIHtcclxuICAgIFx0dGhpcy5wU3BsaW5lLnBvaW50cy5wdXNoKG5ldyBUSFJFRS5WZWN0b3IzKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuaVNwbGluZSA9IG5ldyBUSFJFRS5DYXRtdWxsUm9tQ3VydmUzKFtdKTtcclxuICAgIGZvcihsZXQgaT0wOyBpPHNoZWV0QmxvY2sucmVzWDsgKytpKSB7XHJcbiAgICBcdHRoaXMuaVNwbGluZS5wb2ludHMucHVzaChuZXcgVEhSRUUuVmVjdG9yMygpKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmFTcGxpbmVzID0gW107XHJcblxyXG4gICAgLy90aGlzLnRocmVlID0gbmV3IFRIUkVFLk9iamVjdDNEKCk7XHJcblxyXG4gICAgdGhpcy5nZW9tZXRyeSA9IHNoZWV0QmxvY2suZ2VvbWV0cnkuY2xvbmUoKTtcclxuXHJcbiAgICB0aGlzLnAuc2lkZUZhY2VzID0gW3tcclxuICAgICAgICBmaXJzdDogMCxcclxuICAgICAgICBsYXN0OiBzaGVldEJsb2NrLmZhY2VzWzBdXHJcbiAgICAgIH0sIHtcclxuICAgICAgICBmaXJzdDogc2hlZXRCbG9jay5mYWNlc1swXSxcclxuICAgICAgICBsYXN0OiBzaGVldEJsb2NrLmZhY2VzWzFdXHJcbiAgICAgIH1cclxuICAgIF07XHJcblxyXG4gICAgdGhpcy5zaWRlVGV4dHVyZSA9IG5ldyBUSFJFRS5UZXh0dXJlKCk7XHJcbiAgICB0aGlzLnNpZGVUZXh0dXJlLndyYXBUID0gVEhSRUUuUmVwZWF0V3JhcHBpbmc7XHJcbiAgICB0aGlzLnNpZGVUZXh0dXJlLnJlcGVhdC5zZXQoMCwgbGFzdC1maXJzdCk7XHJcbiAgICB0aGlzLnNpZGVUZXh0dXJlLmltYWdlID0gcHJvcHMuc2lkZVRleHR1cmU7XHJcbiAgICB0aGlzLnNpZGVUZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcclxuXHJcbiAgICB0aGlzLm1hdGVyaWFscyA9IFtcclxuICAgICAgICAgICAgICAgICAgICBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwoKSxcclxuICAgICAgICAgICAgICAgICAgICBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwoKSxcclxuICAgICAgICAgICAgICAgICAgICBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwoe21hcDogdGhpcy5zaWRlVGV4dHVyZX0pLFxyXG4gICAgICAgICAgICAgICAgICAgIG5ldyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbCh7bWFwOiB0aGlzLnNpZGVUZXh0dXJlfSksXHJcbiAgICAgICAgICAgICAgICAgICAgbmV3IFRIUkVFLk1lc2hQaG9uZ01hdGVyaWFsKHttYXA6IHRoaXMuc2lkZVRleHR1cmV9KSxcclxuICAgICAgICAgICAgICAgICAgICBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwoe21hcDogdGhpcy5zaWRlVGV4dHVyZX0pXHJcbiAgICAgICAgICAgICAgICAgIF07XHJcblxyXG4gICAgdGhpcy5wLnNldFRleHR1cmUodGhpcy5tYXRlcmlhbHNbMF0sIDIqZmlyc3QpO1xyXG4gICAgdGhpcy5wLnNldFRleHR1cmUodGhpcy5tYXRlcmlhbHNbMV0sIDIqbGFzdC0xKTtcclxuXHJcbiAgICB0aGlzLm1lc2ggPSBuZXcgVEhSRUUuTWVzaCh0aGlzLmdlb21ldHJ5LCB0aGlzLm1hdGVyaWFscyk7XHJcbiAgICB0aGlzLm1lc2guY2FzdFNoYWRvdyA9IGZhbHNlO1xyXG4gICAgdGhpcy5tZXNoLnJlY2VpdmVTaGFkb3cgPSBmYWxzZTtcclxuICAgIC8vIHRoaXMubWVzaC5mcnVzdHVtQ3VsbGVkID0gdHJ1ZTtcclxuXHJcbiAgICAvL3RoaXMudGhyZWUuYWRkKHRoaXMubWVzaCk7XHJcbiAgICB0aGlzLnRocmVlID0gdGhpcy5tZXNoO1xyXG4gICAgdGhpcy50aHJlZS51c2VyRGF0YS5zZWxmID0gdGhpcztcclxuXHJcbiAgICB0aGlzLm1hcmtlcnMgPSBbXTtcclxuICAgIGlmKHRoaXMucC5tYXJrZXIudXNlKSB7XHJcbiAgICAgIGNvbnN0IGw9dGhpcy5nZW9tZXRyeS52ZXJ0aWNlcy5sZW5ndGg7XHJcbiAgICAgIGxldCBpcztcclxuICAgICAgLy8gaXMgPSBbMCwgc2hlZXRCbG9jay5yZXNYLTEsIChzaGVldEJsb2NrLnJlc1otMSkqc2hlZXRCbG9jay5yZXNYLCBzaGVldEJsb2NrLnJlc1oqc2hlZXRCbG9jay5yZXNYLTFdO1xyXG4gICAgICBpcyA9IEFycmF5LmFwcGx5KDAsIEFycmF5KGwpKS5tYXAoKF8sIGkpPT4gaSk7XHJcblxyXG4gICAgICBmb3IobGV0IGkgb2YgaXMpIHtcclxuICAgICAgICBjb25zdCBtYXJrZXIgPSBUaHJlZVV0aWxzLmNyZWF0ZU1hcmtlcih0aGlzLmdlb21ldHJ5LnZlcnRpY2VzW2ldLCBpPGwvMj8weEZGMDAwMDoweDAwRkYwMCwgdGhpcy5wLm1hcmtlci5zaXplKTtcclxuICAgICAgICB0aGlzLm1hcmtlcnMucHVzaCh7XHJcbiAgICAgICAgICBtYXJrZXIsXHJcbiAgICAgICAgICB2ZXJ0ZXg6IGlcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnRocmVlLmFkZChtYXJrZXIpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5jb3JuZXIgPSB7XHJcbiAgICAgIHVzZTogdHJ1ZSxcclxuICAgICAgaGVpZ2h0OiAwLFxyXG4gICAgICBtYXhEaXN0YW5jZTogMCxcclxuICAgICAgcG9pbnRzOiBbXSxcclxuICAgICAgT1o6IG5ldyBUSFJFRS5WZWN0b3IzKDAsMCwxKSxcclxuICAgICAgYXhpczogbmV3IFRIUkVFLlZlY3RvcjMoKVxyXG4gICAgfTtcclxuICAgIHRoaXMuc2V0KDAsICdjbG9zZWQnLCBoZWlnaHQsIGZpcnN0LCBsYXN0KTsgLy8gY2FsY3VsYXRlIGNvcm5lciBwb2ludHNcclxuXHJcbiAgICB0aGlzLnNldChhbmdsZSwgc3RhdGUsIGhlaWdodCwgZmlyc3QsIGxhc3QpOyAvLyBpbml0IHBvc2l0aW9uXHJcblxyXG4gICAgLy8gaWYoIVNoZWV0QmxvY2subWFya3VwKSB7XHJcbiAgICAvLyAgIFNoZWV0QmxvY2subWFya3VwPXRydWU7XHJcbiAgICAvLyAgIHRoaXMubWFya3VwID0gbmV3IFRocmVlTWFya3VwKHRoaXMsIDAsIFt7XHJcbiAgICAvLyAgICAgeDogMCxcclxuICAgIC8vICAgICB5OiAwLFxyXG4gICAgLy8gICB9LCB7XHJcbiAgICAvLyAgICAgeDogMC41LFxyXG4gICAgLy8gICAgIHk6IDFcclxuICAgIC8vICAgfSwge1xyXG4gICAgLy8gICAgIHg6IDEsXHJcbiAgICAvLyAgICAgeTogMFxyXG4gICAgLy8gICB9XS5tYXAoKHApPT5uZXcgVEhSRUUuVmVjdG9yMihwLngsIHAueSkpLCB7fSk7XHJcbiAgICAvLyB9XHJcblxyXG4gIH1cclxuXHJcbiAgZGlzcG9zZSgpIHtcclxuICAgIGZvcihsZXQgbSBvZiB0aGlzLm1hdGVyaWFscykge1xyXG4gICAgICBpZihtLm1hcCkge1xyXG4gICAgICAgIG0ubWFwID0gbnVsbDtcclxuICAgICAgICBtLm5lZWRzVXBkYXRlID0gdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgICBtLmRpc3Bvc2UoKTtcclxuICAgIH1cclxuICAgIGRlbGV0ZSB0aGlzLm1hdGVyaWFscztcclxuICAgIHRoaXMuZ2VvbWV0cnkuZGlzcG9zZSgpO1xyXG4gIH1cclxuXHJcbiAgZ2V0U2l6ZSgpIHtcclxuICAgIHJldHVybiB0aGlzLnAubGFzdC10aGlzLnAuZmlyc3Q7XHJcbiAgfVxyXG5cclxuICBnZXRQcm9wcygpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIC4uLnRoaXMucC5wYWdlLFxyXG4gICAgICBzaGVldHM6IHRoaXMucC5zaGVldHNcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBnZXRUb3BDZXJuZXJzKCkge1xyXG4gICAgY29uc3Qgb2ZmID0gdGhpcy5hbmdsZT5NYXRoLlBJLzI/IHRoaXMuZ2VvbWV0cnkudmVydGljZXMubGVuZ3RoLzI6IDA7XHJcbiAgICByZXR1cm4gW1xyXG4gICAgICAgIHRoaXMuZ2VvbWV0cnkudmVydGljZXNbb2ZmXSxcclxuICAgICAgICB0aGlzLmdlb21ldHJ5LnZlcnRpY2VzW3NoZWV0QmxvY2sucmVzWC0xK29mZl0sXHJcbiAgICAgICAgdGhpcy5nZW9tZXRyeS52ZXJ0aWNlc1soc2hlZXRCbG9jay5yZXNaLTEpKnNoZWV0QmxvY2sucmVzWCtvZmZdLFxyXG4gICAgICAgIHRoaXMuZ2VvbWV0cnkudmVydGljZXNbc2hlZXRCbG9jay5yZXNaKnNoZWV0QmxvY2sucmVzWC0xK29mZl1cclxuICAgICAgXTtcclxuICB9XHJcblxyXG4gIGdldFRvcFNpemUoKSB7XHJcbiAgICAvLyBjb25zdCBsPXRoaXMuZ2VvbWV0cnkudmVydGljZXMubGVuZ3RoLCBvZmYgPSB0aGlzLmFuZ2xlPk1hdGguUEkvMj8gbC8yOiAwLFxyXG4gICAgLy8gICB2MCA9IHRoaXMuZ2VvbWV0cnkudmVydGljZXNbb2ZmXSwgdjEgPSB0aGlzLmdlb21ldHJ5LnZlcnRpY2VzW3NoZWV0QmxvY2sucmVzWipzaGVldEJsb2NrLnJlc1gtMStvZmZdO1xyXG4gICAgLy8gLy8gaXMgPSBbMCwgc2hlZXRCbG9jay5yZXNYLTEsIChzaGVldEJsb2NrLnJlc1otMSkqc2hlZXRCbG9jay5yZXNYLCBzaGVldEJsb2NrLnJlc1oqc2hlZXRCbG9jay5yZXNYLTFdO1xyXG4gICAgLy8gcmV0dXJuIHtcclxuICAgIC8vICAgd2lkdGg6IE1hdGguYWJzKHYxLngtdjAueCksXHJcbiAgICAvLyAgIGhlaWdodDogTWF0aC5hYnModjEuei12MC56KVxyXG4gICAgLy8gfTtcclxuICAgIGNvbnN0IHZzID0gdGhpcy5nZXRUb3BDZXJuZXJzKCk7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB3aWR0aDogdnNbMF0uZGlzdGFuY2VUbyh2c1sxXSksXHJcbiAgICAgIGhlaWdodDogdnNbMF0uZGlzdGFuY2VUbyh2c1syXSlcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBnZXRUb3BXb3JsZFJvdGF0aW9uKHEpIHtcclxuICAgIHEueCA9IC1NYXRoLlBJLzI7XHJcbiAgICByZXR1cm4gcTtcclxuICB9XHJcblxyXG4gIGdldFRvcFdvcmxkUG9zaXRpb24odikge1xyXG4gICAgY29uc3QgbD10aGlzLmdlb21ldHJ5LnZlcnRpY2VzLmxlbmd0aCwgb2ZmID0gdGhpcy5hbmdsZT5NYXRoLlBJLzI/IGwvMjogMCwgdnMgPSBbXHJcbiAgICAgICAgdGhpcy5nZW9tZXRyeS52ZXJ0aWNlc1tvZmZdLFxyXG4gICAgICAgIHRoaXMuZ2VvbWV0cnkudmVydGljZXNbc2hlZXRCbG9jay5yZXNYLTErb2ZmXSxcclxuICAgICAgICB0aGlzLmdlb21ldHJ5LnZlcnRpY2VzWyhzaGVldEJsb2NrLnJlc1otMSkqc2hlZXRCbG9jay5yZXNYK29mZl0sXHJcbiAgICAgICAgdGhpcy5nZW9tZXRyeS52ZXJ0aWNlc1tzaGVldEJsb2NrLnJlc1oqc2hlZXRCbG9jay5yZXNYLTErb2ZmXVxyXG4gICAgICBdO1xyXG4gICAgdi5zZXQoMCwgMCwgMCk7XHJcbiAgICBmb3IobGV0IHZpIG9mIHZzKSB7XHJcbiAgICAgIHYueCArPSAwLjI1KnZpLng7XHJcbiAgICAgIHYueSArPSAwLjI1KnZpLnk7XHJcbiAgICAgIHYueiArPSAwLjI1KnZpLno7XHJcbiAgICB9XHJcbiAgICB0aGlzLnRocmVlLmxvY2FsVG9Xb3JsZCh2KTtcclxuICAgIHJldHVybiB2O1xyXG4gIH1cclxuXHJcbiAgZ2V0SW50ZXJwb2xhdGlvblBvaW50cyhpbmRzLCBtb2QpIHtcclxuICAgIGNvbnN0IHBzID0ge3g6IFtdLCB5OiBbXX0sIEsgPSB0aGlzLmdldFByb3BzKCkud2F2ZTtcclxuICAgIGZvcihsZXQgaSBvZiBpbmRzKSB7XHJcbiAgICAgIHBzLngucHVzaChbLi4udGhpcy5pbnRlcnBvbGF0aW9uUG9pbnRzLnhbaV1dKTtcclxuICAgICAgcHMueS5wdXNoKH5tb2QuaW5kZXhPZihpKT8gdGhpcy5pbnRlcnBvbGF0aW9uUG9pbnRzLnlbaV0ubWFwKChuKT0+IEsqbik6IFsuLi50aGlzLmludGVycG9sYXRpb25Qb2ludHMueVtpXV0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHBzO1xyXG4gIH1cclxuXHJcbiAgc2V0KGFuZ2xlLCBzdGF0ZT10aGlzLnN0YXRlLCBoZWlnaHQ9dGhpcy5jb3JuZXIuaGVpZ2h0LCBmaXJzdD10aGlzLnAuZmlyc3QsIGxhc3Q9dGhpcy5wLmxhc3QpIHtcclxuICAgIGNvbnN0IFBJID0gTWF0aC5QSTtcclxuICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTtcclxuICAgIGxldCBjbG9zZWRBbmdsZSwgYmluZGVyVHVybjtcclxuICAgIGlmKHR5cGVvZiBhbmdsZT09PSdvYmplY3QnKSB7XHJcbiAgICAgIHRoaXMuYW5nbGUgPSBhbmdsZS5vcGVuZWRBbmdsZTtcclxuICAgICAgY2xvc2VkQW5nbGUgPSBhbmdsZS5jbG9zZWRBbmdsZTtcclxuICAgICAgYmluZGVyVHVybiA9IGFuZ2xlLmJpbmRlclR1cm4+UEkvMj9QSS1hbmdsZS5iaW5kZXJUdXJuOmFuZ2xlLmJpbmRlclR1cm47XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgdGhpcy5hbmdsZSA9IGFuZ2xlO1xyXG4gICAgfVxyXG4gICAgdGhpcy5jb3JuZXIuaGVpZ2h0ID0gaGVpZ2h0O1xyXG4gICAgaWYodGhpcy5wLmZpcnN0IT09Zmlyc3QgfHwgdGhpcy5wLmxhc3QhPT1sYXN0KSB7XHJcbiAgICAgIHRoaXMuc2lkZVRleHR1cmUucmVwZWF0LnNldCgwLCBsYXN0LWZpcnN0KTtcclxuICAgICAgdGhpcy5zaWRlVGV4dHVyZS5uZWVkc1VwZGF0ZSA9IHRydWU7XHJcbiAgICAgIGlmKHRoaXMucC5maXJzdCE9PWZpcnN0KSB7XHJcbiAgICAgICAgdGhpcy5wLnNldFRleHR1cmUodGhpcy5tYXRlcmlhbHNbMF0sIDIqZmlyc3QpO1xyXG4gICAgICB9XHJcbiAgICAgIGlmKHRoaXMucC5sYXN0IT09bGFzdCkge1xyXG4gICAgICAgIHRoaXMucC5zZXRUZXh0dXJlKHRoaXMubWF0ZXJpYWxzWzFdLCAyKmxhc3QtMSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHRoaXMucC5maXJzdCA9IGZpcnN0O1xyXG4gICAgdGhpcy5wLmxhc3QgPSBsYXN0O1xyXG4gICAgbGV0IHBvaW50cztcclxuICAgIGNvbnN0IHByb3BzID0gdGhpcy5nZXRQcm9wcygpO1xyXG4gICAgaWYodGhpcy5zdGF0ZSA9PT0gJ2Nsb3NlZCcpIHtcclxuICAgICAgcG9pbnRzID0gdGhpcy5nZXRJbnRlcnBvbGF0aW9uUG9pbnRzKHRoaXMuY2xvc2VkSW50ZXJwb2xhdGlvbkluZGVjZXMsIHRoaXMuY2xvc2VkSW50ZXJwb2xhdGlvbkluZGVjZXMpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZih0aGlzLnN0YXRlID09PSAnb3BlbmVkJykge1xyXG4gICAgICBpZihjbG9zZWRBbmdsZSE9PXVuZGVmaW5lZCAmJiBNYXRoLmFicyhjbG9zZWRBbmdsZS1QSS8yKT4xZS0yKSB7XHJcbiAgICAgICAgcG9pbnRzID0gdGhpcy5nZXRJbnRlcnBvbGF0aW9uUG9pbnRzKHRoaXMuZmxhdEludGVycG9sYXRpb25JbmRlY2VzLCBbXSk7XHJcbiAgICAgICAgY29uc3QgcHMgPSB0aGlzLmdldFBvaW50c0F0QW5nbGUodGhpcy5nZXRJbnRlcnBvbGF0aW9uUG9pbnRzKHRoaXMuY2xvc2VkSW50ZXJwb2xhdGlvbkluZGVjZXMsIHRoaXMuY2xvc2VkSW50ZXJwb2xhdGlvbkluZGVjZXMpLCBjbG9zZWRBbmdsZT5QSS8yP1BJLWNsb3NlZEFuZ2xlOmNsb3NlZEFuZ2xlKTtcclxuICAgICAgICBwb2ludHMueCA9IFtwcy54LC4uLnBvaW50cy54XTtcclxuICAgICAgICBwb2ludHMueSA9IFtwcy55LC4uLnBvaW50cy55XTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhwcyk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgcG9pbnRzID0gdGhpcy5nZXRJbnRlcnBvbGF0aW9uUG9pbnRzKHRoaXMub3BlbmVkSW50ZXJwb2xhdGlvbkluZGVjZXMsIHRoaXMuY2xvc2VkSW50ZXJwb2xhdGlvbkluZGVjZXMpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBsZXQgaGwsIGhyLCBvZmZzZXQgPSAwLjUqcHJvcHMuc2hlZXRzKnByb3BzLmRlcHRoO1xyXG4gICAgaWYodGhpcy5zdGF0ZT09PSdjbG9zZWQnKSB7XHJcbiAgICAgIG9mZnNldCAtPSA3ZS02KnRoaXMucC5zY2FsZTtcclxuICAgIH1cclxuICAgIGlmKHRoaXMuYW5nbGU8PVBJLzIpIHtcclxuICAgICAgaGwgPSAocHJvcHMuc2hlZXRzLWZpcnN0KSpwcm9wcy5kZXB0aDtcclxuICAgICAgaHIgPSAocHJvcHMuc2hlZXRzLWxhc3QpKnByb3BzLmRlcHRoO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIGhsID0gZmlyc3QqcHJvcHMuZGVwdGg7XHJcbiAgICAgIGhyID0gbGFzdCpwcm9wcy5kZXB0aDtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBpbkFuZ2xlID0gdGhpcy5hbmdsZT5QSS8yP1BJLXRoaXMuYW5nbGU6dGhpcy5hbmdsZSwgaEFuZ2xlID0gdGhpcy5zdGF0ZSA9PT0gJ2Nsb3NlZCc/IGluQW5nbGU6IChiaW5kZXJUdXJuPT09dW5kZWZpbmVkPyBQSS8yOiBiaW5kZXJUdXJuKTtcclxuICAgIGNvbnN0IFtsZWZ0LCByaWdodF0gPSB0aGlzLmdldFBvaW50c0F0QW5nbGVBbmRIcyhwb2ludHMsIGluQW5nbGUsIGhBbmdsZSwgW2hsL3Byb3BzLndpZHRoLCBoci9wcm9wcy53aWR0aF0pO1xyXG4gICAgaWYodGhpcy5hbmdsZT5QSS8yKSB7XHJcbiAgICAgIHRoaXMuaW52ZXJzZShsZWZ0KTtcclxuICAgICAgdGhpcy5pbnZlcnNlKHJpZ2h0KTtcclxuICAgICAgb2Zmc2V0ID0gLW9mZnNldDtcclxuICAgIH1cclxuICAgIHRoaXMuc2V0UG9pbnRzKGxlZnQsIHJpZ2h0LCBvZmZzZXQpO1xyXG4gIH1cclxuXHJcbiAgc2V0UG9pbnRzKGxlZnQsIHJpZ2h0LCBvZmZzZXQpIHtcclxuICAgIGNvbnN0IHAgPSB0aGlzLmdldFByb3BzKCk7XHJcbiAgICBsZXQgaSA9IDA7XHJcblxyXG4gICAgY29uc3QgeXMgPSBbcmlnaHQsIGxlZnRdO1xyXG4gICAgZm9yKGxldCB5ID0gMDsgeTxzaGVldEJsb2NrLnJlc1k7ICsreSkge1xyXG4gICAgICBmb3IobGV0IHogPSAwOyB6PHNoZWV0QmxvY2sucmVzWjsgKyt6KSB7XHJcbiAgICAgICAgZm9yKGxldCB4ID0gMDsgeDxzaGVldEJsb2NrLnJlc1g7ICsreCkge1xyXG4gICAgICAgICAgdGhpcy5nZW9tZXRyeS52ZXJ0aWNlc1tpKytdLnNldChcclxuICAgICAgICAgICAgeXNbeV0ueFt4XSpwLndpZHRoK29mZnNldCxcclxuICAgICAgICAgICAgeXNbeV0ueVt4XSpwLndpZHRoLFxyXG4gICAgICAgICAgICB6KnAuaGVpZ2h0LyhzaGVldEJsb2NrLnJlc1otMSktMC41KnAuaGVpZ2h0XHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYoaSE9PXRoaXMuZ2VvbWV0cnkudmVydGljZXMubGVuZ3RoKSB7XHJcbiAgICAgIGNvbnNvbGUud2Fybignc2V0UG9pbnRzOiBiYWQgbWFwcGluZyEnKTtcclxuICAgIH1cclxuXHJcbiAgICBpZih0aGlzLmNvcm5lci51c2UgJiYgIXRoaXMuY29ybmVyLnBvaW50cy5sZW5ndGgpIHtcclxuICAgICAgY29uc3QgcGxhbmUgPSBuZXcgVEhSRUUuUGxhbmUoKSwgbm9ybWFsID0gcGxhbmUubm9ybWFsLCBwbGFuZU9mZnNldCA9ICgxLXRoaXMuZ2V0UHJvcHMoKS5mbGV4aWJsZUNvcm5lcikqTWF0aC5taW4ocC53aWR0aCwgcC5oZWlnaHQpLCBwcm9qID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcclxuICAgICAgcGxhbmUuc2V0RnJvbU5vcm1hbEFuZENvcGxhbmFyUG9pbnQobmV3IFRIUkVFLlZlY3RvcjMoLTEsMCwtMSkubm9ybWFsaXplKCksIG5ldyBUSFJFRS5WZWN0b3IzKHBsYW5lT2Zmc2V0K29mZnNldCwgMCwgMC41KnAuaGVpZ2h0KSk7XHJcbiAgICAgIGZvcihsZXQgaT0wLCBsPXRoaXMuZ2VvbWV0cnkudmVydGljZXMubGVuZ3RoO2k8bDsrK2kpIHtcclxuICAgICAgICBwbGFuZS5wcm9qZWN0UG9pbnQodGhpcy5nZW9tZXRyeS52ZXJ0aWNlc1tpXSwgcHJvaik7XHJcbiAgICAgICAgcHJvai5zdWIodGhpcy5nZW9tZXRyeS52ZXJ0aWNlc1tpXSk7XHJcbiAgICAgICAgaWYocHJvai54Km5vcm1hbC54K3Byb2oueSpub3JtYWwueStwcm9qLnoqbm9ybWFsLno+MCkge1xyXG4gICAgICAgICAgY29uc3QgZCA9IHByb2oubGVuZ3RoKCkvcGxhbmVPZmZzZXQ7XHJcbiAgICAgICAgICB0aGlzLmNvcm5lci5tYXhEaXN0YW5jZSA9IE1hdGgubWF4KHRoaXMuY29ybmVyLm1heERpc3RhbmNlLCBkKTtcclxuICAgICAgICAgIHRoaXMuY29ybmVyLnBvaW50cy5wdXNoKHt2ZXJ0ZXg6IGksIGRpc3RhbmNlOiBkfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYodGhpcy5jb3JuZXIudXNlICYmIE1hdGguYWJzKHRoaXMuY29ybmVyLmhlaWdodCk+MWUtMykge1xyXG4gICAgICBjb25zdCBkMkFuZ2xlID0gKGQpPT4gcC5jb3JuZXJEZXZpYXRpb24qdGhpcy5jb3JuZXIuaGVpZ2h0LygxK01hdGguZXhwKC1wLmJlbmRpbmcqKGQtMC41KnRoaXMuY29ybmVyLm1heERpc3RhbmNlKSkpO1xyXG4gICAgICB0aGlzLmNvcm5lci5heGlzLnNldCgtMSwwLDEpLm5vcm1hbGl6ZSgpO1xyXG4gICAgICB0aGlzLmNvcm5lci5heGlzLmFwcGx5QXhpc0FuZ2xlKHRoaXMuY29ybmVyLk9aLCB0aGlzLmFuZ2xlKTtcclxuICAgICAgZm9yKGxldCBwb2ludCBvZiB0aGlzLmNvcm5lci5wb2ludHMpIHtcclxuICAgICAgICB0aGlzLmdlb21ldHJ5LnZlcnRpY2VzW3BvaW50LnZlcnRleF0uYXBwbHlBeGlzQW5nbGUodGhpcy5jb3JuZXIuYXhpcywgZDJBbmdsZShwb2ludC5kaXN0YW5jZSkpXHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmb3IobGV0IG0gb2YgdGhpcy5tYXJrZXJzKSB7XHJcbiAgICAgIG0ubWFya2VyLnBvc2l0aW9uLmNvcHkodGhpcy5nZW9tZXRyeS52ZXJ0aWNlc1ttLnZlcnRleF0pO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuZ2VvbWV0cnkuY29tcHV0ZVZlcnRleE5vcm1hbHMoKTtcclxuICAgIC8vdGhpcy5nZW9tZXRyeS5jb21wdXRlRmFjZU5vcm1hbHMoKTtcclxuICAgIHRoaXMuZ2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk7XHJcbiAgICAvL3RoaXMuZ2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nQm94KCk7XHJcbiAgICB0aGlzLmdlb21ldHJ5LnZlcnRpY2VzTmVlZFVwZGF0ZSA9IHRydWU7XHJcblxyXG4gICAgaWYodGhpcy5tYXJrdXApIHtcclxuICAgICAgdGhpcy5tYXJrdXAuY29tcHV0ZVZlcnRpY2VzKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBpbnZlcnNlKHBzKSB7XHJcbiAgICBmb3IobGV0IGkgPSAwO2k8cHMueC5sZW5ndGg7ICsraSkge1xyXG4gICAgICBwcy54W2ldPS1wcy54W2ldO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHBzO1xyXG4gIH1cclxuXHJcbiAgZ2V0UG9pbnRzQXRIcyhwcywgYW5nbGUsIGhzKSB7XHJcbiAgICBjb25zdCBOID0gMTAwMDtcclxuICAgIE1hdGhVdGlscy5zZXRTcGxpbmVQb2ludHModGhpcy5wU3BsaW5lLCBwcyk7XHJcbiAgICBsZXQgYmwgPSBNYXRoVXRpbHMuc3BsaXRTcGxpbmUodGhpcy5wU3BsaW5lLCBOKSwgcj1bXTtcclxuICAgIHtcclxuICAgICAgY29uc3QgcDEgPSB7Li4udGhpcy5wU3BsaW5lLmdldFBvaW50KChOLTEpL04pfSwgcDIgPSB7Li4udGhpcy5wU3BsaW5lLmdldFBvaW50KDEpfSxcclxuICAgICAgICBkcCA9IHt4OiBwMi54LXAxLngsIHk6IHAyLnktcDEueX0sIGxuID0gTWF0aC5zcXJ0KGRwLngqZHAueCtkcC55KmRwLnkpLFxyXG4gICAgICAgIHNwID0gdGhpcy5wU3BsaW5lLnBvaW50c1t0aGlzLnBTcGxpbmUucG9pbnRzLmxlbmd0aC0xXTtcclxuICAgICAgc3Auc2V0KHNwLngrMC4xKmRwLngvbG4sIHNwLnkrMC4xKmRwLnkvbG4sIDApO1xyXG4gICAgICBibCA9IE1hdGhVdGlscy5zcGxpdFNwbGluZSh0aGlzLnBTcGxpbmUsIE4pO1xyXG4gICAgfVxyXG4gICAgYmwubHMucHVzaCgxZTcpO1xyXG4gICAgTWF0aFV0aWxzLm1hcGwyTChibC5scywgYmwubGVuLCBzaGVldEJsb2NrLnJlc1gsIChpKT0+IHtcclxuICAgICAgZm9yKGxldCBqPTA7IGo8aHMubGVuZ3RoOyArK2opIHtcclxuICAgICAgICBpZighaSkge1xyXG4gICAgICAgICAgcltqXSA9IHt4OiBbLWhzW2pdKk1hdGguc2luKGFuZ2xlKV0sIHk6IFtoc1tqXSpNYXRoLmNvcyhhbmdsZSldfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICBjb25zdCBwMCA9IHsuLi50aGlzLnBTcGxpbmUuZ2V0UG9pbnQoKGktMSkvTil9LFxyXG4gICAgICAgICAgICAgICAgcDEgPSB0aGlzLnBTcGxpbmUuZ2V0UG9pbnQoaS9OKSxcclxuICAgICAgICAgICAgICAgIHg9LShwMS55LXAwLnkpLCB5PShwMS54LXAwLngpLCBsPU1hdGguc3FydCh4KngreSp5KTtcclxuICAgICAgICAgIHJbal0ueC5wdXNoKHAxLngreC9sKmhzW2pdKTtcclxuICAgICAgICAgIHJbal0ueS5wdXNoKHAxLnkreS9sKmhzW2pdKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IG5wcz1bXTtcclxuICAgIGZvcihsZXQgaj0wOyBqPGhzLmxlbmd0aDsgKytqKSB7XHJcbiAgICAgIG5wc1tqXT17eDpbXSx5OltdfTtcclxuICAgICAgTWF0aFV0aWxzLnNldFNwbGluZVBvaW50cyh0aGlzLmlTcGxpbmUsIHJbal0pO1xyXG4gICAgICBjb25zdCBsID0gTWF0aFV0aWxzLnNwbGl0U3BsaW5lKHRoaXMuaVNwbGluZSwgTik7XHJcbiAgICAgIGwubHMucHVzaCgxZTcpO1xyXG4gICAgICBNYXRoVXRpbHMubWFwbDJMKGwubHMsIDEsIHNoZWV0QmxvY2sucmVzWCwgKGkpPT4ge1xyXG4gICAgICAgIGNvbnN0IHAgPSB0aGlzLmlTcGxpbmUuZ2V0UG9pbnQoaS9OKTtcclxuICAgICAgICBucHNbal0ueC5wdXNoKHAueCk7XHJcbiAgICAgICAgbnBzW2pdLnkucHVzaChwLnkpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiBucHM7XHJcbiAgfVxyXG5cclxuICBnZXRQb2ludHNBdEFuZ2xlQW5kSHMocG9pbnRzLCBhbmdsZSwgaEFuZ2xlLCBocykge1xyXG4gICAgY29uc3QgcHMgPSB0aGlzLmdldFBvaW50c0F0QW5nbGUocG9pbnRzLCBhbmdsZSk7XHJcbiAgICByZXR1cm4gdGhpcy5nZXRQb2ludHNBdEhzKHBzLCBoQW5nbGUsIGhzKTtcclxuICB9XHJcblxyXG4gIGdldFBvaW50c0F0QW5nbGUocG9pbnRzLCBhbmdsZSkge1xyXG4gICAgY29uc3QgcHM9e3g6IFtdLCB5OltdfSwgYW5nbGVzPVtdO1xyXG4gICAgYW5nbGUvPU1hdGguUEkvMjtcclxuICAgIGZvcihsZXQgaiA9IDA7IGo8cG9pbnRzLngubGVuZ3RoOyArK2opIHtcclxuICAgICAgYW5nbGVzLnB1c2goai8ocG9pbnRzLngubGVuZ3RoLTEpKTtcclxuICAgIH1cclxuICAgIGZvcihsZXQgaSA9IDA7IGk8cG9pbnRzLnhbMF0ubGVuZ3RoOyArK2kpIHtcclxuICAgICAgY29uc3QgeHBzID0gW10sIHlwcyA9IFtdO1xyXG4gICAgICBmb3IobGV0IGogPSAwOyBqPHBvaW50cy54Lmxlbmd0aDsgKytqKSB7XHJcbiAgICAgICAgeHBzLnB1c2gocG9pbnRzLnhbal1baV0pO1xyXG4gICAgICAgIHlwcy5wdXNoKHBvaW50cy55W2pdW2ldKTtcclxuICAgICAgfVxyXG4gICAgICBwcy54LnB1c2godGhpcy5pbnRlcnBvbGF0ZShhbmdsZXMseHBzLGFuZ2xlKSk7XHJcbiAgICAgIHBzLnkucHVzaCh0aGlzLmludGVycG9sYXRlKGFuZ2xlcyx5cHMsYW5nbGUpKTtcclxuICAgIH1cclxuICAgIHJldHVybiBwcztcclxuICB9XHJcblxyXG4gIGludGVycG9sYXRlKHgseSx4aSkge1xyXG4gICAgaWYoIXRoaXMuYVNwbGluZXNbeC5sZW5ndGhdKSB7XHJcbiAgICAgIHRoaXMuYVNwbGluZXNbeC5sZW5ndGhdID0gbmV3IFRIUkVFLkNhdG11bGxSb21DdXJ2ZTMoW10pO1xyXG4gICAgICBjb25zdCBwcyA9IHRoaXMuYVNwbGluZXNbeC5sZW5ndGhdLnBvaW50cztcclxuICAgICAgZm9yKGxldCBpPTA7aTx4Lmxlbmd0aDsrK2kpIHtcclxuICAgICAgICBwcy5wdXNoKG5ldyBUSFJFRS5WZWN0b3IzKCkpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBjb25zdCBzcGxpbmUgPSB0aGlzLmFTcGxpbmVzW3gubGVuZ3RoXTtcclxuICAgIGZvcihsZXQgaT0wO2k8eC5sZW5ndGg7KytpKSB7XHJcbiAgICAgIHNwbGluZS5wb2ludHNbaV0uc2V0KHhbaV0sIHlbaV0sIDApO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHNwbGluZS5nZXRQb2ludChNYXRoLm1pbigxLCBNYXRoLm1heCh4aSwgMCkpKS55O1xyXG4gIH1cclxuXHJcbiAgbG9hZFBvaW50cygpIHtcclxuICAgIGNvbnN0IHg9W10seT1bXTtcclxuICAgIGZvcihsZXQgciBvZiBbMCwgMC4yODc3LCAwLjYzNDcsIDAuODE3NCwgMS4wMDAwXSkge1xyXG4gICAgICB4LnB1c2gocipNYXRoLmNvcygwLjkqTWF0aC5QSS80KSk7XHJcbiAgICAgIHkucHVzaChyKk1hdGguc2luKDAuOSpNYXRoLlBJLzQpKVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IG9wZW5lZEludGVycG9sYXRpb25JbmRlY2VzID0gW1xyXG4gICAgICBbMiwzLDRdLFxyXG4gICAgICBbMiwzLDQsNSw2XVxyXG4gICAgXSxcclxuICAgIGNsb3NlZEludGVycG9sYXRpb25JbmRlY2VzID0gW1xyXG4gICAgICBbMCwxLDJdLFxyXG4gICAgICBbMCwxLDJdXHJcbiAgICBdLFxyXG4gICAgZmxhdEludGVycG9sYXRpb25JbmRlY2VzID0gW1xyXG4gICAgICBbNSw0XSxcclxuICAgICAgWzcsNl1cclxuICAgIF0sXHJcbiAgICBpbnRlcnBvbGF0aW9uUG9pbnRzID0gW1xyXG4gICAgICB7XHJcbiAgICAgICAgeDogW1xyXG4gICAgICAgICAgWzAsMC4yODc3LDAuNjM0NywwLjgxNzQsMS4wMDAwXSxcclxuICAgICAgICAgIFswLjAwMCwwLjI4NiwwLjYzMiwwLjgxNSwwLjk5N10sXHJcbiAgICAgICAgICBbMC4wMDAsMC4yNzksMC42MjMsMC44MDYsMC45ODhdLFxyXG4gICAgICAgICAgWzAuMDAwLDAuMTI2LDAuNDExLDAuNTkzLDAuNzc0XSxcclxuICAgICAgICAgIFswLDAsMCwwLDBdLFxyXG4gICAgICAgICAgeFxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgeTogW1xyXG4gICAgICAgICAgWzAsMCwwLDAsMF0sXHJcbiAgICAgICAgICBbMC4wMDAsMC4wMzAsMC4wMTAsMC4wMDIsMC4wMDBdLFxyXG4gICAgICAgICAgWzAuMDAwLDAuMDYwLDAuMDE3LDAuMDA0LDAuMDAwXSxcclxuICAgICAgICAgIFswLjAwMCwwLjI1OSwwLjQ0MCwwLjQ0NiwwLjQyOV0sXHJcbiAgICAgICAgICBbMCwgMC4yODc3LCAwLjYzNDcsIDAuODE3NCwgMS4wMDAwXSxcclxuICAgICAgICAgIHlcclxuICAgICAgICBdXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICB4OiBbXHJcbiAgICAgICAgICBbMCwwLjI4NzcsMC42MzQ3LDAuODE3NCwxLjAwMDBdLFxyXG4gICAgICAgICAgWzAuMDAwLDAuMjg2LDAuNjMyLDAuODE1LDAuOTk3XSxcclxuICAgICAgICAgIFswLjAwMCwwLjI3OSwwLjYyMywwLjgwNiwwLjk4OF0sXHJcbiAgICAgICAgICBbMC4wMDAsMC4yMzMsMC41NjMsMC43NDYsMC45MjddLFxyXG4gICAgICAgICAgWzAuMDAwLDAuMTQ0LDAuNDMzLDAuNjEzLDAuNzk2XSxcclxuICAgICAgICAgIFswLjAwMCwwLjA3MCwwLjI4OCwwLjQ1NSwwLjYyNl0sXHJcbiAgICAgICAgICBbMCwwLDAsMCwwXSxcclxuICAgICAgICAgIHhcclxuICAgICAgICBdLFxyXG4gICAgICAgIHk6IFtcclxuICAgICAgICAgIFswLDAsMCwwLDBdLFxyXG4gICAgICAgICAgWzAuMDAwLDAuMDMwLDAuMDEwLDAuMDAyLDAuMDAwXSxcclxuICAgICAgICAgIFswLjAwMCwwLjA2MCwwLjAxNywwLjAwNCwwLjAwMF0sXHJcbiAgICAgICAgICBbMC4wMDAsMC4xNjgsMC4yNjksMC4yNzAsMC4yNTVdLFxyXG4gICAgICAgICAgWzAuMDAwLDAuMjQ1LDAuNDM1LDAuNDU4LDAuNDYwXSxcclxuICAgICAgICAgIFswLjAwMCwwLjI3OCwwLjU0NCwwLjYxNCwwLjY3M10sXHJcbiAgICAgICAgICBbMCwgMC4yODc3LCAwLjYzNDcsIDAuODE3NCwgMS4wMDAwXSxcclxuICAgICAgICAgIHlcclxuICAgICAgICBdXHJcbiAgICAgIH1cclxuICAgIF07XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgaW50ZXJwb2xhdGlvblBvaW50cyxcclxuICAgICAgb3BlbmVkSW50ZXJwb2xhdGlvbkluZGVjZXMsXHJcbiAgICAgIGNsb3NlZEludGVycG9sYXRpb25JbmRlY2VzLFxyXG4gICAgICBmbGF0SW50ZXJwb2xhdGlvbkluZGVjZXNcclxuICAgIH07XHJcbiAgfVxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2pzL2NsYXNzZXMvU2hlZXRCbG9jay5qcyIsIlxyXG5leHBvcnQgZnVuY3Rpb24gcHJvcHMoc3R5bGUgPSAndm9sdW1lJykge1xyXG4gIC8vIGNvbnN0IHByb3BzID0ge1xyXG4gIC8vICAgaGVpZ2h0LFxyXG4gIC8vICAgd2lkdGgsXHJcbiAgLy8gICBncmF2aXR5LFxyXG4gIC8vICAgaW5qZWN0b3IsXHJcbiAgLy8gICBjYWNoZWRQYWdlcyxcclxuICAvLyAgIHJlbmRlckluYWN0aXZlUGFnZXMsXHJcbiAgLy8gICByZW5kZXJXaGlsZUZsaXBwaW5nLFxyXG4gIC8vICAgcGFnZXNGb3JQcmVkaWN0aW5nLFxyXG4gIC8vICAgcHJlbG9hZFBhZ2VzLFxyXG4gIC8vICAgc2hlZXQ6IHtcclxuICAvLyAgICAgc3RhcnRWZWxvY2l0eSxcclxuICAvLyAgICAgY29ybmVyRGV2aWF0aW9uLFxyXG4gIC8vICAgICBmbGV4aWJpbGl0eSxcclxuICAvLyAgICAgZmxleGlibGVDb3JuZXIsXHJcbiAgLy8gICAgIGJlbmRpbmcsXHJcbiAgLy8gICAgIHdhdmUsXHJcbiAgLy8gICAgIHNoYXBlLFxyXG4gIC8vICAgICB3aWR0aFRleGVscyxcclxuICAvLyAgICAgaGVpZ2h0VGV4ZWxzLFxyXG4gIC8vICAgICBjb2xvcixcclxuICAvLyAgICAgc2lkZVRleHR1cmVcclxuICAvLyAgIH0sXHJcbiAgLy8gICBjb3Zlcjoge1xyXG4gIC8vICAgICAuLi5zaGVldCxcclxuICAvLyAgICAgcGFkZGluZyxcclxuICAvLyAgICAgYmluZGVyVGV4dHVyZSxcclxuICAvLyAgICAgZGVwdGgsXHJcbiAgLy8gICAgIG1hc3NcclxuICAvLyAgIH0sXHJcbiAgLy8gICBwYWdlOiB7XHJcbiAgLy8gICAgIC4uLnNoZWV0LFxyXG4gIC8vICAgICBkZXB0aCxcclxuICAvLyAgICAgbWFzc1xyXG4gIC8vICAgfVxyXG4gIC8vIH07XHJcblxyXG4gIGNvbnN0IGRlZiA9IHtcclxuICAgIGhlaWdodDogMC4yOTcsXHJcbiAgICB3aWR0aDogMC4yMSxcclxuICAgIGdyYXZpdHk6IDEsXHJcbiAgICBjYWNoZWRQYWdlczogNTAsXHJcbiAgICByZW5kZXJJbmFjdGl2ZVBhZ2VzOiB0cnVlLFxyXG4gICAgcmVuZGVySW5hY3RpdmVQYWdlc09uTW9iaWxlOiB0cnVlLFxyXG4gICAgcmVuZGVyV2hpbGVGbGlwcGluZzogZmFsc2UsXHJcbiAgICBwYWdlc0ZvclByZWRpY3Rpbmc6IDUsXHJcbiAgICBwcmVsb2FkUGFnZXM6IDUsXHJcbiAgICBydGw6IGZhbHNlLFxyXG4gICAgc2hlZXQ6IHtcclxuICAgICAgc3RhcnRWZWxvY2l0eTogMS4xLFxyXG4gICAgICBjb3JuZXJEZXZpYXRpb246IDAuMjUsXHJcbiAgICAgIGZsZXhpYmlsaXR5OiAxMCxcclxuICAgICAgZmxleGlibGVDb3JuZXI6IDAuNSxcclxuICAgICAgYmVuZGluZzogMTEsXHJcbiAgICAgIHdhdmU6IDAuNSxcclxuICAgICAgc2hhcGU6IDAsXHJcbiAgICAgIHdpZHRoVGV4ZWxzOiA1KjIxMCxcclxuICAgICAgaGVpZ2h0VGV4ZWxzOiA1KjI5NyxcclxuICAgICAgY29sb3I6IDB4RkZGRkZGLFxyXG4gICAgICBzaWRlOiAnY29sb3InXHJcbiAgICB9LFxyXG4gICAgY292ZXI6IHtcclxuICAgICAgYmluZGVyVGV4dHVyZTogJycsXHJcbiAgICAgIGRlcHRoOiAwLjAwMDMsXHJcbiAgICAgIHBhZGRpbmc6IDAsXHJcbiAgICAgIG1hc3M6IDAuMDAxXHJcbiAgICB9LFxyXG4gICAgcGFnZToge1xyXG4gICAgICBkZXB0aDogMC4wMDAxLFxyXG4gICAgICBtYXNzOiAwLjAwMVxyXG4gICAgfSxcclxuICAgIGNzc0xheWVyUHJvcHM6IHtcclxuICAgICAgd2lkdGg6IDEwMjRcclxuICAgIH1cclxuICB9LFxyXG4gIHN0eWxlcyA9IHtcclxuICAgIHZvbHVtZTogZGVmLFxyXG4gICAgZmxhdDoge1xyXG4gICAgICAuLi5kZWYsXHJcbiAgICAgIHNoZWV0OiB7XHJcbiAgICAgICAgLi4uZGVmLnNoZWV0LFxyXG4gICAgICAgIHdhdmU6IDAuMDUsXHJcbiAgICAgICAgc2lkZTogJ3RyYW5zcGFyZW50J1xyXG4gICAgICB9LFxyXG4gICAgICBjb3Zlcjoge1xyXG4gICAgICAgIC4uLmRlZi5jb3ZlcixcclxuICAgICAgICBkZXB0aDogMC4wMDAwMlxyXG4gICAgICB9LFxyXG4gICAgICBwYWdlOiB7XHJcbiAgICAgICAgLi4uZGVmLnBhZ2UsXHJcbiAgICAgICAgZGVwdGg6IDAuMDAwMDFcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgICd2b2x1bWUtcGFkZGluZ3MnOiB7XHJcbiAgICAgIC4uLmRlZixcclxuICAgICAgY292ZXI6IHtcclxuICAgICAgICAuLi5kZWYuY292ZXIsXHJcbiAgICAgICAgcGFkZGluZzogMC4wMDI1XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9O1xyXG4gIHJldHVybiBzdHlsZXNbc3R5bGVdIHx8IGRlZjtcclxufTtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vanMvcHJvcHMvYm9vay5qcyIsImltcG9ydCB7VEhSRUV9IGZyb20gJy4uL2xpYnMnO1xyXG5cclxuVEhSRUUuQ1NTM0RPYmplY3QgPSBjbGFzcyBDU1MzRE9iamVjdCBleHRlbmRzIFRIUkVFLk9iamVjdDNEIHtcclxuICBjb25zdHJ1Y3RvcihlbGVtZW50PXVuZGVmaW5lZCkge1xyXG4gICAgc3VwZXIoKTtcclxuXHJcbiAgICBpZihlbGVtZW50KSB7XHJcbiAgICAgIHRoaXMuc2V0KGVsZW1lbnQpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc2V0KGVsZW1lbnQpIHtcclxuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XHJcbiAgXHR0aGlzLmVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xyXG5cclxuICBcdHRoaXMuYWRkRXZlbnRMaXN0ZW5lcigncmVtb3ZlZCcsIGZ1bmN0aW9uKCkge1xyXG4gIFx0XHRpZiAodGhpcy5lbGVtZW50LnBhcmVudE5vZGUgIT09IG51bGwpIHtcclxuICBcdFx0XHR0aGlzLmVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmVsZW1lbnQpO1xyXG4gIFx0XHR9XHJcbiAgXHR9KTtcclxuICB9XHJcbn07XHJcblxyXG5USFJFRS5DU1MzRFNwcml0ZSA9IGNsYXNzIENTUzNEU3ByaXRlIGV4dGVuZHMgVEhSRUUuQ1NTM0RPYmplY3Qge1xyXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQpIHtcclxuICAgIHN1cGVyKGVsZW1lbnQpO1xyXG4gIH1cclxufTtcclxuXHJcblRIUkVFLkNTUzNEUmVuZGVyZXIgPSBjbGFzcyBDU1MzRFJlbmRlcmVyIHtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuXHJcbiAgXHR2YXIgX3dpZHRoLCBfaGVpZ2h0O1xyXG4gIFx0dmFyIF93aWR0aEhhbGYsIF9oZWlnaHRIYWxmO1xyXG5cclxuICBcdHZhciBtYXRyaXggPSBuZXcgVEhSRUUuTWF0cml4NCgpO1xyXG5cclxuICBcdHZhciBjYWNoZSA9IHtcclxuICBcdFx0Y2FtZXJhOiB7IGZvdjogMCwgc3R5bGU6ICcnIH0sXHJcbiAgXHRcdG9iamVjdHM6IHt9XHJcbiAgXHR9O1xyXG5cclxuICBcdHZhciBkb21FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggJ2RpdicpO1xyXG4gIFx0ZG9tRWxlbWVudC5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nO1xyXG5cclxuICBcdHRoaXMuZG9tRWxlbWVudCA9IGRvbUVsZW1lbnQ7XHJcblxyXG4gIFx0dmFyIGNhbWVyYUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAnZGl2Jyk7XHJcblxyXG4gIFx0Y2FtZXJhRWxlbWVudC5zdHlsZS5XZWJraXRUcmFuc2Zvcm1TdHlsZSA9ICdwcmVzZXJ2ZS0zZCc7XHJcbiAgXHRjYW1lcmFFbGVtZW50LnN0eWxlLk1velRyYW5zZm9ybVN0eWxlID0gJ3ByZXNlcnZlLTNkJztcclxuICBcdGNhbWVyYUVsZW1lbnQuc3R5bGUudHJhbnNmb3JtU3R5bGUgPSAncHJlc2VydmUtM2QnO1xyXG5cclxuICBcdGRvbUVsZW1lbnQuYXBwZW5kQ2hpbGQoIGNhbWVyYUVsZW1lbnQpO1xyXG5cclxuICBcdHZhciBpc0lFID0gL1RyaWRlbnQvaS50ZXN0KCBuYXZpZ2F0b3IudXNlckFnZW50KTtcclxuXHJcbiAgXHR0aGlzLnNldENsZWFyQ29sb3IgPSBmdW5jdGlvbiAoKSB7fTtcclxuXHJcbiAgXHR0aGlzLmdldFNpemUgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG4gIFx0XHRyZXR1cm4ge1xyXG4gIFx0XHRcdHdpZHRoOiBfd2lkdGgsXHJcbiAgXHRcdFx0aGVpZ2h0OiBfaGVpZ2h0XHJcbiAgXHRcdH07XHJcblxyXG4gIFx0fTtcclxuXHJcbiAgXHR0aGlzLnNldFNpemUgPSBmdW5jdGlvbih3aWR0aCwgaGVpZ2h0KSB7XHJcblxyXG4gIFx0XHRfd2lkdGggPSB3aWR0aDtcclxuICBcdFx0X2hlaWdodCA9IGhlaWdodDtcclxuICBcdFx0X3dpZHRoSGFsZiA9IF93aWR0aCAvIDI7XHJcbiAgXHRcdF9oZWlnaHRIYWxmID0gX2hlaWdodCAvIDI7XHJcblxyXG4gIFx0XHRkb21FbGVtZW50LnN0eWxlLndpZHRoID0gd2lkdGggKyAncHgnO1xyXG4gIFx0XHRkb21FbGVtZW50LnN0eWxlLmhlaWdodCA9IGhlaWdodCArICdweCc7XHJcblxyXG4gIFx0XHRjYW1lcmFFbGVtZW50LnN0eWxlLndpZHRoID0gd2lkdGggKyAncHgnO1xyXG4gIFx0XHRjYW1lcmFFbGVtZW50LnN0eWxlLmhlaWdodCA9IGhlaWdodCArICdweCc7XHJcblxyXG4gIFx0fTtcclxuXHJcbiAgXHRmdW5jdGlvbiBlcHNpbG9uKCB2YWx1ZSkge1xyXG4gIFx0XHRyZXR1cm4gTWF0aC5hYnMoIHZhbHVlKSA8IDFlLTYgPyAwIDogdmFsdWU7XHJcblxyXG4gIFx0fVxyXG5cclxuICBcdGZ1bmN0aW9uIGdldENhbWVyYUNTU01hdHJpeCggbWF0cml4KSB7XHJcblxyXG4gIFx0XHR2YXIgZWxlbWVudHMgPSBtYXRyaXguZWxlbWVudHM7XHJcblxyXG4gIFx0XHRyZXR1cm4gJ21hdHJpeDNkKCcgK1xyXG4gIFx0XHRcdGVwc2lsb24oIGVsZW1lbnRzWyAwIF0pICsgJywnICtcclxuICBcdFx0XHRlcHNpbG9uKCAtIGVsZW1lbnRzWyAxIF0pICsgJywnICtcclxuICBcdFx0XHRlcHNpbG9uKCBlbGVtZW50c1sgMiBdKSArICcsJyArXHJcbiAgXHRcdFx0ZXBzaWxvbiggZWxlbWVudHNbIDMgXSkgKyAnLCcgK1xyXG4gIFx0XHRcdGVwc2lsb24oIGVsZW1lbnRzWyA0IF0pICsgJywnICtcclxuICBcdFx0XHRlcHNpbG9uKCAtIGVsZW1lbnRzWyA1IF0pICsgJywnICtcclxuICBcdFx0XHRlcHNpbG9uKCBlbGVtZW50c1sgNiBdKSArICcsJyArXHJcbiAgXHRcdFx0ZXBzaWxvbiggZWxlbWVudHNbIDcgXSkgKyAnLCcgK1xyXG4gIFx0XHRcdGVwc2lsb24oIGVsZW1lbnRzWyA4IF0pICsgJywnICtcclxuICBcdFx0XHRlcHNpbG9uKCAtIGVsZW1lbnRzWyA5IF0pICsgJywnICtcclxuICBcdFx0XHRlcHNpbG9uKCBlbGVtZW50c1sgMTAgXSkgKyAnLCcgK1xyXG4gIFx0XHRcdGVwc2lsb24oIGVsZW1lbnRzWyAxMSBdKSArICcsJyArXHJcbiAgXHRcdFx0ZXBzaWxvbiggZWxlbWVudHNbIDEyIF0pICsgJywnICtcclxuICBcdFx0XHRlcHNpbG9uKCAtIGVsZW1lbnRzWyAxMyBdKSArICcsJyArXHJcbiAgXHRcdFx0ZXBzaWxvbiggZWxlbWVudHNbIDE0IF0pICsgJywnICtcclxuICBcdFx0XHRlcHNpbG9uKCBlbGVtZW50c1sgMTUgXSkgK1xyXG4gIFx0XHQnKSc7XHJcblxyXG4gIFx0fVxyXG5cclxuICBcdGZ1bmN0aW9uIGdldE9iamVjdENTU01hdHJpeCggbWF0cml4LCBjYW1lcmFDU1NNYXRyaXgpIHtcclxuXHJcbiAgXHRcdHZhciBlbGVtZW50cyA9IG1hdHJpeC5lbGVtZW50cztcclxuICBcdFx0dmFyIG1hdHJpeDNkID0gJ21hdHJpeDNkKCcgK1xyXG4gIFx0XHRcdGVwc2lsb24oIGVsZW1lbnRzWyAwIF0pICsgJywnICtcclxuICBcdFx0XHRlcHNpbG9uKCBlbGVtZW50c1sgMSBdKSArICcsJyArXHJcbiAgXHRcdFx0ZXBzaWxvbiggZWxlbWVudHNbIDIgXSkgKyAnLCcgK1xyXG4gIFx0XHRcdGVwc2lsb24oIGVsZW1lbnRzWyAzIF0pICsgJywnICtcclxuICBcdFx0XHRlcHNpbG9uKCAtIGVsZW1lbnRzWyA0IF0pICsgJywnICtcclxuICBcdFx0XHRlcHNpbG9uKCAtIGVsZW1lbnRzWyA1IF0pICsgJywnICtcclxuICBcdFx0XHRlcHNpbG9uKCAtIGVsZW1lbnRzWyA2IF0pICsgJywnICtcclxuICBcdFx0XHRlcHNpbG9uKCAtIGVsZW1lbnRzWyA3IF0pICsgJywnICtcclxuICBcdFx0XHRlcHNpbG9uKCBlbGVtZW50c1sgOCBdKSArICcsJyArXHJcbiAgXHRcdFx0ZXBzaWxvbiggZWxlbWVudHNbIDkgXSkgKyAnLCcgK1xyXG4gIFx0XHRcdGVwc2lsb24oIGVsZW1lbnRzWyAxMCBdKSArICcsJyArXHJcbiAgXHRcdFx0ZXBzaWxvbiggZWxlbWVudHNbIDExIF0pICsgJywnICtcclxuICBcdFx0XHRlcHNpbG9uKCBlbGVtZW50c1sgMTIgXSkgKyAnLCcgK1xyXG4gIFx0XHRcdGVwc2lsb24oIGVsZW1lbnRzWyAxMyBdKSArICcsJyArXHJcbiAgXHRcdFx0ZXBzaWxvbiggZWxlbWVudHNbIDE0IF0pICsgJywnICtcclxuICBcdFx0XHRlcHNpbG9uKCBlbGVtZW50c1sgMTUgXSkgK1xyXG4gIFx0XHQnKSc7XHJcblxyXG4gIFx0XHRpZihpc0lFKSB7XHJcblxyXG4gIFx0XHRcdHJldHVybiAndHJhbnNsYXRlKC01MCUsLTUwJSknICtcclxuICBcdFx0XHRcdCd0cmFuc2xhdGUoJyArIF93aWR0aEhhbGYgKyAncHgsJyArIF9oZWlnaHRIYWxmICsgJ3B4KScgK1xyXG4gIFx0XHRcdFx0Y2FtZXJhQ1NTTWF0cml4ICtcclxuICBcdFx0XHRcdG1hdHJpeDNkO1xyXG5cclxuICBcdFx0fVxyXG5cclxuICBcdFx0cmV0dXJuICd0cmFuc2xhdGUoLTUwJSwtNTAlKScgKyBtYXRyaXgzZDtcclxuXHJcbiAgXHR9XHJcblxyXG4gIFx0ZnVuY3Rpb24gcmVuZGVyT2JqZWN0KCBvYmplY3QsIGNhbWVyYSwgY2FtZXJhQ1NTTWF0cml4KSB7XHJcblxyXG4gIFx0XHRpZihvYmplY3QgaW5zdGFuY2VvZiBUSFJFRS5DU1MzRE9iamVjdCkge1xyXG5cclxuICBcdFx0XHR2YXIgc3R5bGU7XHJcblxyXG4gIFx0XHRcdGlmKG9iamVjdCBpbnN0YW5jZW9mIFRIUkVFLkNTUzNEU3ByaXRlKSB7XHJcbiAgXHRcdFx0XHRtYXRyaXguY29weSggY2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZSk7XHJcbiAgXHRcdFx0XHRtYXRyaXgudHJhbnNwb3NlKCk7XHJcbiAgXHRcdFx0XHRtYXRyaXguY29weVBvc2l0aW9uKCBvYmplY3QubWF0cml4V29ybGQpO1xyXG4gIFx0XHRcdFx0bWF0cml4LnNjYWxlKCBvYmplY3Quc2NhbGUpO1xyXG5cclxuICBcdFx0XHRcdG1hdHJpeC5lbGVtZW50c1sgMyBdID0gMDtcclxuICBcdFx0XHRcdG1hdHJpeC5lbGVtZW50c1sgNyBdID0gMDtcclxuICBcdFx0XHRcdG1hdHJpeC5lbGVtZW50c1sgMTEgXSA9IDA7XHJcbiAgXHRcdFx0XHRtYXRyaXguZWxlbWVudHNbIDE1IF0gPSAxO1xyXG5cclxuICBcdFx0XHRcdHN0eWxlID0gZ2V0T2JqZWN0Q1NTTWF0cml4KCBtYXRyaXgsIGNhbWVyYUNTU01hdHJpeCk7XHJcblxyXG4gIFx0XHRcdH0gZWxzZSB7XHJcblxyXG4gIFx0XHRcdFx0c3R5bGUgPSBnZXRPYmplY3RDU1NNYXRyaXgoIG9iamVjdC5tYXRyaXhXb3JsZCwgY2FtZXJhQ1NTTWF0cml4KTtcclxuXHJcbiAgXHRcdFx0fVxyXG5cclxuICBcdFx0XHR2YXIgZWxlbWVudCA9IG9iamVjdC5lbGVtZW50O1xyXG4gIFx0XHRcdHZhciBjYWNoZWRTdHlsZSA9IGNhY2hlLm9iamVjdHNbIG9iamVjdC5pZCBdICYmIGNhY2hlLm9iamVjdHNbIG9iamVjdC5pZCBdLnN0eWxlO1xyXG5cclxuICBcdFx0XHRpZihjYWNoZWRTdHlsZSA9PT0gdW5kZWZpbmVkIHx8IGNhY2hlZFN0eWxlICE9PSBzdHlsZSkge1xyXG4gIFx0XHRcdFx0ZWxlbWVudC5zdHlsZS5XZWJraXRUcmFuc2Zvcm0gPSBzdHlsZTtcclxuICBcdFx0XHRcdGVsZW1lbnQuc3R5bGUuTW96VHJhbnNmb3JtID0gc3R5bGU7XHJcbiAgXHRcdFx0XHRlbGVtZW50LnN0eWxlLnRyYW5zZm9ybSA9IHN0eWxlO1xyXG5cclxuICBcdFx0XHRcdGNhY2hlLm9iamVjdHNbIG9iamVjdC5pZCBdID0geyBzdHlsZTogc3R5bGUgfTtcclxuICBcdFx0XHRcdGlmKGlzSUUpIHtcclxuICBcdFx0XHRcdFx0Y2FjaGUub2JqZWN0c1sgb2JqZWN0LmlkIF0uZGlzdGFuY2VUb0NhbWVyYVNxdWFyZWQgPSBnZXREaXN0YW5jZVRvU3F1YXJlZCggY2FtZXJhLCBvYmplY3QpO1xyXG4gIFx0XHRcdFx0fVxyXG4gIFx0XHRcdH1cclxuXHJcbiAgXHRcdFx0aWYoZWxlbWVudC5wYXJlbnROb2RlICE9PSBjYW1lcmFFbGVtZW50KSB7XHJcbiAgXHRcdFx0XHRjYW1lcmFFbGVtZW50LmFwcGVuZENoaWxkKCBlbGVtZW50KTtcclxuICBcdFx0XHR9XHJcbiAgXHRcdH1cclxuXHJcbiAgXHRcdGZvcih2YXIgaSA9IDAsIGwgPSBvYmplY3QuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSArKykge1xyXG5cclxuICBcdFx0XHRyZW5kZXJPYmplY3QoIG9iamVjdC5jaGlsZHJlblsgaSBdLCBjYW1lcmEsIGNhbWVyYUNTU01hdHJpeCk7XHJcblxyXG4gIFx0XHR9XHJcblxyXG4gIFx0fVxyXG5cclxuICBcdHZhciBnZXREaXN0YW5jZVRvU3F1YXJlZCA9IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgXHRcdHZhciBhID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcclxuICBcdFx0dmFyIGIgPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xyXG5cclxuICBcdFx0cmV0dXJuIGZ1bmN0aW9uKG9iamVjdDEsIG9iamVjdDIpIHtcclxuXHJcbiAgXHRcdFx0YS5zZXRGcm9tTWF0cml4UG9zaXRpb24oIG9iamVjdDEubWF0cml4V29ybGQpO1xyXG4gIFx0XHRcdGIuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBvYmplY3QyLm1hdHJpeFdvcmxkKTtcclxuXHJcbiAgXHRcdFx0cmV0dXJuIGEuZGlzdGFuY2VUb1NxdWFyZWQoIGIpO1xyXG5cclxuICBcdFx0fTtcclxuXHJcbiAgXHR9KCk7XHJcblxyXG4gIFx0ZnVuY3Rpb24gek9yZGVyKCBzY2VuZSkge1xyXG5cclxuICBcdFx0dmFyIG9yZGVyID0gT2JqZWN0LmtleXMoIGNhY2hlLm9iamVjdHMpLnNvcnQoIGZ1bmN0aW9uKGEsIGIpIHtcclxuXHJcbiAgXHRcdFx0cmV0dXJuIGNhY2hlLm9iamVjdHNbIGEgXS5kaXN0YW5jZVRvQ2FtZXJhU3F1YXJlZCAtIGNhY2hlLm9iamVjdHNbIGIgXS5kaXN0YW5jZVRvQ2FtZXJhU3F1YXJlZDtcclxuXHJcbiAgXHRcdH0pO1xyXG4gIFx0XHR2YXIgek1heCA9IG9yZGVyLmxlbmd0aDtcclxuXHJcbiAgXHRcdHNjZW5lLnRyYXZlcnNlKCBmdW5jdGlvbihvYmplY3QpIHtcclxuXHJcbiAgXHRcdFx0dmFyIGluZGV4ID0gb3JkZXIuaW5kZXhPZiggb2JqZWN0LmlkICsgJycpO1xyXG5cclxuICBcdFx0XHRpZihpbmRleCAhPT0gLSAxKSB7XHJcblxyXG4gIFx0XHRcdFx0b2JqZWN0LmVsZW1lbnQuc3R5bGUuekluZGV4ID0gek1heCAtIGluZGV4O1xyXG5cclxuICBcdFx0XHR9XHJcblxyXG4gIFx0XHR9KTtcclxuXHJcbiAgXHR9XHJcblxyXG4gIFx0dGhpcy5yZW5kZXIgPSBmdW5jdGlvbihzY2VuZSwgY2FtZXJhKSB7XHJcblxyXG4gIFx0XHR2YXIgZm92ID0gY2FtZXJhLnByb2plY3Rpb25NYXRyaXguZWxlbWVudHNbIDUgXSAqIF9oZWlnaHRIYWxmO1xyXG5cclxuICBcdFx0aWYoY2FjaGUuY2FtZXJhLmZvdiAhPT0gZm92KSB7XHJcblxyXG4gIFx0XHRcdGRvbUVsZW1lbnQuc3R5bGUuV2Via2l0UGVyc3BlY3RpdmUgPSBmb3YgKyAncHgnO1xyXG4gIFx0XHRcdGRvbUVsZW1lbnQuc3R5bGUuTW96UGVyc3BlY3RpdmUgPSBmb3YgKyAncHgnO1xyXG4gIFx0XHRcdGRvbUVsZW1lbnQuc3R5bGUucGVyc3BlY3RpdmUgPSBmb3YgKyAncHgnO1xyXG5cclxuICBcdFx0XHRjYWNoZS5jYW1lcmEuZm92ID0gZm92O1xyXG5cclxuICBcdFx0fVxyXG5cclxuICBcdFx0c2NlbmUudXBkYXRlTWF0cml4V29ybGQoKTtcclxuXHJcbiAgXHRcdGlmKGNhbWVyYS5wYXJlbnQgPT09IG51bGwpIGNhbWVyYS51cGRhdGVNYXRyaXhXb3JsZCgpO1xyXG5cclxuICBcdFx0dmFyIGNhbWVyYUNTU01hdHJpeCA9ICd0cmFuc2xhdGVaKCcgKyBmb3YgKyAncHgpJyArXHJcbiAgXHRcdFx0Z2V0Q2FtZXJhQ1NTTWF0cml4KCBjYW1lcmEubWF0cml4V29ybGRJbnZlcnNlKTtcclxuXHJcbiAgXHRcdHZhciBzdHlsZSA9IGNhbWVyYUNTU01hdHJpeCArXHJcbiAgXHRcdFx0J3RyYW5zbGF0ZSgnICsgX3dpZHRoSGFsZiArICdweCwnICsgX2hlaWdodEhhbGYgKyAncHgpJztcclxuXHJcbiAgXHRcdGlmKGNhY2hlLmNhbWVyYS5zdHlsZSAhPT0gc3R5bGUgJiYgISBpc0lFKSB7XHJcblxyXG4gIFx0XHRcdGNhbWVyYUVsZW1lbnQuc3R5bGUuV2Via2l0VHJhbnNmb3JtID0gc3R5bGU7XHJcbiAgXHRcdFx0Y2FtZXJhRWxlbWVudC5zdHlsZS5Nb3pUcmFuc2Zvcm0gPSBzdHlsZTtcclxuICBcdFx0XHRjYW1lcmFFbGVtZW50LnN0eWxlLnRyYW5zZm9ybSA9IHN0eWxlO1xyXG5cclxuICBcdFx0XHRjYWNoZS5jYW1lcmEuc3R5bGUgPSBzdHlsZTtcclxuXHJcbiAgXHRcdH1cclxuXHJcbiAgXHRcdHJlbmRlck9iamVjdCggc2NlbmUsIGNhbWVyYSwgY2FtZXJhQ1NTTWF0cml4KTtcclxuXHJcbiAgXHRcdGlmKGlzSUUpIHtcclxuXHJcbiAgXHRcdFx0Ly8gSUUxMCBhbmQgMTEgZG9lcyBub3Qgc3VwcG9ydCAncHJlc2VydmUtM2QnLlxyXG4gIFx0XHRcdC8vIFRodXMsIHotb3JkZXIgaW4gM0Qgd2lsbCBub3Qgd29yay5cclxuICBcdFx0XHQvLyBXZSBoYXZlIHRvIGNhbGMgei1vcmRlciBtYW51YWxseSBhbmQgc2V0IENTUyB6LWluZGV4IGZvciBJRS5cclxuICBcdFx0XHQvLyBGWUk6IHotaW5kZXggY2FuJ3QgaGFuZGxlIG9iamVjdCBpbnRlcnNlY3Rpb25cclxuICBcdFx0XHR6T3JkZXIoIHNjZW5lKTtcclxuXHJcbiAgXHRcdH1cclxuXHJcbiAgXHR9O1xyXG4gIH1cclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFRIUkVFLkNTUzNEUmVuZGVyZXI7XHJcblxyXG5jb25zdCBfQ1NTM0RPYmplY3QgPSBUSFJFRS5DU1MzRE9iamVjdCwgX0NTUzNEU3ByaXRlID0gVEhSRUUuQ1NTM0RTcHJpdGU7XHJcbmV4cG9ydCB7XHJcbiAgX0NTUzNET2JqZWN0IGFzIENTUzNET2JqZWN0LFxyXG4gIF9DU1MzRFNwcml0ZSBhcyBDU1MzRFNwcml0ZVxyXG59O1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9jb21tb24vY2xhc3Nlcy9DU1MzRFJlbmRlcmVyLmpzIiwiaW1wb3J0IHtUSFJFRSwgJH0gZnJvbSAnLi4vbGlicyc7XHJcbmltcG9ydCB7Q1NTM0RPYmplY3R9IGZyb20gJy4vQ1NTM0RSZW5kZXJlcic7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDU1NMYXllciBleHRlbmRzIENTUzNET2JqZWN0IHtcclxuXHJcbiAgc3RhdGljIGRlbGF5O1xyXG4gIHN0YXRpYyBzdHlsZTtcclxuICBzdGF0aWMgaW5pdChkb2MsIGRlbGF5PTE1MCkge1xyXG4gICAgQ1NTTGF5ZXIuZGVsYXkgPSBkZWxheTtcclxuICAgIENTU0xheWVyLnN0eWxlID0gJChgPHN0eWxlIHR5cGU9dGV4dC9jc3M+XHJcbiAgICAgIC5jc3MtbGF5ZXIge1xyXG4gICAgXHRcdG9wYWNpdHk6IDE7XHJcbiAgICBcdFx0dHJhbnNpdGlvbjogb3BhY2l0eSAke2RlbGF5fW1zIGVhc2Utb3V0O1xyXG4gICAgICAgIHZpc2liaWxpdHk6IHZpc2libGU7XHJcbiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICAgIFx0fVxyXG4gICAgXHQuY3NzLWxheWVyLmhpZGRlbiB7XHJcbiAgICBcdFx0dHJhbnNpdGlvbjogb3BhY2l0eSAke2RlbGF5fW1zIGVhc2UtaW4sIHZpc2liaWxpdHkgJHtkZWxheX1tcyBzdGVwLWVuZDtcclxuICAgIFx0XHRvcGFjaXR5OiAwO1xyXG4gICAgICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcclxuICAgICAgfVxyXG4gICAgPC9zdHlsZT5gLmZiM2RRRmlsdGVyKCkpLmFwcGVuZFRvKGRvYy5oZWFkKTtcclxuICB9XHJcbiAgc3RhdGljIGRpc3Bvc2UoKSB7XHJcbiAgICBDU1NMYXllci5zdHlsZS5yZW1vdmUoKTtcclxuICB9XHJcblxyXG4gIGNvbnN0cnVjdG9yKHdpZHRoLCBoZWlnaHQsIHByb3BzKSB7XHJcbiAgICBzdXBlcigpO1xyXG4gICAgdGhpcy5wcm9wcyA9IHByb3BzO1xyXG4gICAgdGhpcy5qQ29udGFpbmVyID0gJCgnPGRpdiBjbGFzcz1cImhpZGRlbiBjc3MtbGF5ZXJcIj48L2Rpdj4nKTtcclxuICBcdGNvbnN0IHdpZHRoUHhzID0gcHJvcHMud2lkdGgsIGhlaWdodFB4cyA9IGhlaWdodC93aWR0aCp3aWR0aFB4cztcclxuICAgIHRoaXMuakNvbnRhaW5lci53aWR0aCh3aWR0aFB4cykuaGVpZ2h0KGhlaWdodFB4cyk7XHJcbiAgXHR0aGlzLnNjYWxlLnggLz0gd2lkdGhQeHMvd2lkdGg7XHJcbiAgXHR0aGlzLnNjYWxlLnkgLz0gd2lkdGhQeHMvd2lkdGg7XHJcblxyXG4gICAgdGhpcy5zZXREYXRhKCk7XHJcbiAgICB0aGlzLnNldCh0aGlzLmpDb250YWluZXJbMF0pO1xyXG4gIH1cclxuXHJcbiAgY2FsbEludGVybmFsKG5hbWUpIHtcclxuICAgIGlmKHRoaXMub2JqZWN0ICYmIHRoaXMub2JqZWN0W25hbWVdKSB7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgdGhpcy5vYmplY3RbbmFtZV0oKTtcclxuICAgICAgfVxyXG4gICAgICBjYXRjaChlKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihlKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZGlzcG9zZSgpIHtcclxuICAgIHRoaXMuY2xlYXJJbnRlcm5hbHMoKTtcclxuICB9XHJcblxyXG4gIGNsZWFySW50ZXJuYWxzKCkge1xyXG4gICAgdGhpcy5jYWxsSW50ZXJuYWwoJ2Rpc3Bvc2UnKTtcclxuICAgICF0aGlzLmNzcyB8fCB0aGlzLmNzcy5yZW1vdmUoKTtcclxuICAgICF0aGlzLmh0bWwgfHwgdGhpcy5odG1sLnJlbW92ZSgpO1xyXG4gIH1cclxuXHJcbiAgc2V0RGF0YShjc3M9JycsIGh0bWw9JycsIGpzPScnKSB7XHJcbiAgICB0aGlzLmNsZWFySW50ZXJuYWxzKCk7XHJcblxyXG4gICAgdGhpcy5jc3MgPSAkKGA8c3R5bGUgdHlwZT1cInRleHQvY3NzXCI+JHtjc3N9PC9zdHlsZT5gKS5hcHBlbmRUbyh0aGlzLmpDb250YWluZXIpO1xyXG4gICAgdGhpcy5odG1sID0gJChodG1sKS5hcHBlbmRUbyh0aGlzLmpDb250YWluZXIpO1xyXG4gICAgY29uc3QgaW5pdCA9IGV2YWwoanMpO1xyXG4gICAgaWYoaW5pdCkge1xyXG4gICAgICB0aGlzLm9iamVjdCA9IGluaXQodGhpcy5qQ29udGFpbmVyLCB0aGlzLnByb3BzKSB8fCB7fTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHBlbmRlZENhbGwoY2xiKSB7XHJcbiAgICBjb25zdCB0aW1lc3RhbXAgPSB0aGlzLnRpbWVzdGFtcCA9IERhdGUubm93KCk7XHJcbiAgICBzZXRUaW1lb3V0KCgpPT4ge1xyXG4gICAgICBpZih0aW1lc3RhbXA9PT10aGlzLnRpbWVzdGFtcCkge1xyXG4gICAgICAgIGNsYigpO1xyXG4gICAgICB9XHJcbiAgICB9LCBDU1NMYXllci5kZWxheSk7XHJcbiAgfVxyXG5cclxuICBpc0hpZGRlbigpIHtcclxuICAgIHJldHVybiB0aGlzLmpDb250YWluZXIuaGFzQ2xhc3MoJ2hpZGRlbicpO1xyXG4gIH1cclxuXHJcbiAgaGlkZSgpIHtcclxuICAgIGxldCByZXM7XHJcbiAgICBpZighdGhpcy5pc0hpZGRlbigpKSB7XHJcbiAgICAgIHRoaXMuakNvbnRhaW5lci5hZGRDbGFzcygnaGlkZGVuJyk7XHJcbiAgICAgIHRoaXMuY2FsbEludGVybmFsKCdoaWRlJyk7XHJcbiAgICAgIHJlcyA9IG5ldyBQcm9taXNlKChyZXNvbHZlKT0+IHtcclxuICAgICAgICB0aGlzLnBlbmRlZENhbGwoKCk9PiB7XHJcbiAgICAgICAgICB0aGlzLmNhbGxJbnRlcm5hbCgnaGlkZGVuJyk7XHJcbiAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHJlcyA9IFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlcztcclxuICB9XHJcblxyXG4gIHNob3coKSB7XHJcbiAgICBsZXQgcmVzO1xyXG4gICAgaWYodGhpcy5pc0hpZGRlbigpKSB7XHJcbiAgICAgIHRoaXMuakNvbnRhaW5lci5yZW1vdmVDbGFzcygnaGlkZGVuJyk7XHJcbiAgICAgIHRoaXMuY2FsbEludGVybmFsKCdzaG93Jyk7XHJcbiAgICAgIHJlcyA9IG5ldyBQcm9taXNlKChyZXNvbHZlKT0+IHtcclxuICAgICAgICB0aGlzLnBlbmRlZENhbGwoKCk9PiB7XHJcbiAgICAgICAgICB0aGlzLmNhbGxJbnRlcm5hbCgnc2hvd24nKTtcclxuICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgcmVzID0gUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzO1xyXG4gIH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvQ1NTTGF5ZXIuanMiLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBDYWNoZSB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKG1heFNpemU9SW5maW5pdHksIHNpemVvZj1DYWNoZS5jb3VudFNpemVvZikge1xyXG4gICAgdGhpcy5vcyA9IG5ldyBNYXAoKTtcclxuICAgIHRoaXMuc2l6ZW9mID0gc2l6ZW9mO1xyXG4gICAgdGhpcy5tYXhTaXplID0gbWF4U2l6ZTtcclxuICAgIHRoaXMuc2l6ZSA9IDA7XHJcbiAgfVxyXG5cclxuICBmb3JFYWNoKGNsYikge1xyXG4gICAgdGhpcy5vcy5mb3JFYWNoKCh2LCBrKT0+IGNsYihbayx2XSkpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGNvdW50U2l6ZW9mKHZhbHVlKSB7XHJcbiAgICByZXR1cm4gMTtcclxuICB9XHJcblxyXG4gIHJlbW92ZShrKSB7XHJcbiAgICBsZXQgcmVzID0gZmFsc2U7XHJcbiAgICBjb25zdCB2ID0gdGhpcy5vcy5nZXQoayk7XHJcbiAgICBpZighdi5sb2NrZWQgfHwgIXYubG9ja2VkKGspKSB7XHJcbiAgICAgIHRoaXMuc2l6ZSAtPSB0aGlzLnNpemVvZih2KTtcclxuICAgICAgaWYodi5kaXNwb3NlKSB7XHJcbiAgICAgICAgdi5kaXNwb3NlKCk7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5vcy5kZWxldGUoayk7XHJcbiAgICAgIHJlcyA9IHRydWU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzO1xyXG4gIH1cclxuXHJcbiAgZnJlZVNwYWNlKCkge1xyXG4gICAgY29uc3QgYXJyID0gW107XHJcbiAgICBmb3IobGV0IHAgb2YgdGhpcy5vcykge1xyXG4gICAgICBhcnIucHVzaCh7dGltZXN0YW1wOiBwWzFdLnRpbWVzdGFtcCwga2V5OiBwWzBdfSk7XHJcbiAgICB9XHJcbiAgICBhcnIuc29ydCgoYSwgYik9PiBhLnRpbWVzdGFtcC1iLnRpbWVzdGFtcCk7XHJcbiAgICBmb3IobGV0IGk9MDsgaTxhcnIubGVuZ3RoICYmIHRoaXMuc2l6ZT4zKnRoaXMubWF4U2l6ZS80OyArK2kpIHtcclxuICAgICAgdGhpcy5yZW1vdmUoYXJyW2ldLmtleSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBkaXNwb3NlKCkge1xyXG4gICAgY29uc3QgYXJyID0gW107XHJcbiAgICBmb3IobGV0IHAgb2YgdGhpcy5vcykge1xyXG4gICAgICBhcnIucHVzaCh7djogcFsxXSwgazogcFswXX0pO1xyXG4gICAgfVxyXG4gICAgZm9yKGxldCBvIG9mIGFycikge1xyXG4gICAgICBpZihvLnYuZGlzcG9zZSkge1xyXG4gICAgICAgIG8udi5kaXNwb3NlKCk7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5vcy5kZWxldGUoby5rKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHN0YXRpYyByZWN1cnNpb25TaXplb2YodmFsdWUpIHtcclxuICAgIGxldCBzaXplID0gMDtcclxuICAgIGlmKHZhbHVlKSB7XHJcbiAgICAgICsrc2l6ZTtcclxuICAgICAgY29uc3QgbGVuID0gdmFsdWUubGVuZ3RoO1xyXG4gICAgICBpZihsZW49PT11bmRlZmluZWQpIHtcclxuICAgICAgICBmb3IgKGxldCBwIGluIHZhbHVlKSB7XHJcbiAgICAgICAgICBpZih2YWx1ZS5oYXNPd25Qcm9wZXJ0eShwKSkge1xyXG4gICAgICAgICAgICBzaXplKz1DYWNoZS5yZWN1cnNpb25TaXplb2YodmFsdWVbcF0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICBzaXplKz1sZW5cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHNpemU7XHJcbiAgfVxyXG5cclxuICBnZXRUaW1lc3RhbXAoKSB7XHJcbiAgICByZXR1cm4gRGF0ZS5ub3coKTtcclxuICB9XHJcblxyXG5cclxuICBnZXQoa2V5KSB7XHJcbiAgICBjb25zdCB2YWx1ZSA9IHRoaXMub3MuZ2V0KGtleSk7XHJcbiAgICBpZih2YWx1ZSkge1xyXG4gICAgICB2YWx1ZS50aW1lc3RhbXAgPSB0aGlzLmdldFRpbWVzdGFtcCgpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHZhbHVlO1xyXG4gIH1cclxuXHJcbiAgcHV0KGtleSwgdmFsdWUpIHtcclxuICAgIHZhbHVlLnRpbWVzdGFtcCA9IHRoaXMuZ2V0VGltZXN0YW1wKCk7XHJcbiAgICB0aGlzLm9zLnNldChrZXksIHZhbHVlKTtcclxuICAgIHRoaXMuc2l6ZSs9dGhpcy5zaXplb2YodmFsdWUpO1xyXG4gICAgaWYodGhpcy5zaXplPnRoaXMubWF4U2l6ZSkge1xyXG4gICAgICB0aGlzLmZyZWVTcGFjZSgpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHZhbHVlO1xyXG4gIH1cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9jb21tb24vY2xhc3Nlcy9DYWNoZS5qcyIsImltcG9ydCB7VEhSRUV9IGZyb20gJy4uL2xpYnMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29udHJvbGxlciBleHRlbmRzIFRIUkVFLkV2ZW50RGlzcGF0Y2hlciB7XHJcblxyXG4gIGhhbmRsZURlZmF1bHQoaWQsIGUsIGRhdGEpIHtcclxuICAgIC8vY29uc29sZS5sb2coaWQrJy0nK2UudHlwZSsnLScrZGF0YSk7XHJcbiAgfVxyXG5cclxuICBkaXNwYXRjaEFzeW5jKGUpIHtcclxuICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCk9PiB0aGlzLmRpc3BhdGNoRXZlbnQoZSkpO1xyXG4gIH1cclxuXHJcbiAgZGlzcG9zZSgpIHtcclxuXHJcbiAgfVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9jb21tb24vY2xhc3Nlcy9Db250cm9sbGVyLmpzIiwiaW1wb3J0IEV2ZW50Q29udmVydGVyIGZyb20gJy4vRXZlbnRDb252ZXJ0ZXInO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ3VzdG9tRXZlbnRDb252ZXJ0ZXIgZXh0ZW5kcyBFdmVudENvbnZlcnRlciB7XHJcblxyXG4gIC8vIGN1c3RvbVxyXG4gIC8vIHRlc3RJbnRlcnNlY3Rpb24oZSwgZGF0YSk7XHJcbiAgLy8gY3VzdG9tLm9iamVjdFxyXG4gIC8vIHRlc3Qob2JqZWN0KTtcclxuXHJcbiAgY29uc3RydWN0b3Iod25kLCBkb2MsIGN1c3RvbVRlc3Q9KCk9PiBmYWxzZSwgZURvYykge1xyXG4gICAgc3VwZXIod25kLCBkb2MpO1xyXG5cclxuICAgIHRoaXMuZURvYyA9IGVEb2M7XHJcbiAgICB0aGlzLmN1c3RvbVRlc3QgPSBjdXN0b21UZXN0O1xyXG4gICAgdGhpcy5jdXN0b21zID0gW107XHJcbiAgfVxyXG5cclxuICB0ZXN0KG9iamVjdDEsIG9iamVjdDIpIHtcclxuICAgIHJldHVybiBvYmplY3QxICYmIG9iamVjdDI/IHRoaXMuY3VzdG9tVGVzdChvYmplY3QxLCBvYmplY3QyKTogZmFsc2U7XHJcbiAgfVxyXG5cclxuICBnZXRDYWxsYmFjayhvYmplY3QpIHtcclxuICAgIHJldHVybiBvYmplY3QudGFyZ2V0LmNhbGxiYWNrO1xyXG4gIH1cclxuXHJcbiAgYWRkQ3VzdG9tKGN1c3RvbSkge1xyXG4gICAgdGhpcy5jdXN0b21zLnB1c2goY3VzdG9tKTtcclxuICB9XHJcblxyXG4gIGdldE9iamVjdChlLCBkYXRhKSB7XHJcbiAgICBsZXQgb2JqZWN0O1xyXG4gICAgaWYoZGF0YS5kb2M9PT10aGlzLmVEb2MpIHtcclxuICAgICAgZm9yKGxldCBjdXN0b20gb2YgdGhpcy5jdXN0b21zKSB7XHJcbiAgICAgICAgb2JqZWN0ID0gY3VzdG9tLnRlc3RJbnRlcnNlY3Rpb24oZSwgZGF0YSk7XHJcbiAgICAgICAgaWYob2JqZWN0KSB7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBvYmplY3Q7XHJcbiAgfVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9jb21tb24vY2xhc3Nlcy9DdXN0b21FdmVudENvbnZlcnRlci5qcyIsImltcG9ydCBVdGlscyBmcm9tICcuL1V0aWxzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZpbmRlciB7XHJcblxyXG4gIHN0YXRpYyBERUxJTUlURVIgPSAnICc7XHJcblxyXG4gIHN0YXRpYyBpc0RlbGltZXRyKHMpIHtcclxuICAgIHJldHVybiBzPT09RmluZGVyLkRFTElNSVRFUjtcclxuICB9XHJcblxyXG4gIG1lcmdlKCkge1xyXG4gICAgY29uc3QgYXMgPSBbXSwgbWFwID0gW10sIHN0cnMgPSB0aGlzLnN0cnM7XHJcbiAgICBsZXQgcCA9IDA7XHJcbiAgICBmb3IobGV0IGk9MDsgaTxzdHJzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgIGlmKHN0cnNbaV0ubGVuZ3RoKSB7XHJcbiAgICAgICAgbWFwLnB1c2goe1xyXG4gICAgICAgICAgYmFzZTogaSxcclxuICAgICAgICAgIG9mZnNldDogcFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGFzLnB1c2goc3Ryc1tpXSk7XHJcbiAgICAgICAgcCArPSBzdHJzW2ldLmxlbmd0aDtcclxuICAgICAgICBpZihpPHN0cnMubGVuZ3RoLTEgJiYgIUZpbmRlci5pc0RlbGltZXRyKHN0cnNbaV0uY2hhckF0KHN0cnNbaV0ubGVuZ3RoLTEpKSAmJiAhRmluZGVyLmlzRGVsaW1ldHIoc3Ryc1tpKzFdLmNoYXJBdCgwKSkpIHtcclxuICAgICAgICAgIGFzLnB1c2goRmluZGVyLkRFTElNSVRFUik7XHJcbiAgICAgICAgICArK3A7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICB0aGlzLm1hcCA9IG1hcDtcclxuICAgIHRoaXMuc3RyID0gYXMuam9pbignJyk7XHJcbiAgfVxyXG5cclxuICBhZGRIaXRzKHApIHtcclxuICAgIGNvbnN0IGluZm8gPSB0aGlzLm1hcFtVdGlscy5sb3dlckJvdW5kKHRoaXMubWFwLCB7b2Zmc2V0OiBwfSwgKGEsIGIpPT4gYS5vZmZzZXQtYi5vZmZzZXQpXTtcclxuICAgIGxldCBjaGFycyA9IHRoaXMucGF0dGVybi5sZW5ndGgsIGkgPSBpbmZvLmJhc2U7XHJcbiAgICBwIC09IGluZm8ub2Zmc2V0O1xyXG4gICAgd2hpbGUoY2hhcnMpIHtcclxuICAgICAgaWYodGhpcy5zdHJzW2ldLmxlbmd0aCkge1xyXG4gICAgICAgIGNvbnN0IGRlbGltZXRlciA9IGk8dGhpcy5zdHJzLmxlbmd0aC0xICYmICFGaW5kZXIuaXNEZWxpbWV0cih0aGlzLnN0cnNbaV0uY2hhckF0KHRoaXMuc3Ryc1tpXS5sZW5ndGgtMSkpICYmICFGaW5kZXIuaXNEZWxpbWV0cih0aGlzLnN0cnNbaSsxXS5jaGFyQXQoMCkpLFxyXG4gICAgICAgICAgICAgIGxlbmd0aCA9IE1hdGgubWluKHRoaXMuc3Ryc1tpXS5sZW5ndGgrKGRlbGltZXRlcj8gMTogMCktcCwgY2hhcnMpO1xyXG4gICAgICAgIGlmKHA8dGhpcy5zdHJzW2ldLmxlbmd0aCkge1xyXG4gICAgICAgICAgdGhpcy5oaXRzLnB1c2goe1xyXG4gICAgICAgICAgICBpbmRleDogaSxcclxuICAgICAgICAgICAgb2Zmc2V0OiBwLFxyXG4gICAgICAgICAgICBsZW5ndGg6IE1hdGgubWluKGxlbmd0aCwgdGhpcy5zdHJzW2ldLmxlbmd0aC1wKSxcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjaGFycyAtPSBsZW5ndGg7XHJcbiAgICAgICAgKytpO1xyXG4gICAgICAgIHAgPSAwO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBhZGRDb250ZXh0KHApIHtcclxuICAgIGxldCBmID0gcCwgbCA9IHArdGhpcy5wYXR0ZXJuLmxlbmd0aC0xLCBkZWxzID0gdGhpcy5wcm9wcy5jb250ZXh0TGVuZ3RoLCBwcmV2RGVscyA9IGRlbHMrMTtcclxuICAgIHdoaWxlKGRlbHMgJiYgcHJldkRlbHMtZGVscykge1xyXG4gICAgICBwcmV2RGVscyA9IGRlbHM7XHJcbiAgICAgIGlmKGRlbHMlMikge1xyXG4gICAgICAgIGZvcihsZXQgaT1mLTI7IGk+PTA7IC0taSkge1xyXG4gICAgICAgICAgaWYoRmluZGVyLmlzRGVsaW1ldHIodGhpcy5zdHJbaV0pIHx8IGk9PT0wKSB7XHJcbiAgICAgICAgICAgIGYgPSBpPT09MD8gMDogaSsxO1xyXG4gICAgICAgICAgICAtLWRlbHM7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICBmb3IobGV0IGk9bCsyOyBpPHRoaXMuc3RyLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICBpZihGaW5kZXIuaXNEZWxpbWV0cih0aGlzLnN0cltpXSkgfHwgaT09PXRoaXMuc3RyLmxlbmd0aC0xKSB7XHJcbiAgICAgICAgICAgIGwgPSBpPT09dGhpcy5zdHIubGVuZ3RoLTE/IGk9PT10aGlzLnN0ci5sZW5ndGgtMTogaS0xO1xyXG4gICAgICAgICAgICAtLWRlbHM7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgdGhpcy5jb250ZXh0cy5wdXNoKHRoaXMuc3RyLnN1YnN0cihmLCBsLWYrMSkpO1xyXG4gIH1cclxuXHJcbiAgZ2V0SGl0cygpIHtcclxuICAgIHJldHVybiB0aGlzLmhpdHM7XHJcbiAgfVxyXG5cclxuICBnZXRDb250ZXh0cygpIHtcclxuICAgIHJldHVybiB0aGlzLmNvbnRleHRzO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGRlZmF1bHRzID0ge1xyXG4gICAgY29udGV4dExlbmd0aDogNyxcclxuICAgIGhpdHM6IHRydWUsXHJcbiAgICBjb250ZXh0czogdHJ1ZVxyXG4gIH07XHJcblxyXG4gIGNvbnN0cnVjdG9yKHN0cnMsIHBhdHRlcm4sIHByb3BzKSB7XHJcbiAgICB0aGlzLnByb3BzID0ge1xyXG4gICAgICAuLi5GaW5kZXIuZGVmYXVsdHMsXHJcbiAgICAgIC4uLnByb3BzXHJcbiAgICB9O1xyXG4gICAgdGhpcy5zdHJzID0gc3RycztcclxuICAgIGNvbnN0IGRhdGEgPSB0aGlzLm1lcmdlKHN0cnMpO1xyXG4gICAgdGhpcy5oaXRzID0gW107XHJcbiAgICB0aGlzLmNvbnRleHRzID0gW107XHJcbiAgICB0aGlzLnBhdHRlcm4gPSBwYXR0ZXJuLnRvTG93ZXJDYXNlKCk7XHJcbiAgICB0aGlzLmxzdHIgPSB0aGlzLnN0ci50b0xvd2VyQ2FzZSgpO1xyXG4gICAgbGV0IHAgPSAwO1xyXG4gICAgd2hpbGUodHJ1ZSkge1xyXG4gICAgICBwID0gdGhpcy5sc3RyLmluZGV4T2YodGhpcy5wYXR0ZXJuLCBwKTtcclxuICAgICAgaWYocD09PS0xKSB7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgdGhpcy5hZGRIaXRzKHApO1xyXG4gICAgICAgIHRoaXMuYWRkQ29udGV4dChwKTtcclxuICAgICAgICBwICs9IHRoaXMucGF0dGVybi5sZW5ndGg7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvRmluZGVyLmpzIiwiaW1wb3J0IHskfSBmcm9tICcuLi9saWJzJztcclxuaW1wb3J0IEZ1bGxTY3JlZW4gZnJvbSAnLi9GdWxsU2NyZWVuJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZ1bGxTY3JlZW5YIGV4dGVuZHMgRnVsbFNjcmVlbiB7XHJcblxyXG5cdHN0YXRpYyBhdmFpbGFibGUoKSB7XHJcblx0XHRyZXR1cm4gdHJ1ZTtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBkZWZOb2RlID0gJCgpO1xyXG5cdHN0YXRpYyBub2RlID0gRnVsbFNjcmVlblguZGVmTm9kZTtcclxuXHRzdGF0aWMgZGVmSGFuZGxlciA9ICgpPT4gdW5kZWZpbmVkXHJcblx0c3RhdGljIGhhbmRsZXIgPSBGdWxsU2NyZWVuWC5kZWZIYW5kbGVyO1xyXG5cdHN0YXRpYyBjbGFzc1ggPSAnZmIzZC1mdWxsc2NyZWVueCc7XHJcblx0c3RhdGljIHN0eWxlID0gJChgXHJcblx0XHQ8c3R5bGUgdHlwZT1cInRleHQvY3NzXCI+XHJcbiAgICAgIC4ke0Z1bGxTY3JlZW5YLmNsYXNzWH0ge1xyXG4gICAgICAgIHBvc2l0aW9uOiBmaXhlZCAhaW1wb3J0YW50O1xyXG5cdFx0XHRcdGxlZnQ6IDAgIWltcG9ydGFudDtcclxuICAgICAgICB0b3A6IDAgIWltcG9ydGFudDtcclxuICAgICAgICB3aWR0aDogMTAwJSAhaW1wb3J0YW50O1xyXG4gICAgICAgIGhlaWdodDogMTAwJSAhaW1wb3J0YW50O1xyXG5cdFx0XHRcdHotaW5kZXg6IDIxNDc0ODM2NDcgIWltcG9ydGFudDtcclxuXHRcdFx0XHRtYXJnaW46IDAgIWltcG9ydGFudDtcclxuXHRcdFx0XHRib3gtc2l6aW5nOiBib3JkZXItYm94ICFpbXBvcnRhbnQ7XHJcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzMzMztcclxuICAgICAgfVxyXG4gICAgPC9zdHlsZT5cclxuXHRgLmZiM2RRRmlsdGVyKCkpLmFwcGVuZFRvKCdoZWFkJyk7XHJcblxyXG5cdHN0YXRpYyBhY3RpdmF0ZWQoKSB7XHJcblx0XHRyZXR1cm4gc3VwZXIuYXZhaWxhYmxlKCk/IHN1cGVyLmFjdGl2YXRlZCgpOiBGdWxsU2NyZWVuWC5ub2RlLmhhc0NsYXNzKEZ1bGxTY3JlZW5YLmNsYXNzWCk7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgYWRkRXZlbnRMaXN0ZW5lcihlbGVtZW50LCBoYW5kbGVyKSB7XHJcblx0XHRpZihzdXBlci5hdmFpbGFibGUoKSkge1xyXG5cdFx0XHRzdXBlci5hZGRFdmVudExpc3RlbmVyKGVsZW1lbnQsIGhhbmRsZXIpO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSB7XHJcblx0XHRcdEZ1bGxTY3JlZW5YLmhhbmRsZXIgPSBoYW5kbGVyO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0c3RhdGljIHJlbW92ZUV2ZW50TGlzdGVuZXIoZWxlbWVudCwgaGFuZGxlcikge1xyXG5cdFx0aWYoc3VwZXIuYXZhaWxhYmxlKCkpIHtcclxuXHRcdFx0c3VwZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihlbGVtZW50LCBoYW5kbGVyKTtcclxuXHRcdH1cclxuXHRcdGVsc2Uge1xyXG5cdFx0XHRGdWxsU2NyZWVuWC5oYW5kbGVyID0gRnVsbFNjcmVlblguZGVmSGFuZGxlcjtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHN0YXRpYyByZXF1ZXN0KGVsZW1lbnQpIHtcclxuXHRcdGlmKHN1cGVyLmF2YWlsYWJsZSgpKSB7XHJcblx0XHRcdHN1cGVyLnJlcXVlc3QoZWxlbWVudCk7XHJcblx0XHR9XHJcblx0XHRlbHNlIHtcclxuXHRcdFx0aWYoIUZ1bGxTY3JlZW5YLm5vZGUuaGFzQ2xhc3MoRnVsbFNjcmVlblguY2xhc3NYKSkge1xyXG5cdFx0XHRcdEZ1bGxTY3JlZW5YLm5vZGUgPSAkKGVsZW1lbnQgfHwgZG9jdW1lbnQuYm9keSk7XHJcblx0XHRcdFx0RnVsbFNjcmVlblgubm9kZS5hZGRDbGFzcyhGdWxsU2NyZWVuWC5jbGFzc1gpO1xyXG5cdFx0XHRcdFByb21pc2UucmVzb2x2ZSgpLnRoZW4oRnVsbFNjcmVlblguaGFuZGxlcik7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHN0YXRpYyBjYW5jZWwoKSB7XHJcblx0XHRpZihzdXBlci5hdmFpbGFibGUoKSkge1xyXG5cdFx0XHRzdXBlci5jYW5jZWwoKTtcclxuXHRcdH1cclxuXHRcdGVsc2Uge1xyXG5cdFx0XHRpZihGdWxsU2NyZWVuWC5ub2RlLmhhc0NsYXNzKEZ1bGxTY3JlZW5YLmNsYXNzWCkpIHtcclxuXHRcdFx0XHRGdWxsU2NyZWVuWC5ub2RlLnJlbW92ZUNsYXNzKEZ1bGxTY3JlZW5YLmNsYXNzWCk7XHJcblx0XHRcdFx0RnVsbFNjcmVlblgubm9kZSA9IEZ1bGxTY3JlZW5YLmRlZk5vZGU7XHJcblx0XHRcdFx0UHJvbWlzZS5yZXNvbHZlKCkudGhlbihGdWxsU2NyZWVuWC5oYW5kbGVyKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvRnVsbFNjcmVlblguanMiLCJpbXBvcnQge1BERkpTfSBmcm9tICcuLi9saWJzJztcclxuaW1wb3J0IFV0aWxzIGZyb20gJy4vVXRpbHMnO1xyXG5cclxuUERGSlMuR2xvYmFsV29ya2VyT3B0aW9ucy53b3JrZXJTcmMgPSAod2luZG93LlBERkpTX0xPQ0FMRT8gUERGSlNfTE9DQUxFOiBHTE9CQUxfUEFUSFMpLnBkZkpzV29ya2VyO1xyXG5QREZKUy5jTWFwVXJsID0gKHdpbmRvdy5QREZKU19MT0NBTEU/IFBERkpTX0xPQ0FMRTogR0xPQkFMX1BBVEhTKS5wZGZKc0NNYXBVcmw7XHJcblBERkpTLmNNYXBQYWNrZWQgPSB0cnVlO1xyXG5QREZKUy5kaXNhYmxlQXV0b0ZldGNoID0gdHJ1ZTtcclxuUERGSlMuZGlzYWJsZVN0cmVhbSA9IHRydWU7XHJcblBERkpTLmltYWdlUmVzb3VyY2VzUGF0aCA9ICdpbWFnZXMvcGRmanMvJztcclxuUERGSlMuZXh0ZXJuYWxMaW5rVGFyZ2V0ID0gUERGSlMuTGlua1RhcmdldC5CTEFOSztcclxuLy8gUERGSlMuZGlzYWJsZUZvbnRGYWNlID0gdHJ1ZTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBkZiB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHNyYywgbG9hZGluZ1Byb2dyZXNzKSB7XHJcbiAgICB0aGlzLnNyYyA9IFV0aWxzLm5vcm1hbGl6ZVVybChzcmMpO1xyXG4gICAgdGhpcy5oYW5kbGVyUXVldWUgPSBbXTtcclxuICAgIHRoaXMucHJvZ3Jlc0RhdGEgPSB7bG9hZGVkOiAtMSwgdG90YWw6IDF9O1xyXG4gICAgdGhpcy5sb2FkaW5nUHJvZ3Jlc3MgPSBsb2FkaW5nUHJvZ3Jlc3M7XHJcblxyXG4gICAgdGhpcy50YXNrID0gUERGSlMuZ2V0RG9jdW1lbnQoe1xyXG4gICAgICB1cmw6IHRoaXMuc3JjLFxyXG4gICAgICByYW5nZUNodW5rU2l6ZTogNTEyKjEwMjQsXHJcbiAgICAgIGNNYXBVcmw6IFBERkpTLmNNYXBVcmwsXHJcbiAgICAgIGNNYXBQYWNrZWQ6IFBERkpTLmNNYXBQYWNrZWQsXHJcbiAgICAgIGRpc2FibGVBdXRvRmV0Y2g6IFBERkpTLmRpc2FibGVBdXRvRmV0Y2gsXHJcbiAgICAgIGRpc2FibGVTdHJlYW06IFBERkpTLmRpc2FibGVTdHJlYW0sXHJcbiAgICAgIGltYWdlUmVzb3VyY2VzUGF0aDogUERGSlMuaW1hZ2VSZXNvdXJjZXNQYXRoLFxyXG4gICAgICBleHRlcm5hbExpbmtUYXJnZXQ6IFBERkpTLmV4dGVybmFsTGlua1RhcmdldCxcclxuICAgICAgLy8gZGlzYWJsZUZvbnRGYWNlOiBQREZKUy5kaXNhYmxlRm9udEZhY2VcclxuICAgIH0pO1xyXG4gICAgdGhpcy50YXNrLm9uUHJvZ3Jlc3MgPSAoZGF0YSk9PiB7XHJcbiAgICAgIGlmKHRoaXMubG9hZGluZ1Byb2dyZXNzKSB7XHJcbiAgICAgICAgbGV0IGN1ciA9IE1hdGguZmxvb3IoMTAwKmRhdGEubG9hZGVkL2RhdGEudG90YWwpLFxyXG4gICAgICAgICAgICAgIG9sZCA9IE1hdGguZmxvb3IoMTAwKnRoaXMucHJvZ3Jlc0RhdGEubG9hZGVkL3RoaXMucHJvZ3Jlc0RhdGEudG90YWwpO1xyXG4gICAgICAgIGlmKGN1ciE9PW9sZCkge1xyXG4gICAgICAgICAgY3VyID0gaXNOYU4oY3VyKT8gMDogY3VyO1xyXG4gICAgICAgICAgY3VyID0gY3VyPjEwMD8gMTAwOiBjdXI7XHJcbiAgICAgICAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmxvYWRpbmdQcm9ncmVzcyhjdXIpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIHRoaXMucHJvZ3Jlc0RhdGEgPSBkYXRhO1xyXG4gICAgfTtcclxuICAgIHRoaXMudGFzay5wcm9taXNlLnRoZW4oKGhhbmRsZXIpPT4ge1xyXG4gICAgICBpZihoYW5kbGVyLm51bVBhZ2VzPjEpIHtcclxuICAgICAgICBQcm9taXNlLmFsbChbaGFuZGxlci5nZXRQYWdlKDEpLCBoYW5kbGVyLmdldFBhZ2UoMildKS5cclxuICAgICAgICB0aGVuKChwYWdlcyk9PiB7XHJcbiAgICAgICAgICB0aGlzLmluaXQoaGFuZGxlciwgcGFnZXMpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIHRoaXMuaW5pdChoYW5kbGVyKTtcclxuICAgICAgfVxyXG4gICAgfSkuXHJcbiAgICBjYXRjaCgoZSk9PiB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XHJcbiAgICAgIGlmKHRoaXMuZXJyb3JIYW5kbGVyKSB7XHJcbiAgICAgICAgdGhpcy5lcnJvckhhbmRsZXIoZSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgaW5pdChoYW5kbGVyLCBwYWdlcykge1xyXG4gICAgdGhpcy5oYW5kbGVyID0gaGFuZGxlcjtcclxuICAgIHRoaXMuZG91YmxlZFBhZ2VzID0gcGFnZXM/IChNYXRoLmFicygyKlBkZi5nZXRQYWdlU2l6ZShwYWdlc1swXSkud2lkdGgtUGRmLmdldFBhZ2VTaXplKHBhZ2VzWzFdKS53aWR0aCkvUGRmLmdldFBhZ2VTaXplKHBhZ2VzWzBdKS53aWR0aDwwLjAxKTogZmFsc2U7XHJcbiAgICBsZXQgZG9uZSA9IFByb21pc2UucmVzb2x2ZShoYW5kbGVyKTtcclxuICAgIGZvcihsZXQgY2xiIG9mIHRoaXMuaGFuZGxlclF1ZXVlLnJldmVyc2UoKSkge1xyXG4gICAgICBkb25lID0gZG9uZS50aGVuKChoYW5kbGVyKT0+IHtcclxuICAgICAgICBjbGIoaGFuZGxlcik7XHJcbiAgICAgICAgcmV0dXJuIGhhbmRsZXI7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZ2V0UGFnZVR5cGUobikge1xyXG4gICAgcmV0dXJuICF0aGlzLmRvdWJsZWRQYWdlcyB8fCBuPT09MCB8fCBuPT09dGhpcy5nZXRQYWdlc051bSgpLTE/ICdmdWxsJzogKG4mMT8gJ2xlZnQnOiAncmlnaHQnKTtcclxuICB9XHJcblxyXG4gIGdldFBhZ2Uobikge1xyXG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlci5nZXRQYWdlKHRoaXMuZG91YmxlZFBhZ2VzPyBNYXRoLmNlaWwobi8yKSsxOiBuKzEpO1xyXG4gIH1cclxuXHJcbiAgZ2V0RGVzdGluYXRpb24oZGVzdCkge1xyXG4gICAgbGV0IGRlc3RQcm9taXNlO1xyXG4gICAgaWYodHlwZW9mIGRlc3Q9PT0nc3RyaW5nJykge1xyXG4gICAgICBkZXN0UHJvbWlzZSA9IHRoaXMuaGFuZGxlci5nZXREZXN0aW5hdGlvbihkZXN0KTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBkZXN0UHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShkZXN0KTtcclxuICAgIH1cclxuICAgIGRlc3RQcm9taXNlID0gZGVzdFByb21pc2UuXHJcbiAgICAgIHRoZW4oKGRlc3QpPT4gdGhpcy5oYW5kbGVyLmdldFBhZ2VJbmRleChkZXN0WzBdKSkuXHJcbiAgICAgIHRoZW4oKG51bWJlcik9PiB0aGlzLmRvdWJsZWRQYWdlcz8gKG51bWJlcjwxPyBudW1iZXI6IDErMioobnVtYmVyLTEpKTogbnVtYmVyKS5cclxuICAgICAgY2F0Y2goKCk9PiBjb25zb2xlLmVycm9yKCdCYWQgYm9va21hcmsnKSk7XHJcbiAgICByZXR1cm4gZGVzdFByb21pc2U7XHJcbiAgfVxyXG5cclxuICBkaXNwb3NlKCkge1xyXG4gICAgdGhpcy5oYW5kbGVyUXVldWUuc3BsaWNlKDAsIHRoaXMuaGFuZGxlclF1ZXVlLmxlbmd0aCk7XHJcbiAgICBkZWxldGUgdGhpcy5oYW5kbGVyO1xyXG4gIH1cclxuXHJcbiAgc2V0TG9hZGluZ1Byb2dyZXNzQ2xiKGNsYikge1xyXG4gICAgdGhpcy5sb2FkaW5nUHJvZ3Jlc3MgPSBjbGI7XHJcbiAgfVxyXG5cclxuICBzZXRFcnJvckhhbmRsZXIoZWgpIHtcclxuICAgIHRoaXMuZXJyb3JIYW5kbGVyID0gZWg7XHJcbiAgfVxyXG5cclxuICBnZXRQYWdlc051bSgpIHtcclxuICAgIHJldHVybiB0aGlzLmhhbmRsZXI/ICh0aGlzLmRvdWJsZWRQYWdlcz8gMioodGhpcy5oYW5kbGVyLm51bVBhZ2VzLTEpOiB0aGlzLmhhbmRsZXIubnVtUGFnZXMpOiB1bmRlZmluZWQ7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZ2V0UGFnZVNpemUocGFnZSkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgd2lkdGg6IHBhZ2Uudmlld1syXS1wYWdlLnZpZXdbMF0sXHJcbiAgICAgIGhlaWdodDogcGFnZS52aWV3WzNdLXBhZ2Uudmlld1sxXVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4vLyAgIGlmKHBhZ2VzPjEpIHtcclxuLy8gICBoYW5kbGVyLmdldFBhZ2UoMikuXHJcbi8vICAgdGhlbigocGFnZSk9PiB7XHJcbi8vICAgICBjb25zdCBzaXplMSA9IFBkZi5nZXRQYWdlU2l6ZShwYWdlKTtcclxuLy8gICAgIHRoaXMucHJvcHMuZG91YmxlZFBhZ2VzID0gMipzaXplMC53aWR0aD09PXNpemUxLndpZHRoO1xyXG4vLyAgICAgdGhpcy5yZWFkeSgpO1xyXG4vLyAgIH0pLlxyXG4vLyAgIGNhdGNoKCgpPT4gdGhpcy5yZWFkeSgpKTtcclxuLy8gfVxyXG4vLyBlbHNlIHtcclxuXHJcbiAgZ2V0SGFuZGxlcihjbGIpIHtcclxuICAgIGlmKHRoaXMuaGFuZGxlcikge1xyXG4gICAgICBjbGIodGhpcy5oYW5kbGVyKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICB0aGlzLmhhbmRsZXJRdWV1ZS5wdXNoKGNsYik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9jb21tb24vY2xhc3Nlcy9QZGYuanMiLCJpbXBvcnQge1RIUkVFLCAkfSBmcm9tICcuLi9saWJzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRocmVlRXZlbnRDb252ZXJ0ZXJGcyB7XHJcblxyXG4gIHN0YXRpYyBvYmplY3RzVGVzdChvYmplY3QxLCBvYmplY3QyKSB7XHJcbiAgICByZXR1cm4gb2JqZWN0MSAmJiBvYmplY3QyPyBvYmplY3QxLm9iamVjdD09PW9iamVjdDIub2JqZWN0OiBmYWxzZTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBvYmplY3RzQW5kRmFjZXNUZXN0KG9iamVjdDEsIG9iamVjdDIpIHtcclxuICAgIHJldHVybiBvYmplY3QxICYmIG9iamVjdDI/IG9iamVjdDEub2JqZWN0PT09b2JqZWN0Mi5vYmplY3QgJiYgb2JqZWN0MS5mYWNlLm1hdGVyaWFsSW5kZXg9PT1vYmplY3QyLmZhY2UubWF0ZXJpYWxJbmRleDogZmFsc2U7XHJcbiAgfVxyXG5cclxuICBjb25zdHJ1Y3Rvcih2aXN1YWxXb3JsZCwgdGVzdD1UaHJlZUV2ZW50Q29udmVydGVyRnMub2JqZWN0c0FuZEZhY2VzVGVzdCkge1xyXG4gICAgdGhpcy52aXN1YWwgPSB2aXN1YWxXb3JsZDtcclxuICAgIHRoaXMuY29vcmRzID0gbmV3IFRIUkVFLlZlY3RvcjIoKTtcclxuICAgIHRoaXMucmF5Y2FzdGVyID0gdGhpcy52aXN1YWwucmF5Y2FzdGVyO1xyXG4gICAgdGhpcy5jYW1lcmEgPSB0aGlzLnZpc3VhbC5jYW1lcmE7XHJcbiAgICB0aGlzLnRocmVlcyA9IFtdO1xyXG4gICAgdGhpcy50ZXN0ID0gdGVzdDtcclxuICB9XHJcblxyXG4gIGFkZFRocmVlKHRocmVlKSB7XHJcbiAgICB0aGlzLnRocmVlcy5wdXNoKHRocmVlKTtcclxuICB9XHJcblxyXG4gIHJlbW92ZVRocmVlKHRocmVlKSB7XHJcbiAgICBjb25zdCBpID0gdGhpcy50aHJlZXMuaW5kZXhPZih0aHJlZSk7XHJcbiAgICBpZih+aSkge1xyXG4gICAgICB0aGlzLnRocmVlcy5zcGxpY2UoaSwgMSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBnZXRPYmplY3QoZSkge1xyXG4gICAgdGhpcy5zZXRDb29yZHNGcm9tRXZlbnQoZSk7XHJcbiAgICB0aGlzLnJheWNhc3Rlci5zZXRGcm9tQ2FtZXJhKHRoaXMuY29vcmRzLCB0aGlzLmNhbWVyYSk7XHJcbiAgICBjb25zdCBpbnRlcnNlY3RzID0gdGhpcy5yYXljYXN0ZXIuaW50ZXJzZWN0T2JqZWN0cyh0aGlzLnRocmVlcyk7XHJcbiAgICByZXR1cm4gaW50ZXJzZWN0c1swXTtcclxuICB9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL1RocmVlRXZlbnRDb252ZXJ0ZXIuanMiLCJpbXBvcnQgQmFzZU1hdGhVdGlscyBmcm9tICcuL0Jhc2VNYXRoVXRpbHMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGhyZWVVdGlscyB7XHJcblxyXG4gIHN0YXRpYyB2ZXJ0aWNlczJVVnModmVydGljZXMsIGluZGVjZXMsIGZpcnN0LCBsYXN0LCBjb252ZXJDbGIpIHtcclxuICAgIGNvbnN0IHIgPSBbXTtcclxuICAgIGZvcihsZXQgaSA9IGZpcnN0OyBpPGxhc3Q7ICsraSkge1xyXG4gICAgICBjb25zdCB2aXMgPSBbaW5kZWNlc1tpXS5hLGluZGVjZXNbaV0uYixpbmRlY2VzW2ldLmNdO1xyXG4gICAgICBmb3IobGV0IGogPSAwOyBqPHZpcy5sZW5ndGg7ICsraikge1xyXG4gICAgICAgIGlmKCFyW3Zpc1tqXV0pIHtcclxuICAgICAgICAgIHJbdmlzW2pdXSA9IGNvbnZlckNsYih2ZXJ0aWNlc1t2aXNbal1dKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiByO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGNvbXB1dGVGYWNlVmVydGV4VXZzKGdlb21ldHJ5LCBmYWNlcykge1xyXG4gICAgY29uc3QgdXZzID0gW1xyXG4gICAgICAgICAgICAgICAgVGhyZWVVdGlscy52ZXJ0aWNlczJVVnMoZ2VvbWV0cnkudmVydGljZXMsIGdlb21ldHJ5LmZhY2VzLCAwLCBmYWNlc1swXSwgKHApPT5uZXcgVEhSRUUuVmVjdG9yMihwLngsIDEtcC56KSksXHJcbiAgICAgICAgICAgICAgICBUaHJlZVV0aWxzLnZlcnRpY2VzMlVWcyhnZW9tZXRyeS52ZXJ0aWNlcywgZ2VvbWV0cnkuZmFjZXMsIGZhY2VzWzBdLCBmYWNlc1sxXSwgKHApPT5uZXcgVEhSRUUuVmVjdG9yMigxLXAueCwgMS1wLnopKSxcclxuICAgICAgICAgICAgICAgIFRocmVlVXRpbHMudmVydGljZXMyVVZzKGdlb21ldHJ5LnZlcnRpY2VzLCBnZW9tZXRyeS5mYWNlcywgZmFjZXNbMV0sIGZhY2VzWzJdLCAocCk9Pm5ldyBUSFJFRS5WZWN0b3IyKHAueCwgcC55KSksXHJcbiAgICAgICAgICAgICAgICBUaHJlZVV0aWxzLnZlcnRpY2VzMlVWcyhnZW9tZXRyeS52ZXJ0aWNlcywgZ2VvbWV0cnkuZmFjZXMsIGZhY2VzWzJdLCBmYWNlc1szXSwgKHApPT5uZXcgVEhSRUUuVmVjdG9yMigxLXAueCwgcC55KSksXHJcbiAgICAgICAgICAgICAgICBUaHJlZVV0aWxzLnZlcnRpY2VzMlVWcyhnZW9tZXRyeS52ZXJ0aWNlcywgZ2VvbWV0cnkuZmFjZXMsIGZhY2VzWzNdLCBmYWNlc1s0XSwgKHApPT5uZXcgVEhSRUUuVmVjdG9yMihwLnosIHAueSkpLFxyXG4gICAgICAgICAgICAgICAgVGhyZWVVdGlscy52ZXJ0aWNlczJVVnMoZ2VvbWV0cnkudmVydGljZXMsIGdlb21ldHJ5LmZhY2VzLCBmYWNlc1s0XSwgZ2VvbWV0cnkuZmFjZXMubGVuZ3RoLCAocCk9Pm5ldyBUSFJFRS5WZWN0b3IyKDEtcC56LCBwLnkpKVxyXG4gICAgXTtcclxuXHJcbiAgICBsZXQgdXZzaSA9IDA7XHJcbiAgICBmb3IobGV0IGkgPSAwOyBpPGdlb21ldHJ5LmZhY2VzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgIHV2c2kgKz0gZmFjZXNbdXZzaV0gPT09IGk7XHJcbiAgICAgIGNvbnN0IGYgPSBnZW9tZXRyeS5mYWNlc1tpXTtcclxuICAgICAgZi5tYXRlcmlhbEluZGV4ID0gdXZzaTtcclxuICAgICAgZ2VvbWV0cnkuZmFjZVZlcnRleFV2c1swXVtpXSA9IFt1dnNbdXZzaV1bZi5hXSwgdXZzW3V2c2ldW2YuYl0sIHV2c1t1dnNpXVtmLmNdXTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHN0YXRpYyBjcmVhdGVNYXJrZXIocCwgYywgc2l6ZSkge1xyXG4gICAgY29uc3QgbWFya2VyID0gbmV3IFRIUkVFLk1lc2gobmV3IFRIUkVFLlNwaGVyZUdlb21ldHJ5KHNpemUpLCBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwoeyBjb2xvcjogYyB9KSk7XHJcbiAgICBtYXJrZXIucG9zaXRpb24uc2V0KHAueCxwLnkscC56KTtcclxuICAgIHJldHVybiBtYXJrZXI7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZmluZFV2VHJpcyhnZW9tZXRyeSwgcHMsIGZpcnN0LCBsYXN0KSB7XHJcbiAgICBjb25zdCByZXMgPSBbXTtcclxuICAgIGZvcihsZXQgcCBvZiBwcykge1xyXG4gICAgICBsZXQgZm91bmQgPSBmYWxzZTtcclxuICAgICAgZm9yKGxldCBpPWZpcnN0OyBpPGxhc3QgJiYgIWZvdW5kOyArK2kpIHtcclxuICAgICAgICBjb25zdCB0cmkgPSBnZW9tZXRyeS5mYWNlVmVydGV4VXZzWzBdW2ldO1xyXG4gICAgICAgIGlmKEJhc2VNYXRoVXRpbHMuaXNJbnNpZGVDb252UG9seSh0cmksIHApKSB7XHJcbiAgICAgICAgICByZXMucHVzaCh7XHJcbiAgICAgICAgICAgIGNvZWZzOiBCYXNlTWF0aFV0aWxzLmNvbXB1dGVJbnRlcnBDb2Vmcyh0cmksIHApLFxyXG4gICAgICAgICAgICBpXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIGZvdW5kID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgaWYoIWZvdW5kKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignQmFkIHBvaW50Jyk7XHJcbiAgICAgICAgcmVzLnB1c2godW5kZWZpbmVkKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlcztcclxuICB9XHJcblxyXG4gIHN0YXRpYyBmaW5kSW50ZXJuYWxWZXJ0aWNlcyhnZW9tZXRyeSwgcHMsIGZpcnN0LCBsYXN0KSB7XHJcbiAgICBjb25zdCByZXMgPSB7fTtcclxuICAgIGZvcihsZXQgaT1maXJzdDsgaTxsYXN0OyArK2kpIHtcclxuICAgICAgY29uc3QgdHJpID0gZ2VvbWV0cnkuZmFjZVZlcnRleFV2c1swXVtpXSwgZiA9IGdlb21ldHJ5LmZhY2VzW2ldLCB2cyA9IFtmLmEsIGYuYiwgZi5jXTtcclxuICAgICAgZm9yKGxldCBqPTA7IGo8dHJpLmxlbmd0aDsgKytqKSB7XHJcbiAgICAgICAgaWYocmVzW3ZzW2pdXT09PXVuZGVmaW5lZCAmJiBCYXNlTWF0aFV0aWxzLmlzSW5zaWRlUG9seShwcywgdHJpW2pdKSkge1xyXG4gICAgICAgICAgcmVzW3ZzW2pdXSA9IHtcclxuICAgICAgICAgICAgcDogdHJpW2pdLFxyXG4gICAgICAgICAgICBpOiB2c1tqXSxcclxuICAgICAgICAgICAgbjogZi52ZXJ0ZXhOb3JtYWxzW2pdXHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIE9iamVjdC52YWx1ZXMocmVzKTtcclxuICB9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL1RocmVlVXRpbHMuanMiLCJcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGFyZ2V0IHtcclxuXHJcbiAgc3RhdGljIHRlc3Qob2JqZWN0MSwgb2JqZWN0Mikge1xyXG4gICAgcmV0dXJuIG9iamVjdDEudGFyZ2V0PT09b2JqZWN0Mi50YXJnZXQ7XHJcbiAgfVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9jb21tb24vY2xhc3Nlcy90YXJnZXRzL1RhcmdldC5qcyIsImltcG9ydCB7JCwgdHJ9IGZyb20gJy4vanMvbGlicyc7XHJcbmltcG9ydCBEZXRlY3RvciBmcm9tICdEZXRlY3Rvcic7XHJcbmltcG9ydCBWaXN1YWxXb3JsZCBmcm9tICdWaXN1YWxXb3JsZCc7XHJcbmltcG9ydCBQZGZMaW5rc0hhbmRsZXIgZnJvbSAnLi9qcy9jbGFzc2VzL1BkZkxpbmtzSGFuZGxlcic7XHJcbmltcG9ydCBCb29rIGZyb20gJy4vanMvY2xhc3Nlcy9Cb29rJztcclxuaW1wb3J0IEJvb2tWaWV3IGZyb20gJy4vanMvY2xhc3Nlcy9Cb29rVmlldyc7XHJcbmltcG9ydCBCb29rQ29udHJvbGxlciBmcm9tICcuL2pzL2NsYXNzZXMvQm9va0NvbnRyb2xsZXInO1xyXG5pbXBvcnQgUGRmQm9va1Byb3BzQnVpbGRlciBmcm9tICcuL2pzL2NsYXNzZXMvUGRmQm9va1Byb3BzQnVpbGRlcic7XHJcbmltcG9ydCBDbGJCb29rUHJvcHNCdWlsZGVyIGZyb20gJy4vanMvY2xhc3Nlcy9DbGJCb29rUHJvcHNCdWlsZGVyJztcclxuaW1wb3J0IExvYWRpbmdDb250cm9sbGVyIGZyb20gJ0xvYWRpbmdDb250cm9sbGVyJztcclxuaW1wb3J0IFNlYXJjaCBmcm9tICdTZWFyY2gnO1xyXG5pbXBvcnQgQm9va21hcmtzIGZyb20gJ0Jvb2ttYXJrcyc7XHJcbmltcG9ydCBUaHVtYm5haWxzIGZyb20gJ1RodW1ibmFpbHMnO1xyXG5pbXBvcnQgVG9jQ29udHJvbGxlciBmcm9tICcuL2pzL2NsYXNzZXMvVG9jQ29udHJvbGxlcic7XHJcbmltcG9ydCBCb29rUHJpbnRlciBmcm9tICcuL2pzL2NsYXNzZXMvQm9va1ByaW50ZXInO1xyXG5pbXBvcnQgQXV0b05hdmlnYXRvciBmcm9tICcuL2pzL2NsYXNzZXMvQXV0b05hdmlnYXRvcic7XHJcbmltcG9ydCBTb3VuZHNFbnZpcm9tZW50IGZyb20gJy4vanMvY2xhc3Nlcy9Tb3VuZHNFbnZpcm9tZW50JztcclxuaW1wb3J0IEZ1bGxTY3JlZW5YIGZyb20gJ0Z1bGxTY3JlZW5YJztcclxuXHJcbiQuZm4uRmxpcEJvb2sgPSBmdW5jdGlvbihvcHRpb25zKSB7XHJcbiAgY29uc3Qgc2NlbmUgPSB7XHJcbiAgICBkaXNwb3NlKCkge1xyXG4gICAgICBpZih0aGlzLnJlYWR5KSB7XHJcbiAgICAgICAgIXNjZW5lLnBkZkxpbmtzSGFuZGxlciB8fCBzY2VuZS5wZGZMaW5rc0hhbmRsZXIuZGlzcG9zZSgpO1xyXG4gICAgICAgIGRlbGV0ZSBzY2VuZS5wZGZMaW5rc0hhbmRsZXI7XHJcbiAgICAgICAgc2NlbmUuc291bmRzLmRpc3Bvc2UoKTtcclxuICAgICAgICBkZWxldGUgc2NlbmUuc291bmRzO1xyXG4gICAgICAgIHNjZW5lLnRvY0N0cmwuZGlzcG9zZSgpO1xyXG4gICAgICAgIGRlbGV0ZSBzY2VuZS50b2NDdHJsO1xyXG4gICAgICAgIHNjZW5lLnRodW1ibmFpbHMuZGlzcG9zZSgpO1xyXG4gICAgICAgIGRlbGV0ZSBzY2VuZS50aHVtYm5haWxzO1xyXG4gICAgICAgICFzY2VuZS5ib29rbWFya3MgfHwgc2NlbmUuYm9va21hcmtzLmRpc3Bvc2UoKTtcclxuICAgICAgICBkZWxldGUgc2NlbmUuYm9va21hcmtzO1xyXG4gICAgICAgIHNjZW5lLmN0cmwuZGlzcG9zZSgpO1xyXG4gICAgICAgIGRlbGV0ZSBzY2VuZS5jdHJsO1xyXG4gICAgICAgIHNjZW5lLmJvb2tQcmludGVyLmRpc3Bvc2UoKTtcclxuICAgICAgICBkZWxldGUgc2NlbmUuYm9va1ByaW50ZXI7XHJcbiAgICAgICAgc2NlbmUuYm9vay5kaXNwb3NlKCk7XHJcbiAgICAgICAgZGVsZXRlIHNjZW5lLmJvb2s7XHJcbiAgICAgICAgc2NlbmUucHJvcHNCdWlsZGVyLmRpc3Bvc2UoKTtcclxuICAgICAgICBkZWxldGUgc2NlbmUucHJvcHNCdWlsZGVyO1xyXG4gICAgICAgIGRlbGV0ZSBzY2VuZS5ib29rQnVpbGRlcjtcclxuICAgICAgICBzY2VuZS52aXN1YWwuZGlzcG9zZSgpO1xyXG4gICAgICAgIGRlbGV0ZSBzY2VuZS52aXN1YWw7XHJcbiAgICAgICAgc2NlbmUudmlldy5kaXNwb3NlKCk7XHJcbiAgICAgICAgZGVsZXRlIHNjZW5lLnZpZXc7XHJcbiAgICAgICAgZGVsZXRlIHNjZW5lLmRpc3Bvc2U7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgdGhpcy5wZW5kaW5nRGlzcG9zZSA9IHRydWU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9O1xyXG4gIG9wdGlvbnMgPSB7Li4ub3B0aW9uc307XHJcbiAgY29uc3QgcGFyZW50Q29udGFpbmVyID0gdGhpcy5sZW5ndGg/IHRoaXNbMF06ICQoJzxkaXY+JykuYXBwZW5kVG8oJ2JvZHknKTtcclxuICBpZihvcHRpb25zLmFjdGl2YXRlRnVsbFNjcmVlbikge1xyXG4gICAgRnVsbFNjcmVlblgucmVxdWVzdChwYXJlbnRDb250YWluZXIpO1xyXG4gIH1cclxuICBzY2VuZS52aWV3ID0gbmV3IEJvb2tWaWV3KHBhcmVudENvbnRhaW5lciwgKCk9PiB7XHJcbiAgICBpZighRGV0ZWN0b3Iud2ViZ2wpIHtcclxuICAgICAgRGV0ZWN0b3IuYWRkR2V0V2ViR0xNZXNzYWdlKHtwYXJlbnQ6IHNjZW5lLnZpZXcuZ2V0VmlldygpfSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgc2NlbmUubG9hZGluZ0N0cmwgPSBuZXcgTG9hZGluZ0NvbnRyb2xsZXIoc2NlbmUudmlldywgdHJ1ZSwgKHByb2dyZXNzKT0+IHByb2dyZXNzPT09MD8gdHIoJ1BsZWFzZSB3YWl0Li4uIHRoZSBBcHBsaWNhdGlvbiBpcyBMb2FkaW5nJyk6IHRyKCdQREYgaXMgTG9hZGluZzonKSsnICcrcHJvZ3Jlc3MrJyUnKTtcclxuICAgICAgc2NlbmUudmlzdWFsID0gbmV3IFZpc3VhbFdvcmxkKHNjZW5lLnZpZXcuZ2V0Q29udGFpbmVyKCkub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldywgc2NlbmUudmlldy5nZXRDb250YWluZXIoKS5vd25lckRvY3VtZW50LCBzY2VuZS52aWV3LmdldFZpZXcoKSk7XHJcbiAgICAgIHNjZW5lLmJvb2tCdWlsZGVyID0gKHByb3BzLCBzaGVldHMsIHBhZ2VDYWxsYmFjayk9PiB7XHJcbiAgICAgICAgcHJvcHMuY3NzTGF5ZXJQcm9wcyA9IHtcclxuICAgICAgICAgIC4uLnByb3BzLmNzc0xheWVyUHJvcHMsXHJcbiAgICAgICAgICBzY2VuZVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgaWYob3B0aW9ucy5wcm9wZXJ0aWVzQ2FsbGJhY2spIHtcclxuICAgICAgICAgIHByb3BzID0gb3B0aW9ucy5wcm9wZXJ0aWVzQ2FsbGJhY2socHJvcHMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzY2VuZS5ib29rID0gbmV3IEJvb2soc2NlbmUudmlzdWFsLCBzaGVldHMsIHBhZ2VDYWxsYmFjaywgcHJvcHMpO1xyXG4gICAgICAgIHNjZW5lLmJvb2tQcmludGVyID0gbmV3IEJvb2tQcmludGVyKHNjZW5lLnZpc3VhbCwgc2NlbmUuYm9vaywgKG9wdGlvbnMudGVtcGxhdGUgfHwge30pLnByaW50U3R5bGUpO1xyXG4gICAgICAgIHNjZW5lLmxvYWRpbmdDdHJsLmRpc3Bvc2UoKTtcclxuICAgICAgICBkZWxldGUgc2NlbmUubG9hZGluZ0N0cmw7XHJcbiAgICAgICAgc2NlbmUuY3RybCA9IG5ldyBCb29rQ29udHJvbGxlcihzY2VuZS5ib29rLCBzY2VuZS52aWV3LCBvcHRpb25zLmNvbnRyb2xzUHJvcHMpO1xyXG4gICAgICAgIHNjZW5lLmJvb2suc2V0SW5qZWN0b3IoKHcpPT4ge1xyXG4gICAgICAgICAgdy5qUXVlcnkgPSB3LiQgPSAkO1xyXG4gICAgICAgICAgdy5ib29rID0gc2NlbmUuYm9vaztcclxuICAgICAgICAgIHcuYm9va0N0cmwgPSBzY2VuZS5jdHJsO1xyXG4gICAgICAgICAgaWYocHJvcHMuaW5qZWN0b3IpIHtcclxuICAgICAgICAgICAgcHJvcHMuaW5qZWN0b3Iodyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgc2NlbmUudmlldy5hZGRIYW5kbGVyKHNjZW5lLmN0cmwpO1xyXG4gICAgICAgIHNjZW5lLmN0cmwuc2V0UHJpbnRlcihzY2VuZS5ib29rUHJpbnRlcik7XHJcbiAgICAgICAgY29uc3QgdGVzdCA9IHBhZ2VDYWxsYmFjaygwKTtcclxuXHJcbiAgICAgICAgc2NlbmUuc2VhcmNoID0gbmV3IFNlYXJjaChzY2VuZS52aWV3LmdldFNlYXJjaFZpZXcoKSwgc2NlbmUuYm9vay5nZXRQYWdlcygpKTtcclxuICAgICAgICBzY2VuZS5zZWFyY2gub25RdWVyeSA9IHNjZW5lLmJvb2suc2V0UXVlcnkuYmluZChzY2VuZS5ib29rKTtcclxuICAgICAgICBzY2VuZS5ib29rLmFkZEV2ZW50TGlzdGVuZXIoJ3NlYXJjaFJlc3VsdHMnLCAoZSk9PiB7XHJcbiAgICAgICAgICBzY2VuZS5zZWFyY2guc2V0UmVzdWx0cyhlLnJlc3VsdHMsIGUubGFzdFBhZ2UpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBzY2VuZS50aHVtYm5haWxzID0gbmV3IFRodW1ibmFpbHMoc2NlbmUudmlzdWFsLCBzY2VuZS52aWV3LmdldFRodW1ibmFpbHNWaWV3KCksIHBhZ2VDYWxsYmFjaywgMiooc2hlZXRzKzIpLCB7a1d0b0g6IHByb3BzLndpZHRoL3Byb3BzLmhlaWdodH0pO1xyXG4gICAgICAgIHNjZW5lLnRvY0N0cmwgPSBuZXcgVG9jQ29udHJvbGxlcihzY2VuZS52aWV3LCBzY2VuZS5jdHJsKTtcclxuICAgICAgICBzY2VuZS50b2NDdHJsLnNldFRodW1ibmFpbHMoc2NlbmUudGh1bWJuYWlscyk7XHJcbiAgICAgICAgc2NlbmUudG9jQ3RybC5zZXRTZWFyY2goc2NlbmUuc2VhcmNoKTtcclxuICAgICAgICBzY2VuZS5jdHJsLnNldFRvY0N0cmwoc2NlbmUudG9jQ3RybCk7XHJcbiAgICAgICAgc2NlbmUudmlldy5hZGRIYW5kbGVyKHNjZW5lLnRvY0N0cmwpO1xyXG5cclxuICAgICAgICBpZih0ZXN0LnR5cGU9PT0ncGRmJykge1xyXG4gICAgICAgICAgc2NlbmUucGRmTGlua3NIYW5kbGVyID0gbmV3IFBkZkxpbmtzSGFuZGxlcih0ZXN0LnNyYywgc2NlbmUuY3RybCwgc2NlbmUudmlzdWFsLmVsZW1lbnQpO1xyXG4gICAgICAgICAgc2NlbmUuYm9vay5hZGRFdmVudExpc3RlbmVyKCdwZGZBbm5vdGF0aW9uJywgc2NlbmUucGRmTGlua3NIYW5kbGVyLmhhbmRsZUV2ZW50LmJpbmQoc2NlbmUucGRmTGlua3NIYW5kbGVyKSk7XHJcbiAgICAgICAgICB0ZXN0LnNyYy5nZXRIYW5kbGVyKChoYW5kbGVyKT0+IHtcclxuICAgICAgICAgICAgaGFuZGxlci5nZXRPdXRsaW5lKCkuXHJcbiAgICAgICAgICAgICAgdGhlbigob3V0bGluZSk9PiB7XHJcbiAgICAgICAgICAgICAgICBzY2VuZS5ib29rbWFya3MgPSBuZXcgQm9va21hcmtzKHNjZW5lLnZpZXcuZ2V0Qm9va21hcmtzVmlldygpLCBvdXRsaW5lKTtcclxuICAgICAgICAgICAgICAgIHNjZW5lLnRvY0N0cmwuc2V0Qm9va21hcmtzKHNjZW5lLmJvb2ttYXJrcywgdGVzdC5zcmMpO1xyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgICBpZihvcHRpb25zLnBkZkxpbmtzICYmIG9wdGlvbnMucGRmTGlua3MuaGFuZGxlcikge1xyXG4gICAgICAgICAgICBzY2VuZS5wZGZMaW5rc0hhbmRsZXIuc2V0SGFuZGxlcihvcHRpb25zLnBkZkxpbmtzLmhhbmRsZXIpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2NlbmUuc291bmRzID0gbmV3IFNvdW5kc0Vudmlyb21lbnQob3B0aW9ucy50ZW1wbGF0ZSk7XHJcbiAgICAgICAgc2NlbmUuY3RybC5zZXRTb3VuZHMoc2NlbmUuc291bmRzKTtcclxuICAgICAgICBzY2VuZS5zb3VuZHMuc3Vic2NyaWJlRmxpcHMoc2NlbmUuY3RybCk7XHJcblxyXG4gICAgICAgIHNjZW5lLnJlYWR5ID0gdHJ1ZTtcclxuICAgICAgICBuZXcgQXV0b05hdmlnYXRvcihzY2VuZS52aXN1YWwsIHNjZW5lLmN0cmwsIG9wdGlvbnMuYXV0b05hdmlnYXRpb24pLmRpc3Bvc2UoKTtcclxuICAgICAgICBpZihvcHRpb25zLnJlYWR5KSB7XHJcbiAgICAgICAgICBvcHRpb25zLnJlYWR5KHNjZW5lKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYoc2NlbmUucGVuZGluZ0Rpc3Bvc2UpIHtcclxuICAgICAgICAgIHNjZW5lLmRpc3Bvc2UoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcbiAgICAgIGlmKG9wdGlvbnMucGRmKSB7XHJcbiAgICAgICAgc2NlbmUucHJvcHNCdWlsZGVyID0gbmV3IFBkZkJvb2tQcm9wc0J1aWxkZXIob3B0aW9ucy5wZGYsIHNjZW5lLmJvb2tCdWlsZGVyLCBvcHRpb25zLmJvb2tTdHlsZSk7XHJcbiAgICAgICAgc2NlbmUucHJvcHNCdWlsZGVyLnBkZi5zZXRMb2FkaW5nUHJvZ3Jlc3NDbGIoc2NlbmUubG9hZGluZ0N0cmwuc2V0UHJvZ3Jlc3MuYmluZChzY2VuZS5sb2FkaW5nQ3RybCkpO1xyXG4gICAgICAgIGlmKG9wdGlvbnMuZXJyb3IpIHtcclxuICAgICAgICAgIHNjZW5lLnByb3BzQnVpbGRlci5wZGYuc2V0RXJyb3JIYW5kbGVyKG9wdGlvbnMuZXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBlbHNlIGlmKG9wdGlvbnMucGFnZUNhbGxiYWNrKSB7XHJcbiAgICAgICAgc2NlbmUucHJvcHNCdWlsZGVyID0gbmV3IENsYkJvb2tQcm9wc0J1aWxkZXIoc2NlbmUudmlzdWFsLCBvcHRpb25zLnBhZ2VDYWxsYmFjaywgb3B0aW9ucy5wYWdlcywgc2NlbmUuYm9va0J1aWxkZXIsIG9wdGlvbnMuYm9va1N0eWxlKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICBzY2VuZS5wcm9wc0J1aWxkZXIgPSBuZXcgQ2xiQm9va1Byb3BzQnVpbGRlcihzY2VuZS52aXN1YWwsIEJvb2sucGFnZUNhbGxiYWNrLCA2LCBzY2VuZS5ib29rQnVpbGRlciwgb3B0aW9ucy5ib29rU3R5bGUpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSwgb3B0aW9ucy50ZW1wbGF0ZSk7XHJcbiAgcmV0dXJuIHNjZW5lO1xyXG59XHJcblxyXG4kKCgpPT4ge1xyXG4gIGxldCBjb250YWluZXJzID0gJCgnLmZsaXAtYm9vay1jb250YWluZXInKTtcclxuICBmb3IobGV0IGkgPSAwOyBpPGNvbnRhaW5lcnMubGVuZ3RoOyArK2kpIHtcclxuICAgIGNvbnN0IGpDb250YWluZXIgPSAkKGNvbnRhaW5lcnNbaV0pLCBzcmMgPSBqQ29udGFpbmVyLmF0dHIoJ3NyYycpO1xyXG4gICAgaWYoISFzcmMpIHtcclxuICAgICAgakNvbnRhaW5lci5GbGlwQm9vayh7cGRmOiBzcmN9KTtcclxuICAgIH1cclxuICB9XHJcbn0pO1xyXG5cclxud2luZG93LmpRdWVyeSA9IHdpbmRvdy4kID0gJDtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vaW5kZXguanMiLCJpZiAoIUFycmF5LnByb3RvdHlwZS5maWxsKSB7XHJcbiAgQXJyYXkucHJvdG90eXBlLmZpbGwgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG5cclxuICAgIC8vINCo0LDQs9C4IDEtMi5cclxuICAgIGlmICh0aGlzID09IG51bGwpIHtcclxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndGhpcyBpcyBudWxsIG9yIG5vdCBkZWZpbmVkJyk7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIE8gPSBPYmplY3QodGhpcyk7XHJcblxyXG4gICAgLy8g0KjQsNCz0LggMy01LlxyXG4gICAgdmFyIGxlbiA9IE8ubGVuZ3RoID4+PiAwO1xyXG5cclxuICAgIC8vINCo0LDQs9C4IDYtNy5cclxuICAgIHZhciBzdGFydCA9IGFyZ3VtZW50c1sxXTtcclxuICAgIHZhciByZWxhdGl2ZVN0YXJ0ID0gc3RhcnQgPj4gMDtcclxuXHJcbiAgICAvLyDQqNCw0LMgOC5cclxuICAgIHZhciBrID0gcmVsYXRpdmVTdGFydCA8IDAgP1xyXG4gICAgICBNYXRoLm1heChsZW4gKyByZWxhdGl2ZVN0YXJ0LCAwKSA6XHJcbiAgICAgIE1hdGgubWluKHJlbGF0aXZlU3RhcnQsIGxlbik7XHJcblxyXG4gICAgLy8g0KjQsNCz0LggOS0xMC5cclxuICAgIHZhciBlbmQgPSBhcmd1bWVudHNbMl07XHJcbiAgICB2YXIgcmVsYXRpdmVFbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/XHJcbiAgICAgIGxlbiA6IGVuZCA+PiAwO1xyXG5cclxuICAgIC8vINCo0LDQsyAxMS5cclxuICAgIHZhciBmaW5hbCA9IHJlbGF0aXZlRW5kIDwgMCA/XHJcbiAgICAgIE1hdGgubWF4KGxlbiArIHJlbGF0aXZlRW5kLCAwKSA6XHJcbiAgICAgIE1hdGgubWluKHJlbGF0aXZlRW5kLCBsZW4pO1xyXG5cclxuICAgIC8vINCo0LDQsyAxMi5cclxuICAgIHdoaWxlIChrIDwgZmluYWwpIHtcclxuICAgICAgT1trXSA9IHZhbHVlO1xyXG4gICAgICBrKys7XHJcbiAgICB9XHJcblxyXG4gICAgLy8g0KjQsNCzIDEzLlxyXG4gICAgcmV0dXJuIE87XHJcbiAgfTtcclxufVxyXG5cclxuaWYgKCFBcnJheS5wcm90b3R5cGUuZmluZCkge1xyXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBcnJheS5wcm90b3R5cGUsICdmaW5kJywge1xyXG4gICAgdmFsdWU6IGZ1bmN0aW9uKHByZWRpY2F0ZSkge1xyXG4gICAgICd1c2Ugc3RyaWN0JztcclxuICAgICBpZiAodGhpcyA9PSBudWxsKSB7XHJcbiAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcnJheS5wcm90b3R5cGUuZmluZCBjYWxsZWQgb24gbnVsbCBvciB1bmRlZmluZWQnKTtcclxuICAgICB9XHJcbiAgICAgaWYgKHR5cGVvZiBwcmVkaWNhdGUgIT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ByZWRpY2F0ZSBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcclxuICAgICB9XHJcbiAgICAgdmFyIGxpc3QgPSBPYmplY3QodGhpcyk7XHJcbiAgICAgdmFyIGxlbmd0aCA9IGxpc3QubGVuZ3RoID4+PiAwO1xyXG4gICAgIHZhciB0aGlzQXJnID0gYXJndW1lbnRzWzFdO1xyXG4gICAgIHZhciB2YWx1ZTtcclxuXHJcbiAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xyXG4gICAgICAgdmFsdWUgPSBsaXN0W2ldO1xyXG4gICAgICAgaWYgKHByZWRpY2F0ZS5jYWxsKHRoaXNBcmcsIHZhbHVlLCBpLCBsaXN0KSkge1xyXG4gICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICB9XHJcbiAgICAgfVxyXG4gICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICB9XHJcbiAgfSk7XHJcbn1cclxuXHJcbmlmICghQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleCkge1xyXG4gIEFycmF5LnByb3RvdHlwZS5maW5kSW5kZXggPSBmdW5jdGlvbihwcmVkaWNhdGUpIHtcclxuICAgIGlmICh0aGlzID09IG51bGwpIHtcclxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleCBjYWxsZWQgb24gbnVsbCBvciB1bmRlZmluZWQnKTtcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2YgcHJlZGljYXRlICE9PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ByZWRpY2F0ZSBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcclxuICAgIH1cclxuICAgIHZhciBsaXN0ID0gT2JqZWN0KHRoaXMpO1xyXG4gICAgdmFyIGxlbmd0aCA9IGxpc3QubGVuZ3RoID4+PiAwO1xyXG4gICAgdmFyIHRoaXNBcmcgPSBhcmd1bWVudHNbMV07XHJcbiAgICB2YXIgdmFsdWU7XHJcblxyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xyXG4gICAgICB2YWx1ZSA9IGxpc3RbaV07XHJcbiAgICAgIGlmIChwcmVkaWNhdGUuY2FsbCh0aGlzQXJnLCB2YWx1ZSwgaSwgbGlzdCkpIHtcclxuICAgICAgICByZXR1cm4gaTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIC0xO1xyXG4gIH07XHJcbn1cclxuXHJcbmlmICghT2JqZWN0LnZhbHVlcykge1xyXG5cdE9iamVjdC52YWx1ZXMgPSBmdW5jdGlvbiB2YWx1ZXMoTykge1xyXG5cdFx0cmV0dXJuIE9iamVjdC5rZXlzKE8pLm1hcCgobmFtZSk9Pk9bbmFtZV0pIHx8IFtdO1xyXG5cdH07XHJcbn1cclxuXHJcbmlmKCFSZWdFeHAuZXNjYXBlKSB7XHJcbiAgUmVnRXhwLmVzY2FwZSA9IGZ1bmN0aW9uKHMpIHtcclxuICAgIHJldHVybiBzLnJlcGxhY2UoL1stXFwvXFxcXF4kKis/LigpfFtcXF17fV0vZywgJ1xcXFwkJicpO1xyXG4gIH07XHJcbn1cclxuXHJcbmlmKCFTdHJpbmcucHJvdG90eXBlLnJlcGxhY2VBbGwpIHtcclxuICBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2VBbGwgPSBmdW5jdGlvbihzZWFyY2gsIHJlcGxhY2UpIHtcclxuICAgIHJldHVybiB0aGlzLnJlcGxhY2UobmV3IFJlZ0V4cChSZWdFeHAuZXNjYXBlKHNlYXJjaCksICdnJyksIHJlcGxhY2UpO1xyXG4gIH07XHJcbn1cclxuXHJcbmlmKCFTdHJpbmcucHJvdG90eXBlLmZiM2RRRmlsdGVyKSB7XHJcbiAgU3RyaW5nLnByb3RvdHlwZS5mYjNkUUZpbHRlciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIHRoaXMucmVwbGFjZSgvKFxcbnxcXHR8ICApL2csICcnKTtcclxuICB9O1xyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9wb2x5ZmlsbC5qcyIsIlxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBdXRvTmF2aWdhdG9yIHtcclxuXHJcbiAgY29uc3RydWN0b3IoY29udGV4dCwgYm9va0N0cmwsIHByb3BzPXt9KSB7XHJcbiAgICBwcm9wcyA9IHtcclxuICAgICAgLi4ucHJvcHMsXHJcbiAgICAgIHVybFBhcmFtOiBwcm9wcy51cmxQYXJhbSB8fCAnZmIzZC1wYWdlJyxcclxuICAgICAgbmF2aWdhdGVzOiBwcm9wcy5uYXZpZ2F0ZXM9PT11bmRlZmluZWQ/IDE6IHByb3BzLm5hdmlnYXRlcyxcclxuICAgICAgcGFnZU46IHByb3BzLnBhZ2VOIHx8IDBcclxuICAgIH07XHJcbiAgICB0aGlzLnByb3BzID0gcHJvcHM7XHJcbiAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xyXG4gICAgdGhpcy5ib29rQ3RybCA9IGJvb2tDdHJsO1xyXG4gICAgdGhpcy51cmxQYXJhbSA9IHByb3BzLnVybFBhcmFtO1xyXG4gICAgdGhpcy5wYWdlTiA9IHByb3BzLnBhZ2VOO1xyXG4gICAgdGhpcy53bmQgPSBjb250ZXh0LnduZDtcclxuXHJcbiAgICB0aGlzLnduZC5mYjNkID0ge1xyXG4gICAgICAuLi50aGlzLnduZC5mYjNkXHJcbiAgICB9O1xyXG4gICAgdGhpcy53bmQuZmIzZC5uYXZpZ2F0b3IgPSB7XHJcbiAgICAgIC4uLnRoaXMud25kLmZiM2QubmF2aWdhdG9yXHJcbiAgICB9O1xyXG4gICAgdGhpcy5uYXZpZ2F0b3IgPSB0aGlzLnduZC5mYjNkLm5hdmlnYXRvclt0aGlzLnVybFBhcmFtXSA9IHtcclxuICAgICAgLi4udGhpcy53bmQuZmIzZC5uYXZpZ2F0b3JbdGhpcy51cmxQYXJhbV1cclxuICAgIH07XHJcbiAgICB0aGlzLm5hdmlnYXRvci5pbnN0YW5jZXMgPSAodGhpcy5uYXZpZ2F0b3IuaW5zdGFuY2VzIHx8IDApKzE7XHJcblxyXG4gICAgaWYodGhpcy5uYXZpZ2F0b3IuaW5zdGFuY2VzPD10aGlzLnByb3BzLm5hdmlnYXRlcykge1xyXG4gICAgICB0aGlzLmJvb2tDdHJsLmdvVG9QYWdlKHRoaXMuZ2V0UGFnZU51bWJlcigpKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoKSB7XHJcblxyXG4gIH1cclxuXHJcbiAgZ2V0UGFyYW1ldGVyQnlOYW1lKG5hbWUsIHVybCkge1xyXG4gICAgaWYgKCF1cmwpIHtcclxuICAgICAgdXJsID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XHJcbiAgICB9XHJcbiAgICBuYW1lID0gbmFtZS5yZXBsYWNlKC9bXFxbXFxdXS9nLCAnXFxcXCQmJyk7XHJcbiAgICBjb25zdCByZWdleCA9IG5ldyBSZWdFeHAoJ1s/Jl0nICsgbmFtZSArICcoPShbXl0qKXwmfCN8JCknKSxcclxuICAgIHJlc3VsdHMgPSByZWdleC5leGVjKHVybCk7XHJcbiAgICBpZiAoIXJlc3VsdHMpIHJldHVybiBudWxsO1xyXG4gICAgaWYgKCFyZXN1bHRzWzJdKSByZXR1cm4gJyc7XHJcbiAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHJlc3VsdHNbMl0ucmVwbGFjZSgvXFwrL2csICcgJykpO1xyXG4gIH1cclxuXHJcbiAgZ2V0UGFnZU51bWJlcigpIHtcclxuICAgIGxldCBudW1iZXIgPSBwYXJzZUludCh0aGlzLnBhZ2VOKTtcclxuICAgIGlmKGlzTmFOKG51bWJlcil8fG51bWJlcj09PTApIHtcclxuICAgICAgbnVtYmVyID0gdGhpcy5nZXRQYXJhbWV0ZXJCeU5hbWUodGhpcy51cmxQYXJhbSk7XHJcbiAgICAgIG51bWJlciA9IHBhcnNlSW50KG51bWJlcik7XHJcbiAgICAgIGlmKGlzTmFOKG51bWJlcikpIHtcclxuICAgICAgICBudW1iZXIgPSAxO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVtYmVyLTE7XHJcbiAgfVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9qcy9jbGFzc2VzL0F1dG9OYXZpZ2F0b3IuanMiLCJpbXBvcnQge1RIUkVFfSBmcm9tICcuLi9saWJzJztcclxuaW1wb3J0IE1hdGhVdGlscyBmcm9tICdNYXRoVXRpbHMnXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCaW5kZXIge1xyXG5cclxuICBjb25zdHJ1Y3Rvcih2aXN1YWwsIHApIHtcclxuICAgIHRoaXMudmlzdWFsID0gdmlzdWFsO1xyXG4gICAgdGhpcy5wID0ge1xyXG4gICAgICAuLi5wLFxyXG4gICAgICBiYWNrU2l6ZTogMipwLmNvdmVyLmRlcHRoK3Auc2hlZXRzKnAucGFnZS5kZXB0aFxyXG4gICAgfTtcclxuICAgIHRoaXMuT1ogPSBuZXcgVEhSRUUuVmVjdG9yMygwLDAsMSk7XHJcblxyXG4gICAgdGhpcy5iYWNrRyA9IG5ldyBUSFJFRS5Cb3hHZW9tZXRyeShwLmNvdmVyLmRlcHRoLCB0aGlzLnAuYmFja1NpemUsIHAuY292ZXIuaGVpZ2h0KTtcclxuXHJcbiAgICBjb25zdCBjb2xvciA9IHRoaXMucC5jb3Zlci5zaWRlPT09J2NvbG9yJz8ge2NvbG9yOiBwLmNvdmVyLmNvbG9yfToge1xyXG4gICAgICBjb2xvcjogcC5jb3Zlci5jb2xvcixcclxuICAgICAgb3BhY2l0eTogMCxcclxuICAgICAgdHJhbnNwYXJlbnQ6IHRydWVcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5tYXRlcmlhbHMgPSBbXHJcbiAgICAgICAgICAgICAgICAgICAgICBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwoY29sb3IpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgbmV3IFRIUkVFLk1lc2hQaG9uZ01hdGVyaWFsKGNvbG9yKSxcclxuICAgICAgICAgICAgICAgICAgICAgIG5ldyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbChjb2xvciksXHJcbiAgICAgICAgICAgICAgICAgICAgICBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwoY29sb3IpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgbmV3IFRIUkVFLk1lc2hQaG9uZ01hdGVyaWFsKGNvbG9yKSxcclxuICAgICAgICAgICAgICAgICAgICAgIG5ldyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbChjb2xvcilcclxuICAgICAgICAgICAgICAgICAgICAgXTtcclxuXHJcbiAgICBjb25zdCBiYWNrTSA9IG5ldyBUSFJFRS5NZXNoKHRoaXMuYmFja0csIHRoaXMubWF0ZXJpYWxzKTtcclxuXHJcbiAgICBpZihwLmNvdmVyLmJpbmRlclRleHR1cmUhPT0nJykge1xyXG4gICAgICB0aGlzLnZpc3VhbC50ZXh0dXJlTG9hZGVyLmxvYWQocC5jb3Zlci5iaW5kZXJUZXh0dXJlLCAodGV4dHVyZSk9PiB7XHJcbiAgICAgICAgdGhpcy5tYXRlcmlhbHNbMV0uY29sb3Iuc2V0SGV4KDB4RkZGRkZGKTtcclxuICAgICAgICB0aGlzLm1hdGVyaWFsc1sxXS5tYXAgPSB0ZXh0dXJlO1xyXG4gICAgICAgIHRleHR1cmUubWluRmlsdGVyID0gVEhSRUUuTGluZWFyRmlsdGVyO1xyXG4gICAgICAgIHRleHR1cmUubmVlZHNVcGRhdGUgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMubWF0ZXJpYWxzWzFdLm5lZWRzVXBkYXRlID0gdHJ1ZTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy50aHJlZSA9IG5ldyBUSFJFRS5PYmplY3QzRCgpO1xyXG4gICAgdGhpcy5iYWNrID0gbmV3IFRIUkVFLk9iamVjdDNEKCk7XHJcbiAgICB0aGlzLmJhY2tSVCA9IG5ldyBUSFJFRS5PYmplY3QzRCgpO1xyXG4gICAgdGhpcy5iYWNrUlIgPSBuZXcgVEhSRUUuT2JqZWN0M0QoKTtcclxuICAgIHRoaXMuYmFja0xUID0gbmV3IFRIUkVFLk9iamVjdDNEKCk7XHJcbiAgICB0aGlzLmJhY2tMUiA9IG5ldyBUSFJFRS5PYmplY3QzRCgpO1xyXG4gICAgdGhpcy5sZWZ0UGl2b3QgPSBuZXcgVEhSRUUuT2JqZWN0M0QoKTtcclxuICAgIHRoaXMucmlnaHRQaXZvdCA9IG5ldyBUSFJFRS5PYmplY3QzRCgpO1xyXG5cclxuICAgIHRoaXMuYmFjay5hZGQoYmFja00pO1xyXG4gICAgdGhpcy5iYWNrLmFkZCh0aGlzLmxlZnRQaXZvdCk7XHJcbiAgICB0aGlzLmJhY2suYWRkKHRoaXMucmlnaHRQaXZvdCk7XHJcbiAgICB0aGlzLmJhY2tSVC5hZGQodGhpcy5iYWNrKTtcclxuICAgIHRoaXMuYmFja1JSLmFkZCh0aGlzLmJhY2tSVCk7XHJcbiAgICB0aGlzLmJhY2tMVC5hZGQodGhpcy5iYWNrUlIpO1xyXG4gICAgdGhpcy5iYWNrTFIuYWRkKHRoaXMuYmFja0xUKTtcclxuICAgIHRoaXMudGhyZWUuYWRkKHRoaXMuYmFja0xSKTtcclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICBmb3IobGV0IG0gb2YgdGhpcy5tYXRlcmlhbHMpIHtcclxuICAgICAgaWYobS5tYXApIHtcclxuICAgICAgICBtLm1hcCA9IG51bGw7XHJcbiAgICAgICAgbS5uZWVkc1VwZGF0ZSA9IHRydWU7XHJcbiAgICAgIH1cclxuICAgICAgbS5kaXNwb3NlKCk7XHJcbiAgICB9XHJcbiAgICBkZWxldGUgdGhpcy5tYXRlcmlhbHM7XHJcbiAgICB0aGlzLmJhY2tHLmRpc3Bvc2UoKTtcclxuICB9XHJcblxyXG4gIHNldChhbmdsZSkge1xyXG4gICAgbGV0IHJpZ2h0LCBsZWZ0O1xyXG4gICAgaWYoYW5nbGU+TWF0aC5QSS8yKSB7XHJcbiAgICAgIHJpZ2h0ID0gTWF0aC5QSS8yO1xyXG4gICAgICBsZWZ0ID0gYW5nbGUtTWF0aC5QSS8yO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHJpZ2h0ID0gYW5nbGU7XHJcbiAgICAgIGxlZnQgPSAwO1xyXG4gICAgfVxyXG4gICAgY29uc3QgcCA9IHRoaXMucCx0cjE9e3g6LTAuNSpwLmNvdmVyLmRlcHRoLHk6MC41KnAuYmFja1NpemUtcC5jb3Zlci5kZXB0aH07XHJcbiAgICB0aGlzLmJhY2tSVC5wb3NpdGlvbi5zZXQodHIxLngsdHIxLnksMCk7XHJcbiAgICB0aGlzLmJhY2tSUi5wb3NpdGlvbi5zZXQoLXRyMS54LC10cjEueSwwKTtcclxuICAgIHRoaXMuYmFja1JSLnF1YXRlcm5pb24uc2V0RnJvbUF4aXNBbmdsZSh0aGlzLk9aLCByaWdodCk7XHJcblxyXG4gICAgY29uc3QgdHIyPXt4OnAuYmFja1NpemUtMipwLmNvdmVyLmRlcHRoLTAuNSpwLmNvdmVyLmRlcHRoLHk6MC41KnAuYmFja1NpemUtcC5jb3Zlci5kZXB0aH07XHJcbiAgICB0aGlzLmJhY2tMVC5wb3NpdGlvbi5zZXQodHIyLngsdHIyLnksMCk7XHJcbiAgICB0aGlzLmJhY2tMUi5wb3NpdGlvbi5zZXQoLXRyMi54LC10cjIueSwwKTtcclxuICAgIHRoaXMuYmFja0xSLnF1YXRlcm5pb24uc2V0RnJvbUF4aXNBbmdsZSh0aGlzLk9aLCBsZWZ0KTtcclxuICB9XHJcblxyXG4gIHNldExlZnQoYW5nbGUpIHtcclxuICAgIGNvbnN0IFBJID0gTWF0aC5QSTtcclxuICAgIHRoaXMubGVmdFBpdm90LnBvc2l0aW9uLnNldChNYXRoVXRpbHMuaW50ZXJwb2xhdGVMaW5lYXIoWy1QSSwtUEkvMl0sWzAsdGhpcy5wLmNvdmVyLmRlcHRoXSxhbmdsZSksMC41KnRoaXMucC5iYWNrU2l6ZS0wLjUqdGhpcy5wLmNvdmVyLmRlcHRoLDApO1xyXG4gICAgdGhpcy5sZWZ0UGl2b3QucXVhdGVybmlvbi5zZXRGcm9tQXhpc0FuZ2xlKHRoaXMuT1osIGFuZ2xlKTtcclxuICB9XHJcblxyXG4gIHNldFJpZ2h0KGFuZ2xlKSB7XHJcbiAgICBjb25zdCBQSSA9IE1hdGguUEk7XHJcbiAgICAgIHRoaXMucmlnaHRQaXZvdC5wb3NpdGlvbi5zZXQoTWF0aFV0aWxzLmludGVycG9sYXRlTGluZWFyKFstUEkvMiwwXSxbdGhpcy5wLmNvdmVyLmRlcHRoLDBdLGFuZ2xlKSwtMC41KnRoaXMucC5iYWNrU2l6ZSswLjUqdGhpcy5wLmNvdmVyLmRlcHRoLDApO1xyXG4gICAgICB0aGlzLnJpZ2h0UGl2b3QucXVhdGVybmlvbi5zZXRGcm9tQXhpc0FuZ2xlKHRoaXMuT1osIGFuZ2xlKTtcclxuICB9XHJcblxyXG4gIGpvaW5MZWZ0Q292ZXIoY292ZXIpIHtcclxuICAgIGNvdmVyLnRocmVlLnBvc2l0aW9uLnNldCgwLC0wLjUqdGhpcy5wLmNvdmVyLmRlcHRoLDApO1xyXG4gICAgdGhpcy5sZWZ0UGl2b3QuYWRkKGNvdmVyLnRocmVlKTtcclxuICB9XHJcblxyXG4gIGRpc2Nvbm5lY3RMZWZ0Q292ZXIoY292ZXIpIHtcclxuICAgIHRoaXMubGVmdFBpdm90LnJlbW92ZShjb3Zlci50aHJlZSk7XHJcbiAgfVxyXG5cclxuICBqb2luUmlnaHRDb3Zlcihjb3Zlcikge1xyXG4gICAgY292ZXIudGhyZWUucG9zaXRpb24uc2V0KDAsLTAuNSp0aGlzLnAuY292ZXIuZGVwdGgsMCk7XHJcbiAgICB0aGlzLnJpZ2h0UGl2b3QuYWRkKGNvdmVyLnRocmVlKTtcclxuICB9XHJcblxyXG4gIGRpc2Nvbm5lY3RSaWdodENvdmVyKGNvdmVyKSB7XHJcbiAgICB0aGlzLnJpZ2h0UGl2b3QucmVtb3ZlKGNvdmVyLnRocmVlKTtcclxuICB9XHJcblxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9qcy9jbGFzc2VzL0JpbmRlci5qcyIsImltcG9ydCB7JCwgVEhSRUV9IGZyb20gJy4uL2xpYnMnO1xyXG5pbXBvcnQge3Byb3BzIGFzICBib29rUHJvcHN9IGZyb20gJy4uL3Byb3BzL2Jvb2snO1xyXG5pbXBvcnQgR3JhcGhVdGlscyBmcm9tICdHcmFwaFV0aWxzJztcclxuaW1wb3J0IEJpbmRlciBmcm9tICcuL0JpbmRlcic7XHJcbmltcG9ydCBDb3ZlciBmcm9tICcuL0NvdmVyJztcclxuaW1wb3J0IFNoZWV0QmxvY2sgZnJvbSAnLi9TaGVldEJsb2NrJztcclxuaW1wb3J0IFNoZWV0UGh5c2ljcyBmcm9tICcuL1NoZWV0UGh5c2ljcyc7XHJcbmltcG9ydCBQYWdlTWFuYWdlciBmcm9tICcuL1BhZ2VNYW5hZ2VyJztcclxuaW1wb3J0IENTU0xheWVyIGZyb20gJ0NTU0xheWVyJztcclxuaW1wb3J0IENzc0xheWVyc01hbmFnZXIgZnJvbSAnLi9Dc3NMYXllcnNNYW5hZ2VyJztcclxuaW1wb3J0IFNlYXJjaEVuZ2luZSBmcm9tICcuL1NlYXJjaEVuZ2luZSc7XHJcbmltcG9ydCBDdXN0b21FdmVudENvbnZlcnRlciBmcm9tICdDdXN0b21FdmVudENvbnZlcnRlcic7XHJcbmltcG9ydCBDaXJjbGVUYXJnZXQgZnJvbSAndGFyZ2V0cy9DaXJjbGVUYXJnZXQnO1xyXG5pbXBvcnQgWW91VHViZUFwaSBmcm9tICdZb3VUdWJlQXBpJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJvb2sgZXh0ZW5kcyBUSFJFRS5FdmVudERpc3BhdGNoZXIge1xyXG4gIC8vIHBhZ2VDYWxsYmFjayBzYW1wbGVzXHJcblxyXG4gIC8vIChuKT0+ICh7XHJcbiAgLy8gICB0eXBlOiAnaW1hZ2UnLFxyXG4gIC8vICAgc3JjOiAnc2FtcGxlLnBuZycsXHJcbiAgLy8gICBpbnRlcmFjdGl2ZTogZmFsc2VcclxuICAvLyB9KTtcclxuICAvL1xyXG4gIC8vIChuKT0+ICh7XHJcbiAgLy8gICB0eXBlOiAnaHRtbCcsXHJcbiAgLy8gICBzcmM6ICdzYW1wbGUuaHRtbCcsXHJcbiAgLy8gICBpbnRlcmFjdGl2ZTogdHJ1ZVxyXG4gIC8vIH0pO1xyXG4gIC8vXHJcbiAgLy8gY29uc3QgcGRmID0gbmV3IFBkZignc2FtcGxlLnBkZicpO1xyXG4gIC8vIChuKT0+ICh7XHJcbiAgLy8gICB0eXBlOiAncGRmJyxcclxuICAvLyAgIHNyYzogcGRmLFxyXG4gIC8vICAgaW50ZXJhY3RpdmU6IGZhbHNlXHJcbiAgLy8gfSk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHZpc3VhbCwgc2hlZXRzLCBwYWdlQ2FsbGJhY2ssIHByb3BzKSB7XHJcbiAgICBzdXBlcigpO1xyXG4gICAgdGhpcy52aXN1YWwgPSB2aXN1YWw7XHJcbiAgICB0aGlzLm1vdXNlQ29udHJvbGxlciA9IHRydWU7XHJcbiAgICB0aGlzLnAgPSB7XHJcbiAgICAgIC4uLnRoaXMucHJlcGFyZVByb3BzKHByb3BzKSxcclxuICAgICAgc2hlZXRzLFxyXG4gICAgICBwYWdlQ2FsbGJhY2ssXHJcbiAgICAgIHpvb206IDEsXHJcbiAgICAgIHNpbmdsZVBhZ2U6IGZhbHNlLFxyXG4gICAgICBhdXRvUmVzb2x1dGlvbjoge1xyXG4gICAgICAgIGVuYWJsZTogZmFsc2UsXHJcbiAgICAgICAgazogMS41XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgICB0aGlzLnVzZXJEaXJlY3Rpb24gPSB7XHJcbiAgICAgIGxhc3RUb3BQYWdlOiAwLFxyXG4gICAgICBkaXJlY3Rpb246IDFcclxuICAgIH07XHJcbiAgICB0aGlzLnBhZ2VNYW5hZ2VyID0gbmV3IFBhZ2VNYW5hZ2VyKHZpc3VhbCwgdGhpcywgdGhpcy5wKTtcclxuICAgIENTU0xheWVyLmluaXQodmlzdWFsLmRvYyk7XHJcbiAgICB0aGlzLmxheWVyTWFuYWdlciA9IG5ldyBDc3NMYXllcnNNYW5hZ2VyKHRoaXMpO1xyXG4gICAgdGhpcy5zZWFyY2hFbmdpbmUgPSBuZXcgU2VhcmNoRW5naW5lKHBhZ2VDYWxsYmFjaywgMiooc2hlZXRzKzIpKTtcclxuICAgIHRoaXMuc2VhcmNoRW5naW5lLm9uUGFnZUhpdHNDaGFuZ2VkID0gKHBhZ2UsIHF1ZXJ5KT0+IHtcclxuICAgICAgdGhpcy5wYWdlTWFuYWdlci5yZWZyZXNoUGFnZVF1ZXJ5KHBhZ2UsIHF1ZXJ5KTtcclxuICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KHtcclxuICAgICAgICB0eXBlOiAnc2VhcmNoUmVzdWx0cycsXHJcbiAgICAgICAgcmVzdWx0czogdGhpcy5zZWFyY2hFbmdpbmUucmVzdWx0cyxcclxuICAgICAgICBsYXN0UGFnZTogcGFnZSxcclxuICAgICAgICBxdWVyeVxyXG4gICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy50aHJlZSA9IG5ldyBUSFJFRS5PYmplY3QzRCgpO1xyXG5cclxuICAgIHRoaXMuYmluZGVyID0gbmV3IEJpbmRlcih2aXN1YWwsIHRoaXMucCk7XHJcbiAgICB0aGlzLnRocmVlLmFkZCh0aGlzLmJpbmRlci50aHJlZSk7XHJcblxyXG4gICAgdGhpcy5sZWZ0Q292ZXIgPSBuZXcgQ292ZXIodmlzdWFsLCB7Li4udGhpcy5wLCBzZXRUZXh0dXJlOiB0aGlzLnNldExlZnRDb3ZlclRleHR1cmUuYmluZCh0aGlzKX0sIE1hdGguUEkvMiwgJ29wZW5lZCcpO1xyXG4gICAgdGhpcy5iaW5kZXIuam9pbkxlZnRDb3Zlcih0aGlzLmxlZnRDb3Zlcik7XHJcbiAgICB0aGlzLnN1YnNjcmliZVNoZWV0QmxvY2sodGhpcy5sZWZ0Q292ZXIsIDApO1xyXG4gICAgdGhpcy5yaWdodENvdmVyID0gbmV3IENvdmVyKHZpc3VhbCwgey4uLnRoaXMucCwgc2V0VGV4dHVyZTogdGhpcy5zZXRSaWdodENvdmVyVGV4dHVyZS5iaW5kKHRoaXMpfSwgMCwgJ2Nsb3NlZCcpO1xyXG4gICAgdGhpcy5iaW5kZXIuam9pblJpZ2h0Q292ZXIodGhpcy5yaWdodENvdmVyKTtcclxuICAgIHRoaXMuc3Vic2NyaWJlU2hlZXRCbG9jayh0aGlzLnJpZ2h0Q292ZXIsIDIqKHRoaXMucC5zaGVldHMrMSkpO1xyXG5cclxuICAgIHRoaXMudGhyZWVTaGVldEJsb2NrcyA9IG5ldyBUSFJFRS5PYmplY3QzRCgpO1xyXG4gICAgdGhpcy50aHJlZS5hZGQodGhpcy50aHJlZVNoZWV0QmxvY2tzKTtcclxuICAgIHRoaXMudGhyZWVTaGVldEJsb2Nrcy5wb3NpdGlvbi5zZXQoMC41KnRoaXMucC5jb3Zlci5kZXB0aC0wLjUqc2hlZXRzKnRoaXMucC5wYWdlLmRlcHRoLC0wLjUqc2hlZXRzKnRoaXMucC5wYWdlLmRlcHRoLDApO1xyXG5cclxuICAgIHRoaXMuc2hlZXRCbG9ja3MgPSBbXTtcclxuICAgIGlmKHNoZWV0cz4wKSB7XHJcbiAgICAgIHRoaXMuYWRkU2hlZXRCbG9jaygwLCBuZXcgU2hlZXRCbG9jayh2aXN1YWwsIHsuLi50aGlzLnAsIHNldFRleHR1cmU6IHRoaXMuc2V0UGFnZVRleHR1cmUuYmluZCh0aGlzKX0sIDAsIHNoZWV0cywgMCwgJ2Nsb3NlZCcpKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmFuZ2xlID0gdGhpcy5wLnJ0bD8gTWF0aC5QSTogMDtcclxuICAgIHRoaXMuY2xvc2VkQW5nbGUgPSAwO1xyXG4gICAgdGhpcy5zZXQodGhpcy5hbmdsZSwwKTtcclxuICAgIHRoaXMubGFzdE1vdXNlUG9zID0ge1xyXG4gICAgICB0OiAwXHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMucGVuZGluZ1BsYXllcnMgPSBbXTtcclxuXHJcbiAgICB0aGlzLnRocmVlLnBvc2l0aW9uLnNldCgtMC41KnRoaXMucC5jb3Zlci5kZXB0aCswLjUqc2hlZXRzKnRoaXMucC5wYWdlLmRlcHRoLDAsMCk7XHJcbiAgICB0aGlzLnNoZWV0UGh5c2ljcyA9IG5ldyBTaGVldFBoeXNpY3ModGhpcy5wLnBhZ2Uud2lkdGgvdGhpcy5wLnNjYWxlLCB0aGlzLnAuZ3Jhdml0eSwgdGhpcy5wLnBhZ2UuY29ybmVyRGV2aWF0aW9uKTtcclxuXHJcbiAgICB0aGlzLmJpbmRzID0ge1xyXG4gICAgICB1cGRhdGU6IHRoaXMudXBkYXRlLmJpbmQodGhpcyksXHJcbiAgICAgIGxhc3RNb3VzZVBvczogKGUpPT4ge1xyXG4gICAgICAgIHRoaXMubGFzdE1vdXNlUG9zID0ge1xyXG4gICAgICAgICAgLi4udGhpcy5sYXN0TW91c2VQb3MsXHJcbiAgICAgICAgICBwYWdlWDogZS5wYWdlWCxcclxuICAgICAgICAgIHBhZ2VZOiBlLnBhZ2VZXHJcbiAgICAgICAgfTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgIHRoaXMudmlzdWFsLmFkZFJlbmRlckNhbGxiYWNrKHRoaXMuYmluZHMudXBkYXRlKTtcclxuICAgICQodGhpcy52aXN1YWwuZWxlbWVudCkub24oJ21vdXNlbW92ZScsIHRoaXMuYmluZHMubGFzdE1vdXNlUG9zKTtcclxuXHJcbiAgICB0aGlzLmJpbmRzLm9uUGlja0NhbGxiYWNrID0gdGhpcy5vblBpY2tDYWxsYmFjay5iaW5kKHRoaXMpXHJcbiAgICB0aGlzLnZpc3VhbC5kcmFnLm9uUGlja0NhbGxiYWNrID0gdGhpcy5iaW5kcy5vblBpY2tDYWxsYmFjaztcclxuICAgIHRoaXMuYmluZHMub25EcmFnQ2FsbGJhY2sgPSB0aGlzLm9uRHJhZ0NhbGxiYWNrLmJpbmQodGhpcylcclxuICAgIHRoaXMudmlzdWFsLmRyYWcub25EcmFnQ2FsbGJhY2sgPSB0aGlzLmJpbmRzLm9uRHJhZ0NhbGxiYWNrO1xyXG4gICAgdGhpcy5iaW5kcy5vblJlbGVhc2VDYWxsYmFjayA9IHRoaXMub25SZWxlYXNlQ2FsbGJhY2suYmluZCh0aGlzKVxyXG4gICAgdGhpcy52aXN1YWwuZHJhZy5vblJlbGVhc2VDYWxsYmFjayA9IHRoaXMuYmluZHMub25SZWxlYXNlQ2FsbGJhY2s7XHJcblxyXG4gICAgdGhpcy5kcmFnQW5nbGUgPSAwLjA1O1xyXG4gICAgdGhpcy50bXAgPSB7XHJcbiAgICAgIGJveHM6IFtcclxuICAgICAgICBuZXcgVEhSRUUuQm94MygpLFxyXG4gICAgICAgIG5ldyBUSFJFRS5Cb3gzKClcclxuICAgICAgXVxyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLnZpc3VhbC5hZGRPYmplY3QodGhpcy50aHJlZSk7XHJcbiAgICB0aGlzLnZpc3VhbC5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLnBhZ2VNYW5hZ2VyLnJlZnJlc2hab29tLmJpbmQodGhpcy5wYWdlTWFuYWdlcikpO1xyXG5cclxuICAgIHNldFRpbWVvdXQoKCk9PiB7XHJcbiAgICAgIGlmKCF0aGlzLmlzUHJvY2Vzc2luZygpKSB7XHJcbiAgICAgICAgdGhpcy5ub3RpZnlCZWZvcmVBbmltYXRpb24oKTtcclxuICAgICAgICB0aGlzLm5vdGlmeUFmdGVyQW5pbWF0aW9uKCk7XHJcbiAgICAgIH1cclxuICAgIH0sIDEwMCk7XHJcblxyXG4gICAgdGhpcy51cGRhdGVUaHJlZSgpO1xyXG4gIH1cclxuXHJcbiAgZGlzcG9zZSgpIHtcclxuICAgIHRoaXMudmlzdWFsLnJlbW92ZU9iamVjdCh0aGlzLnRocmVlKTtcclxuICAgIHRoaXMuc2hlZXRQaHlzaWNzLmRpc3Bvc2UoKTtcclxuICAgIGRlbGV0ZSB0aGlzLnZpc3VhbC5kcmFnLm9uUGlja0NhbGxiYWNrO1xyXG4gICAgZGVsZXRlIHRoaXMudmlzdWFsLmRyYWcub25EcmFnQ2FsbGJhY2s7XHJcbiAgICBkZWxldGUgdGhpcy52aXN1YWwuZHJhZy5vblJlbGVhc2VDYWxsYmFjaztcclxuICAgICQodGhpcy52aXN1YWwuZWxlbWVudCkub2ZmKCdtb3VzZW1vdmUnLCB0aGlzLmJpbmRzLmxhc3RNb3VzZVBvcyk7XHJcbiAgICB0aGlzLnZpc3VhbC5yZW1vdmVSZW5kZXJDYWxsYmFjayh0aGlzLmJpbmRzLnVwZGF0ZSk7XHJcbiAgICB0aGlzLnJlbW92ZVNoZWV0QmxvY2tzKDAsIHRoaXMuc2hlZXRCbG9ja3MubGVuZ3RoKTtcclxuICAgIHRoaXMuYmluZGVyLmRpc2Nvbm5lY3RMZWZ0Q292ZXIodGhpcy5sZWZ0Q292ZXIpO1xyXG4gICAgdGhpcy5yZW1vdmVTaGVldEJsb2NrKHRoaXMubGVmdENvdmVyKTtcclxuICAgIHRoaXMuYmluZGVyLmRpc2Nvbm5lY3RSaWdodENvdmVyKHRoaXMucmlnaHRDb3Zlcik7XHJcbiAgICB0aGlzLnJlbW92ZVNoZWV0QmxvY2sodGhpcy5yaWdodENvdmVyKTtcclxuICAgIHRoaXMuYmluZGVyLmRpc3Bvc2UoKTtcclxuICAgIHRoaXMubGF5ZXJNYW5hZ2VyLmRpc3Bvc2UoKTtcclxuICAgIENTU0xheWVyLmRpc3Bvc2UoKTtcclxuICAgIHRoaXMucGFnZU1hbmFnZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxuXHJcbiAgLy8gcHVibGljcyB7XHJcblxyXG4gIGhhc1BlbmRpbmdQbGF5ZXJzKCkge1xyXG4gICAgcmV0dXJuIHRoaXMucGVuZGluZ1BsYXllcnMubGVuZ3RoPjA7XHJcbiAgfVxyXG5cclxuICByZXNvbHZlUGVuZGluZ1BsYXllcnMoKSB7XHJcbiAgICBmb3IobGV0IHAgb2YgdGhpcy5wZW5kaW5nUGxheWVycykge1xyXG4gICAgICBwLnBsYXkoKTtcclxuICAgIH1cclxuICAgIHRoaXMucGVuZGluZ1BsYXllcnMgPSBbXTtcclxuICAgIHRoaXMuZGlzcGF0Y2hFdmVudCh7XHJcbiAgICAgIHR5cGU6ICdwZW5kaW5nUGxheWVycydcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlVGhyZWUoKSB7XHJcbiAgICB0aGlzLnRocmVlLnVzZXJEYXRhLm5lZWRzVXBkYXRlID0gdHJ1ZTtcclxuICB9XHJcblxyXG4gIHNldEF1dG9SZXNvbHV0aW9uKGVuYWJsZSwgaz0xLjUpIHtcclxuICAgIHRoaXMucC5hdXRvUmVzb2x1dGlvbiA9IHtcclxuICAgICAgLi4udGhpcy5wLmF1dG9SZXNvbHV0aW9uLFxyXG4gICAgICBlbmFibGUsXHJcbiAgICAgIGtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBzZXRab29tKHpvb20sIHNpbmdsZVBhZ2UpIHtcclxuICAgIGlmKE1hdGguYWJzKHRoaXMucC56b29tLXpvb20pPjFlLTMgfHwgc2luZ2xlUGFnZSE9PXRoaXMucC5zaW5nbGVQYWdlKSB7XHJcbiAgICAgIHRoaXMucC56b29tID0gem9vbTtcclxuICAgICAgdGhpcy5wLnNpbmdsZVBhZ2UgPSBzaW5nbGVQYWdlO1xyXG4gICAgICB0aGlzLnBhZ2VNYW5hZ2VyLnJlZnJlc2hab29tKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBnZXRQYWdlQ2FsbGJhY2soKSB7XHJcbiAgICByZXR1cm4gdGhpcy5wLnBhZ2VDYWxsYmFjaztcclxuICB9XHJcblxyXG4gIHNldFF1ZXJ5KHF1ZXJ5KSB7XHJcbiAgICB0aGlzLnNlYXJjaEVuZ2luZS5zZXRRdWVyeShxdWVyeSk7XHJcbiAgfVxyXG5cclxuICBpc1Byb2Nlc3NpbmcoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5zaGVldFBoeXNpY3MuZ2V0U2l6ZSgpIT09MDtcclxuICB9XHJcblxyXG4gIGdldFBhZ2VzKCkge1xyXG4gICAgcmV0dXJuIDQrMip0aGlzLnAuc2hlZXRzO1xyXG4gIH1cclxuXHJcbiAgc2V0RmxpcFByb2dyZXNzQ2xiKGNsYikge1xyXG4gICAgdGhpcy5wLmZsaXBQcm9ncmVzc0NsYiA9IGNsYjtcclxuICB9XHJcblxyXG4gIHNldEluamVjdG9yKGluamVjdG9yKSB7XHJcbiAgICB0aGlzLnAuaW5qZWN0b3IgPSBpbmplY3RvcjtcclxuICB9XHJcblxyXG4gIGlzQWN0aXZlUGFnZShuKSB7XHJcbiAgICBsZXQgcmVzID0gdHJ1ZTtcclxuICAgIGlmKG4+MSAmJiBuPHRoaXMuZ2V0UGFnZXMoKS0yKSB7XHJcbiAgICAgIGZvcihsZXQgYiBvZiB0aGlzLnNoZWV0QmxvY2tzKSB7XHJcbiAgICAgICAgaWYobi0yPjIqYi5wLmZpcnN0ICYmIG4tMjwyKmIucC5sYXN0LTEpIHtcclxuICAgICAgICAgIHJlcyA9IGZhbHNlO1xyXG4gICAgICAgICAgYnJlYWtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiByZXM7XHJcbiAgfVxyXG5cclxuICBnZXRCbG9ja0J5UGFnZShuKSB7XHJcbiAgICBsZXQgYmxvY2s7XHJcbiAgICBpZihuPDIpIHtcclxuICAgICAgYmxvY2sgPSB0aGlzLmxlZnRDb3ZlcjtcclxuICAgIH1cclxuICAgIGVsc2UgaWYobjwyKih0aGlzLnAuc2hlZXRzKzEpKSB7XHJcbiAgICAgIGZvcihsZXQgYiBvZiB0aGlzLnNoZWV0QmxvY2tzKSB7XHJcbiAgICAgICAgaWYobi0yPj0yKmIucC5maXJzdCAmJiBuLTI8MipiLnAubGFzdCkge1xyXG4gICAgICAgICAgYmxvY2sgPSBiO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgYmxvY2sgPSB0aGlzLnJpZ2h0Q292ZXI7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYmxvY2s7XHJcbiAgfVxyXG5cclxuICBnZXRCbG9ja1BhZ2VzKGJsb2NrKSB7XHJcbiAgICBsZXQgcmFuZ2U7XHJcbiAgICBzd2l0Y2ggKGJsb2NrKSB7XHJcbiAgICAgIGNhc2UgdGhpcy5sZWZ0Q292ZXI6IHtcclxuICAgICAgICAgIHJhbmdlID0gWzAsIDFdO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICAgIGNhc2UgdGhpcy5yaWdodENvdmVyOiB7XHJcbiAgICAgICAgcmFuZ2UgPSBbMioodGhpcy5wLnNoZWV0cysxKSwgMioodGhpcy5wLnNoZWV0cysxKSsxXTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgICBkZWZhdWx0OiB7XHJcbiAgICAgICAgcmFuZ2UgPSBibG9jaz8gWzIqKGJsb2NrLnAuZmlyc3QrMSksIDIqKGJsb2NrLnAubGFzdCsxKS0xXTogdW5kZWZpbmVkO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmFuZ2U7XHJcbiAgfVxyXG5cclxuICBnZXRQYWdlKCkge1xyXG4gICAgY29uc3QgUEkgPSBNYXRoLlBJO1xyXG4gICAgbGV0IHA7XHJcbiAgICBpZih0aGlzLmFuZ2xlID09PSBQSS8yIHx8IHRoaXMuYW5nbGUgPT09IDMqUEkvMikge1xyXG4gICAgICBmb3IobGV0IGJsb2NrIG9mIHRoaXMuc2hlZXRCbG9ja3MpIHtcclxuICAgICAgICBpZihibG9jay5hbmdsZTw9UEkvMikge1xyXG4gICAgICAgICAgcCA9IHRoaXMuZ2V0QmxvY2tQYWdlcyhibG9jaylbMF0tMTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBpZighcCkge1xyXG4gICAgICAgIHAgPSB0aGlzLmdldFBhZ2VzKCktMztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSBpZih0aGlzLmFuZ2xlPFBJLzIpIHtcclxuICAgICAgcCA9IDA7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmKHRoaXMuYW5nbGU+MypQSS8yKSB7XHJcbiAgICAgIHAgPSAxO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZih0aGlzLmFuZ2xlPFBJKSB7XHJcbiAgICAgIHAgPSB0aGlzLmdldFBhZ2VzKCktMztcclxuICAgIH1cclxuICAgIGVsc2UgaWYodGhpcy5hbmdsZT49UEkpIHtcclxuICAgICAgcCA9IHRoaXMuZ2V0UGFnZXMoKS0xO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHA7XHJcbiAgfVxyXG5cclxuICBnZXRUb3BQYWdlcygpIHtcclxuICAgIGNvbnN0IHAgPSB0aGlzLmdldFBhZ2UoKTtcclxuICAgIHJldHVybiBwPT09MCB8fCBwPT09dGhpcy5nZXRQYWdlcygpLTE/IFtwXTogW3AsIHArMV07XHJcbiAgfVxyXG5cclxuICBnZXRQYWdlU3RhdGUobikge1xyXG4gICAgcmV0dXJuIHRoaXMucGFnZU1hbmFnZXIuZ2V0UGFnZVN0YXRlKG4pO1xyXG4gIH1cclxuXHJcbiAgZW5hYmxlTG9hZGluZ0FuaW1hdGlvbihlbmFibGUpIHtcclxuICAgIHRoaXMucGFnZU1hbmFnZXIuZW5hYmxlTG9hZGluZ0FuaW1hdGlvbihlbmFibGUpO1xyXG4gIH1cclxuXHJcbiAgZ2V0TGVmdEZsaXBwaW5nKCkge1xyXG4gICAgbGV0IGJsb2NrO1xyXG4gICAgY29uc3QgbGVmdCA9IHRoaXMuc2hlZXRCbG9ja3NbMF0sIFBJID0gTWF0aC5QSTtcclxuICAgIGlmKHRoaXMuYW5nbGU9PT1QSSkge1xyXG4gICAgICBibG9jayA9IHRoaXMucmlnaHRDb3ZlcjtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBpZihsZWZ0ICYmIGxlZnQuc3RhdGU9PT0nY2xvc2VkJyAmJiBsZWZ0LmFuZ2xlPlBJLzIpIHtcclxuICAgICAgICBibG9jayA9IGxlZnQ7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZih0aGlzLmFuZ2xlID09PSBQSS8yIHx8IHRoaXMuYW5nbGUgPT09IDMqUEkvMikge1xyXG4gICAgICAgIGJsb2NrID0gdGhpcy5sZWZ0Q292ZXI7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBibG9jaztcclxuICB9XHJcblxyXG4gIGdldFJpZ2h0RmxpcHBpbmcoKSB7XHJcbiAgICBsZXQgYmxvY2s7XHJcbiAgICBjb25zdCByaWdodCA9IHRoaXMuc2hlZXRCbG9ja3NbdGhpcy5zaGVldEJsb2Nrcy5sZW5ndGgtMV0sIFBJID0gTWF0aC5QSTtcclxuICAgIGlmKHRoaXMuYW5nbGU9PT0wKSB7XHJcbiAgICAgIGJsb2NrID0gdGhpcy5sZWZ0Q292ZXI7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgaWYocmlnaHQgJiYgcmlnaHQuc3RhdGU9PT0nY2xvc2VkJyAmJiByaWdodC5hbmdsZTw9UEkvMikge1xyXG4gICAgICAgIGJsb2NrID0gcmlnaHQ7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZih0aGlzLmFuZ2xlPT09UEkvMiB8fCB0aGlzLmFuZ2xlID09PSAzKlBJLzIpIHtcclxuICAgICAgICBibG9jayA9IHRoaXMucmlnaHRDb3ZlcjtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGJsb2NrO1xyXG4gIH1cclxuXHJcbiAgZ2V0Q2xvc2VkQmxvY2tBbmdsZShhbmdsZSkge1xyXG4gICAgbGV0IGNsb3NlZEFuZ2xlLCB7UEl9ID0gTWF0aDtcclxuXHJcbiAgICBpZih0aGlzLmxlZnRDb3Zlci5waHlzaWNJZCkge1xyXG4gICAgICBsZXQgdGVzdDtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICB0ZXN0ID0gTWF0aC5hYnModGhpcy5zaGVldFBoeXNpY3MuZ2V0UGFyYW1ldHIodGhpcy5sZWZ0Q292ZXIucGh5c2ljSWQsICdhbmdsZScpLWFuZ2xlKVxyXG4gICAgICB9XHJcbiAgICAgIGNhdGNoKGUpIHtcclxuICAgICAgICB0ZXN0ID0gMDtcclxuICAgICAgfVxyXG4gICAgICBjbG9zZWRBbmdsZSA9IGFuZ2xlPlBJLzIgfHwgdGVzdD5QSS82PyBQSS8yOiB0aGlzLmNsb3NlZEFuZ2xlO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZih0aGlzLnJpZ2h0Q292ZXIucGh5c2ljSWQpIHtcclxuICAgICAgbGV0IHRlc3Q7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgdGVzdCA9IE1hdGguYWJzKHRoaXMuc2hlZXRQaHlzaWNzLmdldFBhcmFtZXRyKHRoaXMucmlnaHRDb3Zlci5waHlzaWNJZCwgJ2FuZ2xlJyktYW5nbGUpXHJcbiAgICAgIH1cclxuICAgICAgY2F0Y2goZSkge1xyXG4gICAgICAgIHRlc3QgPSAwO1xyXG4gICAgICB9XHJcbiAgICAgIGNsb3NlZEFuZ2xlID0gYW5nbGU8UEkvMiB8fCB0ZXN0PlBJLzY/IFBJLzIrMWUtNzogdGhpcy5jbG9zZWRBbmdsZTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBjbG9zZWRBbmdsZSA9IFBJLzIrKGFuZ2xlIT09MCkqMWUtNztcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBvcGVuZWRBbmdsZTogYW5nbGUsXHJcbiAgICAgIGNsb3NlZEFuZ2xlLFxyXG4gICAgICBiaW5kZXJUdXJuOiB0aGlzLmNsb3NlZEFuZ2xlXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgZmxpcExlZnQoc2l6ZT0xLCBwcm9ncmVzc0NsYj10aGlzLnAuZmxpcFByb2dyZXNzQ2xiKSB7XHJcbiAgICBsZXQgYmxvY2ssIHJlcztcclxuICAgIGlmKHRoaXMuc2hlZXRQaHlzaWNzLmdldFNpemUoKTwyNSkge1xyXG4gICAgICBjb25zdCBsZWZ0ID0gdGhpcy5zaGVldEJsb2Nrc1swXSwgUEkgPSBNYXRoLlBJO1xyXG4gICAgICBpZih0aGlzLmFuZ2xlPT09UEkpIHtcclxuICAgICAgICByZXMgPSB0aGlzLmNvbm5lY3RQaHlzaWNzKFxyXG4gICAgICAgICAgYmxvY2s9dGhpcy5yaWdodENvdmVyLFxyXG4gICAgICAgICAgdGhpcy5wLmNvdmVyLm1hc3MsXHJcbiAgICAgICAgICBQSSxcclxuICAgICAgICAgIC10aGlzLnAuY292ZXIuc3RhcnRWZWxvY2l0eSxcclxuICAgICAgICAgIHRoaXMucC5jb3Zlci5mbGV4aWJpbGl0eSxcclxuICAgICAgICAgIDAsXHJcbiAgICAgICAgICAoYW5nbGUsaGVpZ2h0KT0+dGhpcy5zZXQoMypQSS8yLWFuZ2xlLzIsaGVpZ2h0KSxcclxuICAgICAgICAgIChhbmdsZSxoZWlnaHQpPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnNldCgzKlBJLzItYW5nbGUvMiwwKTtcclxuICAgICAgICAgICAgdGhpcy5zZXRTaGVldEJsb2NrcyhhbmdsZT8gUEk6IFBJLzIrMWUtNywnY2xvc2VkJyk7XHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgcHJvZ3Jlc3NDbGJcclxuICAgICAgICApO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIGlmKGxlZnQgJiYgbGVmdC5zdGF0ZT09PSdjbG9zZWQnICYmIGxlZnQuYW5nbGU+UEkvMikge1xyXG4gICAgICAgICAgYmxvY2sgPSBzaXplPGxlZnQuZ2V0U2l6ZSgpPyB0aGlzLnNwbGl0U2hlZXRCbG9jaygwLCBsZWZ0LmdldFNpemUoKS1zaXplKVsxXTogbGVmdDtcclxuICAgICAgICAgIHJlcyA9IHRoaXMuY29ubmVjdFBoeXNpY3MoXHJcbiAgICAgICAgICAgIGJsb2NrLFxyXG4gICAgICAgICAgICB0aGlzLnAucGFnZS5tYXNzKmJsb2NrLmdldFNpemUoKSxcclxuICAgICAgICAgICAgUEksXHJcbiAgICAgICAgICAgIC10aGlzLnAucGFnZS5zdGFydFZlbG9jaXR5LFxyXG4gICAgICAgICAgICB0aGlzLnAucGFnZS5mbGV4aWJpbGl0eSxcclxuICAgICAgICAgICAgMCxcclxuICAgICAgICAgICAgKGFuZ2xlLGhlaWdodCk9PmJsb2NrLnNldCh0aGlzLmdldENsb3NlZEJsb2NrQW5nbGUoYW5nbGUpLCdvcGVuZWQnLGhlaWdodCksXHJcbiAgICAgICAgICAgIEJvb2suZmluaXNoQW5pbWF0aW9uQ2xiLmJpbmQoe2Jvb2s6IHRoaXMsIGJsb2NrfSksXHJcbiAgICAgICAgICAgIHByb2dyZXNzQ2xiXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmKHRoaXMuYW5nbGUgPT09IFBJLzIgfHwgdGhpcy5hbmdsZSA9PT0gMypQSS8yKSB7XHJcbiAgICAgICAgICByZXMgPSB0aGlzLmNvbm5lY3RQaHlzaWNzKFxyXG4gICAgICAgICAgICBibG9jaz10aGlzLmxlZnRDb3ZlcixcclxuICAgICAgICAgICAgdGhpcy5wLmNvdmVyLm1hc3MsXHJcbiAgICAgICAgICAgIFBJLFxyXG4gICAgICAgICAgICAtdGhpcy5wLmNvdmVyLnN0YXJ0VmVsb2NpdHksXHJcbiAgICAgICAgICAgIHRoaXMucC5jb3Zlci5mbGV4aWJpbGl0eSxcclxuICAgICAgICAgICAgMCxcclxuICAgICAgICAgICAgKGFuZ2xlLGhlaWdodCk9PiB7XHJcbiAgICAgICAgICAgICAgdGhpcy5zZXQoMipQSS1hbmdsZS8yLGhlaWdodCk7XHJcbiAgICAgICAgICAgICAgaWYoYW5nbGU+UEkvMikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTaGVldEJsb2NrcyhhbmdsZT8gUEkvMjogMCwnY2xvc2VkJyk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAoYW5nbGUsaGVpZ2h0KT0+IHRoaXMuc2V0KGFuZ2xlPT09MD8gMDogMipQSS1hbmdsZS8yLDApLFxyXG4gICAgICAgICAgICBwcm9ncmVzc0NsYlxyXG4gICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiByZXM7XHJcbiAgfVxyXG5cclxuICBmbGlwUmlnaHQoc2l6ZT0xLCBwcm9ncmVzc0NsYj10aGlzLnAuZmxpcFByb2dyZXNzQ2xiKSB7XHJcbiAgICBsZXQgYmxvY2ssIHJlcztcclxuICAgIGlmKHRoaXMuc2hlZXRQaHlzaWNzLmdldFNpemUoKTwyNSkge1xyXG4gICAgICBjb25zdCByaWdodCA9IHRoaXMuc2hlZXRCbG9ja3NbdGhpcy5zaGVldEJsb2Nrcy5sZW5ndGgtMV0sIFBJID0gTWF0aC5QSTtcclxuICAgICAgaWYodGhpcy5hbmdsZT09PTApIHtcclxuICAgICAgICByZXMgPSB0aGlzLmNvbm5lY3RQaHlzaWNzKFxyXG4gICAgICAgICAgYmxvY2s9dGhpcy5sZWZ0Q292ZXIsXHJcbiAgICAgICAgICB0aGlzLnAuY292ZXIubWFzcyxcclxuICAgICAgICAgIDAsXHJcbiAgICAgICAgICB0aGlzLnAuY292ZXIuc3RhcnRWZWxvY2l0eSxcclxuICAgICAgICAgIHRoaXMucC5jb3Zlci5mbGV4aWJpbGl0eSxcclxuICAgICAgICAgIDAsXHJcbiAgICAgICAgICAoYW5nbGUsaGVpZ2h0KT0+dGhpcy5zZXQoYW5nbGUvMixoZWlnaHQpLFxyXG4gICAgICAgICAgKGFuZ2xlLGhlaWdodCk9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0KGFuZ2xlLzIsMCk7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0U2hlZXRCbG9ja3MoYW5nbGU/IFBJLzI6IDAsJ2Nsb3NlZCcpO1xyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHByb2dyZXNzQ2xiXHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICBpZihyaWdodCAmJiByaWdodC5zdGF0ZT09PSdjbG9zZWQnICYmIHJpZ2h0LmFuZ2xlPD1QSS8yKSB7XHJcbiAgICAgICAgICBibG9jayA9IHNpemU8cmlnaHQuZ2V0U2l6ZSgpPyB0aGlzLnNwbGl0U2hlZXRCbG9jayh0aGlzLnNoZWV0QmxvY2tzLmxlbmd0aC0xLCBzaXplKVswXTogcmlnaHQ7XHJcbiAgICAgICAgICByZXMgPSB0aGlzLmNvbm5lY3RQaHlzaWNzKFxyXG4gICAgICAgICAgICBibG9jayxcclxuICAgICAgICAgICAgdGhpcy5wLnBhZ2UubWFzcypibG9jay5nZXRTaXplKCksXHJcbiAgICAgICAgICAgIDAsXHJcbiAgICAgICAgICAgIHRoaXMucC5wYWdlLnN0YXJ0VmVsb2NpdHksXHJcbiAgICAgICAgICAgIHRoaXMucC5wYWdlLmZsZXhpYmlsaXR5LFxyXG4gICAgICAgICAgICAwLFxyXG4gICAgICAgICAgICAoYW5nbGUsaGVpZ2h0KT0+YmxvY2suc2V0KHRoaXMuZ2V0Q2xvc2VkQmxvY2tBbmdsZShhbmdsZSksJ29wZW5lZCcsaGVpZ2h0KSxcclxuICAgICAgICAgICAgQm9vay5maW5pc2hBbmltYXRpb25DbGIuYmluZCh7Ym9vazogdGhpcywgYmxvY2t9KSxcclxuICAgICAgICAgICAgcHJvZ3Jlc3NDbGJcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYodGhpcy5hbmdsZT09PVBJLzIgfHwgdGhpcy5hbmdsZSA9PT0gMypQSS8yKSB7XHJcbiAgICAgICAgICByZXMgPSB0aGlzLmNvbm5lY3RQaHlzaWNzKFxyXG4gICAgICAgICAgICBibG9jaz10aGlzLnJpZ2h0Q292ZXIsXHJcbiAgICAgICAgICAgIHRoaXMucC5jb3Zlci5tYXNzLFxyXG4gICAgICAgICAgICAwLFxyXG4gICAgICAgICAgICB0aGlzLnAuY292ZXIuc3RhcnRWZWxvY2l0eSxcclxuICAgICAgICAgICAgdGhpcy5wLmNvdmVyLmZsZXhpYmlsaXR5LFxyXG4gICAgICAgICAgICAwLFxyXG4gICAgICAgICAgICAoYW5nbGUsaGVpZ2h0KT0+IHtcclxuICAgICAgICAgICAgICB0aGlzLnNldChQSS8yK2FuZ2xlLzIsaGVpZ2h0KTtcclxuICAgICAgICAgICAgICBpZihhbmdsZTxQSS8yKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFNoZWV0QmxvY2tzKFBJLzIrMWUtNywnY2xvc2VkJyk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAoYW5nbGUsaGVpZ2h0KT0+dGhpcy5zZXQoUEkvMithbmdsZS8yLDApLFxyXG4gICAgICAgICAgICBwcm9ncmVzc0NsYlxyXG4gICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiByZXM7XHJcbiAgfVxyXG5cclxuICAvLyB9XHJcblxyXG4gIGNsZWFySG92ZXJJbmZvKCkge1xyXG4gICAgdGhpcy5wYWdlTWFuYWdlci50dXJuT25FdmVudHMoKTtcclxuICAgIGRlbGV0ZSB0aGlzLmhvdmVySW5mby5ibG9jay5mb3JjZTtcclxuICAgIGRlbGV0ZSB0aGlzLmhvdmVySW5mby5ibG9jay5jb3JuZXJGb3JjZTtcclxuICAgIGRlbGV0ZSB0aGlzLmhvdmVySW5mbztcclxuICB9XHJcblxyXG4gIHhTZWdtZW50KCkge1xyXG4gICAgY29uc3QgYm94cyA9IHRoaXMudG1wLmJveHMsIHJlcyA9IHt9O1xyXG4gICAgaWYodGhpcy5sZWZ0Q292ZXIucGh5c2ljSWQpIHtcclxuICAgICAgYm94c1swXS5zZXRGcm9tT2JqZWN0KHRoaXMucmlnaHRDb3Zlci50aHJlZSk7XHJcbiAgICAgIHJlcy5taW4gPSAtKHJlcy5tYXggPSBib3hzWzBdLm1heC54KTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYodGhpcy5yaWdodENvdmVyLnBoeXNpY0lkKSB7XHJcbiAgICAgIGJveHNbMF0uc2V0RnJvbU9iamVjdCh0aGlzLmxlZnRDb3Zlci50aHJlZSk7XHJcbiAgICAgIHJlcy5tYXggPSAtKHJlcy5taW4gPSBib3hzWzBdLm1pbi54KTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBib3hzWzBdLnNldEZyb21PYmplY3QodGhpcy5sZWZ0Q292ZXIudGhyZWUpO1xyXG4gICAgICBib3hzWzFdLnNldEZyb21PYmplY3QodGhpcy5yaWdodENvdmVyLnRocmVlKTtcclxuICAgICAgYm94c1swXS51bmlvbihib3hzWzFdKTtcclxuICAgICAgcmVzLm1pbiA9IGJveHNbMF0ubWluLng7XHJcbiAgICAgIHJlcy5tYXggPSBib3hzWzBdLm1heC54O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlcztcclxuICB9XHJcblxyXG4gIGNvbXB1dGVUYXJnZXQocG9pbnQpIHtcclxuICAgIGxldCB7eCwgeX0gPSBwb2ludCwgc2VnID0gdGhpcy54U2VnbWVudCgpLCBhbmdsZTtcclxuICAgIGFuZ2xlID0gKHNlZy5tYXgteCkvKHNlZy5tYXgtc2VnLm1pbikqTWF0aC5QSTtcclxuICAgIC8vIGFuZ2xlID0gTWF0aC5hY29zKHgvTWF0aC5zcXJ0KHgqeCt5KnkpKTtcclxuICAgIHJldHVybiBNYXRoLm1heCh0aGlzLmRyYWdBbmdsZSwgTWF0aC5taW4oTWF0aC5QSS10aGlzLmRyYWdBbmdsZSwgYW5nbGUpKTtcclxuICB9XHJcblxyXG4gIG9uUGlja0NhbGxiYWNrKG9iamVjdCkge1xyXG4gICAgbGV0IHJlcyA9IGZhbHNlO1xyXG4gICAgY29uc3QgYmxvY2sgPSBvYmplY3Qub2JqZWN0LnVzZXJEYXRhLnNlbGYsXHJcbiAgICAgICAgICBwID0gey4uLm9iamVjdC51dn0sIGkgPSBvYmplY3QuZmFjZS5tYXRlcmlhbEluZGV4O1xyXG4gICAgaWYoaTwyKSB7XHJcbiAgICAgIHAueCA9IGk9PT0wPyBwLng6IDEtcC54O1xyXG4gICAgICBpZihibG9jay5jb3JuZXJUYXJnZXQudGVzdEludGVyc2VjdGlvbihudWxsLCBwKSAmJiBibG9jay5waHlzaWNJZCkge1xyXG4gICAgICAgIGlmKHRoaXMuaG92ZXJJbmZvKSB7XHJcbiAgICAgICAgICB0aGlzLmNsZWFySG92ZXJJbmZvKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGJsb2NrLmZvcmNlID0gU2hlZXRQaHlzaWNzLmRyYWdGb3JjZUNsYjtcclxuICAgICAgICBibG9jay5jb3JuZXJGb3JjZSA9IFNoZWV0UGh5c2ljcy5nZXREcmFnQ29ybmVyRm9yY2VDbGIodGhpcy5jb21wdXRlVGFyZ2V0KG9iamVjdC5wb2ludCkpO1xyXG4gICAgICAgIHRoaXMuZHJhZ0luZm8gPSB7XHJcbiAgICAgICAgICBvYmplY3QsXHJcbiAgICAgICAgICBibG9ja1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmVzID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLnBhZ2VNYW5hZ2VyLnR1cm5PZmZFdmVudHMoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlcztcclxuICB9XHJcblxyXG4gIG9uRHJhZ0NhbGxiYWNrKHBvaW50KSB7XHJcbiAgICBjb25zdCBibG9jayA9IHRoaXMuZHJhZ0luZm8uYmxvY2ssIHAgPSBibG9jay5nZXRQcm9wcygpO1xyXG4gICAgYmxvY2suZm9yY2UgPSBTaGVldFBoeXNpY3MuZHJhZ0ZvcmNlQ2xiO1xyXG4gICAgYmxvY2suY29ybmVyRm9yY2UgPSBTaGVldFBoeXNpY3MuZ2V0RHJhZ0Nvcm5lckZvcmNlQ2xiKHRoaXMuY29tcHV0ZVRhcmdldChwb2ludCkpO1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG5cclxuICBvblJlbGVhc2VDYWxsYmFjaygpIHtcclxuICAgIGRlbGV0ZSB0aGlzLmRyYWdJbmZvLmJsb2NrLmZvcmNlO1xyXG4gICAgZGVsZXRlIHRoaXMuZHJhZ0luZm8uYmxvY2suY29ybmVyRm9yY2U7XHJcbiAgICBkZWxldGUgdGhpcy5kcmFnSW5mbztcclxuICAgIHRoaXMucGFnZU1hbmFnZXIudHVybk9uRXZlbnRzKCk7XHJcbiAgfVxyXG5cclxuICBnZXRGbGlwcGluZyhpKSB7XHJcbiAgICByZXR1cm4gaT8gdGhpcy5nZXRMZWZ0RmxpcHBpbmcoKTogdGhpcy5nZXRSaWdodEZsaXBwaW5nKCk7XHJcbiAgfVxyXG5cclxuICBmbGlwKGksIHNpemU9MSkge1xyXG4gICAgcmV0dXJuIGk/IHRoaXMuZmxpcExlZnQoc2l6ZSk6IHRoaXMuZmxpcFJpZ2h0KHNpemUpO1xyXG4gIH1cclxuXHJcbiAgZW5hYmxlTW91c2UoZW5hYmxlKSB7XHJcbiAgICB0aGlzLm1vdXNlQ29udHJvbGxlciA9IGVuYWJsZTtcclxuICB9XHJcblxyXG4gIGNvcm5lckNhbGxiYWNrKGUsIGRhdGEpIHtcclxuICAgIGlmKHRoaXMubW91c2VDb250cm9sbGVyKSB7XHJcbiAgICAgIGNvbnN0IHtpLCBufSA9IGRhdGEuZGF0YTtcclxuICAgICAgaWYoZS50eXBlPT09J21vdXNlb3ZlcicpIHtcclxuICAgICAgICBpZih0aGlzLmhvdmVySW5mbyAmJiB0aGlzLmhvdmVySW5mby5wZW5kaW5ncyE9PXVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgKyt0aGlzLmhvdmVySW5mby5wZW5kaW5ncztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICBpZih0aGlzLmhvdmVySW5mbykge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ1dyb25nIHN0YXRlOiBlbGVtZW50IGlzIGFscmVhZHkgaG92ZXInKTtcclxuICAgICAgICAgICAgaWYodGhpcy5ob3ZlckluZm8ubiE9PW4pIHtcclxuICAgICAgICAgICAgICB0aGlzLmNsZWFySG92ZXJJbmZvKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmKCF0aGlzLmhvdmVySW5mbyAmJiAhdGhpcy5kcmFnSW5mbykge1xyXG4gICAgICAgICAgICBsZXQgcmVzID0gUHJvbWlzZS5yZXNvbHZlKHVuZGVmaW5lZCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGhvdmVyQW5nbGUgPSAwLjAyLFxyXG4gICAgICAgICAgICAgICAgICBob3ZlciA9IHRoaXMuZ2V0QmxvY2tCeVBhZ2UobiksXHJcbiAgICAgICAgICAgICAgICAgIHBvc3NpYmxlID0gdGhpcy5nZXRGbGlwcGluZyhpKTtcclxuICAgICAgICAgICAgaWYobj4xICYmIG48MioodGhpcy5wLnNoZWV0cysxKSAmJiBob3Zlci5waHlzaWNJZCAmJiAoaG92ZXIuYW5nbGU8aG92ZXJBbmdsZSB8fCBob3Zlci5hbmdsZT5NYXRoLlBJLWhvdmVyQW5nbGUpKSB7XHJcbiAgICAgICAgICAgICAgcmVzID0gUHJvbWlzZS5yZXNvbHZlKGhvdmVyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmKGhvdmVyPT09cG9zc2libGUpIHtcclxuICAgICAgICAgICAgICBjb25zdCBzaGVldEJsb2NrcyA9IFtcclxuICAgICAgICAgICAgICAgIHRoaXMubGVmdENvdmVyLFxyXG4gICAgICAgICAgICAgICAgLi4udGhpcy5zaGVldEJsb2NrcyxcclxuICAgICAgICAgICAgICAgIHRoaXMucmlnaHRDb3ZlclxyXG4gICAgICAgICAgICAgIF07XHJcbiAgICAgICAgICAgICAgY29uc3QgaiA9IHNoZWV0QmxvY2tzLmluZGV4T2YoaG92ZXIpLCBuZXh0QmxvY2sgPSB+aj8gc2hlZXRCbG9ja3NbaisyKmktMV06IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICBpZighbmV4dEJsb2NrIHx8ICFuZXh0QmxvY2sucGh5c2ljSWQgfHwgbmV4dEJsb2NrLmFuZ2xlPmhvdmVyQW5nbGUgJiYgbmV4dEJsb2NrLmFuZ2xlPE1hdGguUEktaG92ZXJBbmdsZSkge1xyXG4gICAgICAgICAgICAgICAgcmVzID0gdGhpcy5mbGlwKGksIDEpLnRoZW4oKGJsb2NrKT0+IHtcclxuICAgICAgICAgICAgICAgICAgaWYoIWJsb2NrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuaG92ZXJJbmZvO1xyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2hlZXRQaHlzaWNzLnNldFBhcmFtZXRyKGJsb2NrLnBoeXNpY0lkLCAndmVsb2NpdHknLCAwKTtcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICByZXR1cm4gYmxvY2s7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuaG92ZXJJbmZvID0ge1xyXG4gICAgICAgICAgICAgICAgICBwZW5kaW5nczogMVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmVzLnRoZW4oKGJsb2NrKT0+IHtcclxuICAgICAgICAgICAgICBpZih0aGlzLmhvdmVySW5mbyAmJiB0aGlzLmhvdmVySW5mby5wZW5kaW5nczwxKSB7XHJcbiAgICAgICAgICAgICAgICBibG9jayA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmhvdmVySW5mbztcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgaWYoYmxvY2spIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucGFnZU1hbmFnZXIudHVybk9mZkV2ZW50cygpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgIHAgPSBibG9jay5nZXRQcm9wcygpO1xyXG4gICAgICAgICAgICAgICAgYmxvY2suZm9yY2UgPSB0aGlzLnNoZWV0UGh5c2ljcy5nZXRUYXJnZXRGb3JjZUNsYihwLm1hc3MqYmxvY2suZ2V0U2l6ZSgpLCBpPyBNYXRoLlBJLWhvdmVyQW5nbGU6IGhvdmVyQW5nbGUpO1xyXG4gICAgICAgICAgICAgICAgYmxvY2suY29ybmVyRm9yY2UgPSAoKT0+IChpPyAtMTogMSkqU2hlZXRQaHlzaWNzLmhvdmVyQ29ybmVyRm9yY2VDbGIoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2hlZXRQaHlzaWNzLnNldFBhcmFtZXRyKGJsb2NrLnBoeXNpY0lkLCAnYW5nbGUnLCBpPyBNYXRoLlBJLTAuNSpob3ZlckFuZ2xlOiAwLjUqaG92ZXJBbmdsZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmhvdmVySW5mbyA9IHtcclxuICAgICAgICAgICAgICAgICAgbixcclxuICAgICAgICAgICAgICAgICAgYmxvY2tcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZSgxLzMwKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZih0aGlzLmhvdmVySW5mbyAmJiBlLnR5cGU9PT0nbW91c2VvdXQnKSB7XHJcbiAgICAgICAgaWYodGhpcy5ob3ZlckluZm8ucGVuZGluZ3MhPT11bmRlZmluZWQpIHtcclxuICAgICAgICAgIC0tdGhpcy5ob3ZlckluZm8ucGVuZGluZ3M7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYobj09PXRoaXMuaG92ZXJJbmZvLm4pIHtcclxuICAgICAgICAgIHRoaXMuY2xlYXJIb3ZlckluZm8oKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZihlLnR5cGU9PT0nbW91c2Vkb3duJykge1xyXG4gICAgICAgIHRoaXMuY29ybmVyQ2xpY2tEYXRhID0ge1xyXG4gICAgICAgICAgeDogZS5wYWdlWCxcclxuICAgICAgICAgIHk6IGUucGFnZVlcclxuICAgICAgICB9O1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2UgaWYoZS50eXBlPT09J2NsaWNrJykge1xyXG4gICAgICAgIGlmKE1hdGguc3FydChNYXRoLnBvdyh0aGlzLmNvcm5lckNsaWNrRGF0YS54LWUucGFnZVgsMikrTWF0aC5wb3codGhpcy5jb3JuZXJDbGlja0RhdGEueS1lLnBhZ2VZLDIpKTw1KSB7XHJcbiAgICAgICAgICBjb25zdCBob3ZlciA9IHRoaXMuZ2V0QmxvY2tCeVBhZ2Uobik7XHJcbiAgICAgICAgICBpZihob3Zlci5waHlzaWNJZCkge1xyXG4gICAgICAgICAgICBjb25zdCBpZCA9IGhvdmVyLnBoeXNpY0lkLFxyXG4gICAgICAgICAgICAgICAgICBwcm9wcyA9IGhvdmVyLmdldFByb3BzKCk7XHJcbiAgICAgICAgICAgIHRoaXMuc2hlZXRQaHlzaWNzLnNldFBhcmFtZXRyKGlkLCAndmVsb2NpdHknLCAoaT8gLTE6IDEpKnByb3BzLnN0YXJ0VmVsb2NpdHkpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBkZWxldGUgdGhpcy5jb3JuZXJDbGlja0RhdGE7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIGFkZFNoZWV0QmxvY2socCwgYmxvY2spIHtcclxuICAgIHRoaXMuc2hlZXRCbG9ja3Muc3BsaWNlKHAsIDAsIGJsb2NrKTtcclxuICAgIHRoaXMuc3Vic2NyaWJlU2hlZXRCbG9jayhibG9jaywgMik7XHJcbiAgICB0aGlzLnRocmVlU2hlZXRCbG9ja3MuYWRkKGJsb2NrLnRocmVlKTtcclxuICB9XHJcblxyXG4gIHN1YnNjcmliZVNoZWV0QmxvY2soYmxvY2ssIG9mZnNldCkge1xyXG4gICAgY29uc3QgZXZlbnRDb252ZXJ0ZXIgPSBuZXcgQ3VzdG9tRXZlbnRDb252ZXJ0ZXIodGhpcy52aXN1YWwud25kLCB0aGlzLnZpc3VhbC5kb2MsIENpcmNsZVRhcmdldC50ZXN0KSxcclxuICAgICAgICAgIHIgPSAwLjE1LFxyXG4gICAgICAgICAgdGFyZ2V0ID0gbmV3IENpcmNsZVRhcmdldCgxLTAuNSpyLCAwLjUqciwgcik7XHJcbiAgICB0YXJnZXQuYmxvY2sgPSBibG9jaztcclxuICAgIHRhcmdldC5jYWxsYmFjayA9IHRoaXMuY29ybmVyQ2FsbGJhY2suYmluZCh0aGlzKTtcclxuICAgIGV2ZW50Q29udmVydGVyLmFkZEN1c3RvbSh0YXJnZXQpO1xyXG4gICAgYmxvY2suY29ybmVyVGFyZ2V0ID0gdGFyZ2V0O1xyXG4gICAgYmxvY2sudGhyZWUudXNlckRhdGEubW91c2VDYWxsYmFjayA9IChlLCBkYXRhKT0+IHtcclxuICAgICAgY29uc3QgaSA9IGRhdGEuZmFjZS5tYXRlcmlhbEluZGV4O1xyXG4gICAgICBpZihpPDIpIHtcclxuICAgICAgICBjb25zdCBuID0gaT09PTA/IG9mZnNldCsyKmJsb2NrLnAuZmlyc3Q6IG9mZnNldCsyKmJsb2NrLnAubGFzdC0xO1xyXG4gICAgICAgIGV2ZW50Q29udmVydGVyLmNvbnZlcnQoZSwge3g6IGk9PT0wPyBkYXRhLnV2Lng6IDEtZGF0YS51di54LCB5OiBkYXRhLnV2LnksIGksIG59KTtcclxuICAgICAgICB0aGlzLnBhZ2VNYW5hZ2VyLnRyYW5zZmVyRXZlbnRUb1RleHR1cmUobiwgZSwgZGF0YSk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgICBibG9jay50aHJlZS51c2VyRGF0YS50b3VjaENhbGxiYWNrID0gKGUsIGRhdGEpPT4ge1xyXG4gICAgICBjb25zdCBpID0gZGF0YS5mYWNlLm1hdGVyaWFsSW5kZXg7XHJcbiAgICAgIGlmKGk8Mikge1xyXG4gICAgICAgIGNvbnN0IG4gPSBpPT09MD8gb2Zmc2V0KzIqYmxvY2sucC5maXJzdDogb2Zmc2V0KzIqYmxvY2sucC5sYXN0LTE7XHJcbiAgICAgICAgdGhpcy5wYWdlTWFuYWdlci50cmFuc2ZlckV2ZW50VG9UZXh0dXJlKG4sIGUsIGRhdGEpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gICAgdGhpcy52aXN1YWwuZHJhZy5hZGRUaHJlZShibG9jay50aHJlZSk7XHJcbiAgICB0aGlzLnZpc3VhbC5tb3VzZUV2ZW50cy5hZGRUaHJlZShibG9jay50aHJlZSk7XHJcbiAgICB0aGlzLnZpc3VhbC50b3VjaEV2ZW50cy5hZGRUaHJlZShibG9jay50aHJlZSk7XHJcbiAgfVxyXG5cclxuICByZW1vdmVTaGVldEJsb2NrKGJsb2NrKSB7XHJcbiAgICB0aGlzLnZpc3VhbC5tb3VzZUV2ZW50cy5yZW1vdmVUaHJlZShibG9jay50aHJlZSk7XHJcbiAgICB0aGlzLnZpc3VhbC50b3VjaEV2ZW50cy5yZW1vdmVUaHJlZShibG9jay50aHJlZSk7XHJcbiAgICB0aGlzLnZpc3VhbC5kcmFnLnJlbW92ZVRocmVlKGJsb2NrLnRocmVlKTtcclxuICAgIHRoaXMudGhyZWVTaGVldEJsb2Nrcy5yZW1vdmUoYmxvY2sudGhyZWUpO1xyXG4gICAgYmxvY2suZGlzcG9zZSgpO1xyXG4gIH1cclxuXHJcbiAgcmVtb3ZlU2hlZXRCbG9ja3MoZmlyc3QsIHNpemUpIHtcclxuICAgIGNvbnN0IGJsb2NrcyA9IHRoaXMuc2hlZXRCbG9ja3Muc3BsaWNlKGZpcnN0LCBzaXplKTtcclxuICAgIGZvcihsZXQgYmxvY2sgb2YgYmxvY2tzKSB7XHJcbiAgICAgIHRoaXMucmVtb3ZlU2hlZXRCbG9jayhibG9jayk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzZXRUZXh0dXJlKG1hdGVyaWFsLCBuKSB7XHJcbiAgICB0aGlzLnBhZ2VNYW5hZ2VyLnNldFRleHR1cmUobWF0ZXJpYWwsIG4pO1xyXG4gIH1cclxuXHJcbiAgc2V0UGFnZVRleHR1cmUobWF0ZXJpYWwsIG4pIHtcclxuICAgIHRoaXMuc2V0VGV4dHVyZShtYXRlcmlhbCwgbisyKTtcclxuICB9XHJcblxyXG4gIHNldExlZnRDb3ZlclRleHR1cmUobWF0ZXJpYWwsIG4pIHtcclxuICAgIHRoaXMuc2V0VGV4dHVyZShtYXRlcmlhbCwgbik7XHJcbiAgfVxyXG5cclxuICBzZXRSaWdodENvdmVyVGV4dHVyZShtYXRlcmlhbCwgbikge1xyXG4gICAgdGhpcy5zZXRUZXh0dXJlKG1hdGVyaWFsLCBuKzIqKHRoaXMucC5zaGVldHMrMSkpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGZpbmlzaEFuaW1hdGlvbkNsYihhbmdsZSkge1xyXG4gICAgdGhpcy5ibG9jay5zZXQodGhpcy5ib29rLmdldENsb3NlZEJsb2NrQW5nbGUoYW5nbGUpLmNsb3NlZEFuZ2xlLCdjbG9zZWQnLDApO1xyXG4gICAgY29uc3QgaSA9IHRoaXMuYm9vay5zaGVldEJsb2Nrcy5pbmRleE9mKHRoaXMuYmxvY2spO1xyXG4gICAgaWYofmkpIHtcclxuICAgICAgaWYoYW5nbGU9PT0wKSB7XHJcbiAgICAgICAgdGhpcy5ib29rLm1lcmdlU2hlZXRCbG9ja3MoaSwgdGhpcy5ib29rLnNoZWV0QmxvY2tzLmxlbmd0aC1pKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICB0aGlzLmJvb2subWVyZ2VTaGVldEJsb2NrcygwLCBpKzEpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjYWxjQmxvY2tGb3JjZShibG9jaywgb2JqZWN0LCBhbmdsZSwgdmVsb2NpdHksIGNvcm5lckhlaWdodCkge1xyXG4gICAgcmV0dXJuIGJsb2NrLmZvcmNlPyBibG9jay5mb3JjZShvYmplY3QsIGFuZ2xlLCB2ZWxvY2l0eSwgY29ybmVySGVpZ2h0KTogMDtcclxuICB9XHJcblxyXG4gIGNhbGNCbG9ja0Nvcm5lckZvcmNlKGJsb2NrLCBvYmplY3QsIGFuZ2xlLCB2ZWxvY2l0eSwgY29ybmVySGVpZ2h0KSB7XHJcbiAgICByZXR1cm4gYmxvY2suY29ybmVyRm9yY2U/IGJsb2NrLmNvcm5lckZvcmNlKG9iamVjdCwgYW5nbGUsIHZlbG9jaXR5LCBjb3JuZXJIZWlnaHQpOiAwO1xyXG4gIH1cclxuXHJcbiAgbm90aWZ5QmVmb3JlQW5pbWF0aW9uKCkge1xyXG4gICAgbGV0IHJlcztcclxuICAgIGlmKHRoaXMuYW5pbWF0aW9uTm90aWZpY2F0aW9uKSB7XHJcbiAgICAgIHJlcyA9IFByb21pc2UucmVqZWN0KCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgdGhpcy5hbmltYXRpb25Ob3RpZmljYXRpb24gPSB0cnVlO1xyXG4gICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoe1xyXG4gICAgICAgIHR5cGU6ICdiZWZvcmVBbmltYXRpb24nXHJcbiAgICAgIH0pO1xyXG4gICAgICByZXMgPSB0aGlzLmxheWVyTWFuYWdlci5oaWRlKCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzO1xyXG4gIH1cclxuXHJcbiAgbm90aWZ5QWZ0ZXJBbmltYXRpb24oKSB7XHJcbiAgICBpZih0aGlzLmFuaW1hdGlvbk5vdGlmaWNhdGlvbikge1xyXG4gICAgICBjb25zdCBwID0gdGhpcy5nZXRQYWdlKCk7XHJcbiAgICAgIGlmKHRoaXMudXNlckRpcmVjdGlvbi5sYXN0VG9wUGFnZSE9PXApIHtcclxuICAgICAgICB0aGlzLnVzZXJEaXJlY3Rpb24uZGlyZWN0aW9uID0gTWF0aC5zaWduKHAtdGhpcy51c2VyRGlyZWN0aW9uLmxhc3RUb3BQYWdlKTtcclxuICAgICAgICB0aGlzLnVzZXJEaXJlY3Rpb24ubGFzdFRvcFBhZ2UgPSBwO1xyXG4gICAgICB9XHJcbiAgICAgIGRlbGV0ZSB0aGlzLmFuaW1hdGlvbk5vdGlmaWNhdGlvbjtcclxuICAgICAgdGhpcy5sYXllck1hbmFnZXIuc2hvdygpO1xyXG4gICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoe1xyXG4gICAgICAgIHR5cGU6ICdhZnRlckFuaW1hdGlvbidcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBnZXRVc2VyRGlyZWN0aW9uKCkge1xyXG4gICAgcmV0dXJuIHRoaXMudXNlckRpcmVjdGlvbjtcclxuICB9XHJcblxyXG4gIGNvbm5lY3RQaHlzaWNzKGJsb2NrLCBtYXNzLCBhbmdsZSwgdmVsb2NpdHksIGZsZXhpYmlsaXR5LCBjb3ZlckhlaWdodCwgc2ltdWxhdGVDbGIsIHJlbW92ZUNsYiwgcHJvZ3Jlc3NDbGIpIHtcclxuICAgIGNvbnN0IHR5cGUgPSAoKT0+IHRoaXMuaG92ZXJJbmZvPyAnaG92ZXInOiAodGhpcy5kcmFnSW5mbz8gJ2RyYWcnOiAnZnJlZScpLFxyXG4gICAgICByZXMgPSB0aGlzLnNoZWV0UGh5c2ljcy5nZXRTaXplKCk/IFByb21pc2UucmVzb2x2ZSgpOiB0aGlzLm5vdGlmeUJlZm9yZUFuaW1hdGlvbigpO1xyXG4gICAgcmV0dXJuIHJlcy50aGVuKCgpPT4ge1xyXG4gICAgICBibG9jay5waHlzaWNJZCA9IHRoaXMuc2hlZXRQaHlzaWNzLmFkZE9iamVjdChcclxuICAgICAgICBtYXNzLFxyXG4gICAgICAgIGFuZ2xlLFxyXG4gICAgICAgIHZlbG9jaXR5LFxyXG4gICAgICAgIGZsZXhpYmlsaXR5LFxyXG4gICAgICAgIGNvdmVySGVpZ2h0LFxyXG4gICAgICAgIChhbmdsLCBjaCk9PiB7XHJcbiAgICAgICAgICBzaW11bGF0ZUNsYihhbmdsLCBjaCk7XHJcbiAgICAgICAgICBwcm9ncmVzc0NsYihibG9jaywgTWF0aC5hYnMoYW5nbGUtYW5nbCkvTWF0aC5QSSwgJ3Byb2Nlc3MnLCB0eXBlKCkpO1xyXG4gICAgICAgICAgdGhpcy51cGRhdGVUaHJlZSgpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgKGFuZ2wsIGNoKT0+IHtcclxuICAgICAgICAgIHJlbW92ZUNsYihhbmdsLCBjaCk7XHJcbiAgICAgICAgICBkZWxldGUgYmxvY2sucGh5c2ljSWQ7XHJcbiAgICAgICAgICBwcm9ncmVzc0NsYihibG9jaywgTWF0aC5hYnMoYW5nbGUtYW5nbCkvTWF0aC5QSSwgJ2ZpbmlzaCcsIHR5cGUoKSk7XHJcbiAgICAgICAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpPT4ge1xyXG4gICAgICAgICAgICBpZighdGhpcy5zaGVldFBoeXNpY3MuZ2V0U2l6ZSgpKSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5ub3RpZnlBZnRlckFuaW1hdGlvbigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIHRoaXMudXBkYXRlVGhyZWUoKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIChvYmplY3QsIGFuZ2xlLCB2ZWxvY2l0eSwgY29ybmVySGVpZ2h0KT0+IHRoaXMuY2FsY0Jsb2NrRm9yY2UoYmxvY2ssIG9iamVjdCwgYW5nbGUsIHZlbG9jaXR5LCBjb3JuZXJIZWlnaHQpLFxyXG4gICAgICAgIChvYmplY3QsIGFuZ2xlLCB2ZWxvY2l0eSwgY29ybmVySGVpZ2h0KT0+IHRoaXMuY2FsY0Jsb2NrQ29ybmVyRm9yY2UoYmxvY2ssIG9iamVjdCwgYW5nbGUsIHZlbG9jaXR5LCBjb3JuZXJIZWlnaHQpXHJcbiAgICAgICk7XHJcbiAgICAgIHByb2dyZXNzQ2xiKGJsb2NrLCAwLCAnaW5pdCcsIHR5cGUoKSk7XHJcbiAgICAgIHJldHVybiBibG9jaztcclxuICAgIH0pLmNhdGNoKCgpPT4gdW5kZWZpbmVkKTtcclxuICB9XHJcblxyXG4gIHVwZGF0ZShkdCkge1xyXG4gICAgdGhpcy5sYXN0TW91c2VQb3MudCs9ZHQ7XHJcbiAgICBpZih0aGlzLmlzUHJvY2Vzc2luZygpICYmIHRoaXMubGFzdE1vdXNlUG9zLnBhZ2VYIT09dW5kZWZpbmVkICYmIHRoaXMubGFzdE1vdXNlUG9zLnQtKHRoaXMubGFzdE1vdXNlUG9zLmxhc3RUIHx8IDApPjAuMjUgJiYgIXRoaXMuaG92ZXJJbmZvICYmICF0aGlzLmRyYWdJbmZvKSB7XHJcbiAgICAgIHRoaXMubGFzdE1vdXNlUG9zLmxhc3RUID0gdGhpcy5sYXN0TW91c2VQb3MudDtcclxuICAgICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKT0+IHtcclxuICAgICAgICAkKHRoaXMudmlzdWFsLmVsZW1lbnQpLnRyaWdnZXIoJC5FdmVudCgnbW91c2Vtb3ZlJywgdGhpcy5sYXN0TW91c2VQb3MpKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICB0aGlzLnNoZWV0UGh5c2ljcy5zaW11bGF0ZShkdCk7XHJcbiAgfVxyXG5cclxuICBzcGxpdFNoZWV0QmxvY2soaSwgbGVmdFNpemUpIHtcclxuICAgIGNvbnN0IGJsb2NrID0gdGhpcy5zaGVldEJsb2Nrc1tpXTtcclxuICAgIGlmKGJsb2NrICYmIGxlZnRTaXplPGJsb2NrLmdldFNpemUoKSkge1xyXG4gICAgICBjb25zdCBuZXdCbG9jayA9IG5ldyBTaGVldEJsb2NrKHRoaXMudmlzdWFsLCB7Li4udGhpcy5wLCBzZXRUZXh0dXJlOiB0aGlzLnNldFBhZ2VUZXh0dXJlLmJpbmQodGhpcyl9LCBibG9jay5wLmZpcnN0LCBibG9jay5wLmZpcnN0K2xlZnRTaXplLCBibG9jay5hbmdsZSwgYmxvY2suc3RhdGUpO1xyXG4gICAgICBibG9jay5zZXQoYmxvY2suYW5nbGUsIGJsb2NrLnN0YXRlLCBibG9jay5jb3JuZXIuaGVpZ2h0LCBibG9jay5wLmZpcnN0K2xlZnRTaXplLCBibG9jay5wLmxhc3QpO1xyXG4gICAgICB0aGlzLmFkZFNoZWV0QmxvY2soaSwgbmV3QmxvY2spO1xyXG4gICAgICByZXR1cm4gW25ld0Jsb2NrLCBibG9ja107XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBtZXJnZVNoZWV0QmxvY2tzKGZpcnN0LCBzaXplKSB7XHJcbiAgICBpZihmaXJzdDx0aGlzLnNoZWV0QmxvY2tzLmxlbmd0aCkge1xyXG4gICAgICBzaXplID0gTWF0aC5taW4odGhpcy5zaGVldEJsb2Nrcy5sZW5ndGgtZmlyc3QsIHNpemUpO1xyXG4gICAgICBjb25zdCBmaXJzdEJsb2NrID0gdGhpcy5zaGVldEJsb2Nrc1tmaXJzdF0sIGxhc3RCbG9jayA9IHRoaXMuc2hlZXRCbG9ja3NbZmlyc3Qrc2l6ZS0xXTtcclxuICAgICAgZmlyc3RCbG9jay5zZXQoZmlyc3RCbG9jay5hbmdsZSwgZmlyc3RCbG9jay5zdGF0ZSwgZmlyc3RCbG9jay5jb3JuZXIuaGVpZ2h0LCBmaXJzdEJsb2NrLnAuZmlyc3QsIGxhc3RCbG9jay5wLmxhc3QpO1xyXG4gICAgICB0aGlzLnJlbW92ZVNoZWV0QmxvY2tzKGZpcnN0KzEsIHNpemUtMSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzZXRTaGVldEJsb2NrcyhhbmdsZSwgc3RhdGUpIHtcclxuICAgIGlmKHN0YXRlPT09J2Nsb3NlZCcpIHtcclxuICAgICAgdGhpcy5jbG9zZWRBbmdsZSA9IGFuZ2xlO1xyXG4gICAgfVxyXG4gICAgdGhpcy5zaGVldEJsb2Nrcy5mb3JFYWNoKChzKT0+IHtcclxuICAgICAgaWYoIXMucGh5c2ljSWQpIHtcclxuICAgICAgICBzLnNldChhbmdsZSwgc3RhdGUpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHNldChhbmdsZSwgaGVpZ2h0PTApIHtcclxuICAgIHRoaXMuYW5nbGUgPSBhbmdsZTtcclxuICAgIGNvbnN0IFBJID0gTWF0aC5QSTtcclxuICAgIGlmKGFuZ2xlPFBJLzQpIHtcclxuICAgICAgdGhpcy5iaW5kZXIuc2V0KDApO1xyXG5cclxuICAgICAgdGhpcy5iaW5kZXIuc2V0TGVmdCgtUEkvMisyKmFuZ2xlKTtcclxuICAgICAgdGhpcy5sZWZ0Q292ZXIuc2V0KFBJLzIsJ29wZW5lZCcsaGVpZ2h0KTtcclxuXHJcbiAgICAgIHRoaXMuc2V0U2hlZXRCbG9ja3MoMCwnY2xvc2VkJyk7XHJcblxyXG4gICAgICB0aGlzLmJpbmRlci5zZXRSaWdodCgwKTtcclxuICAgICAgdGhpcy5yaWdodENvdmVyLnNldCgwLCdjbG9zZWQnLDApO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZihhbmdsZTwyKlBJLzQpIHtcclxuICAgICAgY29uc3QgYT0yKihhbmdsZS1QSS80KTtcclxuICAgICAgdGhpcy5iaW5kZXIuc2V0KGEpO1xyXG5cclxuICAgICAgdGhpcy5iaW5kZXIuc2V0TGVmdCgtYSk7XHJcbiAgICAgIHRoaXMubGVmdENvdmVyLnNldChQSS8yK2EsJ29wZW5lZCcsaGVpZ2h0KTtcclxuXHJcbiAgICAgIHRoaXMuc2V0U2hlZXRCbG9ja3MoYSwnY2xvc2VkJyk7XHJcblxyXG4gICAgICB0aGlzLmJpbmRlci5zZXRSaWdodCgtYSk7XHJcbiAgICAgIHRoaXMucmlnaHRDb3Zlci5zZXQoYSwnY2xvc2VkJywwKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYoYW5nbGU8MypQSS80KSB7XHJcbiAgICAgIGNvbnN0IGE9MiooYW5nbGUtUEkvMik7XHJcbiAgICAgIHRoaXMuYmluZGVyLnNldChQSS8yKTtcclxuXHJcbiAgICAgIHRoaXMuYmluZGVyLnNldExlZnQoLVBJLzIpO1xyXG4gICAgICB0aGlzLmxlZnRDb3Zlci5zZXQoUEksJ29wZW5lZCcsMCk7XHJcblxyXG4gICAgICB0aGlzLmJpbmRlci5zZXRSaWdodCgtUEkvMik7XHJcbiAgICAgIHRoaXMucmlnaHRDb3Zlci5zZXQoYSwnb3BlbmVkJyxoZWlnaHQpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZihhbmdsZTw0KlBJLzQpIHtcclxuICAgICAgY29uc3QgYT0yKihhbmdsZS0zKlBJLzQpK1BJLzI7XHJcbiAgICAgIHRoaXMuYmluZGVyLnNldChhKTtcclxuXHJcbiAgICAgIHRoaXMuYmluZGVyLnNldExlZnQoLWEpO1xyXG4gICAgICB0aGlzLmxlZnRDb3Zlci5zZXQoYSwnY2xvc2VkJywwKTtcclxuXHJcbiAgICAgIHRoaXMuc2V0U2hlZXRCbG9ja3MoYSwnY2xvc2VkJyk7XHJcblxyXG4gICAgICB0aGlzLmJpbmRlci5zZXRSaWdodCgtUEkvMik7XHJcbiAgICAgIHRoaXMucmlnaHRDb3Zlci5zZXQoUEkvMiwnb3BlbmVkJyxoZWlnaHQpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZihhbmdsZTw1KlBJLzQpIHtcclxuICAgICAgdGhpcy5iaW5kZXIuc2V0KFBJKTtcclxuXHJcbiAgICAgIHRoaXMuYmluZGVyLnNldExlZnQoLVBJKTtcclxuICAgICAgdGhpcy5sZWZ0Q292ZXIuc2V0KFBJLCdjbG9zZWQnLDApO1xyXG5cclxuICAgICAgdGhpcy5zZXRTaGVldEJsb2NrcyhQSSwnY2xvc2VkJyk7XHJcblxyXG4gICAgICB0aGlzLmJpbmRlci5zZXRSaWdodCgtUEkvMi0yKihhbmdsZS1QSSkpO1xyXG4gICAgICB0aGlzLnJpZ2h0Q292ZXIuc2V0KFBJLzIsJ29wZW5lZCcsaGVpZ2h0KTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYoYW5nbGU8NipQSS80KSB7XHJcbiAgICAgIGNvbnN0IGE9MiooYW5nbGUtNSpQSS80KTtcclxuICAgICAgdGhpcy5iaW5kZXIuc2V0KFBJLWEpO1xyXG5cclxuICAgICAgdGhpcy5iaW5kZXIuc2V0TGVmdCgtUEkrYSk7XHJcbiAgICAgIHRoaXMubGVmdENvdmVyLnNldChQSS1hLCdjbG9zZWQnLDApO1xyXG5cclxuICAgICAgdGhpcy5zZXRTaGVldEJsb2NrcyhQSS1hLCdjbG9zZWQnKTtcclxuXHJcbiAgICAgIHRoaXMuYmluZGVyLnNldFJpZ2h0KC1QSSthKTtcclxuICAgICAgdGhpcy5yaWdodENvdmVyLnNldChQSS8yLWEsJ29wZW5lZCcsaGVpZ2h0KTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYoYW5nbGU8NypQSS80KSB7XHJcbiAgICAgIGNvbnN0IGE9MiooYW5nbGUtNipQSS80KTtcclxuICAgICAgdGhpcy5iaW5kZXIuc2V0KFBJLzIpO1xyXG5cclxuICAgICAgdGhpcy5iaW5kZXIuc2V0TGVmdCgtUEkvMik7XHJcbiAgICAgIHRoaXMubGVmdENvdmVyLnNldChQSS1hLCdvcGVuZWQnLGhlaWdodCk7XHJcblxyXG4gICAgICB0aGlzLmJpbmRlci5zZXRSaWdodCgtUEkvMik7XHJcbiAgICAgIHRoaXMucmlnaHRDb3Zlci5zZXQoMCwnb3BlbmVkJywwKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYoYW5nbGU8OCpQSS80KSB7XHJcbiAgICAgIGNvbnN0IGE9MiooYW5nbGUtNypQSS80KTtcclxuICAgICAgdGhpcy5iaW5kZXIuc2V0KFBJLzItYSk7XHJcblxyXG4gICAgICB0aGlzLmJpbmRlci5zZXRMZWZ0KC1QSS8yKTtcclxuICAgICAgdGhpcy5sZWZ0Q292ZXIuc2V0KFBJLzIsJ29wZW5lZCcsaGVpZ2h0KTtcclxuXHJcbiAgICAgIHRoaXMuc2V0U2hlZXRCbG9ja3MoUEkvMi1hLCdjbG9zZWQnKTtcclxuXHJcbiAgICAgIHRoaXMuYmluZGVyLnNldFJpZ2h0KC1QSS8yK2EpO1xyXG4gICAgICB0aGlzLnJpZ2h0Q292ZXIuc2V0KFBJLzItYSwnY2xvc2VkJywwKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHN0YXRpYyBjcmVhdGVTaWRlVGV4dHVyZShjb2xvciwgdHlwZSkge1xyXG4gICAgY29uc3QgakMgPSAkKCc8Y2FudmFzIHdpZHRoPVwiOFwiIGhlaWdodD1cIjhcIj48L2NhbnZhcz4nKTtcclxuICAgIGlmKHR5cGU9PT0nY29sb3InKSB7XHJcbiAgICAgIGNvbnN0IGN0eCA9IGpDWzBdLmdldENvbnRleHQoJzJkJyk7XHJcbiAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgY3R4LmZpbGxTdHlsZSA9IEdyYXBoVXRpbHMuY29sb3IyUmdiYShjb2xvciwgMSk7XHJcbiAgICAgIGN0eC5yZWN0KDAsIDAsIDgsIDcpO1xyXG4gICAgICBjdHguZmlsbCgpO1xyXG4gICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgIGN0eC5maWxsU3R5bGUgPSBHcmFwaFV0aWxzLmNvbG9yMlJnYmEoR3JhcGhVdGlscy5pbnZlcnNlQ29sb3IoY29sb3IsMC41KSwgMSk7XHJcbiAgICAgIGN0eC5yZWN0KDAsIDcsIDgsIDEpO1xyXG4gICAgICBjdHguZmlsbCgpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGpDWzBdO1xyXG4gIH1cclxuXHJcbiAgcHJlcGFyZVByb3BzKHByb3BzKSB7XHJcbiAgICByZXR1cm4gdGhpcy5jYWxjUHJvcHMoQm9vay5tZXJnZVByb3BzKGJvb2tQcm9wcygpLCBwcm9wcykpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIG1lcmdlUHJvcHMoZmlyc3QsIHNlY29uZCkge1xyXG4gICAgc2Vjb25kID0gc2Vjb25kIHx8IHt9O1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgLi4uZmlyc3QsXHJcbiAgICAgIC4uLnNlY29uZCxcclxuICAgICAgc2hlZXQ6IHtcclxuICAgICAgICAuLi5maXJzdC5zaGVldCxcclxuICAgICAgICAuLi5zZWNvbmQuc2hlZXQsXHJcbiAgICAgIH0sXHJcbiAgICAgIGNvdmVyOiB7XHJcbiAgICAgICAgLi4uZmlyc3QuY292ZXIsXHJcbiAgICAgICAgLi4uc2Vjb25kLmNvdmVyLFxyXG4gICAgICB9LFxyXG4gICAgICBwYWdlOiB7XHJcbiAgICAgICAgLi4uZmlyc3QucGFnZSxcclxuICAgICAgICAuLi5zZWNvbmQucGFnZSxcclxuICAgICAgfSxcclxuICAgICAgY3NzTGF5ZXJQcm9wczoge1xyXG4gICAgICAgIC4uLmZpcnN0LmNzc0xheWVyUHJvcHMsXHJcbiAgICAgICAgLi4uc2Vjb25kLmNzc0xheWVyUHJvcHMsXHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBjYWxjUHJvcHMocHJvcHMpIHtcclxuICAgIGNvbnN0IHAgPSB7XHJcbiAgICAgIC4uLnByb3BzLFxyXG4gICAgICBzaGVldDoge1xyXG4gICAgICAgIC4uLnByb3BzLnNoZWV0XHJcbiAgICAgIH0sXHJcbiAgICAgIGNvdmVyOiB7XHJcbiAgICAgICAgLi4ucHJvcHMuc2hlZXQsXHJcbiAgICAgICAgLi4ucHJvcHMuY292ZXJcclxuICAgICAgfSxcclxuICAgICAgcGFnZToge1xyXG4gICAgICAgIC4uLnByb3BzLnNoZWV0LFxyXG4gICAgICAgIC4uLnByb3BzLnBhZ2VcclxuICAgICAgfSxcclxuICAgICAgY3NzTGF5ZXJQcm9wczoge1xyXG4gICAgICAgIC4uLnByb3BzLmNzc0xheWVyUHJvcHMsXHJcbiAgICAgICAgJFxyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgc2NhbGUgPSAxMCxcclxuICAgIGhlaWdodCA9IHNjYWxlKnAuaGVpZ2h0LFxyXG4gICAgd2lkdGggPSBzY2FsZSpwLndpZHRoLFxyXG4gICAgZmxpcFByb2dyZXNzQ2xiID0gKCk9PiB1bmRlZmluZWQsXHJcbiAgICBzaGVldCA9IHtcclxuICAgICAgc2lkZVRleHR1cmU6IHAuc2hlZXQuc2lkZVRleHR1cmUgfHwgQm9vay5jcmVhdGVTaWRlVGV4dHVyZShwLnNoZWV0LmNvbG9yLCBwLnNoZWV0LnNpZGUpLFxyXG4gICAgfSxcclxuICAgIGNvdmVyID0ge1xyXG4gICAgICAuLi5zaGVldCxcclxuICAgICAgLi4ucC5jb3ZlcixcclxuICAgICAgZGVwdGg6IHNjYWxlKnAuY292ZXIuZGVwdGgsXHJcbiAgICAgIHdpZHRoOiB3aWR0aCxcclxuICAgICAgaGVpZ2h0OiBoZWlnaHQsXHJcbiAgICAgIHBhZGRpbmc6IHNjYWxlKnAuY292ZXIucGFkZGluZ1xyXG4gICAgfSxcclxuICAgIHBhZ2UgPSB7XHJcbiAgICAgIC4uLnNoZWV0LFxyXG4gICAgICAuLi5wLnBhZ2UsXHJcbiAgICAgIGRlcHRoOiBzY2FsZSpwLnBhZ2UuZGVwdGgsXHJcbiAgICAgIHdpZHRoOiBjb3Zlci53aWR0aCAtIGNvdmVyLnBhZGRpbmcsXHJcbiAgICAgIGhlaWdodDogY292ZXIuaGVpZ2h0IC0gMipjb3Zlci5wYWRkaW5nXHJcbiAgICB9LFxyXG4gICAgbWFya2VyID0ge1xyXG4gICAgICB1c2U6IGZhbHNlLFxyXG4gICAgICBjb2xvcjogMFhGRjAwMDAsXHJcbiAgICAgIHNpemU6IHNjYWxlKjAuMDAxXHJcbiAgICB9O1xyXG4gICAgaWYoY292ZXIuY29sb3IhPT1zaGVldC5jb2xvciAmJiAhcC5jb3Zlci5zaWRlVGV4dHVyZSkge1xyXG4gICAgICBjb3Zlci5zaWRlVGV4dHVyZSA9IEJvb2suY3JlYXRlU2lkZVRleHR1cmUoY292ZXIuY29sb3IsIGNvdmVyLnNpZGUpO1xyXG4gICAgfVxyXG4gICAgaWYocGFnZS5jb2xvciE9PXNoZWV0LmNvbG9yICYmICFwLnBhZ2Uuc2lkZVRleHR1cmUpIHtcclxuICAgICAgcGFnZS5zaWRlVGV4dHVyZSA9IEJvb2suY3JlYXRlU2lkZVRleHR1cmUocGFnZS5jb2xvciwgcGFnZS5zaWRlKTtcclxuICAgIH1cclxuICAgIGlmKHAuY3NzTGF5ZXJzTG9hZGVyKSB7XHJcbiAgICAgIHAuY3NzTGF5ZXJzTG9hZGVyID0gdGhpcy5jc3NMYXllcnNMb2FkZXIocC5jc3NMYXllcnNMb2FkZXIpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHsuLi5wLCBzY2FsZSwgaGVpZ2h0LCB3aWR0aCwgZmxpcFByb2dyZXNzQ2xiLCBjb3ZlciwgcGFnZSwgbWFya2VyfTtcclxuICB9XHJcblxyXG4gIGNzc0xheWVyc0xvYWRlcihsb2FkZXIpIHtcclxuICAgIHJldHVybiAobiwgY2xiKT0+IHtcclxuICAgICAgcmV0dXJuIGxvYWRlcihuLCAobHMpPT4ge1xyXG4gICAgICAgIGNvbnN0IG5scyA9IFtdO1xyXG4gICAgICAgIGZvcihsZXQgbCBvZiBscykge1xyXG4gICAgICAgICAgbmxzLnB1c2goe1xyXG4gICAgICAgICAgICAuLi5sLFxyXG4gICAgICAgICAgICBqczogdGhpcy5jc3NMYXllckpzT2JqZWN0KGwpXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGNsYihubHMpO1xyXG4gICAgICB9KTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBjc3NMYXllckpzT2JqZWN0KGwpIHtcclxuICAgIGNvbnN0IGNsSWZFeCA9IChmKT0+IHtcclxuICAgICAgbGV0IHI7XHJcbiAgICAgIGlmKGYpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgciA9IGYoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2goZSkge1xyXG4gICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHI7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIChjLCBwKT0+IHtcclxuICAgICAgbGV0IG8gPSB7fTtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBpbml0ID0gZXZhbChsLmpzKTtcclxuICAgICAgICBvID0gaW5pdD8gaW5pdChjLCBwKSB8fCB7fToge307XHJcbiAgICAgIH1cclxuICAgICAgY2F0Y2goZSkge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XHJcbiAgICAgIH1cclxuICAgICAgY29uc3Qgbm8gPSB0aGlzLmNzc0xheWVySnNPYmplY3RJbml0KGMsICBwKSwgcm8gPSB7fTtcclxuICAgICAgZm9yKGxldCBuIG9mIFsnaGlkZScsICdoaWRkZW4nLCAnc2hvdycsICdzaG93bicsICdkaXNwb3NlJ10pIHtcclxuICAgICAgICByb1tuXSA9ICgpPT4ge1xyXG4gICAgICAgICAgY2xJZkV4KG5vW25dKTtcclxuICAgICAgICAgIGNsSWZFeChvW25dKTtcclxuICAgICAgICB9O1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBybztcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBjc3NMYXllckpzT2JqZWN0SW5pdChjLCBwKSB7XHJcbiAgICBjLmZpbmQoJy5nby10by1wYWdlJykub24oJ2NsaWNrJywgKGUpPT4ge1xyXG4gICAgICBsZXQgbiA9ICQoZS50YXJnZXQpO1xyXG4gICAgICB3aGlsZShuLmxlbmd0aCAmJiAhbi5oYXNDbGFzcygnZ28tdG8tcGFnZScpKSB7XHJcbiAgICAgICAgbiA9ICQoblswXS5wYXJlbnROb2RlKTtcclxuICAgICAgfVxyXG4gICAgICBuID0gcGFyc2VJbnQobi5hdHRyKCdkYXRhLW51bWJlcicpKTtcclxuICAgICAgaWYoIWlzTmFOKG4pKSB7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIHAuc2NlbmUuY3RybC5nb1RvUGFnZShuLTEpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIGNvbnN0IHlzID0gYy5maW5kKCcueW91dHViZScpO1xyXG4gICAgaWYoeXMubGVuZ3RoKSB7XHJcbiAgICAgIHlzLmh0bWwoJzxkaXYgc3R5bGU9XCJ3aWR0aDoxMDAlO2hlaWdodDoxMDAlO1wiPjwvZGl2PicpO1xyXG4gICAgICBZb3VUdWJlQXBpLmluaXQoKS50aGVuKCgpPT4ge1xyXG4gICAgICAgIGZvcihsZXQgaT0wOyBpPHlzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICBsZXQgeSA9IHlzW2ldO1xyXG4gICAgICAgICAgY29uc3QgbiA9ICQoeSksIHBsYXllciA9IG5ldyBZVC5QbGF5ZXIobi5maW5kKCdkaXYnKVswXSwge3ZpZGVvSWQ6IG4uYXR0cignZGF0YS1pZCcpfSk7XHJcbiAgICAgICAgICBuWzBdLnBsYXllciA9IHBsYXllcjtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgaGlkZTogKCk9PiB7XHJcbiAgICAgICAgaWYodGhpcy5wZW5kaW5nUGxheWVycy5sZW5ndGgpIHtcclxuICAgICAgICAgIHRoaXMucGVuZGluZ1BsYXllcnMgPSBbXTtcclxuICAgICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudCh7XHJcbiAgICAgICAgICAgIHR5cGU6ICdwZW5kaW5nUGxheWVycydcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjLmZpbmQoJy5wYXVzZS1vbi1oaWRlJykuZWFjaCgoXywgcCk9PiB0aGlzLmNzc0ZzLnBhdXNlKHApKTtcclxuICAgICAgfSxcclxuICAgICAgc2hvd246ICgpPT4gYy5maW5kKCcucGxheS1vbi1zaG93bicpLmVhY2goKF8sIHApPT4gdGhpcy5jc3NGcy5wbGF5KHApKSxcclxuICAgICAgZGlzcG9zZTogKCk9PiBjLmZpbmQoJy5wYXVzZS1vbi1oaWRlJykuZWFjaCgoXywgcCk9PiB0aGlzLmNzc0ZzLnBhdXNlKHApKVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGNzc0ZzID0ge1xyXG4gICAgcGxheTogKHBsYXllcik9PiB7XHJcbiAgICAgIGlmKHBsYXllci5wbGF5KSB7XHJcbiAgICAgICAgcGxheWVyLmZiM2ROb1BsYXkgPSBmYWxzZTtcclxuICAgICAgICAocGxheWVyLnBsYXkoKXx8e2NhdGNoOiAoKT0+IHVuZGVmaW5lZH0pLmNhdGNoKChlKT0+IHtcclxuICAgICAgICAgIGlmKCFwbGF5ZXIuZmIzZE5vUGxheSAmJiBlLm5hbWU9PT0nTm90QWxsb3dlZEVycm9yJykge1xyXG4gICAgICAgICAgICB0aGlzLnBlbmRpbmdQbGF5ZXJzLnB1c2gocGxheWVyKTtcclxuICAgICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KHtcclxuICAgICAgICAgICAgICB0eXBlOiAncGVuZGluZ1BsYXllcnMnXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2UgaWYoJChwbGF5ZXIpLmhhc0NsYXNzKCd5b3V0dWJlJykpIHtcclxuICAgICAgICBjb25zdCBwID0gcGxheWVyLnBsYXllcjtcclxuICAgICAgICBwbGF5ZXIuZmIzZE5vUGxheSA9IGZhbHNlO1xyXG4gICAgICAgIGlmKHAgJiYgcC5wbGF5VmlkZW8pIHtcclxuICAgICAgICAgIHAucGxheVZpZGVvKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgc2V0VGltZW91dCgoKT0+IHtcclxuICAgICAgICAgICAgaWYoIXBsYXllci5mYjNkTm9QbGF5KSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5jc3NGcy5wbGF5KHBsYXllcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0sIDIwMCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgcGF1c2U6IChwbGF5ZXIpPT4ge1xyXG4gICAgICBpZihwbGF5ZXIucGF1c2UpIHtcclxuICAgICAgICBwbGF5ZXIuZmIzZE5vUGxheSA9IHRydWU7XHJcbiAgICAgICAgcGxheWVyLnBhdXNlKCk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZigkKHBsYXllcikuaGFzQ2xhc3MoJ3lvdXR1YmUnKSkge1xyXG4gICAgICAgIGNvbnN0IHAgPSBwbGF5ZXIucGxheWVyO1xyXG4gICAgICAgIHBsYXllci5mYjNkTm9QbGF5ID0gdHJ1ZTtcclxuICAgICAgICBpZihwICYmIHAucGF1c2VWaWRlbykge1xyXG4gICAgICAgICAgcC5wYXVzZVZpZGVvKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vanMvY2xhc3Nlcy9Cb29rLmpzIiwiaW1wb3J0IHskLCBUSFJFRX0gZnJvbSAnLi4vbGlicyc7XHJcbmltcG9ydCBDb250cm9sbGVyIGZyb20gJ0NvbnRyb2xsZXInO1xyXG5pbXBvcnQge3Byb3BzIGFzICBib29rQ29udHJvbGxlclByb3BzfSBmcm9tICcuLi9wcm9wcy9ib29rQ29udHJvbGxlcic7XHJcbmltcG9ydCBFdmVudHNUb0FjdGlvbnMgZnJvbSAnRXZlbnRzVG9BY3Rpb25zJztcclxuaW1wb3J0IFN0YXRzIGZyb20gJ3N0YXRzLmpzJztcclxuaW1wb3J0IE9iamVjdDNEV2F0Y2hlciBmcm9tICdPYmplY3QzRFdhdGNoZXInO1xyXG5pbXBvcnQgRnVsbFNjcmVlblggZnJvbSAnRnVsbFNjcmVlblgnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQm9va0NvbnRyb2xsZXIgZXh0ZW5kcyBDb250cm9sbGVyIHtcclxuXHJcbiAgY29uc3RydWN0b3IoYm9vaywgdmlldywgcHJvcHMpIHtcclxuICAgIHN1cGVyKCk7XHJcbiAgICB0aGlzLm5hdmlnYXRpb25Db250cm9scyA9IHRydWU7XHJcbiAgICB0aGlzLmJvb2sgPSBib29rO1xyXG4gICAgdGhpcy52aXN1YWwgPSBib29rLnZpc3VhbDtcclxuICAgIHRoaXMucCA9IEJvb2tDb250cm9sbGVyLnByZXBhcmVQcm9wcyhwcm9wcyk7XHJcbiAgICB0aGlzLnAucnRsID0gYm9vay5wLnJ0bDtcclxuXHJcbiAgICB0aGlzLm9yYml0ID0gYm9vay52aXN1YWwuZ2V0T3JiaXQoKTtcclxuICAgIGJvb2suc2V0RmxpcFByb2dyZXNzQ2xiKHRoaXMudXBkYXRlVmlld0lmU3RhdGUuYmluZCh0aGlzKSk7XHJcbiAgICB0aGlzLnZpZXcgPSB2aWV3O1xyXG4gICAgdGhpcy5iaW5kQWN0aW9ucygpO1xyXG5cclxuICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgIHNtYXJ0UGFuOiAhdGhpcy5hY3Rpb25zWydjbWRTbWFydFBhbiddLmFjdGl2ZSxcclxuICAgICAgc2luZ2xlUGFnZTogdGhpcy5hY3Rpb25zWydjbWRTaW5nbGVQYWdlJ10uYWN0aXZlIHx8IHRoaXMuYWN0aW9uc1snY21kU2luZ2xlUGFnZSddLmFjdGl2ZUZvck1vYmlsZSAmJiB0aGlzLnZpc3VhbC5pc01vYmlsZSgpLFxyXG4gICAgICBzdGF0czogdGhpcy5hY3Rpb25zWydjbWRTdGF0cyddLmFjdGl2ZSxcclxuICAgICAgbGlnaHRpbmc6IHRoaXMucC5saWdodGluZy5kZWZhdWx0LFxyXG4gICAgICBhY3RpdmVTaWRlOiAxXHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuYm94cyA9IFtuZXcgVEhSRUUuQm94MygpLCBuZXcgVEhSRUUuQm94MygpXTtcclxuICAgIHRoaXMuYm9va1dhdGNoZXIgPSBuZXcgT2JqZWN0M0RXYXRjaGVyKHRoaXMudmlzdWFsLCAoKT0+IHtcclxuICAgICAgaWYodGhpcy5zdGF0ZS5zaW5nbGVQYWdlKSB7XHJcbiAgICAgICAgaWYodGhpcy5zdGF0ZS5hY3RpdmVTaWRlKSB7XHJcbiAgICAgICAgICB0aGlzLmJveHNbMF0uc2V0RnJvbU9iamVjdChib29rLnJpZ2h0Q292ZXIudGhyZWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgIHRoaXMuYm94c1swXS5zZXRGcm9tT2JqZWN0KGJvb2subGVmdENvdmVyLnRocmVlKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgdGhpcy5ib3hzWzBdLnNldEZyb21PYmplY3QoYm9vay5sZWZ0Q292ZXIudGhyZWUpO1xyXG4gICAgICAgIHRoaXMuYm94c1sxXS5zZXRGcm9tT2JqZWN0KGJvb2sucmlnaHRDb3Zlci50aHJlZSk7XHJcbiAgICAgICAgdGhpcy5ib3hzWzBdLnVuaW9uKHRoaXMuYm94c1sxXSk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHRoaXMuYm94c1swXTtcclxuICAgIH0pO1xyXG4gICAgdGhpcy5ib29rV2F0Y2hlci5zY2FsZSA9IHRoaXMucC5zY2FsZS5kZWZhdWx0O1xyXG4gICAgdGhpcy5ib29rLnNldFpvb20odGhpcy5ib29rV2F0Y2hlci5zY2FsZSwgdGhpcy5zdGF0ZS5zaW5nbGVQYWdlKTtcclxuXHJcbiAgICB0aGlzLlN0YXRzID0gbmV3IFN0YXRzKCk7XHJcbiAgICB0aGlzLlN0YXRzLmRvbUVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xyXG4gICAgdGhpcy5TdGF0cy5kb21FbGVtZW50LnN0eWxlLnRvcCA9ICcwcHgnO1xyXG5cclxuICAgIHRoaXMudmlzdWFsLnNldEV4dHJhTGlnaHRpbmcodGhpcy5zdGF0ZS5saWdodGluZyk7XHJcbiAgICB0aGlzLmJpbmRzID0ge1xyXG4gICAgICBvblNjcmVlbk1vZGVDaGFuZ2VkOiB0aGlzLm9uU2NyZWVuTW9kZUNoYW5nZWQuYmluZCh0aGlzKSxcclxuICAgICAgc3RhdHM6IHRoaXMuU3RhdHMudXBkYXRlLmJpbmQodGhpcy5TdGF0cyksXHJcbiAgICAgIG9uVXBkYXRlVmlldzogdGhpcy51cGRhdGVWaWV3LmJpbmQodGhpcylcclxuICAgIH1cclxuICAgIEZ1bGxTY3JlZW5YLmFkZEV2ZW50TGlzdGVuZXIodGhpcy52aWV3LmdldFBhcmVudENvbnRhaW5lcigpLm93bmVyRG9jdW1lbnQsIHRoaXMuYmluZHMub25TY3JlZW5Nb2RlQ2hhbmdlZCk7XHJcblxyXG4gICAgdGhpcy5jbWRTbWFydFBhbigpO1xyXG5cclxuICAgIGlmKHRoaXMudmlldy50ZW1wbGF0ZU9iamVjdC5hcHBMb2FkZWQpIHtcclxuICAgICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbih0aGlzLnZpZXcudGVtcGxhdGVPYmplY3QuYXBwTG9hZGVkKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmJvb2suZW5hYmxlTG9hZGluZ0FuaW1hdGlvbih0aGlzLnAubG9hZGluZ0FuaW1hdGlvbi5ib29rKTtcclxuICAgIGlmKHRoaXMucC5sb2FkaW5nQW5pbWF0aW9uLnNraW4pIHtcclxuICAgICAgdGhpcy5pbml0TG9hZGluZ0FuaW1hdGlvbigpO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuYm9vay5lbmFibGVMb2FkaW5nQW5pbWF0aW9uKHRoaXMucC5sb2FkaW5nQW5pbWF0aW9uLmJvb2spO1xyXG4gICAgdGhpcy5ib29rLnNldEF1dG9SZXNvbHV0aW9uKHRoaXMucC5hdXRvUmVzb2x1dGlvbi5lbmFibGVkLCB0aGlzLnAuYXV0b1Jlc29sdXRpb24uY29lZmZpY2llbnQpO1xyXG5cclxuICAgIHRoaXMudmlzdWFsLmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMudXBkYXRlVmlldy5iaW5kKHRoaXMpKTtcclxuICAgIHRoaXMuYm9vay5hZGRFdmVudExpc3RlbmVyKCdwZW5kaW5nUGxheWVycycsIHRoaXMudXBkYXRlVmlldy5iaW5kKHRoaXMpKTtcclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICBGdWxsU2NyZWVuWC5yZW1vdmVFdmVudExpc3RlbmVyKHRoaXMudmlldy5nZXRQYXJlbnRDb250YWluZXIoKS5vd25lckRvY3VtZW50LCB0aGlzLmJpbmRzLm9uU2NyZWVuTW9kZUNoYW5nZWQpO1xyXG4gICAgZGVsZXRlIHRoaXMuYm9vaztcclxuICAgIGRlbGV0ZSB0aGlzLnZpZXc7XHJcbiAgICBkZWxldGUgdGhpcy52aXN1YWw7XHJcbiAgfVxyXG5cclxuICBpbml0TG9hZGluZ0FuaW1hdGlvbigpIHtcclxuICAgIGNvbnN0IGhhbmRsZXIgPSAoKT0+IHtcclxuICAgICAgY29uc3QgcGFnZXMgPSB0aGlzLmJvb2suZ2V0VG9wUGFnZXMoKTtcclxuICAgICAgbGV0IHZpc2libGUgPSBmYWxzZTtcclxuICAgICAgZm9yKGxldCBuIG9mIHBhZ2VzKSB7XHJcbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLmJvb2suZ2V0UGFnZVN0YXRlKG4pO1xyXG4gICAgICAgIHZpc2libGUgPSBzdGF0ZT09PXVuZGVmaW5lZCB8fCBzdGF0ZT09PSdsb2FkaW5nJztcclxuICAgICAgICBpZih2aXNpYmxlKSB7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy52aWV3LnNldFN0YXRlKCd3aWRMb2FkaW5nJywge1xyXG4gICAgICAgIHZpc2libGVcclxuICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgdGhpcy5ib29rLmFkZEV2ZW50TGlzdGVuZXIoJ2JlZm9yZUFuaW1hdGlvbicsIGhhbmRsZXIpO1xyXG4gICAgdGhpcy5ib29rLmFkZEV2ZW50TGlzdGVuZXIoJ2FmdGVyQW5pbWF0aW9uJywgaGFuZGxlcik7XHJcbiAgICB0aGlzLmJvb2suYWRkRXZlbnRMaXN0ZW5lcignbG9hZFBhZ2UnLCBoYW5kbGVyKTtcclxuICAgIHRoaXMuYm9vay5hZGRFdmVudExpc3RlbmVyKCdsb2FkZWRQYWdlJywgaGFuZGxlcik7XHJcbiAgfVxyXG5cclxuICBlbmFibGVOYXZpZ2F0aW9uKGVuYWJsZSkge1xyXG4gICAgdGhpcy5uYXZpZ2F0aW9uQ29udHJvbHMgPSBlbmFibGU7XHJcbiAgfVxyXG5cclxuICBzZXRUb2NDdHJsKHRvY0N0cmwpIHtcclxuICAgIHRoaXMudG9jQ3RybCA9IHRvY0N0cmw7XHJcbiAgICB0aGlzLnRvY0N0cmwub25DaGFuZ2UgPSB0aGlzLnVwZGF0ZVZpZXcuYmluZCh0aGlzKTtcclxuICAgIHRoaXMudXBkYXRlVmlldygpO1xyXG4gIH1cclxuXHJcbiAgc2V0UHJpbnRlcihwcmludGVyKSB7XHJcbiAgICB0aGlzLnByaW50ZXIgPSBwcmludGVyO1xyXG4gICAgdGhpcy51cGRhdGVWaWV3KCk7XHJcbiAgfVxyXG5cclxuICBzZXRTb3VuZHMoc291bmRzKSB7XHJcbiAgICB0aGlzLnNvdW5kcyA9IHNvdW5kcztcclxuICAgIHNvdW5kcy5zZXRFbmFibGVkKHRoaXMuYWN0aW9uc1snY21kU291bmRzJ10uYWN0aXZlKTtcclxuICAgIHRoaXMudXBkYXRlVmlldygpO1xyXG4gIH1cclxuXHJcblxyXG4gIG9uU2NyZWVuTW9kZUNoYW5nZWQoZSkge1xyXG4gICAgdGhpcy51cGRhdGVWaWV3KCk7XHJcbiAgfVxyXG5cclxuICBjYW5ab29tSW4oKSB7XHJcbiAgICByZXR1cm4gIXRoaXMuc3RhdGUuc21hcnRQYW4gfHwgTWF0aC5hYnModGhpcy5ib29rV2F0Y2hlci5zY2FsZS10aGlzLnAuc2NhbGUubWF4KT50aGlzLnAuZXBzO1xyXG4gIH1cclxuXHJcbiAgY2FuWm9vbU91dCgpIHtcclxuICAgIHJldHVybiAhdGhpcy5zdGF0ZS5zbWFydFBhbiB8fCBNYXRoLmFicyh0aGlzLmJvb2tXYXRjaGVyLnNjYWxlLXRoaXMucC5zY2FsZS5taW4pPnRoaXMucC5lcHM7XHJcbiAgfVxyXG5cclxuICBjYW5EZWZhdWx0Wm9vbSgpIHtcclxuICAgIHJldHVybiB0aGlzLnN0YXRlLnNtYXJ0UGFuO1xyXG4gIH1cclxuXHJcbiAgc2V0Qm9va1pvb20oc2NhbGUpIHtcclxuICAgIC8vIHNldFRpbWVvdXQoKCk9PiB7XHJcbiAgICAvLyAgIGlmKE1hdGguYWJzKHRoaXMuYm9va1dhdGNoZXIuc2NhbGUtc2NhbGUpPDFlLTMpIHtcclxuICAgICAgICB0aGlzLmJvb2suc2V0Wm9vbShzY2FsZSwgdGhpcy5zdGF0ZS5zaW5nbGVQYWdlKTtcclxuICAgIC8vICAgfVxyXG4gICAgLy8gfSwgMTAwMCk7XHJcbiAgfVxyXG5cclxuICBjbWRab29tSW4oKSB7XHJcbiAgICBpZih0aGlzLnN0YXRlLnNtYXJ0UGFuKSB7XHJcbiAgICAgIHRoaXMuYm9va1dhdGNoZXIuc2NhbGUgPSBNYXRoLm1pbih0aGlzLnAuc2NhbGUubWF4LCB0aGlzLmJvb2tXYXRjaGVyLnNjYWxlK3RoaXMucC5zY2FsZS5kZWx0YSk7XHJcbiAgICAgIHRoaXMuc2V0Qm9va1pvb20odGhpcy5ib29rV2F0Y2hlci5zY2FsZSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgdGhpcy5vcmJpdC56b29tSW4oNi42KnRoaXMucC5zY2FsZS5kZWx0YS8wLjMyKTtcclxuICAgIH1cclxuICAgIHRoaXMudXBkYXRlVmlldygpO1xyXG4gIH1cclxuXHJcbiAgY21kWm9vbU91dCgpIHtcclxuICAgIGlmKHRoaXMuc3RhdGUuc21hcnRQYW4pIHtcclxuICAgICAgdGhpcy5ib29rV2F0Y2hlci5zY2FsZSA9IE1hdGgubWF4KHRoaXMucC5zY2FsZS5taW4sIHRoaXMuYm9va1dhdGNoZXIuc2NhbGUtdGhpcy5wLnNjYWxlLmRlbHRhKTtcclxuICAgICAgdGhpcy5zZXRCb29rWm9vbSh0aGlzLmJvb2tXYXRjaGVyLnNjYWxlKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICB0aGlzLm9yYml0Lnpvb21PdXQoNi42KnRoaXMucC5zY2FsZS5kZWx0YS8wLjMyKTtcclxuICAgIH1cclxuICAgIHRoaXMudXBkYXRlVmlldygpO1xyXG4gIH1cclxuXHJcbiAgc2V0U2NhbGUoc2NhbGUpIHtcclxuICAgIHRoaXMuYm9va1dhdGNoZXIuc2NhbGUgPSBNYXRoLm1pbih0aGlzLnAuc2NhbGUubWF4LCBNYXRoLm1heCh0aGlzLnAuc2NhbGUubWluLCBzY2FsZSkpO1xyXG4gICAgdGhpcy5zZXRCb29rWm9vbSh0aGlzLmJvb2tXYXRjaGVyLnNjYWxlKTtcclxuICAgIHRoaXMudXBkYXRlVmlldygpO1xyXG4gIH1cclxuXHJcbiAgY21kRGVmYXVsdFpvb20oKSB7XHJcbiAgICBpZih0aGlzLnN0YXRlLnNtYXJ0UGFuKSB7XHJcbiAgICAgIHRoaXMuYm9va1dhdGNoZXIuc2NhbGUgPSB0aGlzLnAuc2NhbGUuZGVmYXVsdDtcclxuICAgICAgdGhpcy5zZXRCb29rWm9vbSh0aGlzLmJvb2tXYXRjaGVyLnNjYWxlKTtcclxuICAgICAgdGhpcy51cGRhdGVWaWV3KCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjbWRUb2MoKSB7XHJcbiAgICBpZih0aGlzLnRvY0N0cmwpIHtcclxuICAgICAgdGhpcy50b2NDdHJsLnRvZ2xlKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjbWRGYXN0QmFja3dhcmQoKSB7XHJcbiAgICB0aGlzLnN0YXJ0RmxpcCh0aGlzLmJvb2suZmxpcExlZnQoNSkpO1xyXG4gIH1cclxuXHJcbiAgY21kQmFja3dhcmQoKSB7XHJcbiAgICBpZih0aGlzLnN0YXRlLnNpbmdsZVBhZ2UpIHtcclxuICAgICAgdGhpcy5zdGF0ZS5hY3RpdmVTaWRlID0gKHRoaXMuZ2V0UGFnZSgpKzEpJTI7XHJcbiAgICAgIGlmKHRoaXMuc3RhdGUuYWN0aXZlU2lkZSkge1xyXG4gICAgICAgIHRoaXMuc3RhdGUuYWN0aXZlU2lkZSA9IDA7XHJcbiAgICAgICAgdGhpcy51cGRhdGVWaWV3KCk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgdGhpcy5zdGFydEZsaXAodGhpcy5ib29rLmZsaXBMZWZ0KDEpKS50aGVuKChibG9jayk9PiB7XHJcbiAgICAgICAgICBpZihibG9jaykge1xyXG4gICAgICAgICAgICB0aGlzLnN0YXRlLmFjdGl2ZVNpZGUgPSAxO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgdGhpcy5zdGFydEZsaXAodGhpcy5ib29rLmZsaXBMZWZ0KDEpKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNtZEJpZ0JhY2t3YXJkKCkge1xyXG4gICAgdGhpcy5jbWRCYWNrd2FyZCgpO1xyXG4gIH1cclxuXHJcbiAgY21kRm9yd2FyZCgpIHtcclxuICAgIGlmKHRoaXMuc3RhdGUuc2luZ2xlUGFnZSkge1xyXG4gICAgICB0aGlzLnN0YXRlLmFjdGl2ZVNpZGUgPSAodGhpcy5nZXRQYWdlKCkrMSklMjtcclxuICAgICAgaWYoIXRoaXMuc3RhdGUuYWN0aXZlU2lkZSkge1xyXG4gICAgICAgIHRoaXMuc3RhdGUuYWN0aXZlU2lkZSA9IDE7XHJcbiAgICAgICAgdGhpcy51cGRhdGVWaWV3KCk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgdGhpcy5zdGFydEZsaXAodGhpcy5ib29rLmZsaXBSaWdodCgxKSkudGhlbigoYmxvY2spPT4ge1xyXG4gICAgICAgICAgaWYoYmxvY2spIHtcclxuICAgICAgICAgICAgdGhpcy5zdGF0ZS5hY3RpdmVTaWRlID0gMDtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHRoaXMuc3RhcnRGbGlwKHRoaXMuYm9vay5mbGlwUmlnaHQoMSkpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY21kQmlnRm9yd2FyZCgpIHtcclxuICAgIHRoaXMuY21kRm9yd2FyZCgpO1xyXG4gIH1cclxuXHJcbiAgY21kRmFzdEZvcndhcmQoKSB7XHJcbiAgICB0aGlzLnN0YXJ0RmxpcCh0aGlzLmJvb2suZmxpcFJpZ2h0KDUpKTtcclxuICB9XHJcblxyXG4gIGNtZFNhdmUoKSB7XHJcbiAgICB3aW5kb3cub3Blbih0aGlzLnAuZG93bmxvYWRVUkwsICdfYmxhbmsnKTtcclxuICB9XHJcblxyXG4gIGNtZFByaW50KCkge1xyXG4gICAgdGhpcy5wcmludGVyLnByaW50KCk7XHJcbiAgfVxyXG5cclxuICBjbWRGdWxsU2NyZWVuKCkge1xyXG4gICAgaWYoIUZ1bGxTY3JlZW5YLmFjdGl2YXRlZCgpKSB7XHJcbiAgICAgIEZ1bGxTY3JlZW5YLnJlcXVlc3QodGhpcy52aWV3LmdldFBhcmVudENvbnRhaW5lcigpKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBGdWxsU2NyZWVuWC5jYW5jZWwoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNtZFNtYXJ0UGFuKCkge1xyXG4gICAgdGhpcy5zdGF0ZS5zbWFydFBhbiA9ICF0aGlzLnN0YXRlLnNtYXJ0UGFuO1xyXG4gICAgaWYodGhpcy5zdGF0ZS5zbWFydFBhbikge1xyXG4gICAgICB0aGlzLm9yYml0Lm1pbkF6aW11dGhBbmdsZSA9IDA7XHJcbiAgICAgIHRoaXMub3JiaXQubWF4QXppbXV0aEFuZ2xlID0gMDtcclxuICAgICAgdGhpcy5vcmJpdC5taW5Qb2xhckFuZ2xlID0gMDtcclxuICAgIFx0dGhpcy5vcmJpdC5tYXhQb2xhckFuZ2xlID0gTWF0aC5QSS80O1xyXG4gICAgICB0aGlzLmJvb2tXYXRjaGVyLmVuYWJsZWQgPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHRoaXMub3JiaXQubWluQXppbXV0aEFuZ2xlID0gLUluZmluaXR5O1xyXG4gICAgICB0aGlzLm9yYml0Lm1heEF6aW11dGhBbmdsZSA9IEluZmluaXR5O1xyXG4gICAgICB0aGlzLm9yYml0Lm1pblBvbGFyQW5nbGUgPSAwO1xyXG4gICAgXHR0aGlzLm9yYml0Lm1heFBvbGFyQW5nbGUgPSBNYXRoLlBJO1xyXG4gICAgICB0aGlzLmJvb2tXYXRjaGVyLmVuYWJsZWQgPSBmYWxzZTtcclxuICAgIH1cclxuICAgIHRoaXMudXBkYXRlVmlldygpO1xyXG4gIH1cclxuXHJcbiAgY21kU2luZ2xlUGFnZSgpIHtcclxuICAgIHRoaXMuc3RhdGUuc2luZ2xlUGFnZSA9ICF0aGlzLnN0YXRlLnNpbmdsZVBhZ2U7XHJcbiAgICB0aGlzLnNldEJvb2tab29tKHRoaXMuYm9va1dhdGNoZXIuc2NhbGUpO1xyXG4gICAgdGhpcy51cGRhdGVWaWV3KCk7XHJcbiAgfVxyXG5cclxuICBjbWRTb3VuZHMoKSB7XHJcbiAgICBpZih0aGlzLnNvdW5kcykge1xyXG4gICAgICB0aGlzLnNvdW5kcy50b2dsZSgpO1xyXG4gICAgfVxyXG4gICAgdGhpcy51cGRhdGVWaWV3KCk7XHJcbiAgfVxyXG5cclxuICBjbWRTdGF0cygpIHtcclxuICAgIHRoaXMuc3RhdGUuc3RhdHMgPSAhdGhpcy5zdGF0ZS5zdGF0cztcclxuICAgIGlmKHRoaXMuc3RhdGUuc3RhdHMpIHtcclxuICAgICAgJCh0aGlzLnZpZXcuZ2V0Q29udGFpbmVyKCkpLmFwcGVuZCh0aGlzLlN0YXRzLmRvbUVsZW1lbnQpO1xyXG4gICAgICB0aGlzLnZpc3VhbC5hZGRSZW5kZXJDYWxsYmFjayh0aGlzLmJpbmRzLnN0YXRzKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAkKHRoaXMudmlldy5nZXRDb250YWluZXIoKSkuZmluZCh0aGlzLlN0YXRzLmRvbUVsZW1lbnQpLnJlbW92ZSgpO1xyXG4gICAgICB0aGlzLnZpc3VhbC5yZW1vdmVSZW5kZXJDYWxsYmFjayh0aGlzLmJpbmRzLnN0YXRzKTtcclxuICAgIH1cclxuICAgIHRoaXMudXBkYXRlVmlldygpO1xyXG4gIH1cclxuXHJcbiAgY21kTGlnaHRpbmdVcCgpIHtcclxuICAgIHRoaXMuc3RhdGUubGlnaHRpbmcgPSBNYXRoLm1pbih0aGlzLnN0YXRlLmxpZ2h0aW5nK3RoaXMucC5saWdodGluZy5kZWx0YSwgdGhpcy5wLmxpZ2h0aW5nLm1heCk7XHJcbiAgICB0aGlzLnZpc3VhbC5zZXRFeHRyYUxpZ2h0aW5nKHRoaXMuc3RhdGUubGlnaHRpbmcpO1xyXG4gICAgdGhpcy5ib29rLnVwZGF0ZVRocmVlKCk7XHJcbiAgICB0aGlzLnVwZGF0ZVZpZXcoKTtcclxuICB9XHJcblxyXG4gIGNtZExpZ2h0aW5nRG93bigpIHtcclxuICAgIHRoaXMuc3RhdGUubGlnaHRpbmcgPSBNYXRoLm1heCh0aGlzLnN0YXRlLmxpZ2h0aW5nLXRoaXMucC5saWdodGluZy5kZWx0YSwgdGhpcy5wLmxpZ2h0aW5nLm1pbik7XHJcbiAgICB0aGlzLnZpc3VhbC5zZXRFeHRyYUxpZ2h0aW5nKHRoaXMuc3RhdGUubGlnaHRpbmcpO1xyXG4gICAgdGhpcy5ib29rLnVwZGF0ZVRocmVlKCk7XHJcbiAgICB0aGlzLnVwZGF0ZVZpZXcoKTtcclxuICB9XHJcblxyXG4gIGNtZFBlbmRpbmdQbGF5KCkge1xyXG4gICAgdGhpcy5ib29rLnJlc29sdmVQZW5kaW5nUGxheWVycygpO1xyXG4gIH1cclxuXHJcbiAgZ29Ub1BhZ2UocGFnZSkge1xyXG4gICAgaWYodGhpcy5wLnJ0bCkge1xyXG4gICAgICBwYWdlID0gdGhpcy5ib29rLmdldFBhZ2VzKCktMS1wYWdlO1xyXG4gICAgfVxyXG4gICAgY29uc3QgcGFnZU51bSA9IE1hdGgubWF4KE1hdGgubWluKHBhZ2UsIHRoaXMuYm9vay5nZXRQYWdlcygpLTEpLDApO1xyXG4gICAgdGhpcy5zdGF0ZS5hY3RpdmVTaWRlID0gKHBhZ2VOdW0rMSklMjtcclxuICAgIGxldCB0YXJnZXQgPSBNYXRoLm1heChNYXRoLm1pbihwYWdlLTErcGFnZSUyLCB0aGlzLmJvb2suZ2V0UGFnZXMoKS0xKSwwKSwgY3VycmVudCA9IHRoaXMuYm9vay5nZXRQYWdlKCksIGZsaXBzID0gW10sIGNvdnMgPSAwOztcclxuICAgIGlmKHRhcmdldCE9Y3VycmVudCkge1xyXG4gICAgICBpZihjdXJyZW50PT09MCkge1xyXG4gICAgICAgIGZsaXBzLnB1c2goMSk7XHJcbiAgICAgICAgY3VycmVudCs9MTtcclxuICAgICAgICArK2NvdnM7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZihjdXJyZW50PT09dGhpcy5ib29rLmdldFBhZ2VzKCktMSkge1xyXG4gICAgICAgIGZsaXBzLnB1c2goLTEpO1xyXG4gICAgICAgIGN1cnJlbnQtPTI7XHJcbiAgICAgICAgKytjb3ZzO1xyXG4gICAgICB9XHJcbiAgICAgIGxldCBjdiA9IDA7XHJcbiAgICAgIGlmKHRhcmdldD09PTApIHtcclxuICAgICAgICBjdiA9IC0xO1xyXG4gICAgICAgIHRhcmdldCs9MTtcclxuICAgICAgICArK2NvdnM7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZih0YXJnZXQ9PT10aGlzLmJvb2suZ2V0UGFnZXMoKS0xKSB7XHJcbiAgICAgICAgY3YgPSAxO1xyXG4gICAgICAgIHRhcmdldC09MjtcclxuICAgICAgICArK2NvdnM7XHJcbiAgICAgIH1cclxuICAgICAgaWYodGFyZ2V0LWN1cnJlbnQpIHtcclxuICAgICAgICBmbGlwcy5wdXNoKE1hdGguY2VpbCgodGFyZ2V0LWN1cnJlbnQpLzIpKTtcclxuICAgICAgfVxyXG4gICAgICBpZihjdikge1xyXG4gICAgICAgIGZsaXBzLnB1c2goY3YpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3Qgc2V0Q2xiID0gKGZsLCB0aW1lLCBjbGIpPT4ge1xyXG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpPT4ge1xyXG4gICAgICAgIHNldFRpbWVvdXQoKCk9PiB7XHJcbiAgICAgICAgICBpZihmbDwwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhcnRGbGlwKHRoaXMuYm9vay5mbGlwTGVmdCgtZmwsIGNsYikpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhcnRGbGlwKHRoaXMuYm9vay5mbGlwUmlnaHQoZmwsIGNsYikpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgIH0sIHRpbWUpO1xyXG4gICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgaWYoY292cz09PTIpIHtcclxuICAgICAgc2V0Q2xiKGZsaXBzWzBdLCAwLCAoYmxvY2ssIHByb2dyZXNzLCBzdGF0ZSk9PiB7XHJcbiAgICAgICAgaWYoc3RhdGU9PSdmaW5pc2gnICYmIHByb2dyZXNzPT0xKSB7XHJcbiAgICAgICAgICBzZXRDbGIoZmxpcHNbZmxpcHMubGVuZ3RoLTFdLCAwKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pLnRoZW4oKCk9PiBzZXRDbGIoZmxpcHNbMV0sIDQwMCkpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIGxldCBuZXh0ID0gUHJvbWlzZS5yZXNvbHZlKCksIHRpbWUgPSAwO1xyXG4gICAgICBmb3IobGV0IGZsIG9mIGZsaXBzKSB7XHJcbiAgICAgICAgbmV4dCA9IG5leHQudGhlbigoKT0+IHNldENsYihmbCwgdGltZSkpO1xyXG4gICAgICAgIHRpbWUgPSA0MDA7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHN0YXJ0RmxpcChmbGlwUmVzKSB7XHJcbiAgICByZXR1cm4gZmxpcFJlcz8gZmxpcFJlcy50aGVuKChibG9jayk9PiB7XHJcbiAgICAgIGlmKGJsb2NrKSB7XHJcbiAgICAgICAgdGhpcy5kaXNwYXRjaEFzeW5jKHtcclxuICAgICAgICAgIHR5cGU6ICdzdGFydEZsaXAnXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIGJsb2NrO1xyXG4gICAgfSk6IFByb21pc2UucmVzb2x2ZSh1bmRlZmluZWQpO1xyXG4gIH1cclxuXHJcbiAgZW5kRmxpcChibG9jaykge1xyXG4gICAgdGhpcy5kaXNwYXRjaEFzeW5jKHtcclxuICAgICAgdHlwZTogJ2VuZEZsaXAnXHJcbiAgICB9KTtcclxuICAgIHJldHVybiBibG9jaztcclxuICB9XHJcblxyXG4gIGdldFBhZ2UoKSB7XHJcbiAgICBjb25zdCBwYWdlID0gdGhpcy5ib29rLmdldFBhZ2UoKTtcclxuICAgIHJldHVybiBwYWdlPyBNYXRoLm1pbih0aGlzLmJvb2suZ2V0UGFnZSgpK3RoaXMuc3RhdGUuYWN0aXZlU2lkZSwgdGhpcy5ib29rLmdldFBhZ2VzKCktMSk6IDA7XHJcbiAgfVxyXG5cclxuICBnZXRQYWdlRm9yR1VJKCkge1xyXG4gICAgbGV0IG4gPSAodGhpcy5zdGF0ZS5zaW5nbGVQYWdlPyB0aGlzLmdldFBhZ2UoKTogdGhpcy5ib29rLmdldFBhZ2UoKSkrMTtcclxuICAgIGlmKHRoaXMucC5ydGwpIHtcclxuICAgICAgbiA9IHRoaXMuYm9vay5nZXRQYWdlcygpLW4rMTtcclxuICAgIH1cclxuICAgIHJldHVybiBuO1xyXG4gIH1cclxuXHJcbiAgaW5wUGFnZShlLCBkYXRhKSB7XHJcbiAgICB0aGlzLmdvVG9QYWdlKGRhdGEtMSk7XHJcbiAgfVxyXG5cclxuICB1cGRhdGVWaWV3SWZTdGF0ZShibG9jaywgcHJvZ3Jlc3MsIHN0YXRlLCB0eXBlKSB7XHJcbiAgICBpZihzdGF0ZT09PSdpbml0JyB8fCBzdGF0ZT09PSdmaW5pc2gnKSB7XHJcbiAgICAgIHNldFRpbWVvdXQodGhpcy51cGRhdGVWaWV3LmJpbmQodGhpcyksIDEwMCk7XHJcbiAgICB9XHJcbiAgICBpZihzdGF0ZT09PSdmaW5pc2gnKSB7XHJcbiAgICAgIHRoaXMuZW5kRmxpcChibG9jayk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBpc0NtZFZpc2libGUobmFtZSkge1xyXG4gICAgcmV0dXJuICQodGhpcy52aXN1YWwuZWxlbWVudCkud2lkdGgoKTx0aGlzLnAubmFycm93Vmlldy53aWR0aD8gKHRoaXMuYWN0aW9uc1tuYW1lXS5lbmFibGVkSW5OYXJyb3c9PT11bmRlZmluZWQ/IHRoaXMuYWN0aW9uc1tuYW1lXS5lbmFibGVkOiB0aGlzLmFjdGlvbnNbbmFtZV0uZW5hYmxlZEluTmFycm93KTogdGhpcy5hY3Rpb25zW25hbWVdLmVuYWJsZWQ7XHJcbiAgfVxyXG5cclxuICB1cGRhdGVWaWV3U3RhdGUoKSB7XHJcbiAgICB0aGlzLnZpZXdTdGF0ZSA9IHtcclxuICAgICAgJ2NtZFpvb21Jbic6IHtcclxuICAgICAgICBlbmFibGU6IHRoaXMuY2FuWm9vbUluKCksXHJcbiAgICAgICAgdmlzaWJsZTogdGhpcy5pc0NtZFZpc2libGUoJ2NtZFpvb21JbicpLFxyXG4gICAgICAgIGFjdGl2ZTogZmFsc2VcclxuICAgICAgfSxcclxuICAgICAgJ2NtZFpvb21PdXQnOiB7XHJcbiAgICAgICAgZW5hYmxlOiB0aGlzLmNhblpvb21PdXQoKSxcclxuICAgICAgICB2aXNpYmxlOiB0aGlzLmlzQ21kVmlzaWJsZSgnY21kWm9vbU91dCcpLFxyXG4gICAgICAgIGFjdGl2ZTogZmFsc2VcclxuICAgICAgfSxcclxuICAgICAgJ2NtZERlZmF1bHRab29tJzoge1xyXG4gICAgICAgIGVuYWJsZTogdGhpcy5jYW5EZWZhdWx0Wm9vbSgpLFxyXG4gICAgICAgIHZpc2libGU6IHRoaXMuaXNDbWRWaXNpYmxlKCdjbWREZWZhdWx0Wm9vbScpLFxyXG4gICAgICAgIGFjdGl2ZTogdGhpcy5jYW5EZWZhdWx0Wm9vbSgpICYmIE1hdGguYWJzKHRoaXMuYm9va1dhdGNoZXIuc2NhbGUtdGhpcy5wLnNjYWxlLmRlZmF1bHQpPHRoaXMucC5lcHNcclxuICAgICAgfSxcclxuICAgICAgJ2NtZFRvYyc6IHtcclxuICAgICAgICBlbmFibGU6ICEhdGhpcy50b2NDdHJsLFxyXG4gICAgICAgIHZpc2libGU6IHRoaXMuaXNDbWRWaXNpYmxlKCdjbWRUb2MnKSAmJiB0aGlzLnRvY0N0cmwsXHJcbiAgICAgICAgYWN0aXZlOiB0aGlzLnRvY0N0cmwgJiYgdGhpcy50b2NDdHJsLnZpc2libGVcclxuICAgICAgfSxcclxuICAgICAgJ2lucFBhZ2VzJzoge1xyXG4gICAgICAgIHZpc2libGU6IHRydWUsXHJcbiAgICAgICAgdmFsdWU6IHRoaXMuYm9vay5nZXRQYWdlcygpXHJcbiAgICAgIH0sXHJcbiAgICAgICdpbnBQYWdlJzoge1xyXG4gICAgICAgIHZpc2libGU6IHRydWUsXHJcbiAgICAgICAgZW5hYmxlOiAhdGhpcy5ib29rLmlzUHJvY2Vzc2luZygpICYmIHRoaXMubmF2aWdhdGlvbkNvbnRyb2xzLFxyXG4gICAgICAgIHZhbHVlOiB0aGlzLmdldFBhZ2VGb3JHVUkoKVxyXG4gICAgICB9LFxyXG4gICAgICAnY21kU2F2ZSc6IHtcclxuICAgICAgICBlbmFibGU6IHRydWUsXHJcbiAgICAgICAgdmlzaWJsZTogdGhpcy5pc0NtZFZpc2libGUoJ2NtZFNhdmUnKSAmJiAhIXRoaXMucC5kb3dubG9hZFVSTCxcclxuICAgICAgICBhY3RpdmU6IGZhbHNlXHJcbiAgICAgIH0sXHJcbiAgICAgICdjbWRQcmludCc6IHtcclxuICAgICAgICBlbmFibGU6IHRydWUsXHJcbiAgICAgICAgdmlzaWJsZTogdGhpcy5pc0NtZFZpc2libGUoJ2NtZFByaW50JykgJiYgISF0aGlzLnByaW50ZXIsXHJcbiAgICAgICAgYWN0aXZlOiBmYWxzZVxyXG4gICAgICB9LFxyXG4gICAgICAnY21kRnVsbFNjcmVlbic6IHtcclxuICAgICAgICBlbmFibGU6IEZ1bGxTY3JlZW5YLmF2YWlsYWJsZSgpLFxyXG4gICAgICAgIHZpc2libGU6IHRoaXMuaXNDbWRWaXNpYmxlKCdjbWRGdWxsU2NyZWVuJyksXHJcbiAgICAgICAgYWN0aXZlOiBGdWxsU2NyZWVuWC5hdmFpbGFibGUoKSAmJiBGdWxsU2NyZWVuWC5hY3RpdmF0ZWQoKVxyXG4gICAgICB9LFxyXG4gICAgICAnd2lkU2V0dGluZ3MnOiB7XHJcbiAgICAgICAgZW5hYmxlOiB0cnVlLFxyXG4gICAgICAgIHZpc2libGU6IHRoaXMuaXNDbWRWaXNpYmxlKCd3aWRTZXR0aW5ncycpLFxyXG4gICAgICAgIGFjdGl2ZTogZmFsc2VcclxuICAgICAgfSxcclxuICAgICAgJ2NtZFNtYXJ0UGFuJzoge1xyXG4gICAgICAgIGVuYWJsZTogdHJ1ZSxcclxuICAgICAgICB2aXNpYmxlOiB0aGlzLmlzQ21kVmlzaWJsZSgnY21kU21hcnRQYW4nKSxcclxuICAgICAgICBhY3RpdmU6IHRoaXMuc3RhdGUuc21hcnRQYW5cclxuICAgICAgfSxcclxuICAgICAgJ2NtZFNpbmdsZVBhZ2UnOiB7XHJcbiAgICAgICAgZW5hYmxlOiB0cnVlLFxyXG4gICAgICAgIHZpc2libGU6IHRoaXMuaXNDbWRWaXNpYmxlKCdjbWRTaW5nbGVQYWdlJyksXHJcbiAgICAgICAgYWN0aXZlOiB0aGlzLnN0YXRlLnNpbmdsZVBhZ2VcclxuICAgICAgfSxcclxuICAgICAgJ2NtZFNvdW5kcyc6IHtcclxuICAgICAgICBlbmFibGU6IHRydWUsXHJcbiAgICAgICAgdmlzaWJsZTogIHRoaXMuaXNDbWRWaXNpYmxlKCdjbWRTb3VuZHMnKSAmJiAhIXRoaXMuc291bmRzLFxyXG4gICAgICAgIGFjdGl2ZTogISF0aGlzLnNvdW5kcyAmJiB0aGlzLnNvdW5kcy5lbmFibGVkXHJcbiAgICAgIH0sXHJcbiAgICAgICdjbWRTdGF0cyc6IHtcclxuICAgICAgICBlbmFibGU6IHRydWUsXHJcbiAgICAgICAgdmlzaWJsZTogdGhpcy5pc0NtZFZpc2libGUoJ2NtZFN0YXRzJyksXHJcbiAgICAgICAgYWN0aXZlOiB0aGlzLnN0YXRlLnN0YXRzXHJcbiAgICAgIH0sXHJcbiAgICAgICdjbWRMaWdodGluZ1VwJzoge1xyXG4gICAgICAgIGVuYWJsZTogTWF0aC5hYnModGhpcy5zdGF0ZS5saWdodGluZy10aGlzLnAubGlnaHRpbmcubWF4KT50aGlzLnAuZXBzLFxyXG4gICAgICAgIHZpc2libGU6IHRoaXMuaXNDbWRWaXNpYmxlKCdjbWRMaWdodGluZ1VwJyksXHJcbiAgICAgICAgYWN0aXZlOiBmYWxzZVxyXG4gICAgICB9LFxyXG4gICAgICAnY21kTGlnaHRpbmdEb3duJzoge1xyXG4gICAgICAgIGVuYWJsZTogTWF0aC5hYnModGhpcy5zdGF0ZS5saWdodGluZy10aGlzLnAubGlnaHRpbmcubWluKT50aGlzLnAuZXBzLFxyXG4gICAgICAgIHZpc2libGU6IHRoaXMuaXNDbWRWaXNpYmxlKCdjbWRMaWdodGluZ0Rvd24nKSxcclxuICAgICAgICBhY3RpdmU6IGZhbHNlXHJcbiAgICAgIH0sXHJcbiAgICAgICdjbWRQZW5kaW5nUGxheSc6IHtcclxuICAgICAgICBlbmFibGU6IHRydWUsXHJcbiAgICAgICAgdmlzaWJsZTogdHJ1ZSxcclxuICAgICAgICBhY3RpdmU6IGZhbHNlXHJcbiAgICAgIH0sXHJcbiAgICAgICd3aWRQZW5kaW5nUGxheSc6IHtcclxuICAgICAgICBlbmFibGU6IHRydWUsXHJcbiAgICAgICAgdmlzaWJsZTogdGhpcy5ib29rLmhhc1BlbmRpbmdQbGF5ZXJzKCksXHJcbiAgICAgICAgYWN0aXZlOiBmYWxzZVxyXG4gICAgICB9LFxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBsZWZ0ID0gdGhpcy5ib29rLmdldExlZnRGbGlwcGluZygpLFxyXG4gICAgICAgICAgcmlnaHQgPSB0aGlzLmJvb2suZ2V0UmlnaHRGbGlwcGluZygpO1xyXG4gICAgY29uc3QgZmxpcHBlcnNFbmFibGUgPSB7XHJcbiAgICAgIGNtZEZhc3RCYWNrd2FyZDogISFsZWZ0ICYmIHRoaXMubmF2aWdhdGlvbkNvbnRyb2xzLFxyXG4gICAgICBjbWRCYWNrd2FyZDogISFsZWZ0ICYmIHRoaXMubmF2aWdhdGlvbkNvbnRyb2xzLFxyXG4gICAgICBjbWRCaWdCYWNrd2FyZDogISFsZWZ0ICYmIHRoaXMubmF2aWdhdGlvbkNvbnRyb2xzLFxyXG4gICAgICBjbWRGb3J3YXJkOiAhIXJpZ2h0ICYmIHRoaXMubmF2aWdhdGlvbkNvbnRyb2xzLFxyXG4gICAgICBjbWRCaWdGb3J3YXJkOiAhIXJpZ2h0ICYmIHRoaXMubmF2aWdhdGlvbkNvbnRyb2xzLFxyXG4gICAgICBjbWRGYXN0Rm9yd2FyZDogISFyaWdodCAmJiB0aGlzLm5hdmlnYXRpb25Db250cm9sc1xyXG4gICAgfTtcclxuICAgIGZvcihsZXQgbmFtZSBvZiBPYmplY3Qua2V5cyhmbGlwcGVyc0VuYWJsZSkpIHtcclxuICAgICAgdGhpcy52aWV3U3RhdGVbbmFtZV0gPSB7XHJcbiAgICAgICAgZW5hYmxlOiBmbGlwcGVyc0VuYWJsZVtuYW1lXSxcclxuICAgICAgICB2aXNpYmxlOiB0aGlzLmlzQ21kVmlzaWJsZShuYW1lKSxcclxuICAgICAgICBhY3RpdmU6IGZhbHNlXHJcbiAgICAgIH07XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlVmlldygpIHtcclxuICAgIGlmKHRoaXMudmlldykge1xyXG4gICAgICB0aGlzLnVwZGF0ZVZpZXdTdGF0ZSgpO1xyXG4gICAgICBmb3IobGV0IG5hbWUgb2YgT2JqZWN0LmtleXModGhpcy52aWV3U3RhdGUpKSB7XHJcbiAgICAgICAgdGhpcy52aWV3LnNldFN0YXRlKG5hbWUsIHRoaXMudmlld1N0YXRlW25hbWVdKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZ2V0QWN0aW9ucygpIHtcclxuICAgIGNvbnN0IGlzU3dpcHBpbmcgPSAobmFtZSk9PiB7XHJcbiAgICAgIHJldHVybiB0aGlzLmFjdGlvbnMudG91Y2hDbWRTd2lwZS5lbmFibGVkICYmIHRoaXMuYWN0aW9ucy50b3VjaENtZFN3aXBlLmNvZGU9PT10aGlzLmFjdGlvbnNbbmFtZV0uY29kZSAmJiB0aGlzLnN0YXRlLnNtYXJ0UGFuICYmIHRoaXMuYm9va1dhdGNoZXIuc2NhbGU8PTE7XHJcbiAgICB9LCBjbWRzID0ge307XHJcblxyXG4gICAgZm9yKGxldCBuYW1lIGluIHRoaXMpIHtcclxuICAgICAgaWYobmFtZS5pbmRleE9mKCdjbWQnKT09PTApIHtcclxuICAgICAgICBjbWRzW25hbWVdID0ge1xyXG4gICAgICAgICAgYWN0aXZhdGU6ICguLi5hcmdzKT0+IHtcclxuICAgICAgICAgICAgaWYodGhpcy52aWV3U3RhdGUgJiYgdGhpcy52aWV3U3RhdGVbbmFtZV0uZW5hYmxlKSB7XHJcbiAgICAgICAgICAgICAgdGhpc1tuYW1lXSguLi5hcmdzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAuLi5jbWRzLFxyXG4gICAgICBjbWRQYW5MZWZ0OiB7XHJcbiAgICAgICAgYWN0aXZhdGU6IChlKT0+IHRoaXMub3JiaXQuYWN0aW9ucy5wYW4oZSwge1xyXG4gICAgICAgICAgc3RhdGU6ICdtb3ZlJyxcclxuICAgICAgICAgIGR4OiAtdGhpcy5wLnBhbi5zcGVlZCxcclxuICAgICAgICAgIGR5OiAwXHJcbiAgICAgICAgfSlcclxuICAgICAgfSxcclxuICAgICAgY21kUGFuUmlnaHQ6IHtcclxuICAgICAgICBhY3RpdmF0ZTogKGUpPT4gdGhpcy5vcmJpdC5hY3Rpb25zLnBhbihlLCB7XHJcbiAgICAgICAgICBzdGF0ZTogJ21vdmUnLFxyXG4gICAgICAgICAgZHg6IHRoaXMucC5wYW4uc3BlZWQsXHJcbiAgICAgICAgICBkeTogMFxyXG4gICAgICAgIH0pXHJcbiAgICAgIH0sXHJcbiAgICAgIGNtZFBhblVwOiB7XHJcbiAgICAgICAgYWN0aXZhdGU6IChlKT0+IHRoaXMub3JiaXQuYWN0aW9ucy5wYW4oZSwge1xyXG4gICAgICAgICAgc3RhdGU6ICdtb3ZlJyxcclxuICAgICAgICAgIGR4OiAwLFxyXG4gICAgICAgICAgZHk6IC10aGlzLnAucGFuLnNwZWVkXHJcbiAgICAgICAgfSlcclxuICAgICAgfSxcclxuICAgICAgY21kUGFuRG93bjoge1xyXG4gICAgICAgIGFjdGl2YXRlOiAoZSk9PiB0aGlzLm9yYml0LmFjdGlvbnMucGFuKGUsIHtcclxuICAgICAgICAgIHN0YXRlOiAnbW92ZScsXHJcbiAgICAgICAgICBkeDogMCxcclxuICAgICAgICAgIGR5OiB0aGlzLnAucGFuLnNwZWVkXHJcbiAgICAgICAgfSlcclxuICAgICAgfSxcclxuICAgICAgbW91c2VDbWRSb3RhdGU6IHtcclxuICAgICAgICBhY3RpdmF0ZTogdGhpcy5vcmJpdC5hY3Rpb25zLnJvdGF0ZVxyXG4gICAgICB9LFxyXG4gICAgICBtb3VzZUNtZERyYWdab29tOiB7XHJcbiAgICAgICAgYWN0aXZhdGU6IChlLCBkYXRhKT0+IHtcclxuICAgICAgICAgIGlmKGRhdGEuZHk+MCkge1xyXG4gICAgICAgICAgICB0aGlzLmNtZFpvb21PdXQoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGVsc2UgaWYoZGF0YS5keTwwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY21kWm9vbUluKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG4gICAgICBtb3VzZUNtZFBhbjoge1xyXG4gICAgICAgIGFjdGl2YXRlOiB0aGlzLm9yYml0LmFjdGlvbnMucGFuXHJcbiAgICAgIH0sXHJcbiAgICAgIG1vdXNlQ21kV2hlZWxab29tOiB7XHJcbiAgICAgICAgYWN0aXZhdGU6IChlKT0+IHtcclxuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgIGlmKGUuZGVsdGFZPDApIHtcclxuICAgICAgICAgICAgdGhpcy5jbWRab29tT3V0KCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBlbHNlIGlmKGUuZGVsdGFZPjApIHtcclxuICAgICAgICAgICAgdGhpcy5jbWRab29tSW4oKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICAgIHRvdWNoQ21kUm90YXRlOiB7XHJcbiAgICAgICAgYWN0aXZhdGU6IChlLCBkYXRhKT0+IHtcclxuICAgICAgICAgIGlmKCFpc1N3aXBwaW5nKCd0b3VjaENtZFJvdGF0ZScpKSB7XHJcbiAgICAgICAgICAgIGlmKGRhdGEuc3RhdGU9PT0nbW92ZScpIHtcclxuICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5vcmJpdC5hY3Rpb25zLnJvdGF0ZShlLCBkYXRhKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICAgIHRvdWNoQ21kWm9vbToge1xyXG4gICAgICAgIGFjdGl2YXRlOiAoZSwgZGF0YSk9PiB7XHJcbiAgICAgICAgICBpZighaXNTd2lwcGluZygndG91Y2hDbWRab29tJykpIHtcclxuICAgICAgICAgICAgY29uc3QgbCA9IGZ1bmN0aW9uKHYpIHtcclxuICAgICAgICAgICAgICByZXR1cm4gTWF0aC5zcXJ0KHYueCp2Lngrdi55KnYueSk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGlmKGRhdGEuc3RhdGU9PT0nc3RhcnQnKSB7XHJcbiAgICAgICAgICAgICAgdGhpcy50b3VjaFpvb21EYXRhID0ge1xyXG4gICAgICAgICAgICAgICAgbDogbChkYXRhKSxcclxuICAgICAgICAgICAgICAgIHNjYWxlOiB0aGlzLmJvb2tXYXRjaGVyLnNjYWxlXHJcbiAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmKGRhdGEuc3RhdGU9PT0nbW92ZScpIHtcclxuICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgdGhpcy5zZXRTY2FsZShsKGRhdGEpL3RoaXMudG91Y2hab29tRGF0YS5sKnRoaXMudG91Y2hab29tRGF0YS5zY2FsZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICAgIHRvdWNoQ21kUGFuOiB7XHJcbiAgICAgICAgYWN0aXZhdGU6IChlLCBkYXRhKT0+IHtcclxuICAgICAgICAgIGlmKCFpc1N3aXBwaW5nKCd0b3VjaENtZFBhbicpKSB7XHJcbiAgICAgICAgICAgIGlmKGRhdGEuc3RhdGU9PT0nbW92ZScgJiYgKCF0aGlzLnN0YXRlLnNtYXJ0UGFuIHx8IHRoaXMuYm9va1dhdGNoZXIuc2NhbGU+MSkpIHtcclxuICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgdGhpcy5vcmJpdC5hY3Rpb25zLnBhbihlLCBkYXRhKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgdG91Y2hDbWRTd2lwZToge1xyXG4gICAgICAgIGFjdGl2YXRlOiAoZSwgZGF0YSk9PiB7XHJcbiAgICAgICAgICBpZihpc1N3aXBwaW5nKCd0b3VjaENtZFN3aXBlJykpIHtcclxuICAgICAgICAgICAgaWYoZGF0YS5zdGF0ZT09PSdzdGFydCcpIHtcclxuICAgICAgICAgICAgICBjb25zdCB0b3VjaCA9IChlLnRvdWNoZXMgfHwgZS5vcmlnaW5hbEV2ZW50LnRvdWNoZXMpW3RoaXMuYWN0aW9ucy50b3VjaENtZFN3aXBlLmNvZGUtMV07XHJcbiAgICAgICAgICAgICAgdGhpcy5zd2lwZURhdGEgPSB7XHJcbiAgICAgICAgICAgICAgICBoYW5kbGVkOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIHgwOiB0b3VjaC5wYWdlWCxcclxuICAgICAgICAgICAgICAgIHkwOiB0b3VjaC5wYWdlWSxcclxuICAgICAgICAgICAgICAgIHg6IHRvdWNoLnBhZ2VYLFxyXG4gICAgICAgICAgICAgICAgeTogdG91Y2gucGFnZVlcclxuICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYoZGF0YS5zdGF0ZT09PSdtb3ZlJykge1xyXG4gICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICBpZighdGhpcy5zd2lwZURhdGEuaGFuZGxlZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zd2lwZURhdGEgPSB7XHJcbiAgICAgICAgICAgICAgICAgIC4uLnRoaXMuc3dpcGVEYXRhLFxyXG4gICAgICAgICAgICAgICAgICB4OiB0aGlzLnN3aXBlRGF0YS54K2RhdGEuZHgsXHJcbiAgICAgICAgICAgICAgICAgIHk6IHRoaXMuc3dpcGVEYXRhLnkrZGF0YS5keVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYoTWF0aC5hYnModGhpcy5zd2lwZURhdGEueDAtdGhpcy5zd2lwZURhdGEueCk+MTAwKSB7XHJcbiAgICAgICAgICAgICAgICAgIHRoaXMuc3dpcGVEYXRhLngwPnRoaXMuc3dpcGVEYXRhLng/IHRoaXMuY21kRm9yd2FyZCgpOiB0aGlzLmNtZEJhY2t3YXJkKCk7XHJcbiAgICAgICAgICAgICAgICAgIHRoaXMuc3dpcGVEYXRhLmhhbmRsZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICBkZWxldGUgdGhpcy5zd2lwZURhdGE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICAgIHdpZFNldHRpbmdzOiB7XHJcbiAgICAgICAgYWN0aXZhdGU6ICgpPT4gdW5kZWZpbmVkXHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBiaW5kQWN0aW9ucygpIHtcclxuICAgIHRoaXMuZVRvQSA9IG5ldyBFdmVudHNUb0FjdGlvbnMoJCh0aGlzLnZpc3VhbC5lbGVtZW50KSk7XHJcbiAgICB0aGlzLmVUb0EuYWRkQWN0aW9uKChlKT0+IGUucHJldmVudERlZmF1bHQoKSwgJ2NvbnRleHRtZW51JywgRXZlbnRzVG9BY3Rpb25zLm1vdXNlQnV0dG9ucy5SaWdodCwgMCk7XHJcblxyXG4gICAgdGhpcy5hY3Rpb25zID0gdGhpcy5nZXRBY3Rpb25zKCk7XHJcbiAgICBmb3IobGV0IG5hbWUgb2YgT2JqZWN0LmtleXModGhpcy5hY3Rpb25zKSkge1xyXG4gICAgICBjb25zdCBhY3Rpb24gPSB7XHJcbiAgICAgICAgLi4udGhpcy5hY3Rpb25zW25hbWVdLFxyXG4gICAgICAgIC4uLnRoaXMucC5hY3Rpb25zW25hbWVdXHJcbiAgICAgIH07XHJcbiAgICAgIHRoaXMuYWN0aW9uc1tuYW1lXSA9IGFjdGlvbjtcclxuICAgICAgaWYoYWN0aW9uLmVuYWJsZWQpIHtcclxuICAgICAgICBjb25zdCBmbGFncyA9IGFjdGlvbi5mbGFncyB8fCAwO1xyXG4gICAgICAgIGlmKGFjdGlvbi50eXBlKSB7XHJcbiAgICAgICAgICB0aGlzLmVUb0EuYWRkQWN0aW9uKGFjdGlvbi5hY3RpdmF0ZSwgYWN0aW9uLnR5cGUsIGFjdGlvbi5jb2RlLCBmbGFncyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYoYWN0aW9uLmNvZGUhPT11bmRlZmluZWQpIHtcclxuICAgICAgICAgIHRoaXMuZVRvQS5hZGRBY3Rpb24oYWN0aW9uLmFjdGl2YXRlLCAna2V5ZG93bicsIGFjdGlvbi5jb2RlLCBmbGFncyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgcHJlcGFyZVByb3BzKHByb3BzKSB7XHJcbiAgICByZXR1cm4gQm9va0NvbnRyb2xsZXIuY2FsY1Byb3BzKEJvb2tDb250cm9sbGVyLm1lcmdlUHJvcHMoYm9va0NvbnRyb2xsZXJQcm9wcygpLCBwcm9wcykpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIHNldEFjdGlvbnMocHJvcHMsIGFjdGlvbnMpIHtcclxuICAgIGZvcihsZXQgbmFtZSBvZiBPYmplY3Qua2V5cyhhY3Rpb25zIHx8IHt9KSkge1xyXG4gICAgICBwcm9wcy5hY3Rpb25zW25hbWVdID0ge1xyXG4gICAgICAgIC4uLnByb3BzLmFjdGlvbnNbbmFtZV0sXHJcbiAgICAgICAgLi4uYWN0aW9uc1tuYW1lXVxyXG4gICAgICB9O1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc3RhdGljIG1lcmdlUHJvcHMoZmlyc3QsIHNlY29uZCkge1xyXG4gICAgc2Vjb25kID0gc2Vjb25kIHx8IHt9O1xyXG4gICAgZnVuY3Rpb24gbWVyZ2UoZmlyc3QsIHNlY29uZCkge1xyXG4gICAgICBzZWNvbmQgPSBzZWNvbmQgfHwge307XHJcbiAgICAgIGNvbnN0IHByb3BzID0ge1xyXG4gICAgICAgIC4uLmZpcnN0LFxyXG4gICAgICAgIC4uLnNlY29uZFxyXG4gICAgICB9O1xyXG4gICAgICBmb3IobGV0IG5hbWUgb2YgT2JqZWN0LmtleXMoZmlyc3QpKSB7XHJcbiAgICAgICAgaWYodHlwZW9mIGZpcnN0W25hbWVdPT09J29iamVjdCcpIHtcclxuICAgICAgICAgIHByb3BzW25hbWVdID0gbWVyZ2UoZmlyc3RbbmFtZV0sIHNlY29uZFtuYW1lXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBwcm9wcztcclxuICAgIH1cclxuICAgIGNvbnN0IHByb3BzID0gbWVyZ2UoZmlyc3QsIHNlY29uZCk7XHJcbiAgICBCb29rQ29udHJvbGxlci5zZXRBY3Rpb25zKHByb3BzLCBmaXJzdC5hY3Rpb25zKTtcclxuICAgIEJvb2tDb250cm9sbGVyLnNldEFjdGlvbnMocHJvcHMsIHNlY29uZC5hY3Rpb25zKTtcclxuICAgIHJldHVybiBwcm9wcztcclxuICB9XHJcblxyXG4gIHN0YXRpYyBjYWxjUHJvcHMocHJvcHMpIHtcclxuICAgIHByb3BzLnNjYWxlLmRlbHRhID0gKHByb3BzLnNjYWxlLm1heC1wcm9wcy5zY2FsZS5taW4pL3Byb3BzLnNjYWxlLmxldmVscztcclxuICAgIHByb3BzLmxpZ2h0aW5nLmRlbHRhID0gKHByb3BzLmxpZ2h0aW5nLm1heC1wcm9wcy5saWdodGluZy5taW4pL3Byb3BzLmxpZ2h0aW5nLmxldmVscztcclxuICAgIHJldHVybiBwcm9wcztcclxuICB9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2pzL2NsYXNzZXMvQm9va0NvbnRyb2xsZXIuanMiLCJpbXBvcnQgeyR9IGZyb20gJy4uL2xpYnMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQm9va1ByaW50ZXIge1xyXG5cclxuICBjb25zdHJ1Y3Rvcihjb250ZXh0LCBib29rLCBzdHlsZVNoZWV0KSB7XHJcbiAgICB0aGlzLmJvb2sgPSBib29rO1xyXG4gICAgdGhpcy5zdHlsZVNoZWV0ID0gc3R5bGVTaGVldDtcclxuICAgIHRoaXMud25kID0gY29udGV4dC53bmQ7XHJcbiAgICB0aGlzLmRvYyA9IGNvbnRleHQuZG9jO1xyXG4gICAgdGhpcy5wYWdlQ2FsbGJhY2sgPSBib29rLmdldFBhZ2VDYWxsYmFjaygpO1xyXG4gICAgY29uc3QgdGVzdCA9IHRoaXMucGFnZUNhbGxiYWNrKDApO1xyXG4gICAgdGhpcy50eXBlID0gdGVzdC50eXBlO1xyXG4gICAgaWYodGhpcy50eXBlPT09J3BkZicpIHtcclxuICAgICAgdGhpcy5wZGZTcmMgPSB0ZXN0LnNyYy5zcmM7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjYW5jZWwoKSB7XHJcbiAgICB0aGlzLmNhbmNlbGVkID0gdHJ1ZTtcclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICBpZih0aGlzLmZyYW1lKSB7XHJcbiAgICAgIHRoaXMuZnJhbWUucmVtb3ZlKCk7XHJcbiAgICAgIGRlbGV0ZSB0aGlzLmZyYW1lO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpbnQoKSB7XHJcbiAgICBkZWxldGUgdGhpcy5jYW5jZWxlZDtcclxuICAgIGlmKHRoaXMudHlwZT09PSdwZGYnKSB7XHJcbiAgICAgIGxldCBwcmludFduZCwgY2FsbE1hbnVhbGx5ID0gZmFsc2U7XHJcbiAgICAgIGlmKHRoaXMudXNlSUZyYW1lKCkpIHtcclxuICAgICAgICBjYWxsTWFudWFsbHkgPSAhIXRoaXMuZnJhbWU7XHJcbiAgICAgICAgaWYoIXRoaXMuZnJhbWUpIHtcclxuICAgICAgICAgIHRoaXMuZnJhbWUgPSAkKCc8aWZyYW1lIHNyYz1cIicrdGhpcy5wZGZTcmMrJ1wiIHN0eWxlPVwiZGlzcGxheTogbm9uZTtcIj48L2lmcmFtZT4nKS5hcHBlbmRUbyh0aGlzLmRvYy5ib2R5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcHJpbnRXbmQgPSB0aGlzLmZyYW1lWzBdLmNvbnRlbnRXaW5kb3c7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgcHJpbnRXbmQgPSB0aGlzLnduZC5vcGVuKHRoaXMucGRmU3JjKTtcclxuICAgICAgfVxyXG4gICAgICBpZihjYWxsTWFudWFsbHkpIHtcclxuICAgICAgICBwcmludFduZC5wcmludCgpO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgICQocHJpbnRXbmQpLm9uKCdsb2FkJywgKCk9PiB7XHJcbiAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBwcmludFduZC5wcmludCgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgY2F0Y2goZSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgdGhpcy5yZW5kZXJDb250ZW50KCkuXHJcbiAgICAgICAgdGhlbigoY29udGVudCk9PiB7XHJcbiAgICAgICAgICBjb25zdCBwcmludFduZCA9IHRoaXMud25kLm9wZW4oKSxcclxuICAgICAgICAgIHByaW50RG9jID0gcHJpbnRXbmQuZG9jdW1lbnQsXHJcbiAgICAgICAgICBodG1sID0gYFxyXG4gICAgICAgICAgICA8IURPQ1RZUEUgaHRtbD5cclxuICAgICAgICAgICAgPGh0bWw+XHJcbiAgICAgICAgICAgICAgPGhlYWQ+XHJcbiAgICAgICAgICAgICAgICA8bWV0YSBjaGFyc2V0PVwidXRmLThcIj5cclxuICAgICAgICAgICAgICAgIDx0aXRsZT4zRCBGbGlwQm9vayAtIFByaW50aW5nPC90aXRsZT5cclxuICAgICAgICAgICAgICAgICR7Y29udGVudC5oZWFkfVxyXG4gICAgICAgICAgICAgICAgPHNjcmlwdCB0eXBlPVwidGV4dC9qYXZhc2NyaXB0XCI+XHJcbiAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHByaW50RG9jdW1lbnQoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LnByaW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gaW5pdCgpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KHByaW50RG9jdW1lbnQsIDEwMCk7XHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIDwvc2NyaXB0PlxyXG4gICAgICAgICAgICAgIDwvaGVhZD5cclxuICAgICAgICAgICAgICA8Ym9keSBvbmxvYWQ9XCJpbml0KClcIj5cclxuICAgICAgICAgICAgICAgICR7Y29udGVudC5ib2R5fVxyXG4gICAgICAgICAgICAgIDwvYm9keT5cclxuICAgICAgICAgICAgPC9odG1sPlxyXG4gICAgICAgICAgYC5mYjNkUUZpbHRlcigpO1xyXG4gICAgICAgICAgcHJpbnREb2Mub3BlbigpO1xyXG4gICAgICAgICAgcHJpbnREb2Mud3JpdGUoaHRtbCk7XHJcbiAgICAgICAgICBwcmludERvYy5jbG9zZSgpO1xyXG4gICAgICAgIH0pLlxyXG4gICAgICAgIGNhdGNoKChlKT0+IGNvbnNvbGUud2FybignM0QgRmxpcEJvb2sgLSBQcmludGluZyB3YXMgY2FuY2VsZWQnKSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcm9ncmVzcyh2KSB7XHJcbiAgICBpZih0aGlzLmNhbmNlbGVkKSB7XHJcbiAgICAgIHRocm93ICdDYW5jZWwgUHJpbnRpbmcnO1xyXG4gICAgfVxyXG4gICAgaWYodGhpcy5vblByb2dyZXNzKSB7XHJcbiAgICAgIHRoaXMub25Qcm9ncmVzcyhNYXRoLmZsb29yKHYqMTAwKSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZW5kZXJDb250ZW50KCkge1xyXG4gICAgY29uc3QgcGFnZXMgPSB0aGlzLmJvb2suZ2V0UGFnZXMoKSwgaGVhZCA9IG5ldyBTZXQoKSwgYm9keSA9IFtdO1xyXG4gICAgbGV0IGRvbmUgPSBQcm9taXNlLnJlc29sdmUoKTtcclxuICAgIGZvcihsZXQgcGFnZT0wOyBwYWdlPHBhZ2VzOyArK3BhZ2UpIHtcclxuICAgICAgY29uc3QgaW5mbyA9IHRoaXMucGFnZUNhbGxiYWNrKHBhZ2UpO1xyXG4gICAgICBpZihpbmZvLnR5cGU9PT0naW1hZ2UnKSB7XHJcbiAgICAgICAgZG9uZSA9IGRvbmUudGhlbigoKT0+IHtcclxuICAgICAgICAgIHRoaXMucHJvZ3Jlc3MocGFnZS9wYWdlcyk7XHJcbiAgICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXJJbWFnZShoZWFkLCBib2R5LCBpbmZvLnNyYyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZihpbmZvLnR5cGU9PT0naHRtbCcpIHtcclxuICAgICAgICBkb25lID0gZG9uZS50aGVuKCgpPT4ge1xyXG4gICAgICAgICAgdGhpcy5wcm9ncmVzcyhwYWdlL3BhZ2VzKTtcclxuICAgICAgICAgIHJldHVybiB0aGlzLnJlbmRlckh0bWwoaGVhZCwgYm9keSwgaW5mby5zcmMpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZG9uZS50aGVuKCgpPT4ge1xyXG4gICAgICB0aGlzLnByb2dyZXNzKDEpO1xyXG4gICAgICByZXR1cm4ge2hlYWQ6IHRoaXMucmVuZGVySGVhZChoZWFkKSwgYm9keTogYm9keS5qb2luKCdcXG4nKX1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIHdyYXAoY29udGVudCkge1xyXG4gICAgcmV0dXJuIGA8ZGl2IGNsYXNzPVwiZmIzZC1wcmludGVyLXBhZ2VcIj4ke2NvbnRlbnR9PC9kaXY+YDtcclxuICB9XHJcblxyXG4gIHJlbmRlckltYWdlKGhlYWQsIGJvZHksIHNyYykge1xyXG4gICAgYm9keS5wdXNoKEJvb2tQcmludGVyLndyYXAoYDxpbWcgc3JjPVwiJHtzcmN9XCIgLz5gKSk7XHJcbiAgfVxyXG5cclxuICByZW5kZXJIdG1sKGhlYWQsIGJvZHksIHNyYykge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpPT4ge1xyXG4gICAgICAkLmdldChzcmMsIChodG1sKT0+IHtcclxuICAgICAgICBjb25zdCBsaW5rcyA9IGh0bWwubWF0Y2goLzxsaW5rLio/Pi9pZykgfHwgW107XHJcbiAgICAgICAgZm9yKGxldCBsaW5rIG9mIGxpbmtzKSB7XHJcbiAgICAgICAgICBpZihsaW5rLm1hdGNoKC9zdHlsZXNoZWV0L2kpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGhyZWYgPSBsaW5rLm1hdGNoKC9ocmVmXFxzKj1cXHMqWydcIl0oLiopWydcIl0vaSk7XHJcbiAgICAgICAgICAgIGlmKGhyZWYpIHtcclxuICAgICAgICAgICAgICBoZWFkLmFkZChocmVmWzFdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBjb250ZW50ID0gaHRtbC5tYXRjaCgvPGJvZHkuKj8+KFtcXFNcXHNdKik8XFwvYm9keT4vaSk7XHJcbiAgICAgICAgaWYoY29udGVudCkge1xyXG4gICAgICAgICAgYm9keS5wdXNoKEJvb2tQcmludGVyLndyYXAoY29udGVudFsxXSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgIH0pLmZhaWwoKGUpPT4ge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZS5yZXNwb25zZVRleHQpO1xyXG4gICAgICAgIHJlamVjdCgpO1xyXG4gICAgICB9KTtcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICByZW5kZXJIZWFkKGhlYWQpIHtcclxuICAgIGNvbnN0IGNvbnRlbnQgPSBbXTtcclxuICAgIGhlYWQuZm9yRWFjaCgoayk9PiBjb250ZW50LnB1c2goYDxsaW5rIHJlbD1cInN0eWxlc2hlZXRcIiBocmVmPVwiJHtrfVwiPmApKTtcclxuICAgIGNvbnRlbnQucHVzaCh0aGlzLnN0eWxlU2hlZXQ/IGA8bGluayByZWw9XCJzdHlsZXNoZWV0XCIgaHJlZj1cIiR7dGhpcy5zdHlsZVNoZWV0fVwiPmA6IEJvb2tQcmludGVyLmRlZmF1bHRTdHlsZVNoZWV0KCkpO1xyXG4gICAgcmV0dXJuIGNvbnRlbnQuam9pbignXFxuJyk7XHJcbiAgfVxyXG5cclxuICB1c2VJRnJhbWUoKSB7XHJcbiAgICBjb25zdCBpc0Nocm9taXVtID0gdGhpcy53bmQuY2hyb21lLFxyXG4gICAgICB3aW5OYXYgPSB0aGlzLnduZC5uYXZpZ2F0b3IsXHJcbiAgICAgIHZlbmRvck5hbWUgPSB3aW5OYXYudmVuZG9yLFxyXG4gICAgICBpc0lFZWRnZSA9IHdpbk5hdi51c2VyQWdlbnQuaW5kZXhPZihcIkVkZ2VcIik+LTEsXHJcbiAgICAgIGlzSU9TQ2hyb21lID0gd2luTmF2LnVzZXJBZ2VudC5tYXRjaChcIkNyaU9TXCIpO1xyXG4gICAgbGV0IHVzZTtcclxuICAgIGlmKGlzSU9TQ2hyb21lKXtcclxuICAgICAgdXNlID0gdHJ1ZTtcclxuICAgIH0gZWxzZSBpZihpc0Nocm9taXVtICYmIHZlbmRvck5hbWU9PT0nR29vZ2xlIEluYy4nICYmICFpc0lFZWRnZSkge1xyXG4gICAgICB1c2UgPSB0cnVlO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdXNlID0gZmFsc2U7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdXNlO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGRlZmF1bHRTdHlsZVNoZWV0KCkge1xyXG4gICAgcmV0dXJuIGBcclxuICAgICAgPHN0eWxlIHR5cGU9XCJ0ZXh0L2Nzc1wiPlxyXG4gICAgICAgIGJvZHkge1xyXG4gICAgICAgICAgbWFyZ2luOiAwO1xyXG4gICAgICAgICAgcGFkZGluZzogMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLmZiM2QtcHJpbnRlci1wYWdlIHtcclxuICAgICAgICAgIHBhZ2UtYnJlYWstYWZ0ZXI6IGFsd2F5cztcclxuICAgICAgICB9XHJcbiAgICAgIDwvc3R5bGU+XHJcbiAgICBgLmZiM2RRRmlsdGVyKCk7XHJcbiAgfVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9qcy9jbGFzc2VzL0Jvb2tQcmludGVyLmpzIiwiaW1wb3J0IHskfSBmcm9tICcuLi9saWJzJztcclxuaW1wb3J0IFZpZXcgZnJvbSAnVmlldyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCb29rVmlldyBleHRlbmRzIFZpZXcge1xyXG5cclxuICBzdGF0aWMgUEFHRV9IQU5ETEVSX0RFTEFZID0gMTAwMDtcclxuXHJcbiAgY29uc3RydWN0b3IoY29udGFpbmVyLCBvbkxvYWQsIHRlbXBsYXRlLCBoYW5kbGVyKSB7XHJcbiAgICBzdXBlcihjb250YWluZXIsIG9uTG9hZCwgdGVtcGxhdGUsIGhhbmRsZXIpO1xyXG4gIH1cclxuXHJcbiAgaW5pdFZpZXcoKSB7XHJcbiAgICB0aGlzLnZpZXcgPSB0aGlzLmNvbnRhaW5lci5maW5kKCcudmlldycpO1xyXG4gICAgdGhpcy5ib29rbWFya3NWaWV3ID0gdGhpcy5jb250YWluZXIuZmluZCgnLndpZEJvb2ttYXJrcycpO1xyXG4gICAgdGhpcy50aHVtYm5haWxzVmlldyA9IHRoaXMuY29udGFpbmVyLmZpbmQoJy53aWRUaHVtYm5haWxzJyk7XHJcbiAgICB0aGlzLnNlYXJjaFZpZXcgPSB0aGlzLmNvbnRhaW5lci5maW5kKCcud2lkU2VhcmNoJyk7XHJcbiAgfVxyXG5cclxuICBnZXRIYW5kbGVycyhpZCkge1xyXG4gICAgbGV0IGhhbmRsZXJzO1xyXG4gICAgaWYoaWQ9PT0naW5wUGFnZScpIHtcclxuICAgICAgaGFuZGxlcnMgPSBbe1xyXG4gICAgICAgIGlucFBhZ2U6IChlLCBkYXRhKT0+IHRoaXMuY2FsbExhdGVyKHN1cGVyLmdldEhhbmRsZXJzKGlkKSwgaWQsIGUsIGRhdGEsIEJvb2tWaWV3LlBBR0VfSEFORExFUl9ERUxBWSlcclxuICAgICAgfV07XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgaGFuZGxlcnMgPSBzdXBlci5nZXRIYW5kbGVycyhpZCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gaGFuZGxlcnM7XHJcbiAgfVxyXG5cclxuICBvbkl0ZW1TdGF0ZUNoYW5nZWQoaWQsIHN0YXRlKSB7XHJcbiAgICBpZihpZD09PSdjbWRGdWxsU2NyZWVuJykge1xyXG4gICAgICBpZihzdGF0ZS5hY3RpdmUpIHtcclxuICAgICAgICB0aGlzLnBhcmVudENvbnRhaW5lci5hZGRDbGFzcygnZnVsbHNjcmVlbicpO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIHRoaXMucGFyZW50Q29udGFpbmVyLnJlbW92ZUNsYXNzKCdmdWxsc2NyZWVuJyk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldFZpZXcoKSB7XHJcbiAgICByZXR1cm4gdGhpcy52aWV3O1xyXG4gIH1cclxuXHJcbiAgZ2V0Qm9va21hcmtzVmlldygpIHtcclxuICAgIHJldHVybiB0aGlzLmJvb2ttYXJrc1ZpZXc7XHJcbiAgfVxyXG5cclxuICBnZXRUaHVtYm5haWxzVmlldygpIHtcclxuICAgIHJldHVybiB0aGlzLnRodW1ibmFpbHNWaWV3O1xyXG4gIH1cclxuXHJcbiAgZ2V0U2VhcmNoVmlldygpIHtcclxuICAgIHJldHVybiB0aGlzLnNlYXJjaFZpZXc7XHJcbiAgfVxyXG5cclxuICBnZXRGb3JtcygpIHtcclxuICAgIHJldHVybiBbXHJcbiAgICBdO1xyXG4gIH1cclxuXHJcbiAgZ2V0TGlua3MoKSB7XHJcbiAgICByZXR1cm4gW1xyXG4gICAgICAnY21kWm9vbUluJyxcclxuICAgICAgJ2NtZFpvb21PdXQnLFxyXG4gICAgICAnY21kRGVmYXVsdFpvb20nLFxyXG4gICAgICAnY21kVG9jJyxcclxuICAgICAgJ2NtZEZhc3RCYWNrd2FyZCcsXHJcbiAgICAgICdjbWRCYWNrd2FyZCcsXHJcbiAgICAgICdjbWRCaWdCYWNrd2FyZCcsXHJcbiAgICAgICdjbWRGb3J3YXJkJyxcclxuICAgICAgJ2NtZEJpZ0ZvcndhcmQnLFxyXG4gICAgICAnY21kRmFzdEZvcndhcmQnLFxyXG4gICAgICAnY21kU2F2ZScsXHJcbiAgICAgICdjbWRQcmludCcsXHJcbiAgICAgICdjbWRGdWxsU2NyZWVuJyxcclxuICAgICAgJ2NtZFNtYXJ0UGFuJyxcclxuICAgICAgJ2NtZFNpbmdsZVBhZ2UnLFxyXG4gICAgICAnY21kU291bmRzJyxcclxuICAgICAgJ2NtZFN0YXRzJyxcclxuICAgICAgJ2NtZExpZ2h0aW5nVXAnLFxyXG4gICAgICAnY21kTGlnaHRpbmdEb3duJyxcclxuICAgICAgJ2NtZENsb3NlVG9jJyxcclxuICAgICAgJ2NtZEJvb2ttYXJrcycsXHJcbiAgICAgICdjbWRTZWFyY2gnLFxyXG4gICAgICAnY21kVGh1bWJuYWlscycsXHJcbiAgICAgICdjbWRQZW5kaW5nUGxheSdcclxuICAgIF07XHJcbiAgfVxyXG5cclxuICBnZXRXaWRnZXRzKCkge1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAgJ3dpZExvYWRpbmdQcm9ncmVzcycsXHJcbiAgICAgICd3aWRGbG9hdFduZCcsXHJcbiAgICAgICd3aWRUb2NNZW51JyxcclxuICAgICAgJ3dpZEJvb2ttYXJrcycsXHJcbiAgICAgICd3aWRUaHVtYm5haWxzJyxcclxuICAgICAgJ3dpZFNlYXJjaCcsXHJcbiAgICAgICd3aWRTZXR0aW5ncycsXHJcbiAgICAgICd3aWRMb2FkaW5nJyxcclxuICAgICAgJ3dpZFBlbmRpbmdQbGF5J1xyXG4gICAgXTtcclxuICB9XHJcblxyXG4gIGdldElucHV0cygpIHtcclxuICAgIHJldHVybiBbXHJcbiAgICAgICdpbnBQYWdlJyxcclxuICAgICAgJ2lucFBhZ2VzJ1xyXG4gICAgXTtcclxuICB9XHJcblxyXG4gIGdldFRleHRzKCkge1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAgJ3R4dExvYWRpbmdQcm9ncmVzcydcclxuICAgIF07XHJcbiAgfVxyXG5cclxuICBnZXRUZW1wbGF0ZSgpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGh0bWw6ICd0ZW1wbGF0ZXMvZGVmYXVsdC1ib29rLXZpZXcuaHRtbCcsXHJcbiAgICAgIHN0eWxlczogW1xyXG4gICAgICAgICdjc3MvYmxhY2stYm9vay12aWV3LmNzcydcclxuICAgICAgXSxcclxuICAgICAgbGlua3M6IFtcclxuICAgICAgICB7XHJcbiAgICAgICAgICByZWw6ICdzdHlsZXNoZWV0JyxcclxuICAgICAgICAgIGhyZWY6ICdjc3MvZm9udC1hd2Vzb21lLm1pbi5jc3MnXHJcbiAgICAgICAgfVxyXG4gICAgICBdLFxyXG4gICAgICBzY3JpcHQ6ICdqcy9kZWZhdWx0LWJvb2stdmlldy5qcydcclxuICAgIH07XHJcbiAgfVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9qcy9jbGFzc2VzL0Jvb2tWaWV3LmpzIiwiaW1wb3J0IEJvb2tQcm9wc0J1aWxkZXIgZnJvbSAnLi9Cb29rUHJvcHNCdWlsZGVyJztcclxuaW1wb3J0IEltYWdlRmFjdG9yeSBmcm9tICdJbWFnZUZhY3RvcnknO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2xiQm9va1Byb3BzQnVpbGRlciBleHRlbmRzIEJvb2tQcm9wc0J1aWxkZXIge1xyXG4gIGNvbnN0cnVjdG9yKGNvbnRleHQsIHBhZ2VDYWxsYmFjaywgcGFnZXMsIG9uUmVhZHksIHN0eWxlKSB7XHJcbiAgICBzdXBlcihvblJlYWR5LCBzdHlsZSk7XHJcbiAgICB0aGlzLmNhbGNTaGVldHMocGFnZXMpO1xyXG4gICAgdGhpcy5wYWdlQ2FsbGJhY2sgPSBwYWdlQ2FsbGJhY2s7XHJcbiAgICB0aGlzLmJpbmRzID0ge1xyXG4gICAgICBwYWdlQ2FsbGJhY2s6IHBhZ2VDYWxsYmFjay5iaW5kKHRoaXMpXHJcbiAgICB9O1xyXG4gICAgdGhpcy5pbWFnZUZhY3RvcnkgPSBuZXcgSW1hZ2VGYWN0b3J5KGNvbnRleHQpO1xyXG5cclxuICAgIGlmKHBhZ2VzPjApIHtcclxuICAgICAgY29uc3QgdGVzdCA9IHRoaXMuaW1hZ2VGYWN0b3J5LmJ1aWxkKHBhZ2VDYWxsYmFjaygwKSwgMCwgdGhpcy5kZWZhdWx0cy5zaGVldC53aWR0aFRleGVscywgdGhpcy5kZWZhdWx0cy5zaGVldC5oZWlnaHRUZXhlbHMsIHRoaXMuZGVmYXVsdHMuc2hlZXQuY29sb3IpO1xyXG4gICAgICB0ZXN0Lm9uTG9hZCA9ICgpPT4ge1xyXG4gICAgICAgIHRoaXMuY2FsY1Byb3BzKHRlc3Qud2lkdGgsIHRlc3QuaGVpZ2h0KTtcclxuICAgICAgICB0ZXN0LmRpc3Bvc2UoKTtcclxuICAgICAgICB0aGlzLnJlYWR5KCk7XHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgdGhpcy5wcm9wcyA9IHRoaXMuZGVmYXVsdHM7XHJcbiAgICAgIHRoaXMucmVhZHkoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2pzL2NsYXNzZXMvQ2xiQm9va1Byb3BzQnVpbGRlci5qcyIsImltcG9ydCBTaGVldEJsb2NrIGZyb20gJy4vU2hlZXRCbG9jayc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb3ZlciBleHRlbmRzIFNoZWV0QmxvY2sge1xyXG5cclxuICBjb25zdHJ1Y3Rvcih2aXN1YWwsIHAsIGFuZ2xlLCBzdGF0ZSkge1xyXG4gICAgc3VwZXIodmlzdWFsLCBwLCAwLCAxLCBhbmdsZSwgc3RhdGUpO1xyXG4gIH1cclxuXHJcbiAgZ2V0UHJvcHMoKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAuLi50aGlzLnAuY292ZXIsXHJcbiAgICAgIHNoZWV0czogMVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGxvYWRQb2ludHMoKSB7XHJcbiAgICBjb25zdCBvcGVuZWRJbnRlcnBvbGF0aW9uSW5kZWNlcyA9IFtcclxuICAgICAgWzIsMyw0XSxcclxuICAgICAgWzIsMyw0LDUsNl1cclxuICAgIF0sXHJcbiAgICBjbG9zZWRJbnRlcnBvbGF0aW9uSW5kZWNlcyA9IFtcclxuICAgICAgWzAsMSwyXSxcclxuICAgICAgWzAsMSwyXVxyXG4gICAgXSxcclxuICAgIGludGVycG9sYXRpb25Qb2ludHMgPSBbXHJcbiAgICAgIHtcclxuICAgICAgICB4OiBbXHJcbiAgICAgICAgICAgICBbMCwwLjI4NzcsMC42MzQ3LDAuODE3NCwxLjAwMDBdLFxyXG4gICAgICAgICAgICAgWzAsMC4yODMxLDAuNjI1NiwwLjgwODIsMC45OTA5XSxcclxuICAgICAgICAgICAgIFswLDAuMjYwMywwLjU5MzYsMC43NzYzLDAuOTU4OV0sXHJcbiAgICAgICAgICAgICBbMCwwLjEzNzAsMC4zODgxLDAuNTM0MiwwLjY3NThdLFxyXG4gICAgICAgICAgICAgWzAsMCwwLDAsMF1cclxuICAgICAgICBdLFxyXG4gICAgICAgIHk6IFtcclxuICAgICAgICAgICAgIFswLDAsMCwwLDBdLFxyXG4gICAgICAgICAgICAgWzAsMC4wMiwwLjAwNSwtMC4wMDEsLTAuMDAyNV0sXHJcbiAgICAgICAgICAgICBbMCwwLjA0LDAuMDEsLTAuMDAyLC0wLjAwNV0sXHJcbiAgICAgICAgICAgICBbMCwgMC4yNDY2LCAwLjQ3OTUsIDAuNTcwOCwgMC42NzU4XSxcclxuICAgICAgICAgICAgIFswLCAwLjI4NzcsIDAuNjM0NywgMC44MTc0LCAxLjAwMDBdXHJcbiAgICAgICAgXVxyXG4gICAgICB9LFxyXG4gICAgICB7XHJcbiAgICAgICAgeDogW1xyXG4gICAgICAgICAgICAgWzAsMC4yODc3LDAuNjM0NywwLjgxNzQsMS4wMDAwXSxcclxuICAgICAgICAgICAgIFswLDAuMjgzMSwwLjYyNTYsMC44MDgyLDAuOTkwOV0sXHJcbiAgICAgICAgICAgICBbMCwwLjI2MDMsMC41OTM2LDAuNzc2MywwLjk1ODldLFxyXG4gICAgICAgICAgICAgWzAuMDAwLDAuMjMzLDAuNTYzLDAuNzQ2LDAuOTI3XSxcclxuICAgICAgICAgICAgIFswLjAwMCwwLjE0NCwwLjQzMywwLjYxMywwLjc5Nl0sXHJcbiAgICAgICAgICAgICBbMC4wMDAsMC4wNzAsMC4yODgsMC40NTUsMC42MjZdLFxyXG4gICAgICAgICAgICAgWzAsMCwwLDAsMF1cclxuICAgICAgICBdLFxyXG4gICAgICAgIHk6IFtcclxuICAgICAgICAgICAgIFswLDAsMCwwLDBdLFxyXG4gICAgICAgICAgICAgWzAsMC4wMiwwLjAwNSwtMC4wMDEsLTAuMDAyNV0sXHJcbiAgICAgICAgICAgICBbMCwwLjA0LDAuMDEsLTAuMDAyLC0wLjAwNV0sXHJcbiAgICAgICAgICAgICBbMC4wMDAsMC4xNjgsMC4yNjksMC4yNzAsMC4yNTVdLFxyXG4gICAgICAgICAgICAgWzAuMDAwLDAuMjQ1LDAuNDM1LDAuNDU4LDAuNDYwXSxcclxuICAgICAgICAgICAgIFswLjAwMCwwLjI3OCwwLjU0NCwwLjYxNCwwLjY3M10sXHJcbiAgICAgICAgICAgICBbMCwgMC4yODc3LCAwLjYzNDcsIDAuODE3NCwgMS4wMDAwXVxyXG4gICAgICAgIF1cclxuICAgICAgfVxyXG4gICAgXTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGludGVycG9sYXRpb25Qb2ludHMsXHJcbiAgICAgIG9wZW5lZEludGVycG9sYXRpb25JbmRlY2VzLFxyXG4gICAgICBjbG9zZWRJbnRlcnBvbGF0aW9uSW5kZWNlc1xyXG4gICAgfTtcclxuICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vanMvY2xhc3Nlcy9Db3Zlci5qcyIsImltcG9ydCBTaGVldENzc0xheWVyIGZyb20gJy4vU2hlZXRDc3NMYXllcic7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDc3NMYXllcnNNYW5hZ2VyIHtcclxuICBjb25zdHJ1Y3Rvcihib29rKSB7XHJcbiAgICB0aGlzLmJvb2sgPSBib29rO1xyXG4gICAgdGhpcy5wcm9wcyA9IGJvb2sucC5jc3NMYXllclByb3BzO1xyXG4gICAgdGhpcy52aXN1YWwgPSBib29rLnZpc3VhbDtcclxuICAgIHRoaXMucGFnZU1hbmFnZXIgPSBib29rLnBhZ2VNYW5hZ2VyO1xyXG4gICAgdGhpcy53cmFwcGVycyA9IHt9O1xyXG4gICAgdGhpcy5wZW5kaW5ncyA9IFtdO1xyXG4gIH1cclxuXHJcbiAgZ2V0QWN0aXZlcygpIHtcclxuICAgIGxldCBwYWdlID0gdGhpcy5ib29rLmdldFBhZ2UoKSwgcGFnZXMgPSB0aGlzLmJvb2suZ2V0UGFnZXMoKSwgYWNzID0gcGFnZT09PTAgfHwgcGFnZT09PXBhZ2VzLTE/IFtwYWdlXTogW3BhZ2UsIHBhZ2UrMV07XHJcbiAgICBpZighdGhpcy53cmFwcGVyc1swXSAmJiBwYWdlIT09MCkge1xyXG4gICAgICBhY3MgPSBbMCwgLi4uYWNzXTtcclxuICAgIH1cclxuICAgIHJldHVybiBhY3M7XHJcbiAgfVxyXG5cclxuICBkaXNwb3NlKCkge1xyXG4gICAgZm9yKGxldCB3IG9mIE9iamVjdC52YWx1ZXModGhpcy53cmFwcGVycykpIHtcclxuICAgICAgdy5sYXllcnMuZm9yRWFjaCgobCk9PiBsLmRpc3Bvc2UoKSk7XHJcbiAgICB9XHJcbiAgICBkZWxldGUgdGhpcy53cmFwcGVycztcclxuICB9XHJcblxyXG4gIHNob3coKSB7XHJcbiAgICB0aGlzLmhpZGRlbiA9IGZhbHNlO1xyXG4gICAgZm9yKGxldCBuIG9mIHRoaXMuZ2V0QWN0aXZlcygpKSB7XHJcbiAgICAgIGNvbnN0IHcgPSB0aGlzLndyYXBwZXJzW25dO1xyXG4gICAgICBpZih3KSB7XHJcbiAgICAgICAgaWYody5zdGF0ZT09PSdyZWFkeScgJiYgdy5sYXllcnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICBjb25zdCBibG9jayA9IHRoaXMuYm9vay5nZXRCbG9ja0J5UGFnZShuKTtcclxuICAgICAgICAgIHcubGF5ZXJzLmZvckVhY2goKGwpPT4ge1xyXG4gICAgICAgICAgICBpZihsLmlzSGlkZGVuKCkpIHtcclxuICAgICAgICAgICAgICBsLnVwZGF0ZShibG9jayk7XHJcbiAgICAgICAgICAgICAgbC5zaG93KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICBjb25zdCB3ID0gdGhpcy53cmFwcGVyc1tuXSA9IHtcclxuICAgICAgICAgIHN0YXRlOiAnbG9hZGluZycsXHJcbiAgICAgICAgICBsYXllcnM6IFtdXHJcbiAgICAgICAgfTtcclxuICAgICAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpPT4ge1xyXG4gICAgICAgICAgdGhpcy5wYWdlTWFuYWdlci5nZXRMYXllcnMobiwgKGxheWVycyk9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGZpbmlzaCA9ICgpPT4ge1xyXG4gICAgICAgICAgICAgIGlmKGxheWVycy5sZW5ndGggJiYgdGhpcy53cmFwcGVycykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYmxvY2sgPSB0aGlzLmJvb2suZ2V0QmxvY2tCeVBhZ2Uobik7XHJcbiAgICAgICAgICAgICAgICBmb3IobGV0IGwgb2YgbGF5ZXJzKSB7XHJcbiAgICAgICAgICAgICAgICAgIGNvbnN0IHNsID0gbmV3IFNoZWV0Q3NzTGF5ZXIodGhpcy52aXN1YWwsIGJsb2NrLCB7Li4udGhpcy5wcm9wcywgcGFnZU51bWJlcjogbn0pO1xyXG4gICAgICAgICAgICAgICAgICB3LmxheWVycy5wdXNoKHNsKTtcclxuICAgICAgICAgICAgICAgICAgc2wuc2V0KGwuY3NzLCBsLmh0bWwsIGwuanMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKT0+IHtcclxuICAgICAgICAgICAgICAgICAgaWYoIXRoaXMuaGlkZGVuICYmIH50aGlzLmdldEFjdGl2ZXMoKS5pbmRleE9mKG4pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdy5sYXllcnMuZm9yRWFjaCgobCk9PiBsLnNob3coKSk7XHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sIDEwKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgdy5zdGF0ZSA9ICdyZWFkeSc7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGlmKHRoaXMud3JhcHBlcnMgJiYgKG49PT0wIHx8IHRoaXMud3JhcHBlcnNbMF0uc3RhdGUhPT0nbG9hZGluZycpKSB7XHJcbiAgICAgICAgICAgICAgZmluaXNoKCk7XHJcbiAgICAgICAgICAgICAgaWYobj09PTApIHtcclxuICAgICAgICAgICAgICAgIGZvcihsZXQgZiBvZiB0aGlzLnBlbmRpbmdzKSB7XHJcbiAgICAgICAgICAgICAgICAgIGYoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMucGVuZGluZ3MgPSBbXTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5wZW5kaW5ncy5wdXNoKGZpbmlzaCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICB9XHJcblxyXG4gIGhpZGUoKSB7XHJcbiAgICB0aGlzLmhpZGRlbiA9IHRydWU7XHJcbiAgICBjb25zdCB3YWl0ID0gW107XHJcbiAgICBmb3IobGV0IHcgb2YgT2JqZWN0LnZhbHVlcyh0aGlzLndyYXBwZXJzKSkge1xyXG4gICAgICB3LmxheWVycy5mb3JFYWNoKChsKT0+IHdhaXQucHVzaChsLmhpZGUoKSkpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFByb21pc2UuYWxsKHdhaXQpO1xyXG4gIH1cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9qcy9jbGFzc2VzL0Nzc0xheWVyc01hbmFnZXIuanMiLCJpbXBvcnQgeyQsIFRIUkVFfSBmcm9tICcuLi9saWJzJ1xyXG5pbXBvcnQgQ2FjaGUgZnJvbSAnQ2FjaGUnO1xyXG5pbXBvcnQgTG9hZGluZ0FuaW1hdGlvbiBmcm9tICdMb2FkaW5nQW5pbWF0aW9uJztcclxuaW1wb3J0IEltYWdlRmFjdG9yeSBmcm9tICdJbWFnZUZhY3RvcnknO1xyXG5pbXBvcnQgVGV4dHVyZUFuaW1hdG9yIGZyb20gJ1RleHR1cmVBbmltYXRvcic7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQYWdlTWFuYWdlciB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHZpc3VhbCwgYm9vaywgcCkge1xyXG4gICAgdGhpcy52aXN1YWwgPSB2aXN1YWw7XHJcbiAgICB0aGlzLmJvb2sgPSBib29rO1xyXG4gICAgdGhpcy5wYWdlUXVlcnkgPSAnJztcclxuICAgIHRoaXMucCA9IHA7XHJcbiAgICB0aGlzLnBhZ2VDYWNoZSA9IG5ldyBDYWNoZShwLmNhY2hlZFBhZ2VzKTtcclxuICAgIHRoaXMucmVzb3VyY2VzQ2FjaGUgPSBuZXcgQ2FjaGUoKTtcclxuXHJcbiAgICB0aGlzLmNhbnZhc2VzID0gW107XHJcbiAgICBmb3IobGV0IGk9MDsgaTwxMDsgKytpKSB7XHJcbiAgICAgIGNvbnN0IGMgPSAkKCc8Y2FudmFzPicpWzBdO1xyXG4gICAgICB0aGlzLmNhbnZhc2VzLnB1c2goe2MsIGN0eDogYy5nZXRDb250ZXh0KCcyZCcpfSk7XHJcbiAgICB9XHJcbiAgICB0aGlzLm5leHRDYW52YXMgPSAwO1xyXG5cclxuICAgIHRoaXMuaW1hZ2VGYWN0b3J5ID0gbmV3IEltYWdlRmFjdG9yeSh7Li4udmlzdWFsLCBkaXNwYXRjaEV2ZW50OiBib29rLmRpc3BhdGNoRXZlbnQuYmluZChib29rKSwgcmVuZGVyQ2FudmFzOiB0aGlzLmNhbnZhc2VzWzBdLmMsIHJlbmRlckNhbnZhc0N0eDogdGhpcy5jYW52YXNlc1swXS5jdHh9LCB0aGlzLnJlc291cmNlc0NhY2hlKTtcclxuXHJcbiAgICB0aGlzLmxvYWRpbmdzID0gW107XHJcbiAgICB0aGlzLnJlbmRlclF1ZXVlID0gW107XHJcbiAgICB0aGlzLnByZWRpY3RlZFJlcXVlc3RzID0gW107XHJcblxyXG4gICAgdGhpcy50bXBNYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCgpO1xyXG4gICAgdmlzdWFsLmFkZE9iamVjdChuZXcgVEhSRUUuTWVzaChuZXcgVEhSRUUuUGxhbmVHZW9tZXRyeSgxZS0zLCAxZS0zKSwgdGhpcy50bXBNYXRlcmlhbCkpO1xyXG5cclxuICAgIHRoaXMubG9hZGluZ0FuaW1hdGlvbiA9IHRydWU7XHJcbiAgICB0aGlzLmxvYWRpbmcgPSB7fTtcclxuICAgIHRoaXMubG9hZGluZ1twLmNvdmVyLmNvbG9yXSA9IHRoaXMuY3JlYXRlTG9hZGluZ1RleHR1cmUocC5jb3Zlcik7XHJcbiAgICBpZihwLnBhZ2UuY29sb3IhPT1wLmNvdmVyLmNvbG9yKSB7XHJcbiAgICAgIHRoaXMubG9hZGluZ1twLnBhZ2UuY29sb3JdID0gdGhpcy5jcmVhdGVMb2FkaW5nVGV4dHVyZShwLnBhZ2UpO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuYm9vay5hZGRFdmVudExpc3RlbmVyKCdhZnRlckFuaW1hdGlvbicsIHRoaXMubG9hZFByZWRpY3RlZFBhZ2VzLmJpbmQodGhpcykpO1xyXG5cclxuICAgIHRoaXMudHVybk9uRXZlbnRzKCk7XHJcblxyXG4gICAgdmlzdWFsLmFkZFJlbmRlckNhbGxiYWNrKHRoaXMudXBkYXRlLmJpbmQodGhpcykpO1xyXG5cclxuICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4odGhpcy51cGRhdGVSZW5kZXJRdWV1ZS5iaW5kKHRoaXMpKTtcclxuICB9XHJcblxyXG4gIGNyZWF0ZUxvYWRpbmdUZXh0dXJlKHApIHtcclxuICAgIGNvbnN0IHNwcml0ZVRpbGVzID0gNiwgaGVpZ2h0VGV4ZWxzID0gcC5oZWlnaHQvcC53aWR0aCpwLndpZHRoVGV4ZWxzLFxyXG4gICAgICBzY2FsZSA9IE1hdGguc3FydCg0LjUqMjEwKjQuNSoyOTcvKHAud2lkdGhUZXhlbHMqaGVpZ2h0VGV4ZWxzKSksXHJcbiAgICAgIGFuaW1hdGlvbiA9IG5ldyBMb2FkaW5nQW5pbWF0aW9uKHNjYWxlKnAud2lkdGhUZXhlbHMsIHNjYWxlKmhlaWdodFRleGVscywgcC5jb2xvciksXHJcbiAgICAgIGFuaW1hdG9yID0gbmV3IFRleHR1cmVBbmltYXRvcihhbmltYXRpb24uY3JlYXRlU3ByaXRlKHNwcml0ZVRpbGVzKSwgc3ByaXRlVGlsZXMsIDEsIHNwcml0ZVRpbGVzLCAwLjIpO1xyXG4gICAgYW5pbWF0aW9uLmRpc3Bvc2UoKTtcclxuICAgIHJldHVybiBhbmltYXRvcjtcclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICB0aGlzLnR1cm5PZmZFdmVudHMoKTtcclxuICAgIGZvcihsZXQgY29sb3Igb2YgT2JqZWN0LmtleXModGhpcy5sb2FkaW5nKSkge1xyXG4gICAgICB0aGlzLmxvYWRpbmdbY29sb3JdLmRpc3Bvc2UoKTtcclxuICAgIH1cclxuICAgIGRlbGV0ZSB0aGlzLmxvYWRpbmc7XHJcbiAgICB0aGlzLnJlc291cmNlc0NhY2hlLmRpc3Bvc2UoKTtcclxuICAgIHRoaXMucGFnZUNhY2hlLmRpc3Bvc2UoKTtcclxuICAgIGZvcihsZXQgbyBvZiB0aGlzLmNhbnZhc2VzKSB7XHJcbiAgICAgIG8uYy5oZWlnaHQgPSBvLmMud2lkdGggPSAwO1xyXG4gICAgfVxyXG4gICAgZGVsZXRlIHRoaXMuY2FudmFzZXM7XHJcbiAgfVxyXG5cclxuICBpc0NvdmVyKG4pIHtcclxuICAgIHJldHVybiBuPDIgfHwgbj49MioodGhpcy5wLnNoZWV0cysxKTtcclxuICB9XHJcblxyXG4gIGlzTW9iaWxlKCkge1xyXG4gICAgICByZXR1cm4gdGhpcy52aXN1YWwuaXNNb2JpbGUoKTtcclxuICB9XHJcblxyXG4gIGdldFBhZ2VTdGF0ZShuKSB7XHJcbiAgICBjb25zdCBvYmplY3QgPSB0aGlzLnBhZ2VDYWNoZS5nZXQobik7XHJcbiAgICByZXR1cm4gb2JqZWN0PyBvYmplY3Quc3RhdGU6IHVuZGVmaW5lZDtcclxuICB9XHJcblxyXG4gIGVuYWJsZUxvYWRpbmdBbmltYXRpb24oZW5hYmxlKSB7XHJcbiAgICB0aGlzLmxvYWRpbmdBbmltYXRpb24gPSBlbmFibGU7XHJcbiAgICBmb3IobGV0IG8gb2YgdGhpcy5sb2FkaW5ncykge1xyXG4gICAgICB0aGlzLnNldHVwTWF0ZXJpYWwobyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICB1cGRhdGUoZHQpIHtcclxuICAgIGlmKHRoaXMubG9hZGluZ0FuaW1hdGlvbikge1xyXG4gICAgICBjb25zdCBsb2FkaW5nID0ge307XHJcbiAgICAgIGZvcihsZXQgbyBvZiB0aGlzLmxvYWRpbmdzKSB7XHJcbiAgICAgICAgaWYoby5pc0FjdGl2ZSgpKSB7XHJcbiAgICAgICAgICBsb2FkaW5nW28uY29sb3JdID0gdHJ1ZTs7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGZvcihsZXQgY29sb3Igb2YgT2JqZWN0LmtleXMobG9hZGluZykpIHtcclxuICAgICAgICB0aGlzLmxvYWRpbmdbY29sb3JdLnVwZGF0ZShkdCk7XHJcbiAgICAgICAgdGhpcy5ib29rLnVwZGF0ZVRocmVlKCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJlbW92ZUZyb21Mb2FkaW5ncyhvKSB7XHJcbiAgICBjb25zdCBpID0gdGhpcy5sb2FkaW5ncy5pbmRleE9mKG8pO1xyXG4gICAgaWYofmkpIHtcclxuICAgICAgdGhpcy5sb2FkaW5ncy5zcGxpY2UoaSwgMSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZW1vdmVGcm9tUmVuZGVyUXVldWUobykge1xyXG4gICAgY29uc3QgaSA9IHRoaXMucmVuZGVyUXVldWUuaW5kZXhPZihvKTtcclxuICAgIGlmKH5pKSB7XHJcbiAgICAgIHRoaXMucmVuZGVyUXVldWUuc3BsaWNlKGksIDEpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmVmcmVzaFBhZ2VRdWVyeShuLCBxdWVyeT0nJykge1xyXG4gICAgdGhpcy5wYWdlUXVlcnkgPSBxdWVyeTtcclxuICAgIGNvbnN0IG9iamVjdCA9IHRoaXMucGFnZUNhY2hlLmdldChuKTtcclxuICAgIGlmKG9iamVjdCAmJiBvYmplY3Qud3JhcHBlciAmJiBvYmplY3Qud3JhcHBlci5zZXRRdWVyeSkge1xyXG4gICAgICBpZighdGhpcy5wYWdlQ2FjaGUucmVtb3ZlKG4pKSB7XHJcbiAgICAgICAgb2JqZWN0LndyYXBwZXIuc2V0UXVlcnkocXVlcnkpO1xyXG4gICAgICAgIHRoaXMucHVzaEluUmVuZGVyUXVldWUob2JqZWN0KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmVmcmVzaFpvb20oKSB7XHJcbiAgICBpZih0aGlzLnAuYXV0b1Jlc29sdXRpb24uZW5hYmxlKSB7XHJcbiAgICAgIGNvbnN0IGVzID0gW107XHJcbiAgICAgIHRoaXMucGFnZUNhY2hlLmZvckVhY2goKGUpPT4ge1xyXG4gICAgICAgIGVzLnB1c2goZSk7XHJcbiAgICAgIH0pO1xyXG4gICAgICBlcy5mb3JFYWNoKChlKT0+IHtcclxuICAgICAgICBjb25zdCBvYmplY3QgPSBlWzFdO1xyXG4gICAgICAgIGlmKG9iamVjdCAmJiBvYmplY3Qud3JhcHBlcikge1xyXG4gICAgICAgICAgaWYoIXRoaXMucGFnZUNhY2hlLnJlbW92ZShlWzBdKSkge1xyXG4gICAgICAgICAgICB0aGlzLnB1c2hJblJlbmRlclF1ZXVlKG9iamVjdCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldExheWVycyhuLCBjbGIpIHtcclxuICAgIGlmKHRoaXMucC5jc3NMYXllcnNMb2FkZXIpIHtcclxuICAgICAgdGhpcy5wLmNzc0xheWVyc0xvYWRlcihuLCAoLi4uYXJncyk9PiB7XHJcbiAgICAgICAgY29uc3Qgb2JqZWN0ID0gdGhpcy5wYWdlQ2FjaGUuZ2V0KG4pO1xyXG4gICAgICAgIGlmKG9iamVjdCkge1xyXG4gICAgICAgICAgaWYob2JqZWN0LnN0YXRlIT09J2FjdGl2ZScpIHtcclxuICAgICAgICAgICAgb2JqZWN0LnBlbmRpbmdzLnB1c2goe2NsYiwgYXJnc30pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNsYiguLi5hcmdzKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIGNsYihbXSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXNvbHZlUGVuZGluZ3MocGVuZGluZ3MpIHtcclxuICAgIGZvcihsZXQgcCBvZiBwZW5kaW5ncykge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIHAuY2xiKC4uLnAuYXJncyk7XHJcbiAgICAgIH1cclxuICAgICAgY2F0Y2goZSkge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHBlbmRpbmdzLnNwbGljZSgwLCBwZW5kaW5ncy5sZW5ndGgpO1xyXG4gIH1cclxuXHJcbiAgcnRsUGFnZU4obikge1xyXG4gICAgcmV0dXJuIHRoaXMucC5ydGw/IDIqKHRoaXMucC5zaGVldHMrMiktMS1uOiBuO1xyXG4gIH1cclxuXHJcbiAgbG9hZChtYXRlcmlhbCwgbikge1xyXG4gICAgY29uc3QgcGkgPSB0aGlzLnAucGFnZUNhbGxiYWNrKHRoaXMucnRsUGFnZU4obikpLCBwID0gdGhpcy5pc0NvdmVyKG4pPyB0aGlzLnAuY292ZXI6IHRoaXMucC5wYWdlO1xyXG4gICAgY29uc3QgbyA9IHtcclxuICAgICAgbixcclxuICAgICAgdGV4dHVyZTogbmV3IFRIUkVFLlRleHR1cmUoKSxcclxuICAgICAgd3JhcHBlcjogbnVsbCxcclxuICAgICAgc3RhdGU6ICdsb2FkaW5nJyxcclxuICAgICAgbG9ja2VkOiAobik9PiBvLnN0YXRlID09PSAnbG9hZGluZycgfHwgby5zdGF0ZSA9PT0gJ3JlbmRlcmluZycgfHwgdGhpcy5ib29rLmlzQWN0aXZlUGFnZShuKSxcclxuICAgICAgY29sb3I6IHAuY29sb3IsXHJcbiAgICAgIGlzQWN0aXZlOiAoKT0+IHRoaXMuYm9vay5pc0FjdGl2ZVBhZ2UobiksXHJcbiAgICAgIGlzVG9wOiAoKT0+IH50aGlzLmJvb2suZ2V0VG9wUGFnZXMoKS5pbmRleE9mKG4pLFxyXG4gICAgICBkaXNwb3NlOiAoKT0+IHtcclxuICAgICAgICB0aGlzLnJlbW92ZUZyb21Mb2FkaW5ncyhvKTtcclxuICAgICAgICB0aGlzLnJlbW92ZUZyb21SZW5kZXJRdWV1ZShvKTtcclxuICAgICAgICBpZihvLndyYXBwZXIgJiYgby53cmFwcGVyLmRpc3Bvc2UpIHtcclxuICAgICAgICAgIG8ud3JhcHBlci5kaXNwb3NlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG8udGV4dHVyZS5kaXNwb3NlKCk7XHJcbiAgICAgICAgZGVsZXRlIG8udGV4dHVyZTtcclxuICAgICAgICBkZWxldGUgby53cmFwcGVyO1xyXG4gICAgICB9LFxyXG4gICAgICBwZW5kaW5nczogW11cclxuICAgIH07XHJcbiAgICBvLnRleHR1cmUubWluRmlsdGVyID0gVEhSRUUuTGluZWFyRmlsdGVyO1xyXG4gICAgdGhpcy5sb2FkaW5ncy5wdXNoKG8pO1xyXG4gICAgdGhpcy5zZXRNYXRlcmlhbChvLCBtYXRlcmlhbCk7XHJcblxyXG4gICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKT0+IHtcclxuICAgICAgaWYoby50ZXh0dXJlKSB7XHJcbiAgICAgICAgby53aWR0aFRleGVscyA9IHBpLndpZHRoVGV4ZWxzIHx8IHAud2lkdGhUZXhlbHM7XHJcbiAgICAgICAgby5oZWlnaHRUZXhlbHMgPSBwLmhlaWdodC9wLndpZHRoKnAud2lkdGhUZXhlbHM7XHJcbiAgICAgICAgY29uc3QgcmVzID0gdGhpcy5jYWxjUmVzb2x1dGlvbihvKTtcclxuICAgICAgICBvLndyYXBwZXIgPSB0aGlzLmltYWdlRmFjdG9yeS5idWlsZChwaSwgcGkubnVtYmVyPT09dW5kZWZpbmVkPyB0aGlzLnJ0bFBhZ2VOKG4pOiBwaS5udW1iZXIsIHJlcy53aWR0aCwgcmVzLmhlaWdodCwgcC5jb2xvciwgdGhpcy5wLmluamVjdG9yKTtcclxuICAgICAgICBpZihvLndyYXBwZXIuc2V0UXVlcnkpIHtcclxuICAgICAgICAgIG8ud3JhcHBlci5zZXRRdWVyeSh0aGlzLnBhZ2VRdWVyeSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG8uc2ltdWxhdGUgPSBwaS5pbnRlcmFjdGl2ZT8gKG8ud3JhcHBlci5zaW11bGF0ZSB8fCAoKCk9PiB1bmRlZmluZWQpKS5iaW5kKG8ud3JhcHBlcik6IHVuZGVmaW5lZDtcclxuICAgICAgICBvLndyYXBwZXIub25Mb2FkID0gKCk9PiB7XHJcbiAgICAgICAgICBvLnN0YXRlID0gJ2xvYWRlZCc7XHJcbiAgICAgICAgICB0aGlzLnB1c2hJblJlbmRlclF1ZXVlKG8pO1xyXG4gICAgICAgICAgdGhpcy5ib29rLmRpc3BhdGNoRXZlbnQoe1xyXG4gICAgICAgICAgICB0eXBlOiAnbG9hZGVkUGFnZScsXHJcbiAgICAgICAgICAgIHBhZ2U6IG5cclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgby53cmFwcGVyLm9uQ2hhbmdlID0gKGltYWdlKT0+IHtcclxuICAgICAgICAgIGlmKG8udGV4dHVyZSkge1xyXG4gICAgICAgICAgICB0aGlzLnJlbW92ZUZyb21Mb2FkaW5ncyhvKTtcclxuICAgICAgICAgICAgaWYoby5tYXRlcmlhbCkge1xyXG4gICAgICAgICAgICAgIG8ubWF0ZXJpYWwubWFwID0gby50ZXh0dXJlO1xyXG4gICAgICAgICAgICAgIG8ubWF0ZXJpYWwuY29sb3IgPSBuZXcgVEhSRUUuQ29sb3IoMHhGRkZGRkYpO1xyXG4gICAgICAgICAgICAgIG8ubWF0ZXJpYWwubmVlZHNVcGRhdGUgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG8udGV4dHVyZS5pbWFnZSA9IGltYWdlO1xyXG4gICAgICAgICAgICBvLnRleHR1cmUubmVlZHNVcGRhdGUgPSB0cnVlO1xyXG4gICAgICAgICAgICBvLnRleHR1cmUub25VcGRhdGUgPSAoKT0+IHtcclxuICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpPT57XHJcbiAgICAgICAgICAgICAgICBpZihvLnN0YXRlICE9PSAncXVldWVkRm9yUmVuZGVyJykge1xyXG4gICAgICAgICAgICAgICAgICBvLnN0YXRlID0gJ2FjdGl2ZSc7XHJcbiAgICAgICAgICAgICAgICAgIHRoaXMucmVzb2x2ZVBlbmRpbmdzKG8ucGVuZGluZ3MpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMucmVuZGVyaW5nO1xyXG4gICAgICAgICAgICAgICAgLy90aGlzLnVwZGF0ZVJlbmRlclF1ZXVlKCk7XHJcbiAgICAgICAgICAgICAgfSwgMTAwKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgdGhpcy50bXBNYXRlcmlhbC5tYXAgPSBvLnRleHR1cmU7XHJcbiAgICAgICAgICAgIHRoaXMudG1wTWF0ZXJpYWwubmVlZHNVcGRhdGUgPSB0cnVlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgdGhpcy5ib29rLmRpc3BhdGNoRXZlbnQoe1xyXG4gICAgICB0eXBlOiAnbG9hZFBhZ2UnLFxyXG4gICAgICBwYWdlOiBuXHJcbiAgICB9KTtcclxuICAgIHJldHVybiB0aGlzLnBhZ2VDYWNoZS5wdXQobiwgbyk7XHJcbiAgfVxyXG5cclxuICBpc1NpbmdsZVBhZ2Uobykge1xyXG4gICAgcmV0dXJuIHRoaXMucC5zaW5nbGVQYWdlIHx8ICFvLm4gfHwgby5uPT09dGhpcy5ib29rLmdldFBhZ2VzKCktMTtcclxuICB9XHJcblxyXG4gIGNhbGNSZXNvbHV0aW9uKG8pIHtcclxuICAgIGxldCByZXM7XHJcbiAgICBpZih0aGlzLnAuYXV0b1Jlc29sdXRpb24uZW5hYmxlKSB7XHJcbiAgICAgIGNvbnN0IGsgPSBNYXRoLm1pbigodGhpcy5pc1NpbmdsZVBhZ2Uobyk/IDE6IDAuNSkqdGhpcy52aXN1YWwud2lkdGgoKS9vLndpZHRoVGV4ZWxzLCB0aGlzLnZpc3VhbC5oZWlnaHQoKS9vLmhlaWdodFRleGVscyk7XHJcbiAgICAgIHJlcyA9IHtcclxuICAgICAgICB3aWR0aDogdGhpcy5wLmF1dG9SZXNvbHV0aW9uLmsqdGhpcy5wLnpvb20qaypvLndpZHRoVGV4ZWxzLFxyXG4gICAgICAgIGhlaWdodDogdGhpcy5wLmF1dG9SZXNvbHV0aW9uLmsqdGhpcy5wLnpvb20qaypvLmhlaWdodFRleGVsc1xyXG4gICAgICB9O1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHJlcyA9IHtcclxuICAgICAgICB3aWR0aDogby53aWR0aFRleGVscyxcclxuICAgICAgICBoZWlnaHQ6IG8uaGVpZ2h0VGV4ZWxzXHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzO1xyXG4gIH1cclxuXHJcbiAgcHVzaEluUmVuZGVyUXVldWUobykge1xyXG4gICAgaWYoby5zdGF0ZSE9PSdxdWV1ZWRGb3JSZW5kZXInICYmIG8uc3RhdGUhPT0nbG9hZGluZycpIHtcclxuICAgICAgby5zdGF0ZSA9ICdxdWV1ZWRGb3JSZW5kZXInO1xyXG4gICAgICB0aGlzLnJlbmRlclF1ZXVlLnB1c2gobyk7XHJcbiAgICAgIC8vIHRoaXMudXBkYXRlUmVuZGVyUXVldWUoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHVwZGF0ZVJlbmRlclF1ZXVlKCkge1xyXG4gICAgaWYodGhpcy5jYW52YXNlcykge1xyXG4gICAgICBjb25zdCBwID0gdGhpcy5wO1xyXG4gICAgICBpZighdGhpcy5yZW5kZXJpbmcpIHtcclxuICAgICAgICBpZihwLnJlbmRlcldoaWxlRmxpcHBpbmcgfHwgIXRoaXMuYm9vay5pc1Byb2Nlc3NpbmcoKSkge1xyXG4gICAgICAgICAgbGV0IGFjdGl2ZSwgdG9wO1xyXG4gICAgICAgICAgZm9yKGxldCBvIG9mIHRoaXMucmVuZGVyUXVldWUpIHtcclxuICAgICAgICAgICAgaWYoIWFjdGl2ZSAmJiBvLmlzQWN0aXZlKCkpIHtcclxuICAgICAgICAgICAgICBhY3RpdmUgPSBvO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmKG8uaXNUb3AoKSkge1xyXG4gICAgICAgICAgICAgIHRvcCA9IG87XHJcbiAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHRoaXMucmVuZGVyaW5nID0gdG9wIHx8IGFjdGl2ZTtcclxuXHJcbiAgICAgICAgICBpZih0aGlzLmlzTW9iaWxlKCkgJiYgcC5yZW5kZXJJbmFjdGl2ZVBhZ2VzT25Nb2JpbGUgfHwgIXRoaXMuaXNNb2JpbGUoKSAmJiBwLnJlbmRlckluYWN0aXZlUGFnZXMpIHtcclxuICAgICAgICAgICAgaWYoIXRoaXMucmVuZGVyaW5nKSB7XHJcbiAgICAgICAgICAgICAgY29uc3QgdWQgPSB0aGlzLmJvb2suZ2V0VXNlckRpcmVjdGlvbigpLCBuZWFyID0ge307XHJcbiAgICAgICAgICAgICAgZm9yKGxldCBvIG9mIHRoaXMucmVuZGVyUXVldWUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGlkID0gdWQubGFzdFRvcFBhZ2U8by5uO1xyXG4gICAgICAgICAgICAgICAgaWYoIW5lYXJbaWRdIHx8IE1hdGguYWJzKG5lYXJbaWRdLm4tdWQubGFzdFRvcFBhZ2UpPk1hdGguYWJzKG8ubi11ZC5sYXN0VG9wUGFnZSkpIHtcclxuICAgICAgICAgICAgICAgICAgbmVhcltpZF0gPSBvO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJpbmcgPSBuZWFyW3VkLmRpcmVjdGlvbj09PTFdIHx8IG5lYXJbdWQuZGlyZWN0aW9uIT09MV07XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpZih0aGlzLnJlbmRlcmluZykge1xyXG4gICAgICAgICAgICBpZih0aGlzLnJlbmRlcmluZy53cmFwcGVyLnN0YXJ0UmVuZGVyKSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5yZW1vdmVGcm9tUmVuZGVyUXVldWUodGhpcy5yZW5kZXJpbmcpO1xyXG4gICAgICAgICAgICAgIHRoaXMucmVuZGVyaW5nLnN0YXRlID0gJ3JlbmRlcmluZyc7XHJcbiAgICAgICAgICAgICAgY29uc3QgbyA9IHRoaXMuY2FudmFzZXNbdGhpcy5uZXh0Q2FudmFzXTtcclxuICAgICAgICAgICAgICB0aGlzLm5leHRDYW52YXMgPSAodGhpcy5uZXh0Q2FudmFzKzEpJXRoaXMuY2FudmFzZXMubGVuZ3RoO1xyXG4gICAgICAgICAgICAgIHRoaXMucmVuZGVyaW5nLndyYXBwZXIuc2V0UmVuZGVyQ2FudmFzKG8uYywgby5jdHgpO1xyXG4gICAgICAgICAgICAgIHRoaXMucmVuZGVyaW5nLndyYXBwZXIuc2V0UmVzb2x1dGlvbih0aGlzLmNhbGNSZXNvbHV0aW9uKHRoaXMucmVuZGVyaW5nKSk7XHJcbiAgICAgICAgICAgICAgdGhpcy5yZW5kZXJpbmcud3JhcHBlci5zdGFydFJlbmRlcigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnJlbmRlcmluZztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICB0aGlzLmJvb2sudXBkYXRlVGhyZWUoKTtcclxuICAgICAgfVxyXG4gICAgICBzZXRUaW1lb3V0KHRoaXMudXBkYXRlUmVuZGVyUXVldWUuYmluZCh0aGlzKSwgMTAwKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHR1cm5PbkV2ZW50cygpIHtcclxuICAgIHRoaXMudHJhbnNmZXJFdmVudHMgPSB0cnVlO1xyXG4gIH1cclxuXHJcbiAgdHVybk9mZkV2ZW50cygpIHtcclxuICAgIGNvbnN0IG1vdXNldXAgPSAkLkV2ZW50KCdtb3VzZXVwJyksIG1vdXNlb3V0ID0gJC5FdmVudCgnbW91c2VvdXQnKTtcclxuICAgIHRoaXMucGFnZUNhY2hlLmZvckVhY2goKGVudCk9PiB7XHJcbiAgICAgIGNvbnN0IG9iamVjdCA9IGVudFsxXTtcclxuICAgICAgaWYob2JqZWN0LnNpbXVsYXRlKSB7XHJcbiAgICAgICAgb2JqZWN0LnNpbXVsYXRlKG1vdXNldXAsIHVuZGVmaW5lZCwgMCwgMCk7XHJcbiAgICAgICAgb2JqZWN0LnNpbXVsYXRlKG1vdXNlb3V0LCB1bmRlZmluZWQsIDAsIDApO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIHRoaXMudHJhbnNmZXJFdmVudHMgPSBmYWxzZTtcclxuICB9XHJcblxyXG4gIHRyYW5zZmVyRXZlbnRUb1RleHR1cmUobiwgZSwgZGF0YSkge1xyXG4gICAgaWYodGhpcy50cmFuc2ZlckV2ZW50cykge1xyXG4gICAgICBjb25zdCB0b09iamVjdCA9IHRoaXMuZ2V0T3JMb2FkVGV4dHVyZU9iamVjdCh1bmRlZmluZWQsIG4pO1xyXG4gICAgICBpZih0b09iamVjdC53cmFwcGVyKSB7XHJcbiAgICAgICAgY29uc3Qge3V2fSA9IGRhdGEsIHRvRG9jID0gdG9PYmplY3Qud3JhcHBlci5nZXRTaW11bGF0ZWREb2MoKTtcclxuICAgICAgICB0aGlzLnBhZ2VDYWNoZS5mb3JFYWNoKChlbnQpPT4ge1xyXG4gICAgICAgICAgY29uc3Qgb2JqZWN0ID0gZW50WzFdO1xyXG4gICAgICAgICAgaWYob2JqZWN0LnNpbXVsYXRlKSB7XHJcbiAgICAgICAgICAgIG9iamVjdC5zaW11bGF0ZShlLCB0b0RvYywgdXYueCwgdXYueSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIGxvYWRQcmVkaWN0ZWRQYWdlcygpIHtcclxuICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCk9PiB7XHJcbiAgICAgIGNvbnN0IHVkID0gdGhpcy5ib29rLmdldFVzZXJEaXJlY3Rpb24oKTtcclxuICAgICAgdGhpcy5wcmVkaWN0ZWRSZXF1ZXN0cyA9IFtdO1xyXG4gICAgICBmb3IobGV0IGkgPSAwLCBwID0gdWQubGFzdFRvcFBhZ2UgKyB1ZC5kaXJlY3Rpb247IGk8dGhpcy5wLnByZWxvYWRQYWdlczsgKytpLCBwKz11ZC5kaXJlY3Rpb24pIHtcclxuICAgICAgICB0aGlzLnByZWRpY3RlZFJlcXVlc3RzLnB1c2gocCk7XHJcbiAgICAgIH1cclxuICAgICAgZm9yKGxldCBwIG9mIHRoaXMucHJlZGljdGVkUmVxdWVzdHMpIHtcclxuICAgICAgICBpZihwPj0wICYmIHA8dGhpcy5ib29rLmdldFBhZ2VzKCkgJiYgIXRoaXMucGFnZUNhY2hlLmdldChwKSkge1xyXG4gICAgICAgICAgdGhpcy5sb2FkKHVuZGVmaW5lZCwgcCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHNldE1hdGVyaWFsKG8sIG1hdGVyaWFsKSB7XHJcbiAgICB0aGlzLnBhZ2VDYWNoZS5mb3JFYWNoKChlKT0+IHtcclxuICAgICAgY29uc3Qgb2IgPSBlWzFdO1xyXG4gICAgICBpZihvIT09b2IgJiYgb2IubWF0ZXJpYWw9PT1tYXRlcmlhbCkge1xyXG4gICAgICAgIGRlbGV0ZSBvYi5tYXRlcmlhbDtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBpZihtYXRlcmlhbCAmJiBtYXRlcmlhbCE9PW8ubWF0ZXJpYWwpIHtcclxuICAgICAgby5tYXRlcmlhbCA9IG1hdGVyaWFsO1xyXG4gICAgICB0aGlzLnNldHVwTWF0ZXJpYWwobyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzZXR1cE1hdGVyaWFsKG8pIHtcclxuICAgIG8ubWF0ZXJpYWwubWFwID0gby50ZXh0dXJlLmltYWdlPyBvLnRleHR1cmU6ICh0aGlzLmxvYWRpbmdBbmltYXRpb24/IHRoaXMubG9hZGluZ1tvLmNvbG9yXS50ZXh0dXJlOiBudWxsKTtcclxuICAgIGlmKCFvLm1hdGVyaWFsLm1hcCkge1xyXG4gICAgICBvLm1hdGVyaWFsLmNvbG9yID0gbmV3IFRIUkVFLkNvbG9yKG8uY29sb3IpO1xyXG4gICAgfVxyXG4gICAgby5tYXRlcmlhbC5uZWVkc1VwZGF0ZSA9IHRydWU7XHJcbiAgfVxyXG5cclxuICBnZXRPckxvYWRUZXh0dXJlT2JqZWN0KG1hdGVyaWFsLCBuKSB7XHJcbiAgICBsZXQgb2JqZWN0ID0gdGhpcy5wYWdlQ2FjaGUuZ2V0KG4pO1xyXG4gICAgaWYoIW9iamVjdCkge1xyXG4gICAgICBvYmplY3QgPSB0aGlzLmxvYWQobWF0ZXJpYWwsIG4pO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHRoaXMuc2V0TWF0ZXJpYWwob2JqZWN0LCBtYXRlcmlhbCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG9iamVjdDtcclxuICB9XHJcblxyXG4gIHNldFRleHR1cmUobWF0ZXJpYWwsIG4pIHtcclxuICAgIHRoaXMuZ2V0T3JMb2FkVGV4dHVyZU9iamVjdChtYXRlcmlhbCwgbik7XHJcbiAgfVxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2pzL2NsYXNzZXMvUGFnZU1hbmFnZXIuanMiLCJpbXBvcnQgQm9va1Byb3BzQnVpbGRlciBmcm9tICcuL0Jvb2tQcm9wc0J1aWxkZXInO1xyXG5pbXBvcnQgUGRmIGZyb20gJ1BkZic7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQZGZCb29rUHJvcHNCdWlsZGVyIGV4dGVuZHMgQm9va1Byb3BzQnVpbGRlciB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHNyYywgb25SZWFkeSwgc3R5bGUpIHtcclxuICAgIHN1cGVyKG9uUmVhZHksIHN0eWxlKTtcclxuICAgIHRoaXMucGRmID0gbmV3IFBkZihzcmMpO1xyXG4gICAgdGhpcy5wYWdlRGVzY3JpcHRpb24gPSB7XHJcbiAgICAgIHR5cGU6ICdwZGYnLFxyXG4gICAgICBzcmM6IHRoaXMucGRmLFxyXG4gICAgICBpbnRlcmFjdGl2ZTogdHJ1ZVxyXG4gICAgfTtcclxuICAgIHRoaXMuYmluZHMgPSB7XHJcbiAgICAgIHBhZ2VDYWxsYmFjazogdGhpcy5wYWdlQ2FsbGJhY2suYmluZCh0aGlzKVxyXG4gICAgfTtcclxuICAgIHRoaXMucGRmLmdldEhhbmRsZXIodGhpcy5pbml0LmJpbmQodGhpcykpO1xyXG4gIH1cclxuXHJcbiAgZGlzcG9zZSgpIHtcclxuICAgIHRoaXMucGRmLmRpc3Bvc2UoKTtcclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICB9XHJcblxyXG4gIGluaXQoaGFuZGxlcikge1xyXG4gICAgY29uc3QgcGFnZXMgPSB0aGlzLnBkZi5nZXRQYWdlc051bSgpO1xyXG4gICAgdGhpcy5jYWxjU2hlZXRzKHBhZ2VzKTtcclxuICAgIGlmKHBhZ2VzPjApIHtcclxuICAgICAgaGFuZGxlci5nZXRQYWdlKDEpLlxyXG4gICAgICB0aGVuKChwYWdlKT0+IHtcclxuICAgICAgICBjb25zdCB2aWV3cG9ydCA9IHBhZ2UuZ2V0Vmlld3BvcnQoe3NjYWxlOiAxfSksIHNpemUgPSB7d2lkdGg6IHZpZXdwb3J0LndpZHRoLCBoZWlnaHQ6IHZpZXdwb3J0LmhlaWdodH07XHJcbiAgICAgICAgdGhpcy5jYWxjUHJvcHMoc2l6ZS53aWR0aCwgc2l6ZS5oZWlnaHQpO1xyXG4gICAgICAgIHRoaXMucmVhZHkoKTtcclxuICAgICAgfSkuXHJcbiAgICAgIGNhdGNoKChlKT0+IHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICB0aGlzLnByb3BzID0gdGhpcy5kZWZhdWx0cztcclxuICAgICAgdGhpcy5yZWFkeSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcGFnZUNhbGxiYWNrKG4pIHtcclxuICAgIHJldHVybiB0aGlzLnBhZ2VEZXNjcmlwdGlvbjtcclxuICB9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2pzL2NsYXNzZXMvUGRmQm9va1Byb3BzQnVpbGRlci5qcyIsImltcG9ydCB7JH0gZnJvbSAnLi4vbGlicydcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBkZkxpbmtzSGFuZGxlciB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHBkZiwgY3RybCwgZWxlbWVudCkge1xyXG4gICAgdGhpcy5wZGYgPSBwZGY7XHJcbiAgICB0aGlzLmN0cmwgPSBjdHJsO1xyXG4gICAgdGhpcy5lbGVtZW50ID0gJChlbGVtZW50KTtcclxuICAgIHRoaXMuY3Vyc29ycyA9IFtdO1xyXG4gIH1cclxuXHJcbiAgZGlzcG9zZSgpIHtcclxuXHJcbiAgfVxyXG5cclxuICBzZXRIYW5kbGVyKGhhbmRsZXIpIHtcclxuICAgIHRoaXMuaGFuZGxlciA9IGhhbmRsZXI7XHJcbiAgfVxyXG5cclxuICBkZWZhdWx0SGFuZGxlcih0eXBlLCBkZXN0aW5hdGlvbikge1xyXG4gICAgaWYodHlwZT09PSdpbnRlcm5hbCcpIHtcclxuICAgICAgdGhpcy5jdHJsLmdvVG9QYWdlKGRlc3RpbmF0aW9uKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYodHlwZT09PSdleHRlcm5hbCcpIHtcclxuICAgICAgd2luZG93Lm9wZW4oZGVzdGluYXRpb24sICdfYmxhbmsnKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNhbGxIYW5kbGVycyh0eXBlLCBkZXN0aW5hdGlvbikge1xyXG4gICAgaWYoIXRoaXMuaGFuZGxlciB8fCAhdGhpcy5oYW5kbGVyKHR5cGUsIGRlc3RpbmF0aW9uKSkge1xyXG4gICAgICB0aGlzLmRlZmF1bHRIYW5kbGVyKHR5cGUsIGRlc3RpbmF0aW9uKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGhhbmRsZUV2ZW50KGRhdGEpIHtcclxuICAgIGNvbnN0IGUgPSBkYXRhLmV2ZW50LCBhbm5vID0gZGF0YS5hbm5vdGF0aW9uO1xyXG4gICAgc3dpdGNoKGUudHlwZSkge1xyXG4gICAgICBjYXNlICdtb3VzZW92ZXInOiB7XHJcbiAgICAgICAgdGhpcy5jdXJzb3JzLnB1c2godGhpcy5lbGVtZW50LmNzcygnY3Vyc29yJykpO1xyXG4gICAgICAgIHRoaXMuZWxlbWVudC5jc3MoJ2N1cnNvcicsICdwb2ludGVyJyk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgY2FzZSAnbW91c2VvdXQnOiB7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50LmNzcygnY3Vyc29yJywgdGhpcy5jdXJzb3JzLnBvcCgpIHx8ICcnKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgICBjYXNlICd0b3VjaHRhcCc6XHJcbiAgICAgIGNhc2UgJ2NsaWNrJzoge1xyXG4gICAgICAgIGlmKGFubm8udXJsKSB7XHJcbiAgICAgICAgICB0aGlzLmNhbGxIYW5kbGVycygnZXh0ZXJuYWwnLCBhbm5vLnVybCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYoYW5uby5kZXN0KSB7XHJcbiAgICAgICAgICB0aGlzLnBkZi5nZXREZXN0aW5hdGlvbihhbm5vLmRlc3QpLlxyXG4gICAgICAgICAgICB0aGVuKChudW1iZXIpPT4gdGhpcy5jYWxsSGFuZGxlcnMoJ2ludGVybmFsJywgbnVtYmVyKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9qcy9jbGFzc2VzL1BkZkxpbmtzSGFuZGxlci5qcyIsImltcG9ydCBGaW5kZXIgZnJvbSAnRmluZGVyJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlYXJjaEVuZ2luZSB7XHJcbiAgY29uc3RydWN0b3IocGFnZUNhbGxiYWNrLCBwYWdlcykge1xyXG4gICAgdGhpcy5wYWdlQ2FsbGJhY2sgPSBwYWdlQ2FsbGJhY2s7XHJcbiAgICB0aGlzLnBhZ2VzID0gcGFnZXM7XHJcbiAgICB0aGlzLnJlc3VsdHMgPSBbXTtcclxuICB9XHJcblxyXG4gIHNldFF1ZXJ5KHF1ZXJ5KSB7XHJcbiAgICB0aGlzLnF1ZXJ5ID0gcXVlcnk7XHJcbiAgICB0aGlzLnVwZGF0ZSA9IHRydWU7XHJcbiAgICB0aGlzLnByb2Nlc3MoKTtcclxuICB9XHJcblxyXG4gIHByb2Nlc3MoKSB7XHJcbiAgICBpZih0aGlzLnVwZGF0ZSkge1xyXG4gICAgICBjb25zdCByZXN1bHRzID0gdGhpcy5yZXN1bHRzO1xyXG4gICAgICB0aGlzLnJlc3VsdHMgPSBbXTtcclxuICAgICAgaWYodGhpcy5vblBhZ2VIaXRzQ2hhbmdlZCkge1xyXG4gICAgICAgIGZvcihsZXQgcmVzIG9mIHJlc3VsdHMpIHtcclxuICAgICAgICAgIHRoaXMub25QYWdlSGl0c0NoYW5nZWQodW5kZWZpbmVkLCAnJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIHRoaXMudXBkYXRlID0gZmFsc2U7XHJcbiAgICAgIHRoaXMucGFnZSA9IDA7XHJcbiAgICAgIHRoaXMuc3RhbXAgPSBEYXRlLm5vdygpO1xyXG4gICAgICBpZih0aGlzLnF1ZXJ5Lmxlbmd0aD4xKSB7XHJcbiAgICAgICAgdGhpcy5wcm9jZXNzKCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBpZih0aGlzLnBhZ2U8dGhpcy5wYWdlcykge1xyXG4gICAgICAgIGNvbnN0IHN0YW1wID0gdGhpcy5zdGFtcDtcclxuICAgICAgICB0aGlzLmZpbmQodGhpcy5wYWdlQ2FsbGJhY2sodGhpcy5wYWdlKSkuXHJcbiAgICAgICAgICB0aGVuKChjb250ZXh0cyk9PiB7XHJcbiAgICAgICAgICAgIGlmKHN0YW1wID09PSB0aGlzLnN0YW1wKSB7XHJcbiAgICAgICAgICAgICAgaWYoY29udGV4dHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlc3VsdHMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgIHBhZ2U6IHRoaXMucGFnZSxcclxuICAgICAgICAgICAgICAgICAgY29udGV4dHNcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBpZih0aGlzLm9uUGFnZUhpdHNDaGFuZ2VkKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9uUGFnZUhpdHNDaGFuZ2VkKHRoaXMucGFnZSwgdGhpcy5xdWVyeSk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICsrdGhpcy5wYWdlO1xyXG4gICAgICAgICAgICAgIHRoaXMucHJvY2VzcygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZmluZChwaSkge1xyXG4gICAgbGV0IG5leHQ7XHJcbiAgICBpZihwaS50eXBlPT09J3BkZicpIHtcclxuICAgICAgbmV4dCA9IG5ldyBQcm9taXNlKChyZXNvbHZlKT0+IHtcclxuICAgICAgICBwaS5zcmMuZ2V0SGFuZGxlcigoKT0+IHtcclxuICAgICAgICAgIGNvbnN0IG4gPSBwaS5udW1iZXI9PT11bmRlZmluZWQ/IHRoaXMucGFnZTogcGkubnVtYmVyO1xyXG4gICAgICAgICAgaWYocGkuc3JjLmdldFBhZ2VUeXBlKG4pPT09J3JpZ2h0Jykge1xyXG4gICAgICAgICAgICByZXNvbHZlKFtdKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBwaS5zcmMuZ2V0UGFnZShuKS5cclxuICAgICAgICAgICAgdGhlbigocGFnZSk9PiB7XHJcbiAgICAgICAgICAgICAgcGFnZS5nZXRUZXh0Q29udGVudCgpLlxyXG4gICAgICAgICAgICAgIHRoZW4oKHRleHRDb250ZW50KT0+IHtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUobmV3IEZpbmRlcih0ZXh0Q29udGVudC5pdGVtcy5tYXAoKGl0ZW0pPT4gaXRlbS5zdHIpLCB0aGlzLnF1ZXJ5LCB7aGl0czogZmFsc2V9KS5nZXRDb250ZXh0cygpKTtcclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSkuXHJcbiAgICAgICAgICAgIGNhdGNoKCgpPT4gcmVzb2x2ZShbXSkpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBuZXh0ID0gUHJvbWlzZS5yZXNvbHZlKFtdKTtcclxuICAgIH1cclxuICAgIHJldHVybiBuZXh0O1xyXG4gIH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vanMvY2xhc3Nlcy9TZWFyY2hFbmdpbmUuanMiLCJpbXBvcnQgQ1NTTGF5ZXIgZnJvbSAnQ1NTTGF5ZXInO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2hlZXRDc3NMYXllciB7XHJcbiAgY29uc3RydWN0b3IodmlzdWFsLCBibG9jaywgcHJvcHMpIHtcclxuICAgIHRoaXMudmlzdWFsID0gdmlzdWFsO1xyXG4gICAgY29uc3Qgc2l6ZSA9IGJsb2NrLmdldFRvcFNpemUoKTtcclxuICAgIHRoaXMubGF5ZXIgPSBuZXcgQ1NTTGF5ZXIoc2l6ZS53aWR0aCwgc2l6ZS5oZWlnaHQsIHByb3BzKTtcclxuXHJcbiAgICB0aGlzLnVwZGF0ZShibG9jayk7XHJcbiAgICB0aGlzLnZpc3VhbC5hZGRDc3NPYmplY3QodGhpcy5sYXllcik7XHJcbiAgfVxyXG5cclxuICBkaXNwb3NlKCkge1xyXG4gICAgdGhpcy5sYXllci5kaXNwb3NlKCk7XHJcbiAgICB0aGlzLnZpc3VhbC5yZW1vdmVDc3NPYmplY3QodGhpcy5sYXllcik7XHJcbiAgfVxyXG5cclxuICBpc0hpZGRlbigpIHtcclxuICAgIHJldHVybiB0aGlzLmxheWVyLmlzSGlkZGVuKCk7XHJcbiAgfVxyXG5cclxuICBoaWRlKCkge1xyXG4gICAgcmV0dXJuIHRoaXMubGF5ZXIuaGlkZSgpO1xyXG4gIH1cclxuXHJcbiAgc2hvdygpIHtcclxuICAgIHJldHVybiB0aGlzLmxheWVyLnNob3coKTtcclxuICB9XHJcblxyXG4gIHNldChjc3MsIGh0bWwsIGpzKSB7XHJcbiAgICB0aGlzLmxheWVyLnNldERhdGEoY3NzLCBodG1sLCBqcyk7XHJcbiAgfVxyXG5cclxuICB1cGRhdGUoYmxvY2spIHtcclxuICAgIHRoaXMuYmxvY2sgPSBibG9jaztcclxuICAgIHRoaXMuYmxvY2suZ2V0VG9wV29ybGRSb3RhdGlvbih0aGlzLmxheWVyLnJvdGF0aW9uKTtcclxuICAgIHRoaXMuYmxvY2suZ2V0VG9wV29ybGRQb3NpdGlvbih0aGlzLmxheWVyLnBvc2l0aW9uKTtcclxuICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vanMvY2xhc3Nlcy9TaGVldENzc0xheWVyLmpzIiwiaW1wb3J0IE1hdGhVdGlscyBmcm9tICdNYXRoVXRpbHMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2hlZXRQaHlzaWNzIHtcclxuXHJcbiAgc3RhdGljIHRhcmdldEZvcmNlQ2xiKG8sYSx2LGNoKSB7XHJcbiAgICBjb25zdCBsID0gYSp0aGlzLnI7XHJcbiAgICByZXR1cm4gMTAwKnRoaXMubSp0aGlzLmcqKDIvKDErTWF0aC5leHAoMTAqKGwtdGhpcy50bCkpKS0xKS10aGlzLm0qNDAqdjtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBob3ZlckNvcm5lckZvcmNlQ2xiKG8sdixsLGNoKSB7XHJcbiAgICByZXR1cm4gNTtcclxuICB9XHJcblxyXG4gIGdldFRhcmdldEZvcmNlQ2xiKG1hc3MsIHRhcmdldEFuZ2xlKSB7XHJcbiAgICByZXR1cm4gU2hlZXRQaHlzaWNzLnRhcmdldEZvcmNlQ2xiLmJpbmQoe1xyXG4gICAgICBnOiB0aGlzLnAuZ3Jhdml0eSxcclxuICAgICAgbTogbWFzcyxcclxuICAgICAgdGw6IHRhcmdldEFuZ2xlKnRoaXMucC5yLFxyXG4gICAgICByOiB0aGlzLnAuclxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZHJhZ0ZvcmNlQ2xiKG8sYSx2LGNoKSB7XHJcbiAgICByZXR1cm4gby5mbGJ0Km8ubSooMTAqby5nKmNoLTUwKnYvKDErTWF0aC5leHAoMy41Kk1hdGguYWJzKGNoKSkpKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBkcmFnQ29ybmVyRm9yY2VDbGIobyxhLHYsY2gpIHtcclxuICAgIHJldHVybiAxNSooMi8oMStNYXRoLmV4cCgxMCooYS10aGlzLnRhKSpvLnIpKS0xKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBnZXREcmFnQ29ybmVyRm9yY2VDbGIodGFyZ2V0QW5nbGUpIHtcclxuICAgIHJldHVybiBTaGVldFBoeXNpY3MuZHJhZ0Nvcm5lckZvcmNlQ2xiLmJpbmQoe1xyXG4gICAgICB0YTogdGFyZ2V0QW5nbGVcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgY29uc3RydWN0b3Iocj0xLCBncmF2aXR5PTEsIGNvcm5lckRldmlhdGlvbj0wLjE1LCBmcHM9MjQwKSB7XHJcbiAgICB0aGlzLnAgPSB7XHJcbiAgICAgIHIsXHJcbiAgICAgIGNvcm5lckRldmlhdGlvbixcclxuICAgICAgbDogTWF0aC5QSSpyLFxyXG4gICAgICBzdGFydER0OiAxL2ZwcyxcclxuICAgICAgZ3Jhdml0eSxcclxuICAgICAgbWFyZ2luOiAwLjAwMipyLFxyXG4gICAgICBpbmZNOiAxZTQsXHJcbiAgICAgIGF0dGVtcHRzOiAxNixcclxuICAgICAgbWF4SXRlcmF0aW9uczogMTAwXHJcbiAgICB9O1xyXG4gICAgdGhpcy5vcyA9IFtdO1xyXG4gIH1cclxuXHJcbiAgZGlzcG9zZSgpIHtcclxuICAgIHRoaXMub3MgPSBbXTtcclxuICB9XHJcblxyXG4gIGdldFNpemUoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5vcy5sZW5ndGg7XHJcbiAgfVxyXG5cclxuICBhZGRPYmplY3QobWFzcywgYW5nbGUsIHZlbG9jaXR5LCBmbGV4aWJpbGl0eSwgY29ybmVySGVpZ2h0LCBzaW11bGF0ZUNsYiwgcmVtb3ZlQ2xiLCBmb3JjZUNsYj0oKT0+IDAsIGNvcm5lckZvcmNlQ2xiPSgpPT4gMCkge1xyXG4gICAgY29uc3Qgbm8gPSB7XHJcbiAgICAgIGlkOiBNYXRoVXRpbHMuZ2V0VW5pcXVlKCksXHJcbiAgICAgIG06IG1hc3MsXHJcbiAgICAgIHY6IHZlbG9jaXR5LFxyXG4gICAgICBsOiBhbmdsZSp0aGlzLnAucixcclxuICAgICAgZjogZm9yY2VDbGIsXHJcbiAgICAgIGNmOiBjb3JuZXJGb3JjZUNsYixcclxuICAgICAgY2g6IGNvcm5lckhlaWdodCxcclxuICAgICAgZmxidDogZmxleGliaWxpdHksXHJcbiAgICAgIHNpbXVsYXRlQ2xiLFxyXG4gICAgICByZW1vdmVDbGJcclxuICAgIH07XHJcbiAgICBsZXQgaSA9IHRoaXMub3MuZmluZEluZGV4KChvKT0+IG5vLmw8PW8ubCk7XHJcbiAgICBpID0gfmk/IGk6IHRoaXMub3MubGVuZ3RoO1xyXG4gICAgdGhpcy5vcy5zcGxpY2UoaSwgMCwgbm8pO1xyXG4gICAgcmV0dXJuIG5vLmlkO1xyXG4gIH1cclxuXHJcbiAgZ2V0UGFyYW1ldHJNYXAobmFtZSkge1xyXG4gICAgY29uc3QgbWFwID0ge1xyXG4gICAgICBtYXNzOiAnbScsXHJcbiAgICAgIHZlbG9jaXR5OiAndicsXHJcbiAgICAgIGZsZXhpYmlsaXR5OiAnZmxidCcsXHJcbiAgICAgIGNvcm5lckhlaWdodDogJ2NoJyxcclxuICAgICAgc2ltdWxhdGVDbGI6ICdzaW11bGF0ZUNsYicsXHJcbiAgICAgIHJlbW92ZUNsYjogJ3JlbW92ZUNsYicsXHJcbiAgICAgIGZvcmNlQ2xiOiAnZicsXHJcbiAgICAgIGNvcm5lckZvcmNlQ2xiOiAnY2YnXHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIG1hcFtuYW1lXTtcclxuICB9XHJcblxyXG4gIHNldFBhcmFtZXRyKGlkLCBuYW1lLCB2YWx1ZSkge1xyXG4gICAgY29uc3QgbyA9IHRoaXMub3MuZmluZCgobyk9PiBvLmlkPT09aWQpO1xyXG4gICAgaWYobmFtZSA9PT0gJ2FuZ2xlJykge1xyXG4gICAgICBvLmwgPSB2YWx1ZSp0aGlzLnAucjtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBvW3RoaXMuZ2V0UGFyYW1ldHJNYXAobmFtZSldID0gdmFsdWU7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBnZXRQYXJhbWV0cihpZCwgbmFtZSkge1xyXG4gICAgY29uc3QgbyA9IHRoaXMub3MuZmluZCgobyk9PiBvLmlkPT09aWQpO1xyXG4gICAgbGV0IHZhbHVlO1xyXG4gICAgaWYobmFtZSA9PT0gJ2FuZ2xlJykge1xyXG4gICAgICB2YWx1ZSA9IG8ubC90aGlzLnAucjtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICB2YWx1ZSA9IG9bdGhpcy5nZXRQYXJhbWV0ck1hcChuYW1lKV07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdmFsdWU7XHJcbiAgfVxyXG5cclxuICBzaW11bGF0ZShUKSB7XHJcbiAgICBsZXQgdD0wLFxyXG4gICAgICAgIGR0PXRoaXMucC5zdGFydER0LFxyXG4gICAgICAgIGF0dGVtcHQ9MCxcclxuICAgICAgICBpdD0wO1xyXG5cclxuICAgIHdoaWxlKHQ8VCAmJiBpdDx0aGlzLnAubWF4SXRlcmF0aW9ucykge1xyXG4gICAgICBpZihkdD5ULXQpIHtcclxuICAgICAgICBkdCA9IFQtdDtcclxuICAgICAgfVxyXG4gICAgICBjb25zdCBub3MgPSB0aGlzLmludGVncmF0ZSh0aGlzLm9zLCBkdCksXHJcbiAgICAgICAgICAgIGNpID0gdGhpcy5maW5kQ29sbGlzaW9ucyhub3MpO1xyXG4gICAgICBpZihjaS5udW0+MSAmJiBhdHRlbXB0PHRoaXMucC5hdHRlbXB0cykge1xyXG4gICAgICAgIGR0Lz0yO1xyXG4gICAgICAgICsrYXR0ZW1wdDtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICBpZihjaS5udW09PT0xKSB7XHJcbiAgICAgICAgICBjb25zdCBzY29zID0gdGhpcy5zb2x2ZUNvbGxpc2lvbihub3NbY2kubGFzdC0xXSwgbm9zW2NpLmxhc3RdKTtcclxuICAgICAgICAgIG5vc1tjaS5sYXN0LTFdID0gc2Nvc1swXTtcclxuICAgICAgICAgIG5vc1tjaS5sYXN0XSA9IHNjb3NbMV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYoY2kubnVtPjEpIHtcclxuICAgICAgICAgIGNvbnN0IGdzID0gW107XHJcbiAgICAgICAgICBsZXQgbGFzdCA9IC0yO1xyXG4gICAgICAgICAgZm9yKGxldCBpIG9mIGNpLmFsbCkge1xyXG4gICAgICAgICAgICBpZihpLWxhc3Q+MSkge1xyXG4gICAgICAgICAgICAgIGdzLnB1c2goW10pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGdzW2dzLmxlbmd0aC0xXS5wdXNoKGkpO1xyXG4gICAgICAgICAgICBsYXN0ID0gaTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGZvcihsZXQgZyBvZiBncykge1xyXG4gICAgICAgICAgICBsZXQgc2csIGkwO1xyXG4gICAgICAgICAgICBpZihub3NbZ1swXV0ubD5NYXRoLlBJLzIqdGhpcy5wLnIpIHtcclxuICAgICAgICAgICAgICBzZyA9IC0xO1xyXG4gICAgICAgICAgICAgIGkwID0gZ1tnLmxlbmd0aC0xXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICBzZyA9IDE7XHJcbiAgICAgICAgICAgICAgaTAgPSBnWzBdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvcihsZXQgaT1pMDsgaTxub3MubGVuZ3RoICYmIGk+LTE7IGkrPXNnKSB7XHJcbiAgICAgICAgICAgICAgY29uc3QgbyA9IG5vc1tpK3NnXTtcclxuICAgICAgICAgICAgICBpZihvICYmIHNnKihvLmwtbm9zW2ldLmwpPD10aGlzLnAubWFyZ2luKSB7XHJcbiAgICAgICAgICAgICAgICBvLmw9bm9zW2ldLmwrc2cqMip0aGlzLnAubWFyZ2luO1xyXG4gICAgICAgICAgICAgICAgaWYoby5sPnRoaXMucC5sIHx8IG8ubDwwKSB7XHJcbiAgICAgICAgICAgICAgICAgIG8ubCA9IG8ubD50aGlzLnAubD8gdGhpcy5wLmw6IDA7XHJcbiAgICAgICAgICAgICAgICAgIG8uY2ggPSAwO1xyXG4gICAgICAgICAgICAgICAgICBvLnY9MDtcclxuICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignQmFkIGNvbGxpc2lvbicpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLm9zID0gbm9zO1xyXG4gICAgICAgIHRoaXMuZmluZEFuZFNvbHZlQ29ybmVyQ29sbGlzaW9ucygpO1xyXG4gICAgICAgIHQrPWR0O1xyXG4gICAgICAgIGR0PXRoaXMucC5zdGFydER0O1xyXG4gICAgICAgIGF0dGVtcHQ9MDtcclxuICAgICAgfVxyXG4gICAgICArK2l0O1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMucmVtb3ZlU3RhdGljcygpO1xyXG4gIH1cclxuXHJcbiAgcmVtb3ZlU3RhdGljcygpIHtcclxuICAgIGNvbnN0IG5vcyA9IFtdLCBub3RpZnkgPSBbW10sW11dO1xyXG4gICAgZm9yKGxldCBvIG9mIHRoaXMub3MpIHtcclxuICAgICAgaWYoby5zaW11bGF0ZUNsYikge1xyXG4gICAgICAgIG8uc2ltdWxhdGVDbGIoby5sL3RoaXMucC5yLCBvLmNoKTtcclxuICAgICAgfVxyXG4gICAgICBpZigoby5sPT09dGhpcy5wLmwgfHwgby5sPT09MCkgJiYgby52PT09MCkge1xyXG4gICAgICAgIGlmKG8ucmVtb3ZlQ2xiICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgIG5vdGlmeVsoby5sIT09dGhpcy5wLmwpKzBdLnB1c2gobyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIG5vcy5wdXNoKG8pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICB0aGlzLm9zID0gbm9zO1xyXG4gICAgZm9yKGxldCBvIG9mIG5vdGlmeVswXS5yZXZlcnNlKCkpIHtcclxuICAgICAgby5yZW1vdmVDbGIoTWF0aC5QSSwgby5jaCk7XHJcbiAgICB9XHJcbiAgICBmb3IobGV0IG8gb2Ygbm90aWZ5WzFdKSB7XHJcbiAgICAgIG8ucmVtb3ZlQ2xiKDAsIG8uY2gpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZmluZEFuZFNvbHZlQ29ybmVyQ29sbGlzaW9ucygpIHtcclxuICAgIGlmKHRoaXMub3MubGVuZ3RoKSB7XHJcbiAgICAgIGNvbnN0IG9zID0gW1xyXG4gICAgICAgIHtcclxuICAgICAgICAgIC4uLnRoaXMub3NbMF0sXHJcbiAgICAgICAgICBsOiAwLFxyXG4gICAgICAgICAgbTogdGhpcy5wLmluZk0sXHJcbiAgICAgICAgICBjaDogMFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgLi4udGhpcy5vcyxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAuLi50aGlzLm9zWzBdLFxyXG4gICAgICAgICAgbDogMS4wNSp0aGlzLnAubCxcclxuICAgICAgICAgIG06IHRoaXMucC5pbmZNLFxyXG4gICAgICAgICAgY2g6IDBcclxuICAgICAgICB9XHJcbiAgICAgIF07XHJcblxyXG4gICAgICBmb3IobGV0IGk9MTsgaTxvcy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgIGNvbnN0IGE9b3NbaS0xXSwgYj1vc1tpXSxcclxuICAgICAgICAgICAgICBhbD1hLmwrdGhpcy5wLmNvcm5lckRldmlhdGlvbiphLmNoKnRoaXMucC5yLFxyXG4gICAgICAgICAgICAgIGJsPWIubCt0aGlzLnAuY29ybmVyRGV2aWF0aW9uKmIuY2gqdGhpcy5wLnI7XHJcbiAgICAgICAgaWYoMS4wNSphbD5ibCAmJiBhLmNoPmIuY2gpIHtcclxuICAgICAgICAgIGNvbnN0IGRDaCA9IGEuY2gtYi5jaCwgZHY9YS5tL2EuZmxidCtiLm0vYi5mbGJ0LCBrYT1hLm0vYS5mbGJ0L2R2LCBrYj1iLm0vYi5mbGJ0L2R2O1xyXG4gICAgICAgICAgYS5jaD1hLmNoLWtiKmRDaDtcclxuICAgICAgICAgIGIuY2g9Yi5jaCtrYSpkQ2g7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzb2x2ZUNvbGxpc2lvbihhLCBiKSB7XHJcbiAgICBjb25zdCBtbT0oYi5tK2EubSksXHJcbiAgICAgIGF2ID0gKC1hLnYqYi5tK2EubSphLnYrMipiLm0qYi52KS9tbSxcclxuICAgICAgYnYgPSAoYi5tKmIudi1iLnYqYS5tKzIqYS5tKmEudikvbW07XHJcbiAgICByZXR1cm4gW3suLi5hLCB2OiBhdn0sIHsuLi5iLCB2OiBidn1dO1xyXG4gIH1cclxuXHJcbiAgZmluZENvbGxpc2lvbnMob3MpIHtcclxuICAgIGNvbnN0IGNpID0ge1xyXG4gICAgICBudW06IDAsXHJcbiAgICAgIGxhc3Q6IDAsXHJcbiAgICAgIGFsbDogW11cclxuICAgIH07XHJcbiAgICBmb3IobGV0IGkgPSAxOyBpPG9zLmxlbmd0aCAmJiBjaS5udW08MjsgKytpKSB7XHJcbiAgICAgIGlmKG9zW2ktMV0ubD5vc1tpXS5sIHx8IHRoaXMuaXNDb2xsaXNpb24ob3NbaS0xXSwgb3NbaV0pKSB7XHJcbiAgICAgICAgaWYob3NbaS0xXS5sPm9zW2ldLmwpIHtcclxuICAgICAgICAgICsrY2kubnVtO1xyXG4gICAgICAgIH1cclxuICAgICAgICArK2NpLm51bTtcclxuICAgICAgICBjaS5sYXN0ID0gaTtcclxuICAgICAgICBpZihjaS5hbGwuaW5kZXhPZihpLTEpPT09LTEpIHtcclxuICAgICAgICAgIGNpLmFsbC5wdXNoKGktMSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKGNpLmFsbC5pbmRleE9mKGkpPT09LTEpIHtcclxuICAgICAgICAgIGNpLmFsbC5wdXNoKGkpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNpO1xyXG4gIH1cclxuXHJcbiAgaXNDb2xsaXNpb24oYSwgYikge1xyXG4gICAgcmV0dXJuIE1hdGguYWJzKGEubC1iLmwpPHRoaXMucC5tYXJnaW4gJiYgYS52PmIudjtcclxuICB9XHJcblxyXG4gIGludGVncmF0ZShvcywgZHQpIHtcclxuICAgIGNvbnN0IG5vcyA9IFtdO1xyXG4gICAgZm9yKGxldCBvIG9mIG9zKSB7XHJcbiAgICAgIGNvbnN0IHZsID0gTWF0aFV0aWxzLnJrNChcclxuICAgICAgICB0aGlzLmR5LmJpbmQoe1xyXG4gICAgICAgICAgZzogdGhpcy5wLmdyYXZpdHksXHJcbiAgICAgICAgICByOiB0aGlzLnAucixcclxuICAgICAgICAgIG06IG8ubSxcclxuICAgICAgICAgIGY6IG8uZixcclxuICAgICAgICAgIGNmOiBvLmNmLFxyXG4gICAgICAgICAgY2g6IG8uY2gsXHJcbiAgICAgICAgICBmbGJ0OiBvLmZsYnRcclxuICAgICAgICB9KSxcclxuICAgICAgICAwLFxyXG4gICAgICAgIGR0LFxyXG4gICAgICAgIFtvLnYsIG8ubCwgby5jaF1cclxuICAgICAgKTtcclxuICAgICAgY29uc3Qgbm8gPSB7XHJcbiAgICAgICAgLi4ubyxcclxuICAgICAgICB2OiB2bFswXSxcclxuICAgICAgICBsOiB2bFsxXSxcclxuICAgICAgICBjaDogdmxbMl1cclxuICAgICAgfTtcclxuICAgICAgaWYobm8ubDw9MCB8fCBuby5sPj10aGlzLnAubCkge1xyXG4gICAgICAgIG5vLmw9bm8ubDw9MD8gMDogdGhpcy5wLmw7XHJcbiAgICAgICAgbm8udj0wO1xyXG4gICAgICAgIG5vLmNoPTA7XHJcbiAgICAgIH1cclxuICAgICAgbm9zLnB1c2gobm8pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5vcztcclxuICB9XHJcblxyXG4gIGR5KHQseSkge1xyXG4gICAgY29uc3Qgdj15WzBdLCBsPXlbMV0sIGNoPXlbMl0sIGFsZiA9IGwvdGhpcy5yLCBmPXRoaXMuZih0aGlzLGFsZix2LGNoKSwgY2Y9dGhpcy5jZih0aGlzLGFsZix2LGNoKSwgY29zQWxmPU1hdGguY29zKGFsZiksXHJcbiAgICBicmY9MC4wMDYqTWF0aC5hYnMoKE1hdGguc2lnbihjb3NBbGYpLU1hdGguc2lnbih2KSkqdikqTWF0aC5wb3coY29zQWxmLDUpO1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAgKC10aGlzLmcqY29zQWxmKnRoaXMubSticmYrZikvdGhpcy5tLFxyXG4gICAgICB2KzAuMDEqKE1hdGgucmFuZG9tKCktMC41KSxcclxuICAgICAgdGhpcy5mbGJ0KigoMi8oMStNYXRoLmV4cCgtMC4yKmNmKSktMSkqKDEtMi8oMStNYXRoLmV4cCgtNSooTWF0aC5hYnMoY2gpLTIpKSkpLWNoKVxyXG4gICAgXTtcclxuICB9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2pzL2NsYXNzZXMvU2hlZXRQaHlzaWNzLmpzIiwiXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTb3VuZHNFbnZpcm9tZW50IHtcclxuXHJcbiAgY29uc3RydWN0b3IodGVtcGxhdGU9e30pIHtcclxuICAgIHRlbXBsYXRlID0gdHlwZW9mIHRlbXBsYXRlPT09J2Z1bmN0aW9uJz8gdGVtcGxhdGUoKTogdGVtcGxhdGU7XHJcbiAgICB0aGlzLnNvdW5kcyA9IHRlbXBsYXRlLnNvdW5kcyB8fCB7fTtcclxuICAgIHRoaXMuYXVkaW8gPSB7fTtcclxuICAgIGlmKHRoaXMuc291bmRzLnN0YXJ0RmxpcCkge1xyXG4gICAgICB0aGlzLmF1ZGlvLnN0YXJ0RmxpcCA9IG5ldyBBdWRpbyh0aGlzLnNvdW5kcy5zdGFydEZsaXApO1xyXG4gICAgICB0aGlzLmF1ZGlvLnN0YXJ0RmxpcC52b2x1bWUgPSAwLjU7XHJcbiAgICB9XHJcbiAgICBpZih0aGlzLnNvdW5kcy5lbmRGbGlwKSB7XHJcbiAgICAgIHRoaXMuYXVkaW8uZW5kRmxpcCA9IG5ldyBBdWRpbyh0aGlzLnNvdW5kcy5lbmRGbGlwKTtcclxuICAgICAgdGhpcy5hdWRpby5lbmRGbGlwLnZvbHVtZSA9IDAuNTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHNldEVuYWJsZWQoZW5hYmxlZCkge1xyXG4gICAgdGhpcy5lbmFibGVkID0gZW5hYmxlZDtcclxuICB9XHJcblxyXG4gIHRvZ2xlKCkge1xyXG4gICAgdGhpcy5lbmFibGVkID0gIXRoaXMuZW5hYmxlZDtcclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICBkZWxldGUgdGhpcy5hdWRpby5zdGFydEZsaXA7XHJcbiAgICBkZWxldGUgdGhpcy5hdWRpby5lbmRGbGlwO1xyXG4gIH1cclxuXHJcbiAgc3RhcnRGbGlwKCkge1xyXG4gICAgaWYodGhpcy5lbmFibGVkICYmIHRoaXMuYXVkaW8uc3RhcnRGbGlwKSB7XHJcbiAgICAgIHRoaXMuYXVkaW8uc3RhcnRGbGlwLnBsYXkoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGVuZEZsaXAoKSB7XHJcbiAgICBpZih0aGlzLmVuYWJsZWQgJiYgdGhpcy5hdWRpby5zdGFydEZsaXApIHtcclxuICAgICAgdGhpcy5hdWRpby5zdGFydEZsaXAucGF1c2UoKTtcclxuICAgICAgdGhpcy5hdWRpby5zdGFydEZsaXAuY3VycmVudFRpbWUgPSAwO1xyXG4gICAgfVxyXG4gICAgaWYodGhpcy5lbmFibGVkICYmIHRoaXMuYXVkaW8uZW5kRmxpcCkge1xyXG4gICAgICB0aGlzLmF1ZGlvLmVuZEZsaXAucGxheSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc3Vic2NyaWJlRmxpcHMoZW1pdHRlcikge1xyXG4gICAgZW1pdHRlci5hZGRFdmVudExpc3RlbmVyKCdzdGFydEZsaXAnLCB0aGlzLnN0YXJ0RmxpcC5iaW5kKHRoaXMpKTtcclxuICAgIGVtaXR0ZXIuYWRkRXZlbnRMaXN0ZW5lcignZW5kRmxpcCcsIHRoaXMuZW5kRmxpcC5iaW5kKHRoaXMpKTtcclxuICB9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2pzL2NsYXNzZXMvU291bmRzRW52aXJvbWVudC5qcyIsImltcG9ydCBXaWRnZXRDb250cm9sbGVyIGZyb20gJ1dpZGdldENvbnRyb2xsZXInO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVG9jQ29udHJvbGxlciBleHRlbmRzIFdpZGdldENvbnRyb2xsZXIge1xyXG5cclxuICBjb25zdHJ1Y3Rvcih2aWV3LCBib29rQ3RybCkge1xyXG4gICAgc3VwZXIodmlldyk7XHJcbiAgICB0aGlzLmJvb2tDdHJsID0gYm9va0N0cmw7XHJcbiAgICB0aGlzLnRhYiA9ICdub25lJztcclxuICB9XHJcblxyXG4gIHNldFRodW1ibmFpbHModGh1bWJuYWlscykge1xyXG4gICAgdGhpcy50aHVtYm5haWxzID0gdGh1bWJuYWlscztcclxuICAgIHRodW1ibmFpbHMub25OYXZpZ2F0ZSA9IHRoaXMubmF2aWdhdGVUaHVtYm5haWxzLmJpbmQodGhpcyk7XHJcbiAgICBpZih0aGlzLnRhYiA9PT0gJ25vbmUnKSB7XHJcbiAgICAgIHRoaXMudGFiID0gJ3RodW1ibmFpbHMnO1xyXG4gICAgfVxyXG4gICAgdGhpcy5maXJlQ2hhbmdlKCk7XHJcbiAgfVxyXG5cclxuICBzZXRTZWFyY2goc2VhcmNoKSB7XHJcbiAgICB0aGlzLnNlYXJjaCA9IHNlYXJjaDtcclxuICAgIHNlYXJjaC5vbk5hdmlnYXRlID0gdGhpcy5uYXZpZ2F0ZVNlYXJjaC5iaW5kKHRoaXMpO1xyXG4gICAgdGhpcy5maXJlQ2hhbmdlKCk7XHJcbiAgfVxyXG5cclxuICBzZXRCb29rbWFya3MoYm9va21hcmtzLCBwZGYpIHtcclxuICAgIHRoaXMuYm9va21hcmtzID0gYm9va21hcmtzO1xyXG4gICAgdGhpcy5wZGYgPSBwZGY7XHJcbiAgICBib29rbWFya3Mub25OYXZpZ2F0ZSA9IHRoaXMubmF2aWdhdGVCb29rbWFya3MuYmluZCh0aGlzKTtcclxuICAgIGlmKGJvb2ttYXJrcy5nZXRTaXplKCkpIHtcclxuICAgICAgdGhpcy50YWIgPSAnYm9va21hcmtzJztcclxuICAgICAgdGhpcy5pc0Jvb2ttYXJrcyA9IHRydWU7XHJcbiAgICB9XHJcbiAgICB0aGlzLmZpcmVDaGFuZ2UoKTtcclxuICB9XHJcblxyXG4gIGNtZEJvb2ttYXJrcygpIHtcclxuICAgIHRoaXMudGFiID0gJ2Jvb2ttYXJrcyc7XHJcbiAgICB0aGlzLmZpcmVDaGFuZ2UoKTtcclxuICB9XHJcblxyXG4gIGNtZFRodW1ibmFpbHMoKSB7XHJcbiAgICB0aGlzLnRhYiA9ICd0aHVtYm5haWxzJztcclxuICAgIHRoaXMuZmlyZUNoYW5nZSgpO1xyXG4gIH1cclxuXHJcbiAgY21kU2VhcmNoKCkge1xyXG4gICAgdGhpcy50YWIgPSAnc2VhcmNoJztcclxuICAgIHRoaXMuZmlyZUNoYW5nZSgpO1xyXG4gIH1cclxuXHJcbiAgY21kQ2xvc2VUb2MoKSB7XHJcbiAgICB0aGlzLmhpZGUoKTtcclxuICB9XHJcblxyXG4gIG5hdmlnYXRlVGh1bWJuYWlscyhudW1iZXIpIHtcclxuICAgIHRoaXMuYm9va0N0cmwuZ29Ub1BhZ2UobnVtYmVyKTtcclxuICB9XHJcblxyXG4gIG5hdmlnYXRlU2VhcmNoKG51bWJlcikge1xyXG4gICAgdGhpcy5ib29rQ3RybC5nb1RvUGFnZShudW1iZXIpO1xyXG4gIH1cclxuXHJcbiAgbmF2aWdhdGVCb29rbWFya3MoaXRlbSkge1xyXG4gICAgaWYoaXRlbS51cmwpIHtcclxuICAgICAgd2luZG93Lm9wZW4oaXRlbS51cmwsICdfYmxhbmsnKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYoaXRlbS5kZXN0KSB7XHJcbiAgICAgIHRoaXMucGRmLmdldERlc3RpbmF0aW9uKGl0ZW0uZGVzdCkuXHJcbiAgICAgICAgdGhlbigobnVtYmVyKT0+IHRoaXMuYm9va0N0cmwuZ29Ub1BhZ2UobnVtYmVyKSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICB1cGRhdGVWaWV3KCkge1xyXG4gICAgaWYodGhpcy52aWV3KSB7XHJcbiAgICAgIHRoaXMudmlldy5zZXRTdGF0ZSgnd2lkVG9jTWVudScsIHtcclxuICAgICAgICBlbmFibGU6IHRydWUsXHJcbiAgICAgICAgdmlzaWJsZTogdHJ1ZSxcclxuICAgICAgICBhY3RpdmU6IGZhbHNlXHJcbiAgICAgIH0pO1xyXG4gICAgICB0aGlzLnZpZXcuc2V0U3RhdGUoJ3dpZFRodW1ibmFpbHMnLCB7XHJcbiAgICAgICAgZW5hYmxlOiB0cnVlLFxyXG4gICAgICAgIHZpc2libGU6IHRoaXMudGFiPT09J3RodW1ibmFpbHMnLFxyXG4gICAgICAgIGFjdGl2ZTogZmFsc2VcclxuICAgICAgfSk7XHJcbiAgICAgIHRoaXMudmlldy5zZXRTdGF0ZSgnd2lkU2VhcmNoJywge1xyXG4gICAgICAgIGVuYWJsZTogdHJ1ZSxcclxuICAgICAgICB2aXNpYmxlOiB0aGlzLnRhYj09PSdzZWFyY2gnLFxyXG4gICAgICAgIGFjdGl2ZTogZmFsc2VcclxuICAgICAgfSk7XHJcbiAgICAgIHRoaXMudmlldy5zZXRTdGF0ZSgnd2lkQm9va21hcmtzJywge1xyXG4gICAgICAgIGVuYWJsZTogdHJ1ZSxcclxuICAgICAgICB2aXNpYmxlOiB0aGlzLnRhYj09PSdib29rbWFya3MnLFxyXG4gICAgICAgIGFjdGl2ZTogZmFsc2VcclxuICAgICAgfSk7XHJcbiAgICAgIHRoaXMudmlldy5zZXRTdGF0ZSgnY21kQm9va21hcmtzJywge1xyXG4gICAgICAgIGVuYWJsZTogdHJ1ZSxcclxuICAgICAgICB2aXNpYmxlOiB0cnVlLFxyXG4gICAgICAgIGFjdGl2ZTogdGhpcy50YWI9PT0nYm9va21hcmtzJ1xyXG4gICAgICB9KTtcclxuICAgICAgdGhpcy52aWV3LnNldFN0YXRlKCdjbWRDbG9zZVRvYycsIHtcclxuICAgICAgICBlbmFibGU6IHRydWUsXHJcbiAgICAgICAgdmlzaWJsZTogdHJ1ZSxcclxuICAgICAgICBhY3RpdmU6IGZhbHNlXHJcbiAgICAgIH0pO1xyXG4gICAgICB0aGlzLnZpZXcuc2V0U3RhdGUoJ2NtZFRodW1ibmFpbHMnLCB7XHJcbiAgICAgICAgZW5hYmxlOiB0cnVlLFxyXG4gICAgICAgIHZpc2libGU6IHRydWUsXHJcbiAgICAgICAgYWN0aXZlOiB0aGlzLnRhYj09PSd0aHVtYm5haWxzJ1xyXG4gICAgICB9KTtcclxuICAgICAgdGhpcy52aWV3LnNldFN0YXRlKCdjbWRTZWFyY2gnLCB7XHJcbiAgICAgICAgZW5hYmxlOiB0cnVlLFxyXG4gICAgICAgIHZpc2libGU6IHRydWUsXHJcbiAgICAgICAgYWN0aXZlOiB0aGlzLnRhYj09PSdzZWFyY2gnXHJcbiAgICAgIH0pO1xyXG4gICAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpPT4gdGhpcy50aHVtYm5haWxzLnNldEVuYWJsZSh0aGlzLnZpc2libGUgJiYgdGhpcy50YWI9PT0ndGh1bWJuYWlscycpKTtcclxuICAgICAgc3VwZXIudXBkYXRlVmlldygpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vanMvY2xhc3Nlcy9Ub2NDb250cm9sbGVyLmpzIiwiaW1wb3J0IHtUSFJFRX0gZnJvbSAnLi4vbGlicyc7XHJcbmltcG9ydCBUaHJlZVV0aWxzIGZyb20gJ1RocmVlVXRpbHMnO1xyXG5cclxuY29uc3QgcmVzWCA9IDExLFxyXG4gICAgICByZXNZID0gMixcclxuICAgICAgcmVzWiA9IDE1LFxyXG4gICAgICBzY2FsZSA9IDEsXHJcbiAgICAgIGZhY2VzID0gW107XHJcblxyXG5jb25zdCBmcm9udEdlb21ldHJ5ID0gbmV3IFRIUkVFLlBsYW5lR2VvbWV0cnkoc2NhbGUsIHNjYWxlLCByZXNYLTEsIHJlc1ktMSk7XHJcbmZyb250R2VvbWV0cnkudHJhbnNsYXRlKDAuNSpzY2FsZSwwLjUqc2NhbGUsc2NhbGUpO1xyXG5jb25zdCBiYWNrR2VvbWV0cnkgPSBuZXcgVEhSRUUuUGxhbmVHZW9tZXRyeShzY2FsZSwgc2NhbGUsIHJlc1gtMSwgcmVzWS0xKTtcclxuYmFja0dlb21ldHJ5LnJvdGF0ZVkoTWF0aC5QSSk7XHJcbmJhY2tHZW9tZXRyeS50cmFuc2xhdGUoMC41KnNjYWxlLDAuNSpzY2FsZSwwKTtcclxuY29uc3QgbGVmdEdlb21ldHJ5ID0gbmV3IFRIUkVFLlBsYW5lR2VvbWV0cnkoc2NhbGUsIHNjYWxlLCByZXNaLTEsIHJlc1ktMSk7XHJcbmxlZnRHZW9tZXRyeS5yb3RhdGVZKC1NYXRoLlBJLzIpO1xyXG5sZWZ0R2VvbWV0cnkudHJhbnNsYXRlKDAsMC41KnNjYWxlLDAuNSpzY2FsZSk7XHJcbmNvbnN0IHJpZ2h0R2VvbWV0cnkgPSBuZXcgVEhSRUUuUGxhbmVHZW9tZXRyeShzY2FsZSwgc2NhbGUsIHJlc1otMSwgcmVzWS0xKTtcclxucmlnaHRHZW9tZXRyeS5yb3RhdGVZKE1hdGguUEkvMik7XHJcbnJpZ2h0R2VvbWV0cnkudHJhbnNsYXRlKHNjYWxlLDAuNSpzY2FsZSwwLjUqc2NhbGUpO1xyXG5jb25zdCB0b3BHZW9tZXRyeSA9IG5ldyBUSFJFRS5QbGFuZUdlb21ldHJ5KHNjYWxlLCBzY2FsZSwgcmVzWC0xLCByZXNaLTEpO1xyXG50b3BHZW9tZXRyeS5yb3RhdGVYKC1NYXRoLlBJLzIpO1xyXG50b3BHZW9tZXRyeS50cmFuc2xhdGUoMC41KnNjYWxlLHNjYWxlLDAuNSpzY2FsZSk7XHJcbmNvbnN0IGJvdHRvbUdlb21ldHJ5ID0gdG9wR2VvbWV0cnkuY2xvbmUoKTtcclxuYm90dG9tR2VvbWV0cnkudHJhbnNsYXRlKDAsLXNjYWxlLDApO1xyXG5mb3IobGV0IGYgb2YgYm90dG9tR2VvbWV0cnkuZmFjZXMpIHtcclxuICBbZi5hLCBmLmJdID0gW2YuYiwgZi5hXTtcclxufVxyXG5cclxuY29uc3QgZ2VvbWV0cnkgPSBuZXcgVEhSRUUuR2VvbWV0cnkoKTtcclxuZ2VvbWV0cnkudmVydGljZXMgPSBbLi4uYm90dG9tR2VvbWV0cnkudmVydGljZXMsIC4uLnRvcEdlb21ldHJ5LnZlcnRpY2VzXTtcclxuXHJcbmNvbnN0IGFkZEZhY2VzID0gKGZzLCBtYXApPT4ge1xyXG4gIGZvcihsZXQgZiBvZiBmcykge1xyXG4gICAgZ2VvbWV0cnkuZmFjZXMucHVzaChuZXcgVEhSRUUuRmFjZTMobWFwKGYuYSksIG1hcChmLmIpLCBtYXAoZi5jKSkpO1xyXG4gIH1cclxuICBmYWNlcy5wdXNoKGdlb21ldHJ5LmZhY2VzLmxlbmd0aCk7XHJcbn07XHJcblxyXG5jb25zdCBtYXBWZXJ0aWNlcyA9IChzcmMsIGRzdCk9PiB7XHJcbiAgY29uc3QgbWFwID0gW107XHJcbiAgY29uc3QgZXEgPSAoYSwgYik9PiBNYXRoLmFicyhhLngtYi54KStNYXRoLmFicyhhLnktYi55KStNYXRoLmFicyhhLnotYi56KTwxZS00O1xyXG4gIGZvcihsZXQgaT0wOyBpPHNyYy5sZW5ndGg7ICsraSkge1xyXG4gICAgZm9yKGxldCBqPTA7IGo8ZHN0Lmxlbmd0aDsgKytqKSB7XHJcbiAgICAgIGlmKGVxKHNyY1tpXSwgZHN0W2pdKSkge1xyXG4gICAgICAgIG1hcFtpXT1qO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBtYXA7XHJcbn07XHJcblxyXG5jb25zdCBmcm9udE1hcCA9IG1hcFZlcnRpY2VzKGZyb250R2VvbWV0cnkudmVydGljZXMsIGdlb21ldHJ5LnZlcnRpY2VzKTtcclxuY29uc3QgYmFja01hcCA9IG1hcFZlcnRpY2VzKGJhY2tHZW9tZXRyeS52ZXJ0aWNlcywgZ2VvbWV0cnkudmVydGljZXMpO1xyXG5jb25zdCBsZWZ0TWFwID0gbWFwVmVydGljZXMobGVmdEdlb21ldHJ5LnZlcnRpY2VzLCBnZW9tZXRyeS52ZXJ0aWNlcyk7XHJcbmNvbnN0IHJpZ2h0TWFwID0gbWFwVmVydGljZXMocmlnaHRHZW9tZXRyeS52ZXJ0aWNlcywgZ2VvbWV0cnkudmVydGljZXMpO1xyXG5cclxuYWRkRmFjZXModG9wR2VvbWV0cnkuZmFjZXMsIChpKT0+IGkrYm90dG9tR2VvbWV0cnkudmVydGljZXMubGVuZ3RoKTtcclxuYWRkRmFjZXMoYm90dG9tR2VvbWV0cnkuZmFjZXMsIChpKT0+IGkpO1xyXG5hZGRGYWNlcyhmcm9udEdlb21ldHJ5LmZhY2VzLCAoaSk9PiBmcm9udE1hcFtpXSk7XHJcbmFkZEZhY2VzKGJhY2tHZW9tZXRyeS5mYWNlcywgKGkpPT4gYmFja01hcFtpXSk7XHJcbmFkZEZhY2VzKGxlZnRHZW9tZXRyeS5mYWNlcywgKGkpPT4gbGVmdE1hcFtpXSk7XHJcbmFkZEZhY2VzKHJpZ2h0R2VvbWV0cnkuZmFjZXMsIChpKT0+IHJpZ2h0TWFwW2ldKTtcclxuZmFjZXMucG9wKCk7XHJcblxyXG5UaHJlZVV0aWxzLmNvbXB1dGVGYWNlVmVydGV4VXZzKGdlb21ldHJ5LCBmYWNlcyk7XHJcblxyXG5nZW9tZXRyeS5jb21wdXRlVmVydGV4Tm9ybWFscygpO1xyXG4vL2dlb21ldHJ5LmNvbXB1dGVGYWNlTm9ybWFscygpO1xyXG5nZW9tZXRyeS5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTtcclxuLy9nZW9tZXRyeS5jb21wdXRlQm91bmRpbmdCb3goKTtcclxuZ2VvbWV0cnkudmVydGljZXNOZWVkVXBkYXRlID0gdHJ1ZTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuXHRyZXNYLFxyXG5cdHJlc1ksXHJcblx0cmVzWixcclxuXHRmYWNlcyxcclxuXHRnZW9tZXRyeVxyXG59O1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9qcy9tb2RlbHMvc2hlZXRCbG9jay5qcyIsImNvbnN0IG1vdXNlQnV0dG9ucyA9IHtcclxuICBMZWZ0OiAwLFxyXG4gIE1pZGRsZTogMSxcclxuICBSaWdodDogMlxyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHByb3BzKCkge1xyXG4gIHJldHVybiB7XHJcbiAgICBlcHM6IDFlLTQsXHJcbiAgICBzY2FsZToge1xyXG4gICAgICBkZWZhdWx0OiAwLjksXHJcbiAgICAgIG1pbjogMC45LFxyXG4gICAgICBtYXg6IDIuNSxcclxuICAgICAgbGV2ZWxzOiA3XHJcbiAgICB9LFxyXG4gICAgbGlnaHRpbmc6IHtcclxuICAgICAgZGVmYXVsdDogMC43LFxyXG4gICAgICBtaW46IDAsXHJcbiAgICAgIG1heDogMSxcclxuICAgICAgbGV2ZWxzOiA3XHJcbiAgICB9LFxyXG4gICAgcGFuOiB7XHJcbiAgICAgIHNwZWVkOiA1MFxyXG4gICAgfSxcclxuICAgIGxvYWRpbmdBbmltYXRpb246IHtcclxuICAgICAgc2tpbjogZmFsc2UsXHJcbiAgICAgIGJvb2s6IHRydWVcclxuICAgIH0sXHJcbiAgICBhdXRvUmVzb2x1dGlvbjoge1xyXG4gICAgICBlbmFibGVkOiB0cnVlLFxyXG4gICAgICBjb2VmZmljaWVudDogMS41XHJcbiAgICB9LFxyXG4gICAgbmFycm93Vmlldzoge1xyXG4gICAgICB3aWR0aDogNTAwXHJcbiAgICB9LFxyXG4gICAgYWN0aW9uczoge1xyXG4gICAgICBjbWRab29tSW46IHtcclxuICAgICAgICBlbmFibGVkOiB0cnVlLFxyXG4gICAgICAgIGVuYWJsZWRJbk5hcnJvdzogdHJ1ZVxyXG4gICAgICB9LFxyXG4gICAgICBjbWRab29tT3V0OiB7XHJcbiAgICAgICAgZW5hYmxlZDogdHJ1ZSxcclxuICAgICAgICBlbmFibGVkSW5OYXJyb3c6IHRydWVcclxuICAgICAgfSxcclxuICAgICAgY21kRGVmYXVsdFpvb206IHtcclxuICAgICAgICBlbmFibGVkOiB0cnVlLFxyXG4gICAgICAgIGVuYWJsZWRJbk5hcnJvdzogZmFsc2UsXHJcbiAgICAgICAgdHlwZTogJ2RibGNsaWNrJyxcclxuICAgICAgICBjb2RlOiAwXHJcbiAgICAgIH0sXHJcbiAgICAgIGNtZFRvYzoge1xyXG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgZW5hYmxlZEluTmFycm93OiB0cnVlXHJcbiAgICAgIH0sXHJcbiAgICAgIGNtZEZhc3RCYWNrd2FyZDoge1xyXG4gICAgICAgIGVuYWJsZWQ6IGZhbHNlLFxyXG4gICAgICAgIGVuYWJsZWRJbk5hcnJvdzogZmFsc2VcclxuICAgICAgfSxcclxuICAgICAgY21kQmFja3dhcmQ6IHtcclxuICAgICAgICBlbmFibGVkOiB0cnVlLFxyXG4gICAgICAgIGVuYWJsZWRJbk5hcnJvdzogZmFsc2VcclxuICAgICAgfSxcclxuICAgICAgY21kQmlnQmFja3dhcmQ6IHtcclxuICAgICAgICBlbmFibGVkOiB0cnVlLFxyXG4gICAgICAgIGVuYWJsZWRJbk5hcnJvdzogdHJ1ZVxyXG4gICAgICB9LFxyXG4gICAgICBjbWRGb3J3YXJkOiB7XHJcbiAgICAgICAgZW5hYmxlZDogdHJ1ZSxcclxuICAgICAgICBlbmFibGVkSW5OYXJyb3c6IGZhbHNlXHJcbiAgICAgIH0sXHJcbiAgICAgIGNtZEJpZ0ZvcndhcmQ6IHtcclxuICAgICAgICBlbmFibGVkOiB0cnVlLFxyXG4gICAgICAgIGVuYWJsZWRJbk5hcnJvdzogdHJ1ZVxyXG4gICAgICB9LFxyXG4gICAgICBjbWRGYXN0Rm9yd2FyZDoge1xyXG4gICAgICAgIGVuYWJsZWQ6IGZhbHNlLFxyXG4gICAgICAgIGVuYWJsZWRJbk5hcnJvdzogZmFsc2VcclxuICAgICAgfSxcclxuICAgICAgY21kU2F2ZToge1xyXG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgZW5hYmxlZEluTmFycm93OiB0cnVlXHJcbiAgICAgIH0sXHJcbiAgICAgIGNtZFByaW50OiB7XHJcbiAgICAgICAgZW5hYmxlZDogdHJ1ZSxcclxuICAgICAgICBlbmFibGVkSW5OYXJyb3c6IGZhbHNlXHJcbiAgICAgIH0sXHJcbiAgICAgIGNtZEZ1bGxTY3JlZW46IHtcclxuICAgICAgICBlbmFibGVkOiB0cnVlLFxyXG4gICAgICAgIGVuYWJsZWRJbk5hcnJvdzogdHJ1ZVxyXG4gICAgICB9LFxyXG4gICAgICB3aWRTZXR0aW5nczoge1xyXG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgZW5hYmxlZEluTmFycm93OiB0cnVlXHJcbiAgICAgIH0sXHJcbiAgICAgIGNtZFNtYXJ0UGFuOiB7XHJcbiAgICAgICAgZW5hYmxlZDogdHJ1ZSxcclxuICAgICAgICBlbmFibGVkSW5OYXJyb3c6IHRydWUsXHJcbiAgICAgICAgYWN0aXZlOiB0cnVlLFxyXG4gICAgICB9LFxyXG4gICAgICBjbWRTaW5nbGVQYWdlOiB7XHJcbiAgICAgICAgZW5hYmxlZDogdHJ1ZSxcclxuICAgICAgICBlbmFibGVkSW5OYXJyb3c6IHRydWUsXHJcbiAgICAgICAgYWN0aXZlOiBmYWxzZSxcclxuICAgICAgICBhY3RpdmVGb3JNb2JpbGU6IGZhbHNlXHJcbiAgICAgIH0sXHJcbiAgICAgIGNtZFNvdW5kczoge1xyXG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgZW5hYmxlZEluTmFycm93OiB0cnVlLFxyXG4gICAgICAgIGFjdGl2ZTogdHJ1ZVxyXG4gICAgICB9LFxyXG4gICAgICBjbWRTdGF0czoge1xyXG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgZW5hYmxlZEluTmFycm93OiB0cnVlLFxyXG4gICAgICAgIGFjdGl2ZTogZmFsc2VcclxuICAgICAgfSxcclxuICAgICAgY21kTGlnaHRpbmdVcDoge1xyXG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgZW5hYmxlZEluTmFycm93OiB0cnVlXHJcbiAgICAgIH0sXHJcbiAgICAgIGNtZExpZ2h0aW5nRG93bjoge1xyXG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgZW5hYmxlZEluTmFycm93OiB0cnVlXHJcbiAgICAgIH0sXHJcbiAgICAgIGNtZFBhbkxlZnQ6IHtcclxuICAgICAgICBlbmFibGVkOiBmYWxzZVxyXG4gICAgICB9LFxyXG4gICAgICBjbWRQYW5SaWdodDoge1xyXG4gICAgICAgIGVuYWJsZWQ6IGZhbHNlXHJcbiAgICAgIH0sXHJcbiAgICAgIGNtZFBhblVwOiB7XHJcbiAgICAgICAgZW5hYmxlZDogZmFsc2VcclxuICAgICAgfSxcclxuICAgICAgY21kUGFuRG93bjoge1xyXG4gICAgICAgIGVuYWJsZWQ6IGZhbHNlXHJcbiAgICAgIH0sXHJcbiAgICAgIG1vdXNlQ21kUm90YXRlOiB7XHJcbiAgICAgICAgZW5hYmxlZDogdHJ1ZSxcclxuICAgICAgICB0eXBlOiAnbW91c2VkcmFnJyxcclxuICAgICAgICBjb2RlOiBtb3VzZUJ1dHRvbnMuUmlnaHRcclxuICAgICAgfSxcclxuICAgICAgbW91c2VDbWREcmFnWm9vbToge1xyXG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgdHlwZTogJ21vdXNlZHJhZycsXHJcbiAgICAgICAgY29kZTogbW91c2VCdXR0b25zLk1pZGRsZVxyXG4gICAgICB9LFxyXG4gICAgICBtb3VzZUNtZFBhbjoge1xyXG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgdHlwZTogJ21vdXNlZHJhZycsXHJcbiAgICAgICAgY29kZTogbW91c2VCdXR0b25zLkxlZnRcclxuICAgICAgfSxcclxuICAgICAgbW91c2VDbWRXaGVlbFpvb206IHtcclxuICAgICAgICBlbmFibGVkOiB0cnVlLFxyXG4gICAgICAgIHR5cGU6ICdtb3VzZXdoZWVsJyxcclxuICAgICAgICBjb2RlOiAwXHJcbiAgICAgIH0sXHJcbiAgICAgIHRvdWNoQ21kUm90YXRlOiB7XHJcbiAgICAgICAgZW5hYmxlZDogdHJ1ZSxcclxuICAgICAgICB0eXBlOiAndG91Y2hkcmFnJyxcclxuICAgICAgICBjb2RlOiAzXHJcbiAgICAgIH0sXHJcbiAgICAgIHRvdWNoQ21kWm9vbToge1xyXG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgdHlwZTogJ3RvdWNoZHJhZycsXHJcbiAgICAgICAgY29kZTogMlxyXG4gICAgICB9LFxyXG4gICAgICB0b3VjaENtZFBhbjoge1xyXG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgdHlwZTogJ3RvdWNoZHJhZycsXHJcbiAgICAgICAgY29kZTogMVxyXG4gICAgICB9LFxyXG4gICAgICB0b3VjaENtZFN3aXBlOiB7XHJcbiAgICAgICAgZW5hYmxlZDogdHJ1ZSxcclxuICAgICAgICB0eXBlOiAndG91Y2hkcmFnJyxcclxuICAgICAgICBjb2RlOiAxXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9O1xyXG59O1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9qcy9wcm9wcy9ib29rQ29udHJvbGxlci5qcyIsImltcG9ydCB7JH0gZnJvbSAnLi4vbGlicyc7XHJcbmltcG9ydCBJbWFnZUJhc2UgZnJvbSAnLi9JbWFnZUJhc2UnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQmxhbmtJbWFnZSBleHRlbmRzIEltYWdlQmFzZSB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGNvbnRleHQsIHdpZHRoLCBoZWlnaHQsIGNvbG9yKSB7XHJcbiAgICBzdXBlcihjb250ZXh0LCB3aWR0aCwgaGVpZ2h0LCBjb2xvcik7XHJcblxyXG4gICAgUHJvbWlzZS5yZXNvbHZlKCkuXHJcbiAgICAgIHRoZW4oKCk9PiB7XHJcbiAgICAgICAgdGhpcy5zdGFydFJlbmRlciA9ICgpPT4ge1xyXG4gICAgICAgICAgdGhpcy5yZW5kZXJCbGFua1BhZ2UoKTtcclxuICAgICAgICAgIHRoaXMuZmluaXNoUmVuZGVyKCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmZpbmlzaExvYWQoKTtcclxuICAgICAgfSk7XHJcbiAgfVxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL0JsYW5rSW1hZ2UuanMiLCJpbXBvcnQgeyR9IGZyb20gJy4uL2xpYnMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQm9va21hcmtzIHtcclxuXHJcbiAgY29uc3RydWN0b3IoY29udGFpbmVyLCBpdGVtcywgZ2V0VGl0bGU9KGkpPT4gaS50aXRsZSwgZ2V0SXRlbXM9KGkpPT5pLml0ZW1zKSB7XHJcbiAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcclxuICAgIHRoaXMubWFwID0gW107XHJcbiAgICB0aGlzLmdldFRpdGxlID0gZ2V0VGl0bGU7XHJcbiAgICB0aGlzLmdldEl0ZW1zID0gZ2V0SXRlbXM7XHJcbiAgICB0aGlzLm5vZGVzID0gdGhpcy5tYXBOb2RlcyhpdGVtcywgdGhpcy5tYXApO1xyXG5cclxuICAgIHRoaXMuYmluZHMgPSB7XHJcbiAgICAgIHRvZ2xlOiAoZSk9PiB7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIGxldCBsaSA9ICQoZS50YXJnZXQpO1xyXG4gICAgICAgIHdoaWxlKGxpWzBdICYmIGxpWzBdIT09Y29udGFpbmVyWzBdICYmICFsaS5oYXNDbGFzcygnaXRlbScpKSB7XHJcbiAgICAgICAgICBsaSA9ICQobGlbMF0ucGFyZW50Tm9kZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKGxpLmhhc0NsYXNzKCdpdGVtJykpIHtcclxuICAgICAgICAgIGxldCBjbWQgPSAkKGUudGFyZ2V0KTtcclxuICAgICAgICAgIHdoaWxlKGNtZFswXSAmJiBjbWRbMF0hPT1saVswXSAmJiAhY21kLmhhc0NsYXNzKCdjbWQnKSkge1xyXG4gICAgICAgICAgICBjbWQgPSAkKGNtZFswXS5wYXJlbnROb2RlKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmKGNtZC5oYXNDbGFzcygnY21kJykpIHtcclxuICAgICAgICAgICAgY29uc3Qgbm9kZSA9IHRoaXMubWFwW2xpLmF0dHIoJ2RhdGEtaWQnKV07XHJcbiAgICAgICAgICAgIGlmKGNtZC5oYXNDbGFzcygndG9nbGUnKSkge1xyXG4gICAgICAgICAgICAgIG5vZGUubWluaW1pemVkID0gIW5vZGUubWluaW1pemVkO1xyXG4gICAgICAgICAgICAgIGlmKG5vZGUubWluaW1pemVkKSB7XHJcbiAgICAgICAgICAgICAgICBsaS5maW5kKCd1bCcpLnJlbW92ZSgpO1xyXG4gICAgICAgICAgICAgICAgbGkuZmluZCgnLnRvZ2xlJykuYWRkQ2xhc3MoJ21pbmltaXplZCcpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGxpLmZpbmQoJy50b2dsZScpLnJlbW92ZUNsYXNzKCdtaW5pbWl6ZWQnKTtcclxuICAgICAgICAgICAgICAgIGxpLmFwcGVuZCgodGhpcy5yZW5kZXJOb2RlKG5vZGUpLm1hdGNoKC88dWwoLnxcXG4pKjxcXC91bD4vZykgfHwgWycnXSlbMF0pO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICBpZih0aGlzLm9uTmF2aWdhdGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMub25OYXZpZ2F0ZShub2RlLml0ZW0pO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnRhaW5lci5vbignY2xpY2snLCB0aGlzLmJpbmRzLnRvZ2xlKTtcclxuICAgIHRoaXMudXBkYXRlKCk7XHJcbiAgfVxyXG5cclxuICBnZXRTaXplKCkge1xyXG4gICAgcmV0dXJuIHRoaXMubWFwLmxlbmd0aDtcclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICB0aGlzLmNvbnRhaW5lci5vZmYoJ2NsaWNrJywgdGhpcy5iaW5kcy50b2dsZSk7XHJcbiAgICB0aGlzLmNvbnRhaW5lci5odG1sKCcnKTtcclxuICB9XHJcblxyXG4gIHVwZGF0ZSgpIHtcclxuICAgIHRoaXMuY29udGFpbmVyLmh0bWwodGhpcy5yZW5kZXJOb2Rlcyh0aGlzLm5vZGVzKSk7XHJcbiAgfVxyXG5cclxuICBmb3JFYWNoKGYsIG5vZGVzPXRoaXMubm9kZXMpIHtcclxuICAgIGZvcihsZXQgbm9kZSBvZiAobm9kZXMgfHwgW10pKSB7XHJcbiAgICAgIGYobm9kZSk7XHJcbiAgICAgIHRoaXMuZm9yRWFjaChmLCBub2RlLmNoaWxkcmVuKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGV4cGFuZCgpIHtcclxuICAgIHRoaXMuZm9yRWFjaCgobik9PiBuLm1pbmltaXplZCA9IGZhbHNlKTtcclxuICAgIHRoaXMudXBkYXRlKCk7XHJcbiAgfVxyXG5cclxuICBtaW5pbWl6ZSgpIHtcclxuICAgIHRoaXMuZm9yRWFjaCgobik9PiBuLm1pbmltaXplZCA9IHRydWUpO1xyXG4gICAgdGhpcy51cGRhdGUoKTtcclxuICB9XHJcblxyXG4gIHJlbmRlck5vZGUobm9kZSkge1xyXG4gICAgcmV0dXJuIFsnPGRpdiBjbGFzcz1cImFyZWFcIj4nLFxyXG4gICAgICBub2RlLmNoaWxkcmVuPyAnPGEgaHJlZj1cIiNcIiBjbGFzcz1cImNtZCB0b2dsZScgKyAobm9kZS5taW5pbWl6ZWQ/ICcgbWluaW1pemVkJzogJycpICsgJ1wiPjxpIGNsYXNzPVwiZmEgZmEtYW5nbGUtcmlnaHRcIj48L2k+PC9hPiAnOiAnPGkgY2xhc3M9XCJ3aGl0ZS1zcGFjZVwiPjwvaT4gJyxcclxuICAgICAgJzxhIGNsYXNzPVwiY21kXCIgdGl0bGU9XCInLCBub2RlLnRpdGxlLCdcIiBocmVmPVwiI1wiPicsIG5vZGUudGl0bGUsICc8L2E+PC9kaXY+JyxcclxuICAgICAgbm9kZS5taW5pbWl6ZWQ/ICcnOiB0aGlzLnJlbmRlck5vZGVzKG5vZGUuY2hpbGRyZW4pXHJcbiAgICBdLmpvaW4oJycpO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyTm9kZXMobm9kZXMpIHtcclxuICAgIGxldCByZXMgPSBbJzxkaXYgY2xhc3M9XCJib29rbWFya3NcIj4nXTtcclxuICAgIGlmKG5vZGVzICYmIG5vZGVzLmxlbmd0aCkge1xyXG4gICAgICByZXMucHVzaCgnPHVsIGNsYXNzPVwibGV2ZWwtJywgbm9kZXNbMF0ubGV2ZWwsICdcIj4nKTtcclxuICAgICAgZm9yKGxldCBub2RlIG9mIG5vZGVzKSB7XHJcbiAgICAgICAgcmVzLnB1c2goW1xyXG4gICAgICAgICAgJzxsaSBjbGFzcz1cIml0ZW1cIiBkYXRhLWlkPVwiJywgbm9kZS5pZCwnXCI+JyxcclxuICAgICAgICAgICAgdGhpcy5yZW5kZXJOb2RlKG5vZGUpLFxyXG4gICAgICAgICAgJzwvbGk+J10uam9pbignJykpO1xyXG4gICAgICB9XHJcbiAgICAgIHJlcy5wdXNoKCc8L3VsPicpO1xyXG4gICAgfVxyXG4gICAgcmVzLnB1c2goJzwvZGl2PicpO1xyXG4gICAgcmV0dXJuIHJlcy5qb2luKCcnKTtcclxuICB9XHJcblxyXG4gIG1hcE5vZGVzKGl0ZW1zLCBtYXA9W10sIGxldmVsPTApIHtcclxuICAgIGxldCBub2RlcyA9IG51bGw7XHJcbiAgICBpZihpdGVtcyAmJiBpdGVtcy5sZW5ndGgpIHtcclxuICAgICAgbm9kZXM9W107XHJcbiAgICAgIGZvcihsZXQgaXRlbSBvZiBpdGVtcykge1xyXG4gICAgICAgIGNvbnN0IGlkID0gbWFwLmxlbmd0aDtcclxuICAgICAgICBtYXAucHVzaCh1bmRlZmluZWQpO1xyXG4gICAgICAgIGNvbnN0IG5vZGUgPSB7XHJcbiAgICAgICAgICBpZCxcclxuICAgICAgICAgIHRpdGxlOiB0aGlzLmdldFRpdGxlKGl0ZW0pLFxyXG4gICAgICAgICAgbGV2ZWwsXHJcbiAgICAgICAgICBpdGVtLFxyXG4gICAgICAgICAgbWluaW1pemVkOiB0cnVlLFxyXG4gICAgICAgICAgY2hpbGRyZW46IHRoaXMubWFwTm9kZXModGhpcy5nZXRJdGVtcyhpdGVtKSwgbWFwLCBsZXZlbCsxKVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgbm9kZXMucHVzaChub2RlKTtcclxuICAgICAgICBtYXBbaWRdID0gbm9kZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5vZGVzO1xyXG4gIH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvQm9va21hcmtzLmpzIiwiaW1wb3J0IHskfSBmcm9tICcuLi9saWJzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERldGVjdG9yIHtcclxuXHJcblx0c3RhdGljIGNhbnZhcyA9ICEhIHdpbmRvdy5DYW52YXNSZW5kZXJpbmdDb250ZXh0MkQ7XHJcblxyXG5cdHN0YXRpYyB3ZWJnbCA9IChmdW5jdGlvbigpIHtcclxuXHRcdHRyeSB7XHJcblx0XHRcdGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xyXG5cdFx0XHRyZXR1cm4gISEgKHdpbmRvdy5XZWJHTFJlbmRlcmluZ0NvbnRleHQgJiYgKGNhbnZhcy5nZXRDb250ZXh0KCd3ZWJnbCcpIHx8IGNhbnZhcy5nZXRDb250ZXh0KCdleHBlcmltZW50YWwtd2ViZ2wnKSkpO1xyXG5cdFx0fVxyXG5cdFx0Y2F0Y2ggKGUpIHtcclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0fVxyXG5cdH0pKCk7XHJcblxyXG5cdHN0YXRpYyB3b3JrZXJzID0gISEgd2luZG93LldvcmtlcjtcclxuXHJcblx0c3RhdGljIGZpbGVhcGkgPSB3aW5kb3cuRmlsZSAmJiB3aW5kb3cuRmlsZVJlYWRlciAmJiB3aW5kb3cuRmlsZUxpc3QgJiYgd2luZG93LkJsb2I7XHJcblxyXG5cdHN0YXRpYyBnZXRXZWJHTEVycm9yTWVzc2FnZSgpIHtcclxuXHRcdGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuXHRcdGVsZW1lbnQuaWQgPSAnd2ViZ2wtZXJyb3ItbWVzc2FnZSc7XHJcblx0XHRlbGVtZW50LnN0eWxlLmZvbnRGYW1pbHkgPSAnbW9ub3NwYWNlJztcclxuXHRcdGVsZW1lbnQuc3R5bGUuZm9udFNpemUgPSAnMTNweCc7XHJcblx0XHRlbGVtZW50LnN0eWxlLmZvbnRXZWlnaHQgPSAnbm9ybWFsJztcclxuXHRcdGVsZW1lbnQuc3R5bGUudGV4dEFsaWduID0gJ2NlbnRlcic7XHJcblx0XHRlbGVtZW50LnN0eWxlLmJhY2tncm91bmQgPSAnI2ZmZic7XHJcblx0XHRlbGVtZW50LnN0eWxlLmNvbG9yID0gJyMwMDAnO1xyXG5cdFx0ZWxlbWVudC5zdHlsZS5wYWRkaW5nID0gJzEuNWVtJztcclxuXHRcdGVsZW1lbnQuc3R5bGUud2lkdGggPSAnNDAwcHgnO1xyXG5cdFx0ZWxlbWVudC5zdHlsZS5tYXJnaW4gPSAnNWVtIGF1dG8gMCc7XHJcblxyXG5cdFx0aWYgKCFEZXRlY3Rvci53ZWJnbCkge1xyXG5cdFx0XHRlbGVtZW50LmlubmVySFRNTCA9IHdpbmRvdy5XZWJHTFJlbmRlcmluZ0NvbnRleHQgPyBbXHJcblx0XHRcdFx0J1lvdXIgZ3JhcGhpY3MgY2FyZCBkb2VzIG5vdCBzZWVtIHRvIHN1cHBvcnQgPGEgaHJlZj1cImh0dHA6Ly9raHJvbm9zLm9yZy93ZWJnbC93aWtpL0dldHRpbmdfYV9XZWJHTF9JbXBsZW1lbnRhdGlvblwiIHN0eWxlPVwiY29sb3I6IzAwMFwiPldlYkdMPC9hPi48YnIgLz4nLFxyXG5cdFx0XHRcdCdGaW5kIG91dCBob3cgdG8gZ2V0IGl0IDxhIGhyZWY9XCJodHRwOi8vZ2V0LndlYmdsLm9yZy9cIiBzdHlsZT1cImNvbG9yOiMwMDBcIj5oZXJlPC9hPi4nXHJcblx0XHRcdF0uam9pbignXFxuJykgOiBbXHJcblx0XHRcdFx0J1lvdXIgYnJvd3NlciBkb2VzIG5vdCBzZWVtIHRvIHN1cHBvcnQgPGEgaHJlZj1cImh0dHA6Ly9raHJvbm9zLm9yZy93ZWJnbC93aWtpL0dldHRpbmdfYV9XZWJHTF9JbXBsZW1lbnRhdGlvblwiIHN0eWxlPVwiY29sb3I6IzAwMFwiPldlYkdMPC9hPi48YnIvPicsXHJcblx0XHRcdFx0J0ZpbmQgb3V0IGhvdyB0byBnZXQgaXQgPGEgaHJlZj1cImh0dHA6Ly9nZXQud2ViZ2wub3JnL1wiIHN0eWxlPVwiY29sb3I6IzAwMFwiPmhlcmU8L2E+LidcclxuXHRcdFx0XS5qb2luKCdcXG4nKTtcclxuXHRcdH1cclxuXHRcdHJldHVybiBlbGVtZW50O1xyXG5cdH1cclxuXHJcblx0c3RhdGljIGFkZEdldFdlYkdMTWVzc2FnZShwYXJhbWV0ZXJzKSB7XHJcblx0XHRsZXQgcGFyZW50LCBpZCwgZWxlbWVudDtcclxuXHRcdHBhcmFtZXRlcnMgPSBwYXJhbWV0ZXJzIHx8IHt9O1xyXG5cclxuXHRcdHBhcmVudCA9IHBhcmFtZXRlcnMucGFyZW50IHx8ICQoZG9jdW1lbnQuYm9keSk7XHJcblx0XHRpZCA9IHBhcmFtZXRlcnMuaWQgfHwgJ29sZGllJztcclxuXHJcblx0XHRlbGVtZW50ID0gRGV0ZWN0b3IuZ2V0V2ViR0xFcnJvck1lc3NhZ2UoKTtcclxuXHRcdC8vZWxlbWVudC5pZCA9IGlkO1xyXG5cclxuXHRcdHBhcmVudC5hcHBlbmQoZWxlbWVudCk7XHJcblx0fVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9jb21tb24vY2xhc3Nlcy9EZXRlY3Rvci5qcyIsImltcG9ydCB7JH0gZnJvbSAnLi4vbGlicydcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERvY01vdXNlU2ltdWxhdG9yIHtcclxuXHJcbiAgc3RhdGljIEhPVkVSID0gJ1NJTVVMQVRFRC1IT1ZFUic7XHJcbiAgc3RhdGljIEFDVElWRSA9ICdTSU1VTEFURUQtQUNUSVZFJztcclxuXHJcbiAgY29uc3RydWN0b3IoakZyYW1lLCBlbGVtZW50LCBiRWxlbWVudD1kb2N1bWVudC5ib2R5KSB7XHJcbiAgICB0aGlzLmpGcmFtZSA9IGpGcmFtZTtcclxuICAgIHRoaXMud25kID0gakZyYW1lWzBdLmNvbnRlbnRXaW5kb3c7XHJcbiAgICB0aGlzLmRvYyA9IGpGcmFtZVswXS5jb250ZW50RG9jdW1lbnQ7XHJcbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50IHx8IGRvYy5ib2R5O1xyXG4gICAgdGhpcy5iRWxlbWVudCA9IGJFbGVtZW50O1xyXG4gICAgdGhpcy5yZXNlbmRQcm9wZXJ0aWVzID0gdGhpcy5nZXREZWZhdWx0UmVzZW5kUHJvcGVydGllcygpO1xyXG4gICAgdGhpcy51bmRlZmluZWRQcm9wZXJ0aWVzID0gdGhpcy5nZXREZWZhdWx0VW5kZWZpbmVkUHJvcGVydGllcygpO1xyXG4gICAgdGhpcy5jdXJzb3JzID0gW107XHJcbiAgICB0aGlzLm9uRG9jQ2hhbmdlQ2xicyA9IFtdO1xyXG4gICAgY29uc3QgdGVybXMgPSBbXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgZmluZDogJzpob3ZlcicsXHJcbiAgICAgICAgICAgICAgICAgICAgICByZXBsYWNlOiAnLicrRG9jTW91c2VTaW11bGF0b3IuSE9WRVJcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgIGZpbmQ6ICc6YWN0aXZlJyxcclxuICAgICAgICAgICAgICAgICAgICAgIHJlcGxhY2U6ICcuJytEb2NNb3VzZVNpbXVsYXRvci5BQ1RJVkVcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgIF07XHJcbiAgICBsZXQgc3R5bGUgPSBbJzxzdHlsZSB0eXBlPVwidGV4dC9jc3NcIj4nXTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5kb2Muc3R5bGVTaGVldHMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgbGV0IHNzID0gdGhpcy5kb2Muc3R5bGVTaGVldHNbaV07XHJcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgc3MuY3NzUnVsZXMubGVuZ3RoOyArK2opIHtcclxuICAgICAgICBsZXQgciA9IHNzLmNzc1J1bGVzW2pdLCBjc3NUZXh0O1xyXG4gICAgICAgIGZvcihsZXQgdGVybSBvZiB0ZXJtcykge1xyXG4gICAgICAgICAgaWYgKH5yLnNlbGVjdG9yVGV4dC5pbmRleE9mKHRlcm0uZmluZCkpIHtcclxuICAgICAgICAgICAgY3NzVGV4dCA9IChjc3NUZXh0IHx8IHIuY3NzVGV4dCkucmVwbGFjZShuZXcgUmVnRXhwKHRlcm0uZmluZCwgJ2cnKSwgdGVybS5yZXBsYWNlKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYoY3NzVGV4dCkge1xyXG4gICAgICAgICAgc3R5bGUucHVzaChjc3NUZXh0KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHN0eWxlLnB1c2goJzwvc3R5bGU+Jyk7XHJcbiAgICAkKHRoaXMuZG9jLmhlYWQpLmFwcGVuZCgkKHN0eWxlLmpvaW4oJycpKSk7XHJcbiAgfVxyXG5cclxuICBjb252ZXJ0Q29vcmRzKHgsIHkpIHtcclxuICAgIGNvbnN0IGpFbGVtZW50ID0gJCh0aGlzLmVsZW1lbnQpO1xyXG4gICAgY29uc3Qgb2Zmc2V0ID0gakVsZW1lbnQub2Zmc2V0KCk7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB4OiBvZmZzZXQubGVmdCtqRWxlbWVudC53aWR0aCgpKngsXHJcbiAgICAgIHk6IG9mZnNldC50b3ArakVsZW1lbnQuaGVpZ2h0KCkqKDEteSlcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICB0cmlnZ2VyRXZlbnQoZWxlbWVudCwgZSwgcCwgdHlwZSwgYWR2YW5jZWRQcm9wcykge1xyXG4gICAgY29uc3QgcHJvcHMgPSB7fTtcclxuICAgIGZvcihsZXQgbiBvZiB0aGlzLnJlc2VuZFByb3BlcnRpZXMpIHtcclxuICAgICAgcHJvcHNbbl0gPSBlW25dO1xyXG4gICAgfVxyXG4gICAgZm9yKGxldCBuIG9mIHRoaXMudW5kZWZpbmVkUHJvcGVydGllcykge1xyXG4gICAgICBwcm9wc1tuXSA9IHVuZGVmaW5lZDtcclxuICAgIH1cclxuICAgIGZvcihsZXQgbiBpbiBhZHZhbmNlZFByb3BzKSB7XHJcbiAgICAgIGlmKGFkdmFuY2VkUHJvcHMuaGFzT3duUHJvcGVydHkobikpIHtcclxuICAgICAgICBwcm9wc1tuXSA9IGFkdmFuY2VkUHJvcHNbbl07XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHByb3BzLnZpZXcgPSB0aGlzLnduZDtcclxuICAgIHByb3BzLnBhZ2VYID0gcC54O1xyXG4gICAgcHJvcHMucGFnZVkgPSBwLnk7XHJcbiAgICBjb25zdCBqRSA9ICQuRXZlbnQodHlwZSwgcHJvcHMpO1xyXG4gICAgakUudGltZVN0YW1wID0gZS50aW1lU3RhbXA7XHJcbiAgICAkKGVsZW1lbnQpLnRyaWdnZXIoakUpO1xyXG4gIH1cclxuXHJcbiAgYWRkQ2xhc3MoZWxlbWVudCwgbmFtZSkge1xyXG4gICAgJChlbGVtZW50KS5hZGRDbGFzcyhuYW1lKTtcclxuICAgIGNvbnN0IHN0eWxlID0gdGhpcy53bmQuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcclxuICAgIHRoaXMuY3Vyc29ycy5wdXNoKCQodGhpcy5iRWxlbWVudCkuY3NzKCdjdXJzb3InKSk7XHJcbiAgICAkKHRoaXMuYkVsZW1lbnQpLmNzcygnY3Vyc29yJywgc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnY3Vyc29yJykpO1xyXG4gIH1cclxuXHJcbiAgcmVtb3ZlQ2xhc3MoZWxlbWVudCwgbmFtZSkge1xyXG4gICAgJChlbGVtZW50KS5yZW1vdmVDbGFzcyhuYW1lKTtcclxuICAgICQodGhpcy5iRWxlbWVudCkuY3NzKCdjdXJzb3InLCB0aGlzLmN1cnNvcnMucG9wKCkpO1xyXG4gIH1cclxuXHJcbiAgZW50ZXJFbGVtZW50KGVsZW1lbnQpIHtcclxuICAgIHRoaXMuYWRkQ2xhc3MoZWxlbWVudCwgRG9jTW91c2VTaW11bGF0b3IuSE9WRVIpO1xyXG4gIH1cclxuXHJcbiAgbGVhdmVFbGVtZW50KGVsZW1lbnQpIHtcclxuICAgIHRoaXMucmVtb3ZlQ2xhc3MoZWxlbWVudCwgRG9jTW91c2VTaW11bGF0b3IuSE9WRVIpO1xyXG4gIH1cclxuXHJcbiAgYWN0aXZhdGVFbGVtZW50KGVsZW1lbnQpIHtcclxuICAgIHRoaXMuYWRkQ2xhc3MoZWxlbWVudCwgRG9jTW91c2VTaW11bGF0b3IuQUNUSVZFKTtcclxuICB9XHJcblxyXG4gIGRlYWN0aXZhdGVFbGVtZW50KGVsZW1lbnQpIHtcclxuICAgIHRoaXMucmVtb3ZlQ2xhc3MoZWxlbWVudCwgRG9jTW91c2VTaW11bGF0b3IuQUNUSVZFKTtcclxuICB9XHJcblxyXG4gIGFkZERvY0NoYW5nZUNsYihjbGIpIHtcclxuICAgIHRoaXMub25Eb2NDaGFuZ2VDbGJzLnB1c2goY2xiKTtcclxuICB9XHJcblxyXG4gIG5vdGlmeSgpIHtcclxuICAgIGZvcihsZXQgY2xiIG9mIHRoaXMub25Eb2NDaGFuZ2VDbGJzKSB7XHJcbiAgICAgIGNsYih0aGlzLnduZCwgdGhpcy5kb2MpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZWxlbWVudEZyb21Qb2ludChwKSB7XHJcbiAgICBsZXQgbm9kZSA9IHRoaXMuZG9jLmJvZHksIG5leHQgPSB0cnVlO1xyXG4gICAgd2hpbGUobmV4dCkge1xyXG4gICAgICBuZXh0ID0gZmFsc2U7XHJcbiAgICAgIGZvcihsZXQgaT0wOyBpPG5vZGUuY2hpbGROb2Rlcy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgIGNvbnN0IGNoaWxkID0gbm9kZS5jaGlsZE5vZGVzW2ldO1xyXG4gICAgICAgIGlmKGNoaWxkIGluc3RhbmNlb2YgdGhpcy53bmQuRWxlbWVudCkge1xyXG4gICAgICAgICAgY29uc3QgakMgPSAkKGNoaWxkKSwgb2Zmc2V0ID0gakMub2Zmc2V0KCksIGhlaWdodCA9IGpDLmhlaWdodCgpLCB3aWR0aCA9IGpDLndpZHRoKCk7XHJcbiAgICAgICAgICBpZihwLng+b2Zmc2V0LmxlZnQgJiYgcC54PG9mZnNldC5sZWZ0K3dpZHRoICYmIHAueT5vZmZzZXQudG9wICYmIHAueTxvZmZzZXQudG9wK2hlaWdodCkge1xyXG4gICAgICAgICAgICBub2RlID0gY2hpbGQ7XHJcbiAgICAgICAgICAgIG5leHQgPSB0cnVlO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBub2RlO1xyXG4gIH1cclxuXHJcbiAgZ2V0RWxlbWVudChwKSB7XHJcbiAgICBjb25zdCBvZmYwID0gdGhpcy5qRnJhbWUub2Zmc2V0KCk7XHJcbiAgICB0aGlzLmpGcmFtZS5vZmZzZXQoe2xlZnQ6IDAuNSp3aW5kb3cuaW5uZXJXaWR0aC1wLngsIHRvcDogMC41KndpbmRvdy5pbm5lckhlaWdodC1wLnl9KTtcclxuICAgIGxldCBlbGVtZW50ID0gdGhpcy5kb2MuZWxlbWVudEZyb21Qb2ludChwLngsIHAueSk7XHJcbiAgICBpZighZWxlbWVudCkgeyAvLyBpdCBpc24ndCBhIGpva2UgaXQncyBJRVxyXG4gICAgICBlbGVtZW50ID0gdGhpcy5kb2MuZWxlbWVudEZyb21Qb2ludChwLngsIHAueSk7XHJcbiAgICB9XHJcbiAgICB0aGlzLmpGcmFtZS5vZmZzZXQob2ZmMCk7XHJcbiAgICByZXR1cm4gZWxlbWVudD8gZWxlbWVudDogdGhpcy5lbGVtZW50RnJvbVBvaW50KHApO1xyXG4gIH1cclxuXHJcbiAgc2ltdWxhdGUoZSwgZG9jLCB4LCB5KSB7XHJcbiAgICBjb25zdCBwID0gdGhpcy5jb252ZXJ0Q29vcmRzKHgsIHkpLFxyXG4gICAgICAgICAgZWxlbWVudCA9IGRvYz09PXRoaXMuZG9jPyB0aGlzLmdldEVsZW1lbnQocCk6IHVuZGVmaW5lZDtcclxuICAgIGxldCB0cmlnZ2VyID0gZWxlbWVudCAhPT0gdW5kZWZpbmVkLCBub3RpZnkgPSBmYWxzZTtcclxuXHJcbiAgICBzd2l0Y2goZS50eXBlKSB7XHJcbiAgICAgIGNhc2UgJ21vdXNlZG93bic6IHtcclxuICAgICAgICBpZih0aGlzLmNhcEVsZW1lbnQpIHtcclxuICAgICAgICAgIHRoaXMuZGVhY3RpdmF0ZUVsZW1lbnQodGhpcy5jYXBFbGVtZW50KTtcclxuICAgICAgICAgIG5vdGlmeSA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY2FwRWxlbWVudCA9IGVsZW1lbnQ7XHJcbiAgICAgICAgaWYodGhpcy5jYXBFbGVtZW50KSB7XHJcbiAgICAgICAgICB0aGlzLmFjdGl2YXRlRWxlbWVudCh0aGlzLmNhcEVsZW1lbnQpO1xyXG4gICAgICAgICAgbm90aWZ5ID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgY2FzZSAnbW91c2V1cCc6IHtcclxuICAgICAgICBpZih0aGlzLmNhcEVsZW1lbnQpIHtcclxuICAgICAgICAgIHRoaXMuZGVhY3RpdmF0ZUVsZW1lbnQodGhpcy5jYXBFbGVtZW50KTtcclxuICAgICAgICAgIG5vdGlmeSA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMudGltZVN0YW1wID0gZS50aW1lU3RhbXA7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgY2FzZSAnY2xpY2snOiB7XHJcbiAgICAgICAgdHJpZ2dlciA9IGVsZW1lbnQgJiYgdGhpcy5jYXBFbGVtZW50ID09PSBlbGVtZW50Oy8vICYmIGUudGltZVN0YW1wID09PSB0aGlzLnRpbWVTdGFtcDtcclxuICAgICAgICB0aGlzLmNhcEVsZW1lbnQgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgY2FzZSAnbW91c2VlbnRlcic6XHJcbiAgICAgIGNhc2UgJ21vdXNlb3Zlcic6XHJcbiAgICAgIGNhc2UgJ21vdXNlbW92ZSc6IHtcclxuICAgICAgICBsZXQgbGVhdmVkID0gbnVsbDtcclxuICAgICAgICBpZih0aGlzLmhvdkVsZW1lbnQgIT09IGVsZW1lbnQgJiYgdGhpcy5ob3ZFbGVtZW50KSB7XHJcbiAgICAgICAgICB0aGlzLnRyaWdnZXJFdmVudCh0aGlzLmhvdkVsZW1lbnQsIGUsIHAsICdtb3VzZW91dCcsIHtyZWxhdGVkVGFyZ2V0OiBlbGVtZW50PyBlbGVtZW50OiBudWxsfSk7XHJcbiAgICAgICAgICB0aGlzLmxlYXZlRWxlbWVudCh0aGlzLmhvdkVsZW1lbnQpO1xyXG4gICAgICAgICAgbGVhdmVkID0gdGhpcy5ob3ZFbGVtZW50O1xyXG4gICAgICAgICAgdGhpcy5ob3ZFbGVtZW50ID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgbm90aWZ5ID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYoIXRoaXMuaG92RWxlbWVudCAmJiBlbGVtZW50KSB7XHJcbiAgICAgICAgICB0aGlzLnRyaWdnZXJFdmVudChlbGVtZW50LCBlLCBwLCAnbW91c2VvdmVyJywge3JlbGF0ZWRUYXJnZXQ6IGxlYXZlZH0pO1xyXG4gICAgICAgICAgdGhpcy5lbnRlckVsZW1lbnQoZWxlbWVudCk7XHJcbiAgICAgICAgICB0aGlzLmhvdkVsZW1lbnQgPSBlbGVtZW50O1xyXG4gICAgICAgICAgbm90aWZ5ID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdHJpZ2dlciA9IGVsZW1lbnQgJiYgZS50eXBlID09PSAnbW91c2Vtb3ZlJztcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgICBjYXNlICdtb3VzZWxlYXZlJzpcclxuICAgICAgY2FzZSAnbW91c2VvdXQnOiB7XHJcbiAgICAgICAgaWYodGhpcy5ob3ZFbGVtZW50KSB7XHJcbiAgICAgICAgICB0aGlzLnRyaWdnZXJFdmVudCh0aGlzLmhvdkVsZW1lbnQsIGUsIHAsICdtb3VzZW91dCcsIHtyZWxhdGVkVGFyZ2V0OiBlLnJlbGF0ZWRUYXJnZXR9KTtcclxuICAgICAgICAgIHRoaXMubGVhdmVFbGVtZW50KHRoaXMuaG92RWxlbWVudCk7XHJcbiAgICAgICAgICB0aGlzLmhvdkVsZW1lbnQgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICBub3RpZnkgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0cmlnZ2VyID0gZmFsc2U7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGlmKHRyaWdnZXIpIHtcclxuICAgICAgdGhpcy50cmlnZ2VyRXZlbnQoZWxlbWVudCwgZSwgcCwgZS50eXBlKTtcclxuICAgIH1cclxuICAgIGlmKG5vdGlmeSkge1xyXG4gICAgICB0aGlzLm5vdGlmeSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZ2V0RGVmYXVsdFVuZGVmaW5lZFByb3BlcnRpZXMoKSB7XHJcbiAgICByZXR1cm4gW1xyXG4gICAgICAnY2xpZW50WCcsXHJcbiAgICAgICdjbGllbnRZJyxcclxuICAgICAgJ29mZnNldFgnLFxyXG4gICAgICAnb2Zmc2V0WScsXHJcbiAgICAgICdzY3JlZW5YJyxcclxuICAgICAgJ3NjcmVlblknXHJcbiAgICBdO1xyXG4gIH1cclxuXHJcbiAgZ2V0RGVmYXVsdFJlc2VuZFByb3BlcnRpZXMoKSB7XHJcbiAgICByZXR1cm4gW1xyXG4gICAgICAnYWx0S2V5JyxcclxuICAgICAgJ2J1YmJsZXMnLFxyXG4gICAgICAnYnV0dG9uJyxcclxuICAgICAgJ2J1dHRvbnMnLFxyXG4gICAgICAnY2FuY2VsYWJsZScsXHJcbiAgICAgICdjaGFuZ2VkVG91Y2hlcycsXHJcbiAgICAgICdjaGFyJyxcclxuICAgICAgJ2NoYXJDb2RlJyxcclxuICAgICAgJ2N0cmxLZXknLFxyXG4gICAgICAnZGF0YScsXHJcbiAgICAgICdkZXRhaWwnLFxyXG4gICAgICAnZXZlbnRQaGFzZScsXHJcbiAgICAgICdpc0RlZmF1bHRQcmV2ZW50ZWQnLFxyXG4gICAgICAna2V5JyxcclxuICAgICAgJ2tleUNvZGUnLFxyXG4gICAgICAnbWV0YUtleScsXHJcbiAgICAgICdwb2ludGVySWQnLFxyXG4gICAgICAncG9pbnRlclR5cGUnLFxyXG4gICAgICAnc2hpZnRLZXknLFxyXG4gICAgICAndGFyZ2V0VG91Y2hlcycsXHJcbiAgICAgICd0b3VjaGVzJyxcclxuICAgICAgJ3doaWNoJ1xyXG4gICAgXTtcclxuICB9XHJcblxyXG59XHJcblxyXG4vKlxyXG5hbHRLZXksXHJcbmJ1YmJsZXMsXHJcbmJ1dHRvbixcclxuYnV0dG9ucyxcclxuY2FuY2VsYWJsZSxcclxuY2hhbmdlZFRvdWNoZXMsXHJcbmNoYXIsXHJcbmNoYXJDb2RlLFxyXG5jbGllbnRYLFxyXG5jbGllbnRZLFxyXG5jdHJsS2V5LFxyXG5jdXJyZW50VGFyZ2V0LFxyXG5kYXRhLFxyXG5kZWxlZ2F0ZVRhcmdldCxcclxuZGV0YWlsLFxyXG5ldmVudFBoYXNlLFxyXG5oYW5kbGVPYmosXHJcbmlzRGVmYXVsdFByZXZlbnRlZCxcclxua2V5LFxyXG5rZXlDb2RlLFxyXG5tZXRhS2V5LFxyXG5vZmZzZXRYLFxyXG5vZmZzZXRZLFxyXG5vcmlnaW5hbEV2ZW50LFxyXG5wYWdlWCxcclxucGFnZVksXHJcbnBvaW50ZXJJZCxcclxucG9pbnRlclR5cGUsXHJcbnJlbGF0ZWRUYXJnZXQsXHJcbnNjcmVlblgsXHJcbnNjcmVlblksXHJcbnNoaWZ0S2V5LFxyXG50YXJnZXQsXHJcbnRhcmdldFRvdWNoZXMsXHJcbnRpbWVTdGFtcCxcclxudG9FbGVtZW50LFxyXG50b3VjaGVzLFxyXG50eXBlLFxyXG52aWV3LFxyXG53aGljaFxyXG4qL1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9jb21tb24vY2xhc3Nlcy9Eb2NNb3VzZVNpbXVsYXRvci5qcyIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIERvbTJJbWFnZSB7XG5cbiAgY29uc3RydWN0b3Iod25kLCBkb2MsIGNhY2hlKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgdGhpcy53aW5kb3cgPSB3bmQ7XG4gICAgdGhpcy5kb2N1bWVudCA9IGRvYztcbiAgICB0aGlzLmNhY2hlID0gY2FjaGU7XG5cbiAgICBjb25zdCB1dGlsID0gbmV3VXRpbCgpO1xuICAgIGNvbnN0IGlubGluZXIgPSBuZXdJbmxpbmVyKCk7XG4gICAgY29uc3QgZm9udEZhY2VzID0gbmV3Rm9udEZhY2VzKCk7XG4gICAgY29uc3QgaW1hZ2VzID0gbmV3SW1hZ2VzKCk7XG5cbiAgICB0aGlzLnRvU3ZnID0gdG9Tdmc7XG4gICAgdGhpcy50b1BuZyA9IHRvUG5nO1xuICAgIHRoaXMudG9KcGVnID0gdG9KcGVnO1xuICAgIHRoaXMudG9CbG9iID0gdG9CbG9iO1xuICAgIHRoaXMudG9QaXhlbERhdGEgPSB0b1BpeGVsRGF0YTtcbiAgICB0aGlzLmltcGwgPSB7XG4gICAgICAgICAgICAgICAgICBmb250RmFjZXM6IGZvbnRGYWNlcyxcbiAgICAgICAgICAgICAgICAgIGltYWdlczogaW1hZ2VzLFxuICAgICAgICAgICAgICAgICAgdXRpbDogdXRpbCxcbiAgICAgICAgICAgICAgICAgIGlubGluZXI6IGlubGluZXJcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtOb2RlfSBub2RlIC0gVGhlIERPTSBOb2RlIG9iamVjdCB0byByZW5kZXJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIFJlbmRlcmluZyBvcHRpb25zXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gb3B0aW9ucy5maWx0ZXIgLSBTaG91bGQgcmV0dXJuIHRydWUgaWYgcGFzc2VkIG5vZGUgc2hvdWxkIGJlIGluY2x1ZGVkIGluIHRoZSBvdXRwdXRcbiAgICAgKiAgICAgICAgICAoZXhjbHVkaW5nIG5vZGUgbWVhbnMgZXhjbHVkaW5nIGl0J3MgY2hpbGRyZW4gYXMgd2VsbCkuIE5vdCBjYWxsZWQgb24gdGhlIHJvb3Qgbm9kZS5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gb3B0aW9ucy5iZ2NvbG9yIC0gY29sb3IgZm9yIHRoZSBiYWNrZ3JvdW5kLCBhbnkgdmFsaWQgQ1NTIGNvbG9yIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBvcHRpb25zLndpZHRoIC0gd2lkdGggdG8gYmUgYXBwbGllZCB0byBub2RlIGJlZm9yZSByZW5kZXJpbmcuXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG9wdGlvbnMuaGVpZ2h0IC0gaGVpZ2h0IHRvIGJlIGFwcGxpZWQgdG8gbm9kZSBiZWZvcmUgcmVuZGVyaW5nLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zLnN0eWxlIC0gYW4gb2JqZWN0IHdob3NlIHByb3BlcnRpZXMgdG8gYmUgY29waWVkIHRvIG5vZGUncyBzdHlsZSBiZWZvcmUgcmVuZGVyaW5nLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBvcHRpb25zLnF1YWxpdHkgLSBhIE51bWJlciBiZXR3ZWVuIDAgYW5kIDEgaW5kaWNhdGluZyBpbWFnZSBxdWFsaXR5IChhcHBsaWNhYmxlIHRvIEpQRUcgb25seSksXG4gICAgICAgICAgICAgICAgZGVmYXVsdHMgdG8gMS4wLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gQSBwcm9taXNlIHRoYXQgaXMgZnVsZmlsbGVkIHdpdGggYSBTVkcgaW1hZ2UgZGF0YSBVUkxcbiAgICAgKiAqL1xuXG4gICAgZnVuY3Rpb24gdG9Tdmcobm9kZSwgb3B0aW9ucykge1xuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShub2RlKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2xvbmVOb2RlKG5vZGUsIG9wdGlvbnMuZmlsdGVyLCB0cnVlKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAudGhlbihlbWJlZEZvbnRzKVxuICAgICAgICAgICAgLnRoZW4oaW5saW5lSW1hZ2VzKVxuICAgICAgICAgICAgLnRoZW4oYXBwbHlPcHRpb25zKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGNsb25lKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1ha2VTdmdEYXRhVXJpKGNsb25lLFxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLndpZHRoIHx8IHV0aWwud2lkdGgobm9kZSksXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuaGVpZ2h0IHx8IHV0aWwuaGVpZ2h0KG5vZGUpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIGZ1bmN0aW9uIGFwcGx5T3B0aW9ucyhjbG9uZSkge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuYmdjb2xvcikgY2xvbmUuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gb3B0aW9ucy5iZ2NvbG9yO1xuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy53aWR0aCkgY2xvbmUuc3R5bGUud2lkdGggPSBvcHRpb25zLndpZHRoICsgJ3B4JztcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmhlaWdodCkgY2xvbmUuc3R5bGUuaGVpZ2h0ID0gb3B0aW9ucy5oZWlnaHQgKyAncHgnO1xuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5zdHlsZSlcbiAgICAgICAgICAgICAgICBzZWxmLndpbmRvdy5PYmplY3Qua2V5cyhvcHRpb25zLnN0eWxlKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wZXJ0eSkge1xuICAgICAgICAgICAgICAgICAgICBjbG9uZS5zdHlsZVtwcm9wZXJ0eV0gPSBvcHRpb25zLnN0eWxlW3Byb3BlcnR5XTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIGNsb25lO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtOb2RlfSBub2RlIC0gVGhlIERPTSBOb2RlIG9iamVjdCB0byByZW5kZXJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIFJlbmRlcmluZyBvcHRpb25zLCBAc2VlIHtAbGluayB0b1N2Z31cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIEEgcHJvbWlzZSB0aGF0IGlzIGZ1bGZpbGxlZCB3aXRoIGEgVWludDhBcnJheSBjb250YWluaW5nIFJHQkEgcGl4ZWwgZGF0YS5cbiAgICAgKiAqL1xuICAgIGZ1bmN0aW9uIHRvUGl4ZWxEYXRhKG5vZGUsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIGRyYXcobm9kZSwgb3B0aW9ucyB8fCB7fSlcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChjYW52YXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2FudmFzLmdldENvbnRleHQoJzJkJykuZ2V0SW1hZ2VEYXRhKFxuICAgICAgICAgICAgICAgICAgICAwLFxuICAgICAgICAgICAgICAgICAgICAwLFxuICAgICAgICAgICAgICAgICAgICB1dGlsLndpZHRoKG5vZGUpLFxuICAgICAgICAgICAgICAgICAgICB1dGlsLmhlaWdodChub2RlKVxuICAgICAgICAgICAgICAgICkuZGF0YTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7Tm9kZX0gbm9kZSAtIFRoZSBET00gTm9kZSBvYmplY3QgdG8gcmVuZGVyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBSZW5kZXJpbmcgb3B0aW9ucywgQHNlZSB7QGxpbmsgdG9Tdmd9XG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gLSBBIHByb21pc2UgdGhhdCBpcyBmdWxmaWxsZWQgd2l0aCBhIFBORyBpbWFnZSBkYXRhIFVSTFxuICAgICAqICovXG4gICAgZnVuY3Rpb24gdG9Qbmcobm9kZSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gZHJhdyhub2RlLCBvcHRpb25zIHx8IHt9KVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGNhbnZhcykge1xuICAgICAgICAgICAgICAgIHJldHVybiBjYW52YXMudG9EYXRhVVJMKCk7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge05vZGV9IG5vZGUgLSBUaGUgRE9NIE5vZGUgb2JqZWN0IHRvIHJlbmRlclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gUmVuZGVyaW5nIG9wdGlvbnMsIEBzZWUge0BsaW5rIHRvU3ZnfVxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gQSBwcm9taXNlIHRoYXQgaXMgZnVsZmlsbGVkIHdpdGggYSBKUEVHIGltYWdlIGRhdGEgVVJMXG4gICAgICogKi9cbiAgICBmdW5jdGlvbiB0b0pwZWcobm9kZSwgb3B0aW9ucykge1xuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgICAgcmV0dXJuIGRyYXcobm9kZSwgb3B0aW9ucylcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChjYW52YXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2FudmFzLnRvRGF0YVVSTCgnaW1hZ2UvanBlZycsIG9wdGlvbnMucXVhbGl0eSB8fCAxLjApO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtOb2RlfSBub2RlIC0gVGhlIERPTSBOb2RlIG9iamVjdCB0byByZW5kZXJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIFJlbmRlcmluZyBvcHRpb25zLCBAc2VlIHtAbGluayB0b1N2Z31cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIEEgcHJvbWlzZSB0aGF0IGlzIGZ1bGZpbGxlZCB3aXRoIGEgUE5HIGltYWdlIGJsb2JcbiAgICAgKiAqL1xuICAgIGZ1bmN0aW9uIHRvQmxvYihub2RlLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBkcmF3KG5vZGUsIG9wdGlvbnMgfHwge30pXG4gICAgICAgICAgICAudGhlbih1dGlsLmNhbnZhc1RvQmxvYik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZHJhdyhkb21Ob2RlLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0b1N2Zyhkb21Ob2RlLCBvcHRpb25zKVxuICAgICAgICAgICAgLnRoZW4odXRpbC5tYWtlSW1hZ2UpXG4gICAgICAgICAgICAudGhlbih1dGlsLmRlbGF5KDEwMCkpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoaW1hZ2UpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjYW52YXMgPSBuZXdDYW52YXMoZG9tTm9kZSk7XG4gICAgICAgICAgICAgICAgY2FudmFzLmdldENvbnRleHQoJzJkJykuZHJhd0ltYWdlKGltYWdlLCAwLCAwKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2FudmFzO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgZnVuY3Rpb24gbmV3Q2FudmFzKGRvbU5vZGUpIHtcbiAgICAgICAgICAgIGNvbnN0IGNhbnZhcyA9IHNlbGYuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgICAgICAgICBjYW52YXMud2lkdGggPSBvcHRpb25zLndpZHRoIHx8IHV0aWwud2lkdGgoZG9tTm9kZSk7XG4gICAgICAgICAgICBjYW52YXMuaGVpZ2h0ID0gb3B0aW9ucy5oZWlnaHQgfHwgdXRpbC5oZWlnaHQoZG9tTm9kZSk7XG5cbiAgICAgICAgICAgIGlmIChvcHRpb25zLmJnY29sb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gb3B0aW9ucy5iZ2NvbG9yO1xuICAgICAgICAgICAgICAgIGN0eC5maWxsUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gY2FudmFzO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xvbmVOb2RlKG5vZGUsIGZpbHRlciwgcm9vdCkge1xuICAgICAgICBpZiAoIXJvb3QgJiYgZmlsdGVyICYmICFmaWx0ZXIobm9kZSkpIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5vZGUpXG4gICAgICAgICAgICAudGhlbihtYWtlTm9kZUNvcHkpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoY2xvbmUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2xvbmVDaGlsZHJlbihub2RlLCBjbG9uZSwgZmlsdGVyKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoY2xvbmUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvY2Vzc0Nsb25lKG5vZGUsIGNsb25lKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIGZ1bmN0aW9uIG1ha2VOb2RlQ29weShub2RlKSB7XG4gICAgICAgICAgICBpZiAodXRpbC5pc0NhbnZhcyhub2RlKSkgcmV0dXJuIHV0aWwubWFrZUltYWdlKG5vZGUudG9EYXRhVVJMKCkpO1xuICAgICAgICAgICAgcmV0dXJuIG5vZGUuY2xvbmVOb2RlKGZhbHNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGNsb25lQ2hpbGRyZW4ob3JpZ2luYWwsIGNsb25lLCBmaWx0ZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkcmVuID0gb3JpZ2luYWwuY2hpbGROb2RlcztcbiAgICAgICAgICAgIGlmIChjaGlsZHJlbi5sZW5ndGggPT09IDApIHJldHVybiBQcm9taXNlLnJlc29sdmUoY2xvbmUpO1xuXG4gICAgICAgICAgICByZXR1cm4gY2xvbmVDaGlsZHJlbkluT3JkZXIoY2xvbmUsIHV0aWwuYXNBcnJheShjaGlsZHJlbiksIGZpbHRlcilcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjbG9uZTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgZnVuY3Rpb24gY2xvbmVDaGlsZHJlbkluT3JkZXIocGFyZW50LCBjaGlsZHJlbiwgZmlsdGVyKSB7XG4gICAgICAgICAgICAgICAgbGV0IGRvbmUgPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICBjaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICAgICAgICAgICAgICBkb25lID0gZG9uZVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjbG9uZU5vZGUoY2hpbGQsIGZpbHRlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGNoaWxkQ2xvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGRDbG9uZSkgcGFyZW50LmFwcGVuZENoaWxkKGNoaWxkQ2xvbmUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRvbmU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBwcm9jZXNzQ2xvbmUob3JpZ2luYWwsIGNsb25lKSB7XG4gICAgICAgICAgICBpZiAoIXV0aWwuaXNFbGVtZW50KGNsb25lKSkgcmV0dXJuIGNsb25lO1xuXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKClcbiAgICAgICAgICAgICAgICAudGhlbihjbG9uZVN0eWxlKVxuICAgICAgICAgICAgICAgIC50aGVuKGNsb25lUHNldWRvRWxlbWVudHMpXG4gICAgICAgICAgICAgICAgLnRoZW4oY29weVVzZXJJbnB1dClcbiAgICAgICAgICAgICAgICAudGhlbihmaXhTdmcpXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2xvbmU7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNsb25lU3R5bGUoKSB7XG4gICAgICAgICAgICAgICAgY29weVN0eWxlKHNlbGYud2luZG93LmdldENvbXB1dGVkU3R5bGUob3JpZ2luYWwpLCBjbG9uZS5zdHlsZSk7XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBjb3B5U3R5bGUoc291cmNlLCB0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNvdXJjZS5jc3NUZXh0KSB0YXJnZXQuY3NzVGV4dCA9IHNvdXJjZS5jc3NUZXh0O1xuICAgICAgICAgICAgICAgICAgICBlbHNlIGNvcHlQcm9wZXJ0aWVzKHNvdXJjZSwgdGFyZ2V0KTtcblxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBjb3B5UHJvcGVydGllcyhzb3VyY2UsIHRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdXRpbC5hc0FycmF5KHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldC5zZXRQcm9wZXJ0eShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlLmdldFByb3BlcnR5VmFsdWUobmFtZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZS5nZXRQcm9wZXJ0eVByaW9yaXR5KG5hbWUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBjbG9uZVBzZXVkb0VsZW1lbnRzKCkge1xuICAgICAgICAgICAgICAgIFsnOmJlZm9yZScsICc6YWZ0ZXInXS5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGNsb25lUHNldWRvRWxlbWVudChlbGVtZW50KTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNsb25lUHNldWRvRWxlbWVudChlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0eWxlID0gc2VsZi53aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShvcmlnaW5hbCwgZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRlbnQgPSBzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCdjb250ZW50Jyk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRlbnQgPT09ICcnIHx8IGNvbnRlbnQgPT09ICdub25lJykgcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNsYXNzTmFtZSA9IHV0aWwudWlkKCk7XG4gICAgICAgICAgICAgICAgICAgIGNsb25lLmNsYXNzTmFtZSA9IGNsb25lLmNsYXNzTmFtZSArICcgJyArIGNsYXNzTmFtZTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3R5bGVFbGVtZW50ID0gc2VsZi5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICAgICAgICAgICAgICAgICAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZm9ybWF0UHNldWRvRWxlbWVudFN0eWxlKGNsYXNzTmFtZSwgZWxlbWVudCwgc3R5bGUpKTtcbiAgICAgICAgICAgICAgICAgICAgY2xvbmUuYXBwZW5kQ2hpbGQoc3R5bGVFbGVtZW50KTtcblxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBmb3JtYXRQc2V1ZG9FbGVtZW50U3R5bGUoY2xhc3NOYW1lLCBlbGVtZW50LCBzdHlsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2VsZWN0b3IgPSAnLicgKyBjbGFzc05hbWUgKyAnOicgKyBlbGVtZW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY3NzVGV4dCA9IHN0eWxlLmNzc1RleHQgPyBmb3JtYXRDc3NUZXh0KHN0eWxlKSA6IGZvcm1hdENzc1Byb3BlcnRpZXMoc3R5bGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoc2VsZWN0b3IgKyAneycgKyBjc3NUZXh0ICsgJ30nKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZm9ybWF0Q3NzVGV4dChzdHlsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRlbnQgPSBzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCdjb250ZW50Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0eWxlLmNzc1RleHQgKyAnIGNvbnRlbnQ6ICcgKyBjb250ZW50ICsgJzsnO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBmb3JtYXRDc3NQcm9wZXJ0aWVzKHN0eWxlKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdXRpbC5hc0FycmF5KHN0eWxlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAubWFwKGZvcm1hdFByb3BlcnR5KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuam9pbignOyAnKSArICc7JztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGZvcm1hdFByb3BlcnR5KG5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5hbWUgKyAnOiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlLmdldFByb3BlcnR5VmFsdWUobmFtZSkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHN0eWxlLmdldFByb3BlcnR5UHJpb3JpdHkobmFtZSkgPyAnICFpbXBvcnRhbnQnIDogJycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gY29weVVzZXJJbnB1dCgpIHtcbiAgICAgICAgICAgICAgICBpZiAodXRpbC5pc1RleHRBcmVhKG9yaWdpbmFsKSkgY2xvbmUuaW5uZXJIVE1MID0gb3JpZ2luYWwudmFsdWU7XG4gICAgICAgICAgICAgICAgaWYgKHV0aWwuaXNJbnB1dChvcmlnaW5hbCkpIGNsb25lLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsIG9yaWdpbmFsLnZhbHVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gZml4U3ZnKCkge1xuICAgICAgICAgICAgICAgIGlmICghdXRpbC5pc1NWRyhjbG9uZSkpIHJldHVybjtcbiAgICAgICAgICAgICAgICBjbG9uZS5zZXRBdHRyaWJ1dGUoJ3htbG5zJywgJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIXV0aWwuaXNTVkdSZWN0KGNsb25lKSkgcmV0dXJuO1xuICAgICAgICAgICAgICAgIFsnd2lkdGgnLCAnaGVpZ2h0J10uZm9yRWFjaChmdW5jdGlvbiAoYXR0cmlidXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gY2xvbmUuZ2V0QXR0cmlidXRlKGF0dHJpYnV0ZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghdmFsdWUpIHJldHVybjtcblxuICAgICAgICAgICAgICAgICAgICBjbG9uZS5zdHlsZS5zZXRQcm9wZXJ0eShhdHRyaWJ1dGUsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGVtYmVkRm9udHMobm9kZSkge1xuICAgICAgICByZXR1cm4gZm9udEZhY2VzLnJlc29sdmVBbGwoKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGNzc1RleHQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzdHlsZU5vZGUgPSBzZWxmLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgICAgICAgICAgICAgbm9kZS5hcHBlbmRDaGlsZChzdHlsZU5vZGUpO1xuICAgICAgICAgICAgICAgIHN0eWxlTm9kZS5hcHBlbmRDaGlsZChzZWxmLmRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzc1RleHQpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlubGluZUltYWdlcyhub2RlKSB7XG4gICAgICAgIHJldHVybiBpbWFnZXMuaW5saW5lQWxsKG5vZGUpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYWtlU3ZnRGF0YVVyaShub2RlLCB3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobm9kZSlcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoJ3htbG5zJywgJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWwnKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHNlbGYud2luZG93LlhNTFNlcmlhbGl6ZXIoKS5zZXJpYWxpemVUb1N0cmluZyhub2RlKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAudGhlbih1dGlsLmVzY2FwZVhodG1sKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHhodG1sKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsnZGF0YTppbWFnZS9zdmcreG1sO2NoYXJzZXQ9dXRmLTgsJyxcbiAgICAgICAgICAgICAgICAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCInLCB3aWR0aCwgJ1wiIGhlaWdodD1cIicsIGhlaWdodCwgJ1wiPicsXG4gICAgICAgICAgICAgICAgICAnPGZvcmVpZ25PYmplY3QgeD1cIjBcIiB5PVwiMFwiIHdpZHRoPVwiMTAwJVwiIGhlaWdodD1cIjEwMCVcIj4nLCB4aHRtbCwgJzwvZm9yZWlnbk9iamVjdD4nLFxuICAgICAgICAgICAgICAgICc8L3N2Zz4nXS5qb2luKCcnKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG5ld1V0aWwoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBlc2NhcGU6IGVzY2FwZSxcbiAgICAgICAgICAgIHBhcnNlRXh0ZW5zaW9uOiBwYXJzZUV4dGVuc2lvbixcbiAgICAgICAgICAgIG1pbWVUeXBlOiBtaW1lVHlwZSxcbiAgICAgICAgICAgIGRhdGFBc1VybDogZGF0YUFzVXJsLFxuICAgICAgICAgICAgaXNEYXRhVXJsOiBpc0RhdGFVcmwsXG4gICAgICAgICAgICBjYW52YXNUb0Jsb2I6IGNhbnZhc1RvQmxvYixcbiAgICAgICAgICAgIHJlc29sdmVVcmw6IHJlc29sdmVVcmwsXG4gICAgICAgICAgICBnZXRBbmRFbmNvZGU6IGdldEFuZEVuY29kZSxcbiAgICAgICAgICAgIHVpZDogdWlkKCksXG4gICAgICAgICAgICBkZWxheTogZGVsYXksXG4gICAgICAgICAgICBhc0FycmF5OiBhc0FycmF5LFxuICAgICAgICAgICAgZXNjYXBlWGh0bWw6IGVzY2FwZVhodG1sLFxuICAgICAgICAgICAgbWFrZUltYWdlOiBtYWtlSW1hZ2UsXG4gICAgICAgICAgICB3aWR0aDogd2lkdGgsXG4gICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCxcblxuICAgICAgICAgICAgaXNFbGVtZW50LFxuICAgICAgICAgICAgaXNDYW52YXMsXG4gICAgICAgICAgICBpc1RleHRBcmVhLFxuICAgICAgICAgICAgaXNJbnB1dCxcbiAgICAgICAgICAgIGlzU1ZHLFxuICAgICAgICAgICAgaXNTVkdSZWN0LFxuICAgICAgICAgICAgaXNJbWFnZVxuICAgICAgICB9O1xuXG4gICAgICAgIGZ1bmN0aW9uIG1pbWVzKCkge1xuICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAqIE9ubHkgV09GRiBhbmQgRU9UIG1pbWUgdHlwZXMgZm9yIGZvbnRzIGFyZSAncmVhbCdcbiAgICAgICAgICAgICAqIHNlZSBodHRwOi8vd3d3LmlhbmEub3JnL2Fzc2lnbm1lbnRzL21lZGlhLXR5cGVzL21lZGlhLXR5cGVzLnhodG1sXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGNvbnN0IFdPRkYgPSAnYXBwbGljYXRpb24vZm9udC13b2ZmJztcbiAgICAgICAgICAgIGNvbnN0IEpQRUcgPSAnaW1hZ2UvanBlZyc7XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgJ3dvZmYnOiBXT0ZGLFxuICAgICAgICAgICAgICAgICd3b2ZmMic6IFdPRkYsXG4gICAgICAgICAgICAgICAgJ3R0Zic6ICdhcHBsaWNhdGlvbi9mb250LXRydWV0eXBlJyxcbiAgICAgICAgICAgICAgICAnZW90JzogJ2FwcGxpY2F0aW9uL3ZuZC5tcy1mb250b2JqZWN0JyxcbiAgICAgICAgICAgICAgICAncG5nJzogJ2ltYWdlL3BuZycsXG4gICAgICAgICAgICAgICAgJ2pwZyc6IEpQRUcsXG4gICAgICAgICAgICAgICAgJ2pwZWcnOiBKUEVHLFxuICAgICAgICAgICAgICAgICdnaWYnOiAnaW1hZ2UvZ2lmJyxcbiAgICAgICAgICAgICAgICAndGlmZic6ICdpbWFnZS90aWZmJyxcbiAgICAgICAgICAgICAgICAnc3ZnJzogJ2ltYWdlL3N2Zyt4bWwnXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gcGFyc2VFeHRlbnNpb24odXJsKSB7XG4gICAgICAgICAgICBjb25zdCBtYXRjaCA9IC9cXC4oW15cXC5cXC9dKj8pJC9nLmV4ZWModXJsKTtcbiAgICAgICAgICAgIGlmIChtYXRjaCkgcmV0dXJuIG1hdGNoWzFdO1xuICAgICAgICAgICAgZWxzZSByZXR1cm4gJyc7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBtaW1lVHlwZSh1cmwpIHtcbiAgICAgICAgICAgIGNvbnN0IGV4dGVuc2lvbiA9IHBhcnNlRXh0ZW5zaW9uKHVybCkudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIHJldHVybiBtaW1lcygpW2V4dGVuc2lvbl0gfHwgJyc7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBpc0RhdGFVcmwodXJsKSB7XG4gICAgICAgICAgICByZXR1cm4gdXJsLnNlYXJjaCgvXihkYXRhOikvKSAhPT0gLTE7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiB0b0Jsb2IoY2FudmFzKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBiaW5hcnlTdHJpbmcgPSBzZWxmLndpbmRvdy5hdG9iKGNhbnZhcy50b0RhdGFVUkwoKS5zcGxpdCgnLCcpWzFdKTtcbiAgICAgICAgICAgICAgICBjb25zdCBsZW5ndGggPSBiaW5hcnlTdHJpbmcubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGNvbnN0IGJpbmFyeUFycmF5ID0gbmV3IHNlbGYud2luZG93LlVpbnQ4QXJyYXkobGVuZ3RoKTtcblxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspXG4gICAgICAgICAgICAgICAgICAgIGJpbmFyeUFycmF5W2ldID0gYmluYXJ5U3RyaW5nLmNoYXJDb2RlQXQoaSk7XG5cbiAgICAgICAgICAgICAgICByZXNvbHZlKG5ldyBzZWxmLndpbmRvdy5CbG9iKFtiaW5hcnlBcnJheV0sIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2ltYWdlL3BuZydcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGNhbnZhc1RvQmxvYihjYW52YXMpIHtcbiAgICAgICAgICAgIGlmIChjYW52YXMudG9CbG9iKVxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICAgICAgICAgICAgICBjYW52YXMudG9CbG9iKHJlc29sdmUpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gdG9CbG9iKGNhbnZhcyk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiByZXNvbHZlVXJsKHVybCwgYmFzZVVybCkge1xuICAgICAgICAgICAgY29uc3QgZG9jID0gc2VsZi5kb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoKTtcbiAgICAgICAgICAgIGNvbnN0IGJhc2UgPSBkb2MuY3JlYXRlRWxlbWVudCgnYmFzZScpO1xuICAgICAgICAgICAgZG9jLmhlYWQuYXBwZW5kQ2hpbGQoYmFzZSk7XG4gICAgICAgICAgICBjb25zdCBhID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICAgICAgICAgIGRvYy5ib2R5LmFwcGVuZENoaWxkKGEpO1xuICAgICAgICAgICAgYmFzZS5ocmVmID0gYmFzZVVybDtcbiAgICAgICAgICAgIGEuaHJlZiA9IHVybDtcbiAgICAgICAgICAgIHJldHVybiBhLmhyZWY7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiB1aWQoKSB7XG4gICAgICAgICAgICBsZXQgaW5kZXggPSAwO1xuXG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAndScgKyBmb3VyUmFuZG9tQ2hhcnMoKSArIGluZGV4Kys7XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBmb3VyUmFuZG9tQ2hhcnMoKSB7XG4gICAgICAgICAgICAgICAgICAgIC8qIHNlZSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS82MjQ4NzIyLzI1MTkzNzMgKi9cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICgnMDAwMCcgKyAoc2VsZi53aW5kb3cuTWF0aC5yYW5kb20oKSAqIHNlbGYud2luZG93Lk1hdGgucG93KDM2LCA0KSA8PCAwKS50b1N0cmluZygzNikpLnNsaWNlKC00KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gbWFrZUltYWdlKHVyaSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBpbWFnZSA9IG5ldyBzZWxmLndpbmRvdy5JbWFnZSgpO1xuICAgICAgICAgICAgICAgIGltYWdlLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShpbWFnZSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBpbWFnZS5vbmVycm9yID0gcmVqZWN0O1xuICAgICAgICAgICAgICAgIGltYWdlLnNyYyA9IHVyaTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0QW5kRW5jb2RlKHVybCkge1xuICAgICAgICAgIGxldCBkYXRhID0gc2VsZi5jYWNoZS5nZXQodXJsKTtcbiAgICAgICAgICBpZihkYXRhKSB7XG4gICAgICAgICAgICBpZihkYXRhLmNvbnRlbnQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGRhdGEuY29udGVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpPT4ge1xuICAgICAgICAgICAgICAgIGlmKGRhdGEuY29udGVudCkge1xuICAgICAgICAgICAgICAgICAgcmVzb2x2ZShkYXRhLmNvbnRlbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGRhdGEucGVuZGluZ3MucHVzaChyZXNvbHZlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGRhdGEgPSBzZWxmLmNhY2hlLnB1dCh1cmwsIHtwZW5kaW5nczogW119KTtcblxuICAgICAgICAgICAgY29uc3QgVElNRU9VVCA9IDMwMDAwO1xuXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXF1ZXN0ID0gbmV3IHNlbGYud2luZG93LlhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICAgICAgICAgICAgICByZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGRvbmU7XG4gICAgICAgICAgICAgICAgcmVxdWVzdC5vbnRpbWVvdXQgPSB0aW1lb3V0O1xuICAgICAgICAgICAgICAgIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gJ2Jsb2InO1xuICAgICAgICAgICAgICAgIHJlcXVlc3QudGltZW91dCA9IFRJTUVPVVQ7XG4gICAgICAgICAgICAgICAgcmVxdWVzdC5vcGVuKCdHRVQnLCB1cmwsIHRydWUpO1xuICAgICAgICAgICAgICAgIHJlcXVlc3Quc2VuZCgpO1xuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gZG9uZSgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlcXVlc3QucmVhZHlTdGF0ZSAhPT0gNCkgcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXF1ZXN0LnN0YXR1cyAhPT0gMjAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmYWlsKCdjYW5ub3QgZmV0Y2ggcmVzb3VyY2U6ICcgKyB1cmwgKyAnLCBzdGF0dXM6ICcgKyByZXF1ZXN0LnN0YXR1cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBjb25zdCBlbmNvZGVyID0gbmV3IHNlbGYud2luZG93LkZpbGVSZWFkZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgZW5jb2Rlci5vbmxvYWRlbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmNvbnRlbnQgPSBlbmNvZGVyLnJlc3VsdC5zcGxpdCgvLC8pWzFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yKGxldCByZXNvbHZlIG9mIGRhdGEucGVuZGluZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShkYXRhLmNvbnRlbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5wZW5kaW5ncyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShkYXRhLmNvbnRlbnQpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBlbmNvZGVyLnJlYWRBc0RhdGFVUkwocmVxdWVzdC5yZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gdGltZW91dCgpIHtcbiAgICAgICAgICAgICAgICAgICAgZmFpbCgndGltZW91dCBvZiAnICsgVElNRU9VVCArICdtcyBvY2N1cmVkIHdoaWxlIGZldGNoaW5nIHJlc291cmNlOiAnICsgdXJsKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBmYWlsKG1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgnJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZGF0YUFzVXJsKGNvbnRlbnQsIHR5cGUpIHtcbiAgICAgICAgICAgIHJldHVybiBbJ2RhdGE6Jyx0eXBlLCc7YmFzZTY0LCcsY29udGVudF0uam9pbignJyk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBlc2NhcGUoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoLyhbLiorP14ke30oKXxcXFtcXF1cXC9cXFxcXSkvZywgJ1xcXFwkMScpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZGVsYXkobXMpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoYXJnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShhcmcpO1xuICAgICAgICAgICAgICAgICAgICB9LCBtcyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gYXNBcnJheShhcnJheUxpa2UpIHtcbiAgICAgICAgICAgIGNvbnN0IGFycmF5ID0gW107XG4gICAgICAgICAgICBjb25zdCBsZW5ndGggPSBhcnJheUxpa2UubGVuZ3RoO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgYXJyYXkucHVzaChhcnJheUxpa2VbaV0pO1xuICAgICAgICAgICAgcmV0dXJuIGFycmF5O1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZXNjYXBlWGh0bWwoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoLygjfFxcbikvZywgKGMpPT4gYz09PScjJz8gJyUyMyc6ICclMEEnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHdpZHRoKG5vZGUpIHtcbiAgICAgICAgICAgIGNvbnN0IGxlZnRCb3JkZXIgPSBweChub2RlLCAnYm9yZGVyLWxlZnQtd2lkdGgnKTtcbiAgICAgICAgICAgIGNvbnN0IHJpZ2h0Qm9yZGVyID0gcHgobm9kZSwgJ2JvcmRlci1yaWdodC13aWR0aCcpO1xuICAgICAgICAgICAgcmV0dXJuIG5vZGUuc2Nyb2xsV2lkdGggKyBsZWZ0Qm9yZGVyICsgcmlnaHRCb3JkZXI7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBoZWlnaHQobm9kZSkge1xuICAgICAgICAgICAgY29uc3QgdG9wQm9yZGVyID0gcHgobm9kZSwgJ2JvcmRlci10b3Atd2lkdGgnKTtcbiAgICAgICAgICAgIGNvbnN0IGJvdHRvbUJvcmRlciA9IHB4KG5vZGUsICdib3JkZXItYm90dG9tLXdpZHRoJyk7XG4gICAgICAgICAgICByZXR1cm4gbm9kZS5zY3JvbGxIZWlnaHQgKyB0b3BCb3JkZXIgKyBib3R0b21Cb3JkZXI7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBweChub2RlLCBzdHlsZVByb3BlcnR5KSB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHNlbGYud2luZG93LmdldENvbXB1dGVkU3R5bGUobm9kZSkuZ2V0UHJvcGVydHlWYWx1ZShzdHlsZVByb3BlcnR5KTtcbiAgICAgICAgICAgIHJldHVybiBwYXJzZUZsb2F0KHZhbHVlLnJlcGxhY2UoJ3B4JywgJycpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGlzRWxlbWVudChub2RlKSB7XG4gICAgICAgICAgcmV0dXJuIG5vZGUgaW5zdGFuY2VvZiBzZWxmLndpbmRvdy5FbGVtZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gaXNDYW52YXMobm9kZSkge1xuICAgICAgICAgIHJldHVybiBub2RlIGluc3RhbmNlb2Ygc2VsZi53aW5kb3cuSFRNTENhbnZhc0VsZW1lbnQ7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBpc1RleHRBcmVhKG5vZGUpIHtcbiAgICAgICAgICByZXR1cm4gbm9kZSBpbnN0YW5jZW9mIHNlbGYud2luZG93LkhUTUxUZXh0QXJlYUVsZW1lbnQ7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBpc0lucHV0KG5vZGUpIHtcbiAgICAgICAgICByZXR1cm4gbm9kZSBpbnN0YW5jZW9mIHNlbGYud2luZG93LkhUTUxJbnB1dEVsZW1lbnQ7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBpc1NWRyhub2RlKSB7XG4gICAgICAgICAgcmV0dXJuIG5vZGUgaW5zdGFuY2VvZiBzZWxmLndpbmRvdy5TVkdFbGVtZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gaXNTVkdSZWN0KG5vZGUpIHtcbiAgICAgICAgICByZXR1cm4gbm9kZSBpbnN0YW5jZW9mIHNlbGYud2luZG93LlNWR1JlY3RFbGVtZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gaXNJbWFnZShub2RlKSB7XG4gICAgICAgICAgcmV0dXJuIG5vZGUgaW5zdGFuY2VvZiBzZWxmLndpbmRvdy5IVE1MSW1hZ2VFbGVtZW50O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbmV3SW5saW5lcigpIHtcbiAgICAgICAgY29uc3QgVVJMX1JFR0VYID0gL3VybFxcKFsnXCJdPyhbXidcIl0rPylbJ1wiXT9cXCkvZztcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaW5saW5lQWxsOiBpbmxpbmVBbGwsXG4gICAgICAgICAgICBzaG91bGRQcm9jZXNzOiBzaG91bGRQcm9jZXNzLFxuICAgICAgICAgICAgaW1wbDoge1xuICAgICAgICAgICAgICAgIHJlYWRVcmxzOiByZWFkVXJscyxcbiAgICAgICAgICAgICAgICBpbmxpbmU6IGlubGluZVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGZ1bmN0aW9uIHNob3VsZFByb2Nlc3Moc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnNlYXJjaChVUkxfUkVHRVgpICE9PSAtMTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHJlYWRVcmxzKHN0cmluZykge1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgICAgICAgICBsZXQgbWF0Y2g7XG4gICAgICAgICAgICB3aGlsZSAoKG1hdGNoID0gVVJMX1JFR0VYLmV4ZWMoc3RyaW5nKSkgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChtYXRjaFsxXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0LmZpbHRlcihmdW5jdGlvbiAodXJsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICF1dGlsLmlzRGF0YVVybCh1cmwpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBpbmxpbmUoc3RyaW5nLCB1cmwsIGJhc2VVcmwsIGdldCkge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh1cmwpXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHVybCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYmFzZVVybCA/IHV0aWwucmVzb2x2ZVVybCh1cmwsIGJhc2VVcmwpIDogdXJsO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnRoZW4oZ2V0IHx8IHV0aWwuZ2V0QW5kRW5jb2RlKVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB1dGlsLmRhdGFBc1VybChkYXRhLCB1dGlsLm1pbWVUeXBlKHVybCkpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGRhdGFVcmwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKHVybEFzUmVnZXgodXJsKSwgWyckMScsIGRhdGFVcmwsICckMyddLmpvaW4oJycpKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgZnVuY3Rpb24gdXJsQXNSZWdleCh1cmwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHNlbGYud2luZG93LlJlZ0V4cChbJyh1cmxcXFxcKFtcXCdcIl0/KSgnLCB1dGlsLmVzY2FwZSh1cmwpLCAnKShbXFwnXCJdP1xcXFwpKSddLmpvaW4oJycpLCAnZycpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gaW5saW5lQWxsKHN0cmluZywgYmFzZVVybCwgZ2V0KSB7XG4gICAgICAgICAgICBpZiAobm90aGluZ1RvSW5saW5lKCkpIHJldHVybiBQcm9taXNlLnJlc29sdmUoc3RyaW5nKTtcblxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShzdHJpbmcpXG4gICAgICAgICAgICAgICAgLnRoZW4ocmVhZFVybHMpXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHVybHMpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGRvbmUgPSBQcm9taXNlLnJlc29sdmUoc3RyaW5nKTtcbiAgICAgICAgICAgICAgICAgICAgdXJscy5mb3JFYWNoKGZ1bmN0aW9uICh1cmwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvbmUgPSBkb25lLnRoZW4oZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpbmxpbmUoc3RyaW5nLCB1cmwsIGJhc2VVcmwsIGdldCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkb25lO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiBub3RoaW5nVG9JbmxpbmUoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICFzaG91bGRQcm9jZXNzKHN0cmluZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBuZXdGb250RmFjZXMoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXNvbHZlQWxsOiByZXNvbHZlQWxsLFxuICAgICAgICAgICAgaW1wbDoge1xuICAgICAgICAgICAgICAgIHJlYWRBbGw6IHJlYWRBbGxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBmdW5jdGlvbiByZXNvbHZlQWxsKCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlYWRBbGwoc2VsZi5kb2N1bWVudClcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAod2ViRm9udHMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKFxuICAgICAgICAgICAgICAgICAgICAgICAgd2ViRm9udHMubWFwKGZ1bmN0aW9uICh3ZWJGb250KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdlYkZvbnQucmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChjc3NTdHJpbmdzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjc3NTdHJpbmdzLmpvaW4oJ1xcbicpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gcmVhZEFsbCgpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodXRpbC5hc0FycmF5KHNlbGYuZG9jdW1lbnQuc3R5bGVTaGVldHMpKVxuICAgICAgICAgICAgICAgIC50aGVuKGdldENzc1J1bGVzKVxuICAgICAgICAgICAgICAgIC50aGVuKHNlbGVjdFdlYkZvbnRSdWxlcylcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocnVsZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJ1bGVzLm1hcChuZXdXZWJGb250KTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgZnVuY3Rpb24gc2VsZWN0V2ViRm9udFJ1bGVzKGNzc1J1bGVzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNzc1J1bGVzXG4gICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKHJ1bGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBydWxlLnR5cGUgPT09IENTU1J1bGUuRk9OVF9GQUNFX1JVTEU7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKHJ1bGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpbmxpbmVyLnNob3VsZFByb2Nlc3MocnVsZS5zdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCdzcmMnKSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRDc3NSdWxlcyhzdHlsZVNoZWV0cykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNzc1J1bGVzID0gW107XG4gICAgICAgICAgICAgICAgc3R5bGVTaGVldHMuZm9yRWFjaChmdW5jdGlvbiAoc2hlZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHV0aWwuYXNBcnJheShzaGVldC5jc3NSdWxlcyB8fCBbXSkuZm9yRWFjaChjc3NSdWxlcy5wdXNoLmJpbmQoY3NzUnVsZXMpKTtcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0Vycm9yIHdoaWxlIHJlYWRpbmcgQ1NTIHJ1bGVzIGZyb20gJyArIHNoZWV0LmhyZWYsIGUudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY3NzUnVsZXM7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIG5ld1dlYkZvbnQod2ViRm9udFJ1bGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYmFzZVVybCA9ICh3ZWJGb250UnVsZS5wYXJlbnRTdHlsZVNoZWV0IHx8IHt9KS5ocmVmO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlubGluZXIuaW5saW5lQWxsKHdlYkZvbnRSdWxlLmNzc1RleHQsIGJhc2VVcmwpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBzcmM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB3ZWJGb250UnVsZS5zdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCdzcmMnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBuZXdJbWFnZXMoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpbmxpbmVBbGw6IGlubGluZUFsbCxcbiAgICAgICAgICAgIGltcGw6IHtcbiAgICAgICAgICAgICAgICBuZXdJbWFnZTogbmV3SW1hZ2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBmdW5jdGlvbiBuZXdJbWFnZShlbGVtZW50KSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGlubGluZTogaW5saW5lXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBmdW5jdGlvbiBpbmxpbmUoZ2V0KSB7XG4gICAgICAgICAgICAgICAgaWYgKHV0aWwuaXNEYXRhVXJsKGVsZW1lbnQuc3JjKSkgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShlbGVtZW50LnNyYylcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZ2V0IHx8IHV0aWwuZ2V0QW5kRW5jb2RlKVxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHV0aWwuZGF0YUFzVXJsKGRhdGEsIHV0aWwubWltZVR5cGUoZWxlbWVudC5zcmMpKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGRhdGFVcmwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5vbmxvYWQgPSByZXNvbHZlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQub25lcnJvciA9IHJlamVjdDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnNyYyA9IGRhdGFVcmw7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBpbmxpbmVBbGwobm9kZSkge1xuICAgICAgICAgICAgaWYgKCF1dGlsLmlzRWxlbWVudChub2RlKSkgcmV0dXJuIFByb21pc2UucmVzb2x2ZShub2RlKTtcblxuICAgICAgICAgICAgcmV0dXJuIGlubGluZUJhY2tncm91bmQobm9kZSlcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzSW1hZ2Uobm9kZSkpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3SW1hZ2Uobm9kZSkuaW5saW5lKCk7XG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dGlsLmFzQXJyYXkobm9kZS5jaGlsZE5vZGVzKS5tYXAoZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpbmxpbmVBbGwoY2hpbGQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiBpbmxpbmVCYWNrZ3JvdW5kKG5vZGUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBiYWNrZ3JvdW5kID0gbm9kZS5zdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCdiYWNrZ3JvdW5kJyk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIWJhY2tncm91bmQpIHJldHVybiBQcm9taXNlLnJlc29sdmUobm9kZSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gaW5saW5lci5pbmxpbmVBbGwoYmFja2dyb3VuZClcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGlubGluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuc3R5bGUuc2V0UHJvcGVydHkoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2JhY2tncm91bmQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlubGluZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5zdHlsZS5nZXRQcm9wZXJ0eVByaW9yaXR5KCdiYWNrZ3JvdW5kJylcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBub2RlO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvRG9tMkltYWdlLmpzIiwiaW1wb3J0IHskLCBUSFJFRX0gZnJvbSAnLi4vbGlicyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEcmFnIHtcclxuXHJcbiAgY29uc3RydWN0b3Iod25kLCBkb2MsIHZpc3VhbFdvcmxkKSB7XHJcbiAgICB0aGlzLnduZCA9IHduZDtcclxuICAgIHRoaXMuZG9jID0gZG9jO1xyXG4gICAgdGhpcy52aXN1YWwgPSB2aXN1YWxXb3JsZDtcclxuICAgIHRoaXMuY29vcmRzID0gbmV3IFRIUkVFLlZlY3RvcjIoKTtcclxuICAgIHRoaXMuaW50ZXJzZWN0aW9uID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcclxuICAgIHRoaXMucmF5Y2FzdGVyID0gdGhpcy52aXN1YWwucmF5Y2FzdGVyO1xyXG4gICAgdGhpcy5jYW1lcmEgPSB0aGlzLnZpc3VhbC5jYW1lcmE7XHJcbiAgICB0aGlzLnBsYW5lID0gbmV3IFRIUkVFLlBsYW5lKCk7XHJcbiAgICB0aGlzLnRocmVlcyA9IFtdO1xyXG4gICAgdGhpcy5zZWxlY3RlZCA9IG51bGw7XHJcbiAgICB0aGlzLmVuYWJsZWQgPSB0cnVlO1xyXG4gICAgdGhpcy5jb250cm9sc1N0YXRlID0gdGhpcy52aXN1YWwuZ2V0Q29udHJvbHNTdGF0ZSgpO1xyXG5cclxuICAgIHRoaXMuZWxlbWVudCA9IHRoaXMudmlzdWFsLmVsZW1lbnQ7XHJcbiAgICB0aGlzLmJpbmRzID0ge1xyXG4gICAgICBvbk1vdXNlTW92ZTogdGhpcy5vbk1vdXNlTW92ZS5iaW5kKHRoaXMpLFxyXG4gICAgICBvbk1vdXNlRG93bjogdGhpcy5vbk1vdXNlRG93bi5iaW5kKHRoaXMpLFxyXG4gICAgICBvbk1vdXNlVXA6IHRoaXMub25Nb3VzZVVwLmJpbmQodGhpcylcclxuICAgIH07XHJcbiAgICAkKHRoaXMuZWxlbWVudCkub24oJ21vdXNlbW92ZScsIHRoaXMuYmluZHMub25Nb3VzZU1vdmUpO1xyXG4gICAgJCh0aGlzLmVsZW1lbnQpLm9uKCdtb3VzZWRvd24nLCB0aGlzLmJpbmRzLm9uTW91c2VEb3duKTtcclxuICAgICQodGhpcy5kb2MpLm9uKCdtb3VzZXVwJywgdGhpcy5iaW5kcy5vbk1vdXNlVXApO1xyXG4gIH1cclxuXHJcbiAgYWRkVGhyZWUodGhyZWUpIHtcclxuICAgIHRoaXMudGhyZWVzLnB1c2godGhyZWUpO1xyXG4gIH1cclxuXHJcbiAgcmVtb3ZlVGhyZWUodGhyZWUpIHtcclxuICAgIGNvbnN0IGkgPSB0aGlzLnRocmVlcy5pbmRleE9mKHRocmVlKTtcclxuICAgIGlmKH5pKSB7XHJcbiAgICAgIHRoaXMudGhyZWVzLnNwbGljZShpLCAxKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG9uUGlja0NhbGxiYWNrKCkge1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG5cclxuICBvbkRyYWdDYWxsYmFjaygpIHtcclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxuXHJcbiAgb25SZWxlYXNlQ2FsbGJhY2soKSB7XHJcblxyXG4gIH1cclxuXHJcbiAgZGlzcG9zZSgpIHtcclxuICAgICQodGhpcy5lbGVtZW50KS5vZmYoJ21vdXNlbW92ZScsIHRoaXMuYmluZHMub25Nb3VzZU1vdmUpO1xyXG4gICAgJCh0aGlzLmVsZW1lbnQpLm9mZignbW91c2Vkb3duJywgdGhpcy5iaW5kcy5vbk1vdXNlRG93bik7XHJcbiAgICAkKHRoaXMuZG9jKS5vZmYoJ21vdXNldXAnLCB0aGlzLmJpbmRzLm9uTW91c2VVcCk7XHJcbiAgfVxyXG5cclxuICBzZXRDb29yZHNGcm9tRXZlbnQoZSkge1xyXG4gICAgY29uc3QgakVsZW1lbnQgPSAkKHRoaXMuZWxlbWVudCk7XHJcbiAgICBjb25zdCBvZmZzZXQgPSBqRWxlbWVudC5vZmZzZXQoKTtcclxuICAgIHRoaXMuY29vcmRzLnggPSAoKGUucGFnZVgtb2Zmc2V0LmxlZnQpL2pFbGVtZW50LndpZHRoKCkpKjItMTtcclxuICAgIHRoaXMuY29vcmRzLnkgPSAtKChlLnBhZ2VZLW9mZnNldC50b3ApL2pFbGVtZW50LmhlaWdodCgpKSoyKzE7XHJcbiAgICByZXR1cm4gdGhpcy5jb29yZHM7XHJcbiAgfVxyXG5cclxuICBvbk1vdXNlRG93bihlKSB7XHJcbiAgICBpZighdGhpcy5lbmFibGVkKSByZXR1cm47XHJcblxyXG4gICAgaWYodGhpcy5zZWxlY3RlZCkgdGhpcy5vbk1vdXNlVXAoZSk7XHJcblxyXG4gICAgdGhpcy5zZXRDb29yZHNGcm9tRXZlbnQoZSk7XHJcbiAgXHR0aGlzLnJheWNhc3Rlci5zZXRGcm9tQ2FtZXJhKHRoaXMuY29vcmRzLCB0aGlzLmNhbWVyYSk7XHJcblxyXG4gIFx0Y29uc3QgaW50ZXJzZWN0cyA9IHRoaXMucmF5Y2FzdGVyLmludGVyc2VjdE9iamVjdHModGhpcy50aHJlZXMpO1xyXG4gIFx0aWYoaW50ZXJzZWN0cy5sZW5ndGggPiAwKSB7XHJcbiAgICAgIGNvbnN0IHNlbGVjdGVkID0gaW50ZXJzZWN0c1swXS5vYmplY3Q7XHJcbiAgICAgIGlmKCF0aGlzLm9uUGlja0NhbGxiYWNrKGludGVyc2VjdHNbMF0pKSByZXR1cm47XHJcbiAgICAgIGNvbnN0IHYgPSBpbnRlcnNlY3RzWzBdLnBvaW50LmNsb25lKCk7XHJcbiAgICAgIHRoaXMuZGlzdGFuY2UgPSB2LnN1Yih0aGlzLnJheWNhc3Rlci5yYXkub3JpZ2luKS5sZW5ndGgoKTs7XHJcbiAgICAgIHRoaXMuY29udHJvbHNTdGF0ZSA9IHRoaXMudmlzdWFsLmdldENvbnRyb2xzU3RhdGUoKTtcclxuICAgICAgdGhpcy52aXN1YWwuc2V0Q29udHJvbHNTdGF0ZShmYWxzZSk7XHJcbiAgICAgIHRoaXMucGxhbmUuc2V0RnJvbU5vcm1hbEFuZENvcGxhbmFyUG9pbnQodGhpcy52aXN1YWwuY2FtZXJhLmdldFdvcmxkRGlyZWN0aW9uKHRoaXMucGxhbmUubm9ybWFsKSwgaW50ZXJzZWN0c1swXS5wb2ludCk7XHJcbiAgICAgIC8vdGhpcy5wbGFuZS5zZXRGcm9tTm9ybWFsQW5kQ29wbGFuYXJQb2ludCh0aGlzLnBsYW5lLm5vcm1hbC5zZXQoMCwwLDEpLCBuZXcgVEhSRUUuVmVjdG9yMygwLDAsMCkpO1xyXG4gICAgICB0aGlzLnNlbGVjdGVkID0gc2VsZWN0ZWQ7XHJcbiAgXHR9XHJcblxyXG4gIH1cclxuXHJcbiAgb25Nb3VzZU1vdmUoZSkge1xyXG4gICAgaWYoIXRoaXMuZW5hYmxlZCkgcmV0dXJuO1xyXG4gIFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICBcdGlmKHRoaXMuc2VsZWN0ZWQpIHtcclxuICAgICAgdGhpcy5zZXRDb29yZHNGcm9tRXZlbnQoZSk7XHJcbiAgICBcdHRoaXMucmF5Y2FzdGVyLnNldEZyb21DYW1lcmEodGhpcy5jb29yZHMsIHRoaXMuY2FtZXJhKTtcclxuXHQgICAgaWYodGhpcy5yYXljYXN0ZXIucmF5LmludGVyc2VjdFBsYW5lKHRoaXMucGxhbmUsIHRoaXMuaW50ZXJzZWN0aW9uKSkge1xyXG4gICAgICAgIGlmKCF0aGlzLm9uRHJhZ0NhbGxiYWNrKHRoaXMuaW50ZXJzZWN0aW9uKSkgdGhpcy5vbk1vdXNlVXAoZSk7XHJcbiAgICAgIH0vKiovXHJcbiAgICAgIC8vdGhpcy5pbnRlcnNlY3Rpb24uY29weSh0aGlzLnJheWNhc3Rlci5yYXkuZGlyZWN0aW9uKS5ub3JtYWxpemUoKS5tdWx0aXBseVNjYWxhcih0aGlzLmRpc3RhbmNlKS5hZGQodGhpcy5yYXljYXN0ZXIucmF5Lm9yaWdpbik7LyoqL1xyXG4gICAgICAvL2lmKCF0aGlzLm9uRHJhZ0NhbGxiYWNrKHRoaXMuc2VsZWN0ZWQsIHRoaXMuaW50ZXJzZWN0aW9uKSkgdGhpcy5vbk1vdXNlVXAoZSk7XHJcbiAgXHR9XHJcbiAgfVxyXG5cclxuICBvbk1vdXNlVXAoZSkge1xyXG4gICAgaWYodGhpcy5zZWxlY3RlZCkge1xyXG4gICAgICB0aGlzLm9uUmVsZWFzZUNhbGxiYWNrKCk7XHJcbiAgXHRcdHRoaXMuc2VsZWN0ZWQgPSBudWxsO1xyXG4gICAgICB0aGlzLnZpc3VhbC5zZXRDb250cm9sc1N0YXRlKHRoaXMuY29udHJvbHNTdGF0ZSk7XHJcbiAgXHR9XHJcbiAgICBpZighdGhpcy5lbmFibGVkKSByZXR1cm47XHJcbiAgXHRlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgfVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9jb21tb24vY2xhc3Nlcy9EcmFnLmpzIiwiaW1wb3J0IHskfSBmcm9tICcuLi9saWJzJztcclxucmVxdWlyZSgnaW1wb3J0cy1sb2FkZXI/ZGVmaW5lPT5mYWxzZSFqcXVlcnktbW91c2V3aGVlbCcpKCQpO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRXZlbnRzVG9BY3Rpb25zIHtcclxuXHJcbiAgc3RhdGljIG1vZEtleXMgPSB7XHJcbiAgICBDdHJsOiAxLFxyXG4gICAgU2hpZnQ6IDIsXHJcbiAgICBBbHQ6IDRcclxuICB9O1xyXG5cclxuICBzdGF0aWMgbW91c2VCdXR0b25zID0ge1xyXG4gICAgTGVmdDogMCxcclxuICAgIE1pZGRsZTogMSxcclxuICAgIFJpZ2h0OiAyXHJcbiAgfTtcclxuXHJcbiAgc3RhdGljIGdldEV2ZW50RmxhZ3MoZSkge1xyXG4gICAgcmV0dXJuIGUuY3RybEtleTw8MCB8IGUuc2hpZnRLZXk8PDEgfCBlLmFsdEtleTw8MjtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBnZXRQb3NpdGlvbih0b3VjaGVzKSB7XHJcbiAgICBsZXQgeCwgeTtcclxuICAgIGlmKHRvdWNoZXMubGVuZ3RoPT09Mikge1xyXG4gICAgICB4ID0gdG91Y2hlc1sxXS5wYWdlWC10b3VjaGVzWzBdLnBhZ2VYO1xyXG4gICAgICB5ID0gdG91Y2hlc1sxXS5wYWdlWS10b3VjaGVzWzBdLnBhZ2VZO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHggPSB0b3VjaGVzWzBdLnBhZ2VYO1xyXG4gICAgICB5ID0gdG91Y2hlc1swXS5wYWdlWTtcclxuICAgIH1cclxuICAgIHJldHVybiB7XHJcbiAgICAgIHgsXHJcbiAgICAgIHlcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBhY3Rpb25zKSB7XHJcbiAgICB0aGlzLmFjdGlvbnMgPSBhY3Rpb25zIHx8IHt9O1xyXG4gICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcclxuICAgIHRoaXMuZG9jID0gZWxlbWVudFswXS5vd25lckRvY3VtZW50O1xyXG4gICAgdGhpcy53bmQgPSB0aGlzLmRvYy5kZWZhdWx0VmlldztcclxuICAgIHRoaXMuZW5hYmxlZCA9IHRydWU7XHJcblxyXG4gICAgdGhpcy5iaW5kcyA9IHtcclxuICAgICAgY29udGV4dE1lbnU6IHRoaXMuY29udGV4dE1lbnUuYmluZCh0aGlzKSxcclxuXHJcbiAgICAgIG1vdXNlRG93bjogdGhpcy5tb3VzZURvd24uYmluZCh0aGlzKSxcclxuICAgICAgbW91c2VNb3ZlOiB0aGlzLm1vdXNlTW92ZS5iaW5kKHRoaXMpLFxyXG4gICAgICBtb3VzZVVwOiB0aGlzLm1vdXNlVXAuYmluZCh0aGlzKSxcclxuICAgICAgbW91c2VXaGVlbDogdGhpcy5tb3VzZVdoZWVsLmJpbmQodGhpcyksXHJcblxyXG4gICAgICBtb3VzZU1vdmVEb2M6IHRoaXMubW91c2VNb3ZlRG9jLmJpbmQodGhpcyksXHJcbiAgICAgIG1vdXNlVXBEb2M6IHRoaXMubW91c2VVcERvYy5iaW5kKHRoaXMpLFxyXG5cclxuICAgICAgY2xpY2s6IHRoaXMuY2xpY2suYmluZCh0aGlzKSxcclxuICAgICAgZGJsY2xpY2s6IHRoaXMuZGJsY2xpY2suYmluZCh0aGlzKSxcclxuXHJcbiAgICAgIHRvdWNoU3RhcnQ6IHRoaXMudG91Y2hTdGFydC5iaW5kKHRoaXMpLFxyXG4gICAgICB0b3VjaE1vdmU6IHRoaXMudG91Y2hNb3ZlLmJpbmQodGhpcyksXHJcbiAgICAgIHRvdWNoRW5kOiB0aGlzLnRvdWNoRW5kLmJpbmQodGhpcyksXHJcblxyXG4gICAgICBrZXlEb3duOiB0aGlzLmtleURvd24uYmluZCh0aGlzKSxcclxuICAgICAga2V5UHJlc3M6IHRoaXMua2V5UHJlc3MuYmluZCh0aGlzKSxcclxuICAgICAga2V5VXA6IHRoaXMua2V5VXAuYmluZCh0aGlzKVxyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLmVsZW1lbnQub24oJ2NvbnRleHRtZW51JywgdGhpcy5iaW5kcy5jb250ZXh0TWVudSk7XHJcblxyXG4gICAgdGhpcy5lbGVtZW50Lm9uKCdtb3VzZWRvd24nLCB0aGlzLmJpbmRzLm1vdXNlRG93bik7XHJcbiAgICB0aGlzLmVsZW1lbnQub24oJ21vdXNlbW92ZScsIHRoaXMuYmluZHMubW91c2VNb3ZlKTtcclxuICAgIHRoaXMuZWxlbWVudC5vbignbW91c2V1cCcsIHRoaXMuYmluZHMubW91c2VVcCk7XHJcbiAgICB0aGlzLmVsZW1lbnQub24oJ21vdXNld2hlZWwnLCB0aGlzLmJpbmRzLm1vdXNlV2hlZWwpO1xyXG5cclxuICAgICQodGhpcy5kb2MpLm9uKCdtb3VzZW1vdmUnLCB0aGlzLmJpbmRzLm1vdXNlTW92ZURvYyk7XHJcbiAgICAkKHRoaXMuZG9jKS5vbignbW91c2V1cCcsIHRoaXMuYmluZHMubW91c2VVcERvYyk7XHJcblxyXG4gICAgdGhpcy5lbGVtZW50Lm9uKCdjbGljaycsIHRoaXMuYmluZHMuY2xpY2spO1xyXG4gICAgdGhpcy5lbGVtZW50Lm9uKCdkYmxjbGljaycsIHRoaXMuYmluZHMuZGJsY2xpY2spO1xyXG5cclxuICAgIHRoaXMuZWxlbWVudC5vbigndG91Y2hzdGFydCcsIHRoaXMuYmluZHMudG91Y2hTdGFydCk7XHJcbiAgICB0aGlzLmVsZW1lbnQub24oJ3RvdWNobW92ZScsIHRoaXMuYmluZHMudG91Y2hNb3ZlKTtcclxuICAgIHRoaXMuZWxlbWVudC5vbigndG91Y2hlbmQnLCB0aGlzLmJpbmRzLnRvdWNoRW5kKTtcclxuXHJcbiAgICAkKHRoaXMud25kKS5vbigna2V5ZG93bicsIHRoaXMuYmluZHMua2V5RG93bik7XHJcbiAgICAkKHRoaXMud25kKS5vbigna2V5cHJlc3MnLCB0aGlzLmJpbmRzLmtleVByZXNzKTtcclxuICAgICQodGhpcy53bmQpLm9uKCdrZXl1cCcsIHRoaXMuYmluZHMua2V5VXApO1xyXG4gIH1cclxuXHJcbiAgYWRkQWN0aW9uKGFjdGlvbiwgdHlwZSwgY29kZSwgZmxhZ3MpIHtcclxuICAgIHR5cGUgPSB0eXBlLnRvTG93ZXJDYXNlKCk7XHJcbiAgICBpZighdGhpcy5hY3Rpb25zW3R5cGVdKSB7XHJcbiAgICAgIHRoaXMuYWN0aW9uc1t0eXBlXSA9IHt9O1xyXG4gICAgfVxyXG4gICAgaWYoIXRoaXMuYWN0aW9uc1t0eXBlXVtjb2RlXSkge1xyXG4gICAgICB0aGlzLmFjdGlvbnNbdHlwZV1bY29kZV0gPSB7fVxyXG4gICAgfVxyXG4gICAgaWYoIXRoaXMuYWN0aW9uc1t0eXBlXVtjb2RlXVtmbGFnc10pIHtcclxuICAgICAgdGhpcy5hY3Rpb25zW3R5cGVdW2NvZGVdW2ZsYWdzXSA9IFtdO1xyXG4gICAgfVxyXG4gICAgdGhpcy5hY3Rpb25zW3R5cGVdW2NvZGVdW2ZsYWdzXS5wdXNoKGFjdGlvbik7XHJcbiAgfVxyXG5cclxuICBnZXRBY3Rpb25zKHR5cGUsIGNvZGUsIGZsYWdzKSB7XHJcbiAgICByZXR1cm4gKCh0aGlzLmFjdGlvbnNbdHlwZV0gfHwge30pW2NvZGVdIHx8IHt9KVtmbGFnc10gfHwgW107XHJcbiAgfVxyXG5cclxuICBmaXJlQWN0aW9ucyhhY3Rpb25zLCBlLCBkYXRhKSB7XHJcbiAgICBmb3IobGV0IGFjdGlvbiBvZiBhY3Rpb25zKSB7XHJcbiAgICAgIGFjdGlvbihlLCBkYXRhKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNvbnRleHRNZW51KGUpIHtcclxuICAgIGlmKHRoaXMuZW5hYmxlZCkge1xyXG4gICAgICBjb25zdCBmbGFncyA9IEV2ZW50c1RvQWN0aW9ucy5nZXRFdmVudEZsYWdzKGUpO1xyXG4gICAgICB0aGlzLmZpcmVBY3Rpb25zKHRoaXMuZ2V0QWN0aW9ucygnY29udGV4dG1lbnUnLCBlLmJ1dHRvbiwgZmxhZ3MpLCBlKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG1vdXNlRG93bihlKSB7XHJcbiAgICBpZih0aGlzLnBpY2tlZCkge1xyXG4gICAgICB0aGlzLm1vdXNlVXBEb2MoKTtcclxuICAgIH1cclxuICAgIGlmKHRoaXMuZW5hYmxlZCkge1xyXG4gICAgICBjb25zdCBmbGFncyA9IEV2ZW50c1RvQWN0aW9ucy5nZXRFdmVudEZsYWdzKGUpO1xyXG4gICAgICB0aGlzLmZpcmVBY3Rpb25zKHRoaXMuZ2V0QWN0aW9ucygnbW91c2Vkb3duJywgZS5idXR0b24sIGZsYWdzKSwgZSk7XHJcbiAgICAgIHRoaXMucGlja2VkID0ge1xyXG4gICAgICAgIHg6IGUucGFnZVgsXHJcbiAgICAgICAgeTogZS5wYWdlWSxcclxuICAgICAgICBhY3Rpb25zOiB0aGlzLmdldEFjdGlvbnMoJ21vdXNlZHJhZycsIGUuYnV0dG9uLCBmbGFncylcclxuICAgICAgfTtcclxuICAgICAgdGhpcy5maXJlQWN0aW9ucyh0aGlzLnBpY2tlZC5hY3Rpb25zLCBlLCB7XHJcbiAgICAgICAgc3RhdGU6ICdzdGFydCdcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBtb3VzZU1vdmUoZSkge1xyXG4gICAgaWYodGhpcy5lbmFibGVkKSB7XHJcbiAgICAgIGNvbnN0IGZsYWdzID0gRXZlbnRzVG9BY3Rpb25zLmdldEV2ZW50RmxhZ3MoZSk7XHJcbiAgICAgIHRoaXMuZmlyZUFjdGlvbnModGhpcy5nZXRBY3Rpb25zKCdtb3VzZW1vdmUnLCBlLmJ1dHRvbiwgZmxhZ3MpLCBlKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG1vdXNlTW92ZURvYyhlKSB7XHJcbiAgICBpZih0aGlzLmVuYWJsZWQgJiYgdGhpcy5waWNrZWQpIHtcclxuICAgICAgdGhpcy5maXJlQWN0aW9ucyh0aGlzLnBpY2tlZC5hY3Rpb25zLCBlLCB7XHJcbiAgICAgICAgc3RhdGU6ICdtb3ZlJyxcclxuICAgICAgICBkeDogZS5wYWdlWC10aGlzLnBpY2tlZC54LFxyXG4gICAgICAgIGR5OiBlLnBhZ2VZLXRoaXMucGlja2VkLnlcclxuICAgICAgfSk7XHJcbiAgICAgIHRoaXMucGlja2VkID0ge1xyXG4gICAgICAgIHg6IGUucGFnZVgsXHJcbiAgICAgICAgeTogZS5wYWdlWSxcclxuICAgICAgICBhY3Rpb25zOiB0aGlzLnBpY2tlZC5hY3Rpb25zXHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBtb3VzZVVwKGUpIHtcclxuICAgIGlmKHRoaXMuZW5hYmxlZCkge1xyXG4gICAgICBjb25zdCBmbGFncyA9IEV2ZW50c1RvQWN0aW9ucy5nZXRFdmVudEZsYWdzKGUpO1xyXG4gICAgICB0aGlzLmZpcmVBY3Rpb25zKHRoaXMuZ2V0QWN0aW9ucygnbW91c2V1cCcsIGUuYnV0dG9uLCBmbGFncyksIGUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbW91c2VVcERvYyhlKSB7XHJcbiAgICBpZih0aGlzLnBpY2tlZCkge1xyXG4gICAgICB0aGlzLmZpcmVBY3Rpb25zKHRoaXMucGlja2VkLmFjdGlvbnMsIGUsIHtcclxuICAgICAgICBzdGF0ZTogJ2VuZCdcclxuICAgICAgfSk7XHJcbiAgICAgIGRlbGV0ZSB0aGlzLnBpY2tlZDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG1vdXNlV2hlZWwoZSkge1xyXG4gICAgaWYodGhpcy5lbmFibGVkKSB7XHJcbiAgICAgIGNvbnN0IGZsYWdzID0gRXZlbnRzVG9BY3Rpb25zLmdldEV2ZW50RmxhZ3MoZSk7XHJcbiAgICAgIHRoaXMuZmlyZUFjdGlvbnModGhpcy5nZXRBY3Rpb25zKCdtb3VzZXdoZWVsJywgMCwgZmxhZ3MpLCBlKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNsaWNrcyhlLCB0eXBlKSB7XHJcbiAgICBpZih0aGlzLmVuYWJsZWQpIHtcclxuICAgICAgY29uc3QgZmxhZ3MgPSBFdmVudHNUb0FjdGlvbnMuZ2V0RXZlbnRGbGFncyhlKTtcclxuICAgICAgdGhpcy5maXJlQWN0aW9ucyh0aGlzLmdldEFjdGlvbnModHlwZSwgZS5idXR0b24sIGZsYWdzKSwgZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjbGljayhlKSB7XHJcbiAgICB0aGlzLmNsaWNrcyhlLCAnY2xpY2snKTtcclxuICB9XHJcblxyXG4gIGRibGNsaWNrKGUpIHtcclxuICAgIHRoaXMuY2xpY2tzKGUsICdkYmxjbGljaycpO1xyXG4gIH1cclxuXHJcbiAgdG91Y2hQaWNrKGUsIGZsYWdzLCB0b3VjaGVzKSB7XHJcbiAgICBjb25zdCBwb3MgPSBFdmVudHNUb0FjdGlvbnMuZ2V0UG9zaXRpb24odG91Y2hlcyk7XHJcbiAgICB0aGlzLnRvdWNoUGlja2VkID0ge1xyXG4gICAgICAuLi5wb3MsXHJcbiAgICAgIGFjdGlvbnM6IHRoaXMuZ2V0QWN0aW9ucygndG91Y2hkcmFnJywgdG91Y2hlcy5sZW5ndGgsIGZsYWdzKSxcclxuICAgICAgY29kZTogdG91Y2hlcy5sZW5ndGgsXHJcbiAgICAgIGZsYWdzXHJcbiAgICB9O1xyXG4gICAgdGhpcy5maXJlQWN0aW9ucyh0aGlzLnRvdWNoUGlja2VkLmFjdGlvbnMsIGUsIHtcclxuICAgICAgc3RhdGU6ICdzdGFydCcsXHJcbiAgICAgIC4uLnBvc1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICB0b3VjaFN0YXJ0KGUpIHtcclxuICAgIGlmKHRoaXMudG91Y2hQaWNrZWQpIHtcclxuICAgICAgdGhpcy50b3VjaEVuZChlKTtcclxuICAgIH1cclxuICAgIGlmKHRoaXMuZW5hYmxlZCkge1xyXG4gICAgICBjb25zdCBmbGFncyA9IEV2ZW50c1RvQWN0aW9ucy5nZXRFdmVudEZsYWdzKGUpLCB0b3VjaGVzID0gZS50b3VjaGVzIHx8IGUub3JpZ2luYWxFdmVudC50b3VjaGVzO1xyXG4gICAgICB0aGlzLmZpcmVBY3Rpb25zKHRoaXMuZ2V0QWN0aW9ucygndG91Y2hzdGFydCcsIHRvdWNoZXMubGVuZ3RoLCBmbGFncyksIGUpO1xyXG4gICAgICB0aGlzLnRvdWNoUGljayhlLCBmbGFncywgdG91Y2hlcyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICB0b3VjaE1vdmUoZSkge1xyXG4gICAgaWYodGhpcy5lbmFibGVkKSB7XHJcbiAgICAgIGNvbnN0IGZsYWdzID0gRXZlbnRzVG9BY3Rpb25zLmdldEV2ZW50RmxhZ3MoZSksIHRvdWNoZXMgPSBlLnRvdWNoZXMgfHwgZS5vcmlnaW5hbEV2ZW50LnRvdWNoZXM7XHJcbiAgICAgIHRoaXMuZmlyZUFjdGlvbnModGhpcy5nZXRBY3Rpb25zKCd0b3VjaG1vdmUnLCB0b3VjaGVzLmxlbmd0aCwgZmxhZ3MpLCBlKTtcclxuICAgICAgaWYodGhpcy50b3VjaFBpY2tlZCkge1xyXG4gICAgICAgIGlmKHRoaXMudG91Y2hQaWNrZWQuY29kZT09PXRvdWNoZXMubGVuZ3RoICYmIHRoaXMudG91Y2hQaWNrZWQuZmxhZ3M9PT1mbGFncykge1xyXG4gICAgICAgICAgY29uc3QgcG9zID0gRXZlbnRzVG9BY3Rpb25zLmdldFBvc2l0aW9uKHRvdWNoZXMpO1xyXG4gICAgICAgICAgdGhpcy5maXJlQWN0aW9ucyh0aGlzLnRvdWNoUGlja2VkLmFjdGlvbnMsIGUsIHtcclxuICAgICAgICAgICAgc3RhdGU6ICdtb3ZlJyxcclxuICAgICAgICAgICAgZHg6IHBvcy54LXRoaXMudG91Y2hQaWNrZWQueCxcclxuICAgICAgICAgICAgZHk6IHBvcy55LXRoaXMudG91Y2hQaWNrZWQueSxcclxuICAgICAgICAgICAgLi4ucG9zXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIHRoaXMudG91Y2hQaWNrZWQgPSB7XHJcbiAgICAgICAgICAgIC4uLnRoaXMudG91Y2hQaWNrZWQsXHJcbiAgICAgICAgICAgIC4uLnBvc1xyXG4gICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICB0aGlzLnRvdWNoRW5kKGUpO1xyXG4gICAgICAgICAgdGhpcy50b3VjaFBpY2soZSwgZmxhZ3MsIHRvdWNoZXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdG91Y2hFbmQoZSkge1xyXG4gICAgaWYodGhpcy50b3VjaFBpY2tlZCkge1xyXG4gICAgICB0aGlzLmZpcmVBY3Rpb25zKHRoaXMudG91Y2hQaWNrZWQuYWN0aW9ucywgZSwge1xyXG4gICAgICAgIHN0YXRlOiAnZW5kJ1xyXG4gICAgICB9KTtcclxuICAgICAgZGVsZXRlIHRoaXMudG91Y2hQaWNrZWQ7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBrZXkoZSwgdHlwZSkge1xyXG4gICAgaWYodGhpcy5lbmFibGVkKSB7XHJcbiAgICAgIGNvbnN0IGZsYWdzID0gRXZlbnRzVG9BY3Rpb25zLmdldEV2ZW50RmxhZ3MoZSk7XHJcbiAgICAgIHRoaXMuZmlyZUFjdGlvbnModGhpcy5nZXRBY3Rpb25zKHR5cGUsIGUua2V5Q29kZSwgZmxhZ3MpLCBlKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGtleURvd24oZSkge1xyXG4gICAgdGhpcy5rZXkoZSwgJ2tleWRvd24nKTtcclxuICB9XHJcblxyXG4gIGtleVByZXNzKGUpIHtcclxuICAgIHRoaXMua2V5KGUsICdrZXlwcmVzcycpO1xyXG4gIH1cclxuXHJcbiAga2V5VXAoZSkge1xyXG4gICAgdGhpcy5rZXkoZSwgJ2tleXVwJyk7XHJcbiAgfVxyXG5cclxuICBkaXNwb3NlKCkge1xyXG4gICAgdGhpcy5lbGVtZW50Lm9mZignY29udGV4dG1lbnUnLCB0aGlzLmJpbmRzLmNvbnRleHRNZW51KTtcclxuXHJcbiAgICB0aGlzLmVsZW1lbnQub2ZmKCdtb3VzZWRvd24nLCB0aGlzLmJpbmRzLm1vdXNlRG93bik7XHJcbiAgICB0aGlzLmVsZW1lbnQub2ZmKCdtb3VzZW1vdmUnLCB0aGlzLmJpbmRzLm1vdXNlTW92ZSk7XHJcbiAgICB0aGlzLmVsZW1lbnQub2ZmKCdtb3VzZXVwJywgdGhpcy5iaW5kcy5tb3VzZVVwKTtcclxuICAgIHRoaXMuZWxlbWVudC5vZmYoJ21vdXNld2hlZWwnLCB0aGlzLmJpbmRzLm1vdXNlV2hlZWwpO1xyXG5cclxuICAgICQodGhpcy5kb2MpLm9mZignbW91c2Vtb3ZlJywgdGhpcy5iaW5kcy5tb3VzZU1vdmVEb2MpO1xyXG4gICAgJCh0aGlzLmRvYykub2ZmKCdtb3VzZXVwJywgdGhpcy5iaW5kcy5tb3VzZVVwRG9jKTtcclxuXHJcbiAgICB0aGlzLmVsZW1lbnQub2ZmKCdjbGljaycsIHRoaXMuYmluZHMuY2xpY2spO1xyXG4gICAgdGhpcy5lbGVtZW50Lm9mZignZGJsY2xpY2snLCB0aGlzLmJpbmRzLmRibGNsaWNrKTtcclxuXHJcbiAgICB0aGlzLmVsZW1lbnQub2ZmKCd0b3VjaHN0YXJ0JywgdGhpcy5iaW5kcy50b3VjaFN0YXJ0KTtcclxuICAgIHRoaXMuZWxlbWVudC5vZmYoJ3RvdWNobW92ZScsIHRoaXMuYmluZHMudG91Y2hNb3ZlKTtcclxuICAgIHRoaXMuZWxlbWVudC5vZmYoJ3RvdWNoZW5kJywgdGhpcy5iaW5kcy50b3VjaEVuZCk7XHJcblxyXG4gICAgJCh0aGlzLnduZCkub2ZmKCdrZXlkb3duJywgdGhpcy5iaW5kcy5rZXlEb3duKTtcclxuICAgICQodGhpcy53bmQpLm9mZigna2V5cHJlc3MnLCB0aGlzLmJpbmRzLmtleVByZXNzKTtcclxuICAgICQodGhpcy53bmQpLm9mZigna2V5dXAnLCB0aGlzLmJpbmRzLmtleVVwKTtcclxuICB9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL0V2ZW50c1RvQWN0aW9ucy5qcyIsIlxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGdWxsU2NyZWVuIHtcclxuXHJcblx0c3RhdGljIF9oYXNXZWJraXRGdWxsU2NyZWVuXHQ9ICEhZG9jdW1lbnQud2Via2l0Q2FuY2VsRnVsbFNjcmVlbjtcclxuXHRzdGF0aWMgX2hhc01vekZ1bGxTY3JlZW5cdD0gISFkb2N1bWVudC5tb3pDYW5jZWxGdWxsU2NyZWVuO1xyXG5cdHN0YXRpYyBfaGFzTXNGdWxsc2NyZWVuID0gISFkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQubXNSZXF1ZXN0RnVsbHNjcmVlbjtcclxuXHJcblx0c3RhdGljIGF2YWlsYWJsZSgpIHtcclxuXHRcdHJldHVybiBGdWxsU2NyZWVuLl9oYXNXZWJraXRGdWxsU2NyZWVuIHx8IEZ1bGxTY3JlZW4uX2hhc01vekZ1bGxTY3JlZW4gfHwgRnVsbFNjcmVlbi5faGFzTXNGdWxsc2NyZWVuO1xyXG5cdH1cclxuXHJcblx0c3RhdGljIGFjdGl2YXRlZCgpIHtcclxuXHRcdGlmKEZ1bGxTY3JlZW4uX2hhc1dlYmtpdEZ1bGxTY3JlZW4pIHtcclxuXHRcdFx0cmV0dXJuIGRvY3VtZW50LndlYmtpdElzRnVsbFNjcmVlbjtcclxuXHRcdH1cclxuXHRcdGVsc2UgaWYoRnVsbFNjcmVlbi5faGFzTW96RnVsbFNjcmVlbikge1xyXG5cdFx0XHRyZXR1cm4gZG9jdW1lbnQubW96RnVsbFNjcmVlbjtcclxuXHRcdH1cclxuXHRcdGVsc2UgaWYoRnVsbFNjcmVlbi5faGFzTXNGdWxsc2NyZWVuKSB7XHJcblx0XHRcdHJldHVybiAhIWRvY3VtZW50Lm1zRnVsbHNjcmVlbkVsZW1lbnQ7XHJcblx0XHR9XHJcblx0XHRlbHNlIHtcclxuXHRcdFx0Y29uc29sZS5hc3NlcnQoZmFsc2UpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0c3RhdGljIGFkZEV2ZW50TGlzdGVuZXIoZWxlbWVudCwgaGFuZGxlcikge1xyXG5cdFx0aWYgKGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcikge1xyXG5cdFx0ICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignd2Via2l0ZnVsbHNjcmVlbmNoYW5nZScsIGhhbmRsZXIsIGZhbHNlKTtcclxuXHRcdCAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vemZ1bGxzY3JlZW5jaGFuZ2UnLCBoYW5kbGVyLCBmYWxzZSk7XHJcblx0XHQgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdmdWxsc2NyZWVuY2hhbmdlJywgaGFuZGxlciwgZmFsc2UpO1xyXG5cdFx0ICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignTVNGdWxsc2NyZWVuQ2hhbmdlJywgaGFuZGxlciwgZmFsc2UpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0c3RhdGljIHJlbW92ZUV2ZW50TGlzdGVuZXIoZWxlbWVudCwgaGFuZGxlcikge1xyXG5cdFx0aWYgKGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcikge1xyXG5cdFx0ICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignd2Via2l0ZnVsbHNjcmVlbmNoYW5nZScsIGhhbmRsZXIsIGZhbHNlKTtcclxuXHRcdCAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vemZ1bGxzY3JlZW5jaGFuZ2UnLCBoYW5kbGVyLCBmYWxzZSk7XHJcblx0XHQgICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdmdWxsc2NyZWVuY2hhbmdlJywgaGFuZGxlciwgZmFsc2UpO1xyXG5cdFx0ICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignTVNGdWxsc2NyZWVuQ2hhbmdlJywgaGFuZGxlciwgZmFsc2UpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0c3RhdGljIHJlcXVlc3QoZWxlbWVudCkge1xyXG5cdFx0ZWxlbWVudFx0PSBlbGVtZW50XHR8fCBkb2N1bWVudC5ib2R5O1xyXG5cdFx0aWYoRnVsbFNjcmVlbi5faGFzV2Via2l0RnVsbFNjcmVlbikge1xyXG5cdFx0XHRlbGVtZW50LndlYmtpdFJlcXVlc3RGdWxsU2NyZWVuKCk7XHJcblx0XHR9XHJcblx0XHRlbHNlIGlmKEZ1bGxTY3JlZW4uX2hhc01vekZ1bGxTY3JlZW4pIHtcclxuXHRcdFx0ZWxlbWVudC5tb3pSZXF1ZXN0RnVsbFNjcmVlbigpO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSBpZihGdWxsU2NyZWVuLl9oYXNNc0Z1bGxzY3JlZW4pIHtcclxuXHRcdFx0ZWxlbWVudC5tc1JlcXVlc3RGdWxsc2NyZWVuKCk7XHJcblx0XHR9XHJcblx0XHRlbHNlIHtcclxuXHRcdFx0Y29uc29sZS5hc3NlcnQoZmFsc2UpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0c3RhdGljIGNhbmNlbCgpIHtcclxuXHRcdGlmKEZ1bGxTY3JlZW4uX2hhc1dlYmtpdEZ1bGxTY3JlZW4pIHtcclxuXHRcdFx0ZG9jdW1lbnQud2Via2l0Q2FuY2VsRnVsbFNjcmVlbigpO1xyXG5cdFx0fWVsc2UgaWYoRnVsbFNjcmVlbi5faGFzTW96RnVsbFNjcmVlbikge1xyXG5cdFx0XHRkb2N1bWVudC5tb3pDYW5jZWxGdWxsU2NyZWVuKCk7XHJcblx0XHR9XHJcblx0XHRlbHNlIGlmKEZ1bGxTY3JlZW4uX2hhc01zRnVsbHNjcmVlbikge1xyXG5cdFx0XHRkb2N1bWVudC5tc0V4aXRGdWxsc2NyZWVuKCk7XHJcblx0XHR9XHJcblx0XHRlbHNlIHtcclxuXHRcdFx0Y29uc29sZS5hc3NlcnQoZmFsc2UpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvRnVsbFNjcmVlbi5qcyIsImltcG9ydCB7JCwgaHRtbDJjYW52YXN9IGZyb20gJy4uL2xpYnMnO1xyXG5pbXBvcnQgSW1hZ2VCYXNlIGZyb20gJy4vSW1hZ2VCYXNlJztcclxuaW1wb3J0IEJhc2VNYXRoVXRpbHMgZnJvbSAnLi9CYXNlTWF0aFV0aWxzJztcclxuaW1wb3J0IERvbTJJbWFnZSBmcm9tICcuL0RvbTJJbWFnZSc7XHJcbmltcG9ydCBEb2NNb3VzZVNpbXVsYXRvciBmcm9tICcuL0RvY01vdXNlU2ltdWxhdG9yJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEludGVyYWN0aXZlSW1hZ2UgZXh0ZW5kcyBJbWFnZUJhc2Uge1xyXG5cclxuICBjb25zdHJ1Y3Rvcihjb250ZXh0LCB3aWR0aCwgaGVpZ2h0LCBjb2xvciwgc3JjLCBjYWNoZSwgaW5qZWN0b3IpIHtcclxuICAgIHN1cGVyKGNvbnRleHQsIHdpZHRoLCBoZWlnaHQsIGNvbG9yKTtcclxuXHJcbiAgICB0aGlzLmlJZCA9ICdpJytCYXNlTWF0aFV0aWxzLmdldFVuaXF1ZSgpO1xyXG4gICAgY29uc3QgakZyYW1lID0gJCgnPGlmcmFtZSBpZD1cIicrdGhpcy5pSWQrJ1wiIHNyYz1cIicgKyBzcmMgKyAnXCIgc3R5bGU9XCJwb3NpdGlvbjogZml4ZWQ7IGxlZnQ6IC0xMDAwcHg7XCI+PC9pZnJhbWU+Jyk7XHJcbiAgICAkKHRoaXMuZG9jLmJvZHkpLmFwcGVuZChqRnJhbWUpO1xyXG4gICAgdGhpcy5mcmFtZSA9IGpGcmFtZVswXTtcclxuXHJcbiAgICB0aGlzLmJpbmRzID0ge307XHJcblxyXG4gICAgaWYoaW5qZWN0b3IpIHtcclxuICAgICAgaW5qZWN0b3IodGhpcy5mcmFtZS5jb250ZW50V2luZG93KTtcclxuICAgIH1cclxuXHJcbiAgICBpZih0aGlzLmRvYy5pbXBsZW1lbnRhdGlvbi5oYXNGZWF0dXJlKCd3d3cuaHR0cDovL3czLm9yZy9UUi9TVkcxMS9mZWF0dXJlI0V4dGVuc2liaWxpdHknLCAnMS4xJykpIHsgLy8gc3ZnIGZvcmVpZ25PYmplY3QgcmVuZGVyZXJcclxuICAgICAgdGhpcy5pbWFnZSA9IG5ldyBJbWFnZSgpO1xyXG4gICAgICB0aGlzLmJpbmRzLmltYWdlTG9hZCA9ICgpPT4ge1xyXG4gICAgICAgIHRoaXMucmVuZGVySW1hZ2UodGhpcy5pbWFnZSk7XHJcbiAgICAgICAgdGhpcy5maW5pc2hSZW5kZXIoKTtcclxuICAgICAgfTtcclxuICAgICAgJCh0aGlzLmltYWdlKS5vbignbG9hZCcsIHRoaXMuYmluZHMuaW1hZ2VMb2FkKTtcclxuICAgICAgdGhpcy5zdmdSZW5kZXIgPSBuZXcgRG9tMkltYWdlKHRoaXMuZnJhbWUuY29udGVudFdpbmRvdywgdGhpcy5mcmFtZS5jb250ZW50RG9jdW1lbnQsIGNhY2hlKTtcclxuICAgIH0gLy8gb3RoZXJ3aXNlIC0gaHRtbDJjYW52YXNcclxuXHJcbiAgICB0aGlzLmJpbmRzLmZyYW1lTG9hZCA9ICgpPT4ge1xyXG4gICAgICBpZih+dGhpcy5mcmFtZS5jb250ZW50RG9jdW1lbnQudGl0bGUuaW5kZXhPZignNDA0JykpIHtcclxuICAgICAgICB0aGlzLnN0YXJ0UmVuZGVyID0gKCk9PiB7XHJcbiAgICAgICAgICB0aGlzLnJlbmRlck5vdEZvdW5kUGFnZSgpO1xyXG4gICAgICAgICAgdGhpcy5maW5pc2hSZW5kZXIoKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuZmluaXNoTG9hZCgpO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIHNldFRpbWVvdXQoKCk9PiB7XHJcbiAgICAgICAgICBpZih0aGlzLmZyYW1lKSB7XHJcbiAgICAgICAgICAgIHRoaXMud2lkdGggPSAkKHRoaXMuZnJhbWUuY29udGVudERvY3VtZW50LmJvZHkpLndpZHRoKCk7XHJcbiAgICAgICAgICAgIHRoaXMuaGVpZ2h0ID0gJCh0aGlzLmZyYW1lLmNvbnRlbnREb2N1bWVudC5ib2R5KS5oZWlnaHQoKTtcclxuICAgICAgICAgICAgdGhpcy5yZXNIID0gdGhpcy5oZWlnaHQvdGhpcy53aWR0aCp0aGlzLnJlc1c7XHJcbiAgICAgICAgICAgIGpGcmFtZS5jc3MoJ3dpZHRoJywgdGhpcy53aWR0aCsncHgnKS5jc3MoJ2hlaWdodCcsIHRoaXMuaGVpZ2h0KydweCcpO1xyXG4gICAgICAgICAgICBqRnJhbWUub2Zmc2V0KHtsZWZ0OiAtdGhpcy53aWR0aC0xMDAsIHRvcDogMH0pO1xyXG4gICAgICAgICAgICBpZih0aGlzLnN2Z1JlbmRlcikge1xyXG4gICAgICAgICAgICAgIHRoaXMuc2ltdWxhdG9yID0gbmV3IERvY01vdXNlU2ltdWxhdG9yKGpGcmFtZSwgdGhpcy5mcmFtZS5jb250ZW50RG9jdW1lbnQuYm9keSwgdGhpcy5lbGVtZW50KTtcclxuICAgICAgICAgICAgICB0aGlzLnNpbXVsYXRvci5hZGREb2NDaGFuZ2VDbGIodGhpcy5maW5pc2hMb2FkLmJpbmQodGhpcykpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuc3RhcnRSZW5kZXIgPSAoKT0+IHtcclxuICAgICAgICAgICAgICB0aGlzLnJlbmRlcigpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB0aGlzLmZpbmlzaExvYWQoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9LCA1MDApO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gICAgJCh0aGlzLmZyYW1lLmNvbnRlbnRXaW5kb3cpLm9uKCdsb2FkJywgdGhpcy5iaW5kcy5mcmFtZUxvYWQpO1xyXG4gIH1cclxuXHJcbiAgZ2V0U2ltdWxhdGVkRG9jKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuZnJhbWUuY29udGVudERvY3VtZW50O1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyKCkge1xyXG4gICAgaWYodGhpcy5zdmdSZW5kZXIpIHtcclxuICAgICAgdGhpcy5zdmdSZW5kZXIudG9TdmcodGhpcy5zaW11bGF0b3IuZWxlbWVudCwge2hlaWdodDogdGhpcy5oZWlnaHQrJ3B4Jywgd2lkdGg6IHRoaXMud2lkdGgrJ3B4J30pXHJcbiAgICAgICAgLnRoZW4oKGRhdGFVcmwpPT4ge1xyXG4gICAgICAgICAgdGhpcy5pbWFnZS5zcmMgPSBkYXRhVXJsO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmNhdGNoKChlcnJvcik9PiB7XHJcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdEb20ySW1hZ2U6ICcsIGVycm9yKTtcclxuICAgICAgICAgIHRoaXMucmVuZGVyQmxhbmtQYWdlKCk7XHJcbiAgICAgICAgICB0aGlzLmZpbmlzaFJlbmRlcigpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIGh0bWwyY2FudmFzKHRoaXMuZnJhbWUuY29udGVudERvY3VtZW50LmJvZHksIHt0aW1lb3V0OiAzMDAwMH0pLlxyXG4gICAgICAgIHRoZW4oKGNhbnZhcyk9PiB7XHJcbiAgICAgICAgICB0aGlzLnJlbmRlckltYWdlKGNhbnZhcyk7XHJcbiAgICAgICAgICB0aGlzLmZpbmlzaFJlbmRlcigpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZGlzcG9zZSgpIHtcclxuICAgICQodGhpcy5pbWFnZSkub2ZmKCdsb2FkJywgdGhpcy5iaW5kcy5pbWFnZUxvYWQpO1xyXG4gICAgJCh0aGlzLmZyYW1lLmNvbnRlbnRXaW5kb3cpLm9mZignbG9hZCcsIHRoaXMuYmluZHMuZnJhbWVMb2FkKTtcclxuICAgICQodGhpcy5kb2MuYm9keSkuZmluZCgnIycrdGhpcy5pSWQpLnJlbW92ZSgpO1xyXG4gICAgaWYodGhpcy5pbWFnZSkge1xyXG4gICAgICB0aGlzLmltYWdlLnNyYyA9ICcnO1xyXG4gICAgICBkZWxldGUgdGhpcy5pbWFnZTtcclxuICAgIH1cclxuICAgIHRoaXMuZnJhbWUuc3JjID0gJyc7XHJcbiAgICBkZWxldGUgdGhpcy5mcmFtZTtcclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICB9XHJcblxyXG4gIHNpbXVsYXRlKGUsIGRvYywgeCwgeSkge1xyXG4gICAgaWYodGhpcy5zaW11bGF0b3IpIHtcclxuICAgICAgdGhpcy5zaW11bGF0b3Iuc2ltdWxhdGUoZSwgZG9jLCB4LCB5KTtcclxuICAgIH1cclxuICB9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL0ludGVyYWN0aXZlSW1hZ2UuanMiLCJpbXBvcnQgeyQsIHRyfSBmcm9tICcuLi9saWJzJztcclxuaW1wb3J0IEdyYXBoVXRpbHMgZnJvbSAnLi9HcmFwaFV0aWxzJztcclxuaW1wb3J0IE1hdGhVdGlscyBmcm9tICcuL01hdGhVdGlscyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMb2FkaW5nQW5pbWF0aW9uIHtcclxuXHJcbiAgZHkodCx5KSB7XHJcbiAgICBjb25zdCB3PXlbMF0sIGE9eVsxXTtcclxuICAgIHJldHVybiBbXHJcbiAgICAgIC10aGlzLmcqTWF0aC5jb3MoYSksXHJcbiAgICAgIHdcclxuICAgIF07XHJcbiAgfVxyXG5cclxuICBpbnRlZ3JhdGUoVCkge1xyXG4gICAgbGV0IHQ9MCwgZHQ9dGhpcy5wLmR0LCBvcyA9IHRoaXMub3M7XHJcbiAgICB3aGlsZSh0PFQpIHtcclxuICAgICAgaWYodCtkdD5UKSB7XHJcbiAgICAgICAgZHQ9VC10O1xyXG4gICAgICB9XHJcbiAgICAgIG9zPU1hdGhVdGlscy5yazQodGhpcy5keS5iaW5kKHtnOiB0aGlzLnAuZ30pLCAwLCBkdCwgb3MpO1xyXG4gICAgICB0Kz1kdDtcclxuICAgIH1cclxuICAgIHJldHVybiBvcztcclxuICB9XHJcblxyXG4gIGNhbGNUaW1lVG8odGFyZ2V0KSB7XHJcbiAgICBsZXQgdD0wLCBkdD10aGlzLnAuZHQsIG9zID0gdGhpcy5vcztcclxuICAgIHdoaWxlKE1hdGguYWJzKG9zWzFdLXRhcmdldCk+MWUtNCkge1xyXG4gICAgICBjb25zdCBub3M9TWF0aFV0aWxzLnJrNCh0aGlzLmR5LmJpbmQoe2c6IHRoaXMucC5nfSksIDAsIGR0LCBvcyk7XHJcbiAgICAgIGlmKG5vc1swXTwwICYmIG5vc1sxXTx0YXJnZXQgfHwgbm9zWzBdPjAgJiYgbm9zWzFdPnRhcmdldCkge1xyXG4gICAgICAgIGR0Lz0yO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIG9zID0gbm9zO1xyXG4gICAgICAgIHQrPWR0O1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdDtcclxuICB9XHJcblxyXG4gIHVwZGF0ZShUKSB7XHJcbiAgICB0aGlzLm9zID0gdGhpcy5pbnRlZ3JhdGUoVCk7XHJcblxyXG4gICAgdGhpcy50Kz1UXHJcbiAgICBpZih0aGlzLnQ+PXRoaXMucC51cGRhdGVJbnRlcnZhbCkge1xyXG4gICAgICB0aGlzLnQgPSAwO1xyXG4gICAgICBjb25zdCByID0gMC4wNCpNYXRoLm1pbih0aGlzLmMud2lkdGgsIHRoaXMuYy5oZWlnaHQpLFxyXG4gICAgICAgICAgICBhID0gdGhpcy5vc1sxXSxcclxuICAgICAgICAgICAgeDAgPSAwLjUqdGhpcy5jLndpZHRoLFxyXG4gICAgICAgICAgICB5MCA9IDAuNSp0aGlzLmMuaGVpZ2h0LFxyXG4gICAgICAgICAgICBjdHggPSB0aGlzLmN0eDtcclxuXHJcbiAgICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgdGhpcy5jLndpZHRoLCB0aGlzLmMuaGVpZ2h0KTtcclxuICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICBjdHguZmlsbFN0eWxlID0gR3JhcGhVdGlscy5jb2xvcjJSZ2JhKHRoaXMucC5jb2xvciwxKTtcclxuICAgICAgY3R4LnJlY3QoMCwgMCwgdGhpcy5jLndpZHRoLCB0aGlzLmMuaGVpZ2h0KTtcclxuICAgICAgY3R4LmZpbGwoKTtcclxuXHJcbiAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgY3R4LnNoYWRvd0JsdXIgPSA1MDtcclxuICAgICAgY3R4LmZpbGxTdHlsZSA9IEdyYXBoVXRpbHMuY29sb3IyUmdiYShHcmFwaFV0aWxzLmludmVyc2VDb2xvcih0aGlzLnAuY29sb3IsMC45KSxNYXRoLmFicyh0aGlzLm9zWzBdLzYuMzYpKTtcclxuICAgICAgY3R4LnNoYWRvd0NvbG9yID0gR3JhcGhVdGlscy5jb2xvcjJSZ2JhKEdyYXBoVXRpbHMuaW52ZXJzZUNvbG9yKHRoaXMucC5jb2xvciwxKSwwLjkpO1xyXG4gICAgICBjdHguc2hhZG93T2Zmc2V0WCA9IDA7XHJcbiAgICAgIGN0eC5zaGFkb3dPZmZzZXRZID0gMDtcclxuICAgICAgY3R4LmZvbnQ9J2JvbGQgJytNYXRoLnJvdW5kKDAuMjUqcikrJ3B4IEFyaWFsJztcclxuICAgICAgY3R4LnRleHRBbGlnbiA9ICdjZW50ZXInO1xyXG4gICAgICBjdHgudGV4dEJhc2VsaW5lID0gJ21pZGRsZSc7XHJcbiAgICAgIGN0eC5maWxsVGV4dCh0cignTG9hZGluZy4uLicpLHgwLHkwKTtcclxuXHJcbiAgICAgIGNvbnN0IHBzID0gMTAsIGRhPTIqTWF0aC5QSS9wczsvLzIuNSpfci9yXHJcbiAgICAgIGN0eC5zaGFkb3dDb2xvciA9IEdyYXBoVXRpbHMuY29sb3IyUmdiYShHcmFwaFV0aWxzLmludmVyc2VDb2xvcih0aGlzLnAuY29sb3IsMSksMC43KTtcclxuICAgICAgZm9yKGxldCBpPTAsIF9hPWEsIF9yPTAuMipyOyBpPHBzOyArK2ksIF9yKj0wLjksIF9hKz1kYSkge1xyXG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICBjdHguZmlsbFN0eWxlID0gR3JhcGhVdGlscy5jb2xvcjJSZ2JhKEdyYXBoVXRpbHMuaW52ZXJzZUNvbG9yKHRoaXMucC5jb2xvciwocHMtaSkvcHMpLDAuNyoocHMtaSkvcHMpO1xyXG4gICAgICAgIGNvbnN0IGN4PXgwK3IqTWF0aC5jb3MoX2EpLCBjeT15MC1yKk1hdGguc2luKF9hKSwgbng9eDArcipNYXRoLmNvcyhfYStkYSksIG55PXkwLXIqTWF0aC5zaW4oX2ErZGEpO1xyXG4gICAgICAgIGN0eC5zaGFkb3dPZmZzZXRYID0gMC4yKihueC1jeCk7XHJcbiAgICAgICAgY3R4LnNoYWRvd09mZnNldFkgPSAwLjIqKG55LWN5KTtcclxuICAgICAgICBjdHguYXJjKGN4LCBjeSwgX3IsIDAsIE1hdGguUEkqMiwgMSk7XHJcbiAgICAgICAgY3R4LmZpbGwoKTtcclxuICAgICAgfVxyXG4gICAgICBpZih0aGlzLm9uQ2hhbmdlKSB7XHJcbiAgICAgICAgdGhpcy5vbkNoYW5nZSh0aGlzLmMsIHRoaXMucC5jb2xvcik7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldEltYWdlKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuYztcclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICB0aGlzLmMud2lkdGggPSAwO1xyXG4gICAgdGhpcy5jLmhlaWdodCA9IDA7XHJcbiAgICBkZWxldGUgdGhpcy5jdHg7XHJcbiAgICBkZWxldGUgdGhpcy5jO1xyXG4gIH1cclxuXHJcbiAgY3JlYXRlU3ByaXRlKG4pIHtcclxuICAgIGNvbnN0IGMgPSAkKCc8Y2FudmFzIHdpZHRoPVwiJyt0aGlzLmMud2lkdGgqbisnXCIgaGVpZ2h0PVwiJyt0aGlzLmMuaGVpZ2h0KydcIj48L2NhbnZhcz4nKVswXSwgY3R4ID0gYy5nZXRDb250ZXh0KCcyZCcpLFxyXG4gICAgdCA9IHRoaXMuY2FsY1RpbWVUbyh0aGlzLm9zWzFdK01hdGguc2lnbih0aGlzLm9zWzBdKSoyKk1hdGguUEkpLCBkdD10LyhuKzEpO1xyXG4gICAgY29uc3Qge3VwZGF0ZUludGVydmFsfSA9IHRoaXMucDtcclxuICAgIHRoaXMucC51cGRhdGVJbnRlcnZhbCA9IDA7XHJcbiAgICBmb3IobGV0IGk9MDsgaTxuOyArK2kpIHtcclxuICAgICAgdGhpcy51cGRhdGUoZHQpO1xyXG4gICAgICBjdHguZHJhd0ltYWdlKHRoaXMuYywgaSp0aGlzLmMud2lkdGgsIDApO1xyXG4gICAgfVxyXG4gICAgdGhpcy5wLnVwZGF0ZUludGVydmFsID0gdXBkYXRlSW50ZXJ2YWw7XHJcbiAgICByZXR1cm4gYztcclxuICB9XHJcblxyXG4gIGNvbnN0cnVjdG9yKHdpZHRoLCBoZWlnaHQsIGNvbG9yKSB7XHJcbiAgICBjb25zdCBqQyA9ICQoJzxjYW52YXMgd2lkdGg9XCInK3dpZHRoKydcIiBoZWlnaHQ9XCInK2hlaWdodCsnXCI+PC9jYW52YXM+Jyk7XHJcbiAgICB0aGlzLmMgPSBqQ1swXTtcclxuICAgIHRoaXMucCA9IHtcclxuICAgICAgZzogOS44LFxyXG4gICAgICBkdDogMS82MCxcclxuICAgICAgY29sb3IsXHJcbiAgICAgIHVwZGF0ZUludGVydmFsOiAwLjI1XHJcbiAgICB9O1xyXG4gICAgdGhpcy5jdHggPSB0aGlzLmMuZ2V0Q29udGV4dCgnMmQnKTtcclxuICAgIHRoaXMub3MgPSBbLTIsIE1hdGguUEkvMl07XHJcbiAgICB0aGlzLnQgPSB0aGlzLnAudXBkYXRlSW50ZXJ2YWw7XHJcbiAgfVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9jb21tb24vY2xhc3Nlcy9Mb2FkaW5nQW5pbWF0aW9uLmpzIiwiaW1wb3J0IHskfSBmcm9tICcuLi9saWJzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExvYWRpbmdDb250cm9sbGVyIHtcclxuXHJcbiAgY29uc3RydWN0b3Iodmlldywgc2hvd1Byb2dyZXNzPXRydWUsIGxvYWRpbmdNc2c9dW5kZWZpbmVkKSB7XHJcbiAgICB0aGlzLnZpZXcgPSB2aWV3O1xyXG4gICAgdGhpcy5wcm9ncmVzcyA9IDA7XHJcbiAgICB0aGlzLnNob3dQcm9ncmVzcyA9IHNob3dQcm9ncmVzcztcclxuICAgIHRoaXMuZ2V0TG9hZGluZ01zZyA9IGxvYWRpbmdNc2cgfHwgTG9hZGluZ0NvbnRyb2xsZXIuZGVmYXVsdExvYWRpbmdNc2c7XHJcbiAgICB0aGlzLnVwZGF0ZVZpZXcoKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBkZWZhdWx0TG9hZGluZ01zZyhwcm9ncmVzcykge1xyXG4gICAgcmV0dXJuIFsnUGxlYXNlIHdhaXQuLi4gdGhlIEFwcGxpY2F0aW9uIGlzIExvYWRpbmc6ICcsIHByb2dyZXNzLCAnJSddLmpvaW4oJycpO1xyXG4gIH1cclxuXHJcbiAgZGlzcG9zZSgpIHtcclxuICAgIHRoaXMuc2hvd1Byb2dyZXNzID0gZmFsc2U7XHJcbiAgICB0aGlzLnVwZGF0ZVZpZXcoKTtcclxuICAgIGRlbGV0ZSB0aGlzLnZpZXc7XHJcbiAgfVxyXG5cclxuICBzZXRQcm9ncmVzcyh2KSB7XHJcbiAgICB0aGlzLnByb2dyZXNzID0gdjtcclxuICAgIHRoaXMudXBkYXRlVmlldygpO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlVmlldygpIHtcclxuICAgIGlmKHRoaXMudmlldykge1xyXG5cclxuICAgICAgdGhpcy52aWV3LnNldFN0YXRlKCd3aWRMb2FkaW5nUHJvZ3Jlc3MnLCB7XHJcbiAgICAgICAgZW5hYmxlOiB0cnVlLFxyXG4gICAgICAgIHZpc2libGU6IHRoaXMuc2hvd1Byb2dyZXNzLFxyXG4gICAgICAgIGFjdGl2ZTogZmFsc2VcclxuICAgICAgfSk7XHJcblxyXG4gICAgICB0aGlzLnZpZXcuc2V0U3RhdGUoJ3R4dExvYWRpbmdQcm9ncmVzcycsIHtcclxuICAgICAgICB2YWx1ZTogdGhpcy5nZXRMb2FkaW5nTXNnKHRoaXMucHJvZ3Jlc3MpLFxyXG4gICAgICAgIHZpc2libGU6IHRydWVcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBmb3IobGV0IG5hbWUgb2YgdGhpcy52aWV3LmdldExpbmtzKCkpIHtcclxuICAgICAgICB0aGlzLnZpZXcuc2V0U3RhdGUobmFtZSwge1xyXG4gICAgICAgICAgZW5hYmxlOiBmYWxzZSxcclxuICAgICAgICAgIHZpc2libGU6IHRydWUsXHJcbiAgICAgICAgICBhY3RpdmU6IGZhbHNlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMudmlldy5zZXRTdGF0ZSgnaW5wUGFnZXMnLCB7XHJcbiAgICAgICAgdmlzaWJsZTogdHJ1ZSxcclxuICAgICAgICB2YWx1ZTogJydcclxuICAgICAgfSk7XHJcblxyXG4gICAgICB0aGlzLnZpZXcuc2V0U3RhdGUoJ2lucFBhZ2UnLCB7XHJcbiAgICAgICAgdmlzaWJsZTogdHJ1ZSxcclxuICAgICAgICBlbmFibGU6IGZhbHNlLFxyXG4gICAgICAgIHZhbHVlOiAnJ1xyXG4gICAgICB9KTtcclxuXHJcbiAgICB9XHJcbiAgfVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9jb21tb24vY2xhc3Nlcy9Mb2FkaW5nQ29udHJvbGxlci5qcyIsImltcG9ydCB7JH0gZnJvbSAnLi4vbGlicyc7XHJcbmltcG9ydCBFdmVudENvbnZlcnRlciBmcm9tICcuL0V2ZW50Q29udmVydGVyJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1vdXNlRXZlbnRDb252ZXJ0ZXIgZXh0ZW5kcyBFdmVudENvbnZlcnRlciB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHduZCwgZG9jLCBlbGVtZW50KSB7XHJcbiAgICBzdXBlcih3bmQsIGRvYyk7XHJcblxyXG4gICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcclxuICAgIHRoaXMuYmluZHMgPSB7XHJcbiAgICAgIGNvbnZlcnQ6IHRoaXMuY29udmVydC5iaW5kKHRoaXMpXHJcbiAgICB9O1xyXG4gICAgJCh0aGlzLmVsZW1lbnQpLm9uKCdtb3VzZW1vdmUgbW91c2Vkb3duIG1vdXNlb3ZlciBtb3VzZW91dCBjbGljaycsIHRoaXMuYmluZHMuY29udmVydCk7XHJcbiAgICAkKHRoaXMuZG9jKS5vbignbW91c2V1cCcsIHRoaXMuYmluZHMuY29udmVydCk7XHJcbiAgfVxyXG5cclxuICBkaXNwb3NlKCkge1xyXG4gICAgJCh0aGlzLmVsZW1lbnQpLm9mZignbW91c2Vtb3ZlIG1vdXNlZG93biBtb3VzZW92ZXIgbW91c2VvdXQgY2xpY2snLCB0aGlzLmJpbmRzLmNvbnZlcnQpO1xyXG4gICAgJCh0aGlzLmRvYykub2ZmKCdtb3VzZXVwJywgdGhpcy5iaW5kcy5jb252ZXJ0KTtcclxuICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvTW91c2VFdmVudENvbnZlcnRlci5qcyIsImltcG9ydCB7VEhSRUV9IGZyb20gJy4uL2xpYnMnO1xyXG5pbXBvcnQgTWF0aFV0aWxzIGZyb20gJy4vTWF0aFV0aWxzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE9iamVjdDNEV2F0Y2hlciB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHZpc3VhbCwgYm91bmRCb3hDbGIsIHRlc3RTY2FsZT10aGlzLnRlc3RTY2FsZSkge1xyXG4gICAgdGhpcy52aXN1YWwgPSB2aXN1YWw7XHJcbiAgICB0aGlzLmJvdW5kQm94Q2xiID0gYm91bmRCb3hDbGI7XHJcbiAgICB0aGlzLnRlc3RTY2FsZSA9IHRlc3RTY2FsZTtcclxuICAgIHRoaXMuY2FtZXJhID0gdmlzdWFsLmNhbWVyYTtcclxuICAgIHRoaXMuZWxlbWVudCA9IHRoaXMudmlzdWFsLmVsZW1lbnQ7XHJcbiAgICB0aGlzLmVsZW1lbnRTaXplID0ge3c6IDEsIGg6IDF9O1xyXG4gICAgdGhpcy5kZXZpY2VQaXhlbFJhdGlvID0gdGhpcy52aXN1YWwud25kLmRldmljZVBpeGVsUmF0aW8gfHwgMTtcclxuICAgIHRoaXMub3JiaXQgPSB2aXN1YWwuZ2V0T3JiaXQoKTtcclxuICAgIHRoaXMuc2NhbGUgPSAxO1xyXG5cclxuICAgIHRoaXMuZXBzID0gMWUtNDtcclxuICAgIHRoaXMudiA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7XHJcbiAgICB0aGlzLmR2ID0gbmV3IFRIUkVFLlZlY3RvcjIoKTtcclxuXHJcbiAgICB0aGlzLmVuYWJsZWQgPSBmYWxzZTtcclxuXHJcbiAgICB2aXN1YWwuYWRkUmVuZGVyQ2FsbGJhY2sodGhpcy51cGRhdGUuYmluZCh0aGlzKSk7XHJcblxyXG4gICAgdGhpcy5vcyA9IHtcclxuICAgICAgdng6IDAsXHJcbiAgICAgIHZ5OiAwLFxyXG4gICAgICB4OiAwLFxyXG4gICAgICB5OiAwXHJcbiAgICB9O1xyXG4gICAgdGhpcy5vcmJpdC51cGRhdGUoKTtcclxuICAgIHRoaXMuY2FtZXJhLnVwZGF0ZU1hdHJpeFdvcmxkKCk7XHJcbiAgICBsZXQgYm94ID0gdGhpcy5jb21wdXRlQ2xpZW50Qm91bmRCb3goKSwgaz0xLjExO1xyXG4gICAgdGhpcy5tb3ZlUGFuKHt4OiAtaypib3gubWlkLngsIHk6IC1rKmJveC5taWQueX0pO1xyXG4gIH1cclxuXHJcbiAgbW92ZVBhbihkdikge1xyXG4gICAgdGhpcy5vcmJpdC5wYW4oZHYueCp0aGlzLnZpc3VhbC53aWR0aCgpLCAtZHYueSp0aGlzLnZpc3VhbC5oZWlnaHQoKSk7XHJcbiAgfVxyXG5cclxuICB2VG9DYW1lcmEodikge1xyXG4gICAgdi5wcm9qZWN0KHRoaXMuY2FtZXJhKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHg6IDAuNSp2LngsXHJcbiAgICAgIHk6IDAuNSp2LnlcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBjb21wdXRlQ2xpZW50Qm91bmRCb3goKSB7XHJcbiAgICBjb25zdCBib3ggPSB0aGlzLmJvdW5kQm94Q2xiKCksXHJcbiAgICAgIHhzID0gW2JveC5taW4ueCwgYm94Lm1heC54XSxcclxuICAgICAgeXMgPSBbMCwgMF0sXHJcbiAgICAgIHpzID0gW2JveC5taW4ueiwgYm94Lm1heC56XTtcclxuXHJcbiAgICBjb25zdCBwcyA9IFtdLCByZXMgPSB7bWF4OiB7fSwgbWluOiB7fX07XHJcbiAgICBmb3IobGV0IHggb2YgeHMpIHtcclxuICAgICAgZm9yKGxldCB5IG9mIHlzKSB7XHJcbiAgICAgICAgZm9yKGxldCB6IG9mIHpzKSB7XHJcbiAgICAgICAgICBwcy5wdXNoKHRoaXMudlRvQ2FtZXJhKHRoaXMudi5zZXQoeCx5LHopKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHMuc29ydCgocDEsIHAyKT0+IHAxLngtcDIueCk7XHJcbiAgICByZXMubWluLnggPSBwc1swXS54O1xyXG4gICAgcmVzLm1heC54ID0gcHNbcHMubGVuZ3RoLTFdLng7XHJcbiAgICBwcy5zb3J0KChwMSwgcDIpPT4gcDEueS1wMi55KTtcclxuICAgIHJlcy5taW4ueSA9IHBzWzBdLnk7XHJcbiAgICByZXMubWF4LnkgPSBwc1twcy5sZW5ndGgtMV0ueTtcclxuXHJcbiAgICByZXMud2lkdGggPSByZXMubWF4LngtcmVzLm1pbi54O1xyXG4gICAgcmVzLmhlaWdodCA9IHJlcy5tYXgueS1yZXMubWluLnk7XHJcblxyXG4gICAgcmVzLm1pZCA9IHtcclxuICAgICAgeDogMC41KihyZXMubWF4LngrcmVzLm1pbi54KSxcclxuICAgICAgeTogMC41KihyZXMubWF4LnkrcmVzLm1pbi55KVxyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gcmVzO1xyXG4gIH1cclxuXHJcbiAgc2V0T2JqZWN0KGJvdW5kQm94Q2xiKSB7XHJcbiAgICB0aGlzLmJvdW5kQm94Q2xiID0gYm91bmRCb3hDbGI7XHJcbiAgfVxyXG5cclxuICB0ZXN0U2NhbGUoKSB7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcblxyXG4gIGNvbXB1dGVDb3JyKEssIG1pbiwgbWF4KSB7XHJcbiAgICBsZXQgY29yciA9IDA7XHJcbiAgICBpZihLPDEpIHtcclxuICAgICAgaWYobWluPi0wLjUpIHtcclxuICAgICAgICBjb3JyID0gLTAuNS1taW47XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZihtYXg8MC41KSB7XHJcbiAgICAgICAgY29yciA9IDAuNS1tYXg7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBpZihtaW48LTAuNSkge1xyXG4gICAgICAgIGNvcnIgPSAtMC41LW1pbjtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIGlmKG1heD4wLjUpIHtcclxuICAgICAgICBjb3JyID0gMC41LW1heDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNvcnI7XHJcbiAgfVxyXG5cclxuICBnZXRTY2FsZSgpIHtcclxuICAgIGNvbnN0IGJveCA9IHRoaXMuY29tcHV0ZUNsaWVudEJvdW5kQm94KCksXHJcbiAgICAgIEt4ID0gdGhpcy5lbGVtZW50U2l6ZS53L2JveC53aWR0aCxcclxuICAgICAgS3kgPSB0aGlzLmVsZW1lbnRTaXplLmgvYm94LmhlaWdodDtcclxuICAgIHJldHVybiAxL01hdGgubWluKEt4LCBLeSk7XHJcbiAgfVxyXG5cclxuICBjZW50ZXJWaWV3KFQpIHtcclxuICAgIGxldCBib3ggPSB0aGlzLmNvbXB1dGVDbGllbnRCb3VuZEJveCgpLFxyXG4gICAgICBLeCA9IHRoaXMuZWxlbWVudFNpemUudy9ib3gud2lkdGgsXHJcbiAgICAgIEt5ID0gdGhpcy5lbGVtZW50U2l6ZS5oL2JveC5oZWlnaHQsXHJcbiAgICAgIEsgPSBNYXRoLm1pbihLeCwgS3kpO1xyXG5cclxuICAgIGlmKHRoaXMudGVzdFNjYWxlKCkgJiYgTWF0aC5hYnMoMS9LLXRoaXMuc2NhbGUpPnRoaXMuZXBzKSB7XHJcbiAgICAgIGNvbnN0IHNjYWxlID0gMS9LKzAuMioodGhpcy5zY2FsZS0xL0spO1xyXG4gICAgICB0aGlzLm9yYml0LnNldFNjYWxlKHRoaXMub3JiaXQuZ2V0U2NhbGUoKS8oSypzY2FsZSkpO1xyXG4gICAgICB0aGlzLm9yYml0LnVwZGF0ZSgpO1xyXG4gICAgICB0aGlzLmNhbWVyYS51cGRhdGVNYXRyaXhXb3JsZCgpO1xyXG4gICAgICBib3ggPSB0aGlzLmNvbXB1dGVDbGllbnRCb3VuZEJveCgpO1xyXG4gICAgICAgIEt4ID0gdGhpcy5lbGVtZW50U2l6ZS53L2JveC53aWR0aDtcclxuICAgICAgICBLeSA9IHRoaXMuZWxlbWVudFNpemUuaC9ib3guaGVpZ2h0O1xyXG4gICAgICAgIEsgPSBNYXRoLm1pbihLeCwgS3kpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGR2ID0gdGhpcy5kdjtcclxuICAgIGlmKEs+MS10aGlzLmVwcykge1xyXG4gICAgICBkdi5zZXQoLWJveC5taWQueCwgLWJveC5taWQueSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgZHYuc2V0KHRoaXMuY29tcHV0ZUNvcnIoS3gsIGJveC5taW4ueCwgYm94Lm1heC54KSxcclxuICAgICAgICAgICAgIHRoaXMuY29tcHV0ZUNvcnIoS3ksIGJveC5taW4ueSwgYm94Lm1heC55KSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYoTWF0aC5zcXJ0KHRoaXMub3MudngqdGhpcy5vcy52eCt0aGlzLm9zLnZ5KnRoaXMub3MudnkpPjAuMDAzIHx8IGR2Lmxlbmd0aCgpPjAuMDAzKSB7XHJcbiAgICAgIGxldCBkdCA9IDEvNjAsIHQ9MCwgb3MgPSB7XHJcbiAgICAgICAgLi4udGhpcy5vcyxcclxuICAgICAgICB4OiAwLFxyXG4gICAgICAgIHk6IDBcclxuICAgICAgfTtcclxuICAgICAgb3MudGYgPSAodngsIHZ5LCB4LCB5KT0+ICh7XHJcbiAgICAgICAgeDogNzUqKGR2LngteCksXHJcbiAgICAgICAgeTogNzUqKGR2LnkteSlcclxuICAgICAgfSk7XHJcbiAgICAgIHdoaWxlKHQ8VCkge1xyXG4gICAgICAgIGlmKHQrZHQ+VCkge1xyXG4gICAgICAgICAgZHQgPSBULXQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG9zID0gdGhpcy5pbnRlZ3JhdGUob3MsIGR0KTtcclxuICAgICAgICB0ICs9IGR0O1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMubW92ZVBhbihvcyk7XHJcbiAgICAgIHRoaXMub3MgPSBvcztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGludGVncmF0ZShvcywgZHQpIHtcclxuICAgIGNvbnN0IFt2eCwgdnksIHgsIHldID0gTWF0aFV0aWxzLnJrNChcclxuICAgICAgdGhpcy5keS5iaW5kKG9zKSxcclxuICAgICAgMCxcclxuICAgICAgZHQsXHJcbiAgICAgIFtvcy52eCwgb3MudnksIG9zLngsIG9zLnldXHJcbiAgICApO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgLi4ub3MsXHJcbiAgICAgIHZ4LCB2eSwgeCwgeVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGR5KHQsWSkge1xyXG4gICAgY29uc3QgW3Z4LCB2eSwgeCwgeV0gPSBZLCB2ZCA9IDE1LCB0ZiA9IHRoaXMudGYodngsIHZ5LCB4LCB5KTtcclxuICAgIHJldHVybiBbXHJcbiAgICAgIHRmLngtdmQqdngsXHJcbiAgICAgIHRmLnktdmQqdnksXHJcbiAgICAgIHZ4LFxyXG4gICAgICB2eVxyXG4gICAgXTtcclxuICB9XHJcblxyXG4gIHVwZGF0ZShkdCkge1xyXG4gICAgaWYodGhpcy5lbmFibGVkICYmIHRoaXMuYm91bmRCb3hDbGIpIHtcclxuICAgICAgdGhpcy5jZW50ZXJWaWV3KGR0KTtcclxuICAgIH1cclxuICB9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL09iamVjdDNEV2F0Y2hlci5qcyIsImltcG9ydCB7VEhSRUV9IGZyb20gJy4uL2xpYnMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgT3JiaXQgZXh0ZW5kcyBUSFJFRS5FdmVudERpc3BhdGNoZXIge1xyXG5cclxuICBjb25zdHJ1Y3RvcihvYmplY3QsIGRvbUVsZW1lbnQpIHtcclxuICAgIHN1cGVyKCk7XHJcbiAgXHR0aGlzLm9iamVjdCA9IG9iamVjdDtcclxuICBcdHRoaXMuZG9tRWxlbWVudCA9IGRvbUVsZW1lbnQgfHwgZG9jdW1lbnQuYm9keTtcclxuXHJcbiAgXHQvLyBTZXQgdG8gZmFsc2UgdG8gZGlzYWJsZSB0aGlzIGNvbnRyb2xcclxuICBcdHRoaXMuZW5hYmxlZCA9IHRydWU7XHJcblxyXG4gIFx0Ly8gXCJ0YXJnZXRcIiBzZXRzIHRoZSBsb2NhdGlvbiBvZiBmb2N1cywgd2hlcmUgdGhlIG9iamVjdCBvcmJpdHMgYXJvdW5kXHJcbiAgXHR0aGlzLnRhcmdldCA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7XHJcblxyXG4gIFx0Ly8gSG93IGZhciB5b3UgY2FuIGRvbGx5IGluIGFuZCBvdXQoUGVyc3BlY3RpdmVDYW1lcmEgb25seSlcclxuICBcdHRoaXMubWluRGlzdGFuY2UgPSAwO1xyXG4gIFx0dGhpcy5tYXhEaXN0YW5jZSA9IEluZmluaXR5O1xyXG5cclxuICBcdC8vIEhvdyBmYXIgeW91IGNhbiB6b29tIGluIGFuZCBvdXQoT3J0aG9ncmFwaGljQ2FtZXJhIG9ubHkpXHJcbiAgXHR0aGlzLm1pblpvb20gPSAwO1xyXG4gIFx0dGhpcy5tYXhab29tID0gSW5maW5pdHk7XHJcblxyXG4gIFx0Ly8gSG93IGZhciB5b3UgY2FuIG9yYml0IHZlcnRpY2FsbHksIHVwcGVyIGFuZCBsb3dlciBsaW1pdHMuXHJcbiAgXHQvLyBSYW5nZSBpcyAwIHRvIE1hdGguUEkgcmFkaWFucy5cclxuICBcdHRoaXMubWluUG9sYXJBbmdsZSA9IDA7IC8vIHJhZGlhbnNcclxuICBcdHRoaXMubWF4UG9sYXJBbmdsZSA9IE1hdGguUEk7IC8vIHJhZGlhbnNcclxuXHJcbiAgXHQvLyBIb3cgZmFyIHlvdSBjYW4gb3JiaXQgaG9yaXpvbnRhbGx5LCB1cHBlciBhbmQgbG93ZXIgbGltaXRzLlxyXG4gIFx0Ly8gSWYgc2V0LCBtdXN0IGJlIGEgc3ViLWludGVydmFsIG9mIHRoZSBpbnRlcnZhbCBbLU1hdGguUEksIE1hdGguUEkgXS5cclxuICBcdHRoaXMubWluQXppbXV0aEFuZ2xlID0gLUluZmluaXR5OyAvLyByYWRpYW5zXHJcbiAgXHR0aGlzLm1heEF6aW11dGhBbmdsZSA9IEluZmluaXR5OyAvLyByYWRpYW5zXHJcblxyXG4gIFx0Ly8gU2V0IHRvIHRydWUgdG8gZW5hYmxlIGRhbXBpbmcgKGluZXJ0aWEpXHJcbiAgXHQvLyBJZiBkYW1waW5nIGlzIGVuYWJsZWQsIHlvdSBtdXN0IGNhbGwgY29udHJvbHMudXBkYXRlKCkgaW4geW91ciBhbmltYXRpb24gbG9vcFxyXG4gIFx0dGhpcy5lbmFibGVEYW1waW5nID0gZmFsc2U7XHJcbiAgXHR0aGlzLmRhbXBpbmdGYWN0b3IgPSAwLjI1O1xyXG5cclxuICBcdC8vIFRoaXMgb3B0aW9uIGFjdHVhbGx5IGVuYWJsZXMgZG9sbHlpbmcgaW4gYW5kIG91dDsgbGVmdCBhcyBcInpvb21cIiBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuXHJcbiAgXHQvLyBTZXQgdG8gZmFsc2UgdG8gZGlzYWJsZSB6b29taW5nXHJcbiAgXHR0aGlzLmVuYWJsZVpvb20gPSB0cnVlO1xyXG4gIFx0dGhpcy56b29tU3BlZWQgPSAxLjA7XHJcblxyXG4gIFx0Ly8gU2V0IHRvIGZhbHNlIHRvIGRpc2FibGUgcm90YXRpbmdcclxuICBcdHRoaXMuZW5hYmxlUm90YXRlID0gdHJ1ZTtcclxuICBcdHRoaXMucm90YXRlU3BlZWQgPSAxLjA7XHJcblxyXG4gIFx0Ly8gU2V0IHRvIGZhbHNlIHRvIGRpc2FibGUgcGFubmluZ1xyXG4gIFx0dGhpcy5lbmFibGVQYW4gPSB0cnVlO1xyXG5cclxuICBcdC8vIFNldCB0byB0cnVlIHRvIGF1dG9tYXRpY2FsbHkgcm90YXRlIGFyb3VuZCB0aGUgdGFyZ2V0XHJcbiAgXHQvLyBJZiBhdXRvLXJvdGF0ZSBpcyBlbmFibGVkLCB5b3UgbXVzdCBjYWxsIGNvbnRyb2xzLnVwZGF0ZSgpIGluIHlvdXIgYW5pbWF0aW9uIGxvb3BcclxuICBcdHRoaXMuYXV0b1JvdGF0ZSA9IGZhbHNlO1xyXG4gIFx0dGhpcy5hdXRvUm90YXRlU3BlZWQgPSAyLjA7IC8vIDMwIHNlY29uZHMgcGVyIHJvdW5kIHdoZW4gZnBzIGlzIDYwXHJcblxyXG4gIFx0Ly8gZm9yIHJlc2V0XHJcbiAgXHR0aGlzLnRhcmdldDAgPSB0aGlzLnRhcmdldC5jbG9uZSgpO1xyXG4gIFx0dGhpcy5wb3NpdGlvbjAgPSB0aGlzLm9iamVjdC5wb3NpdGlvbi5jbG9uZSgpO1xyXG4gIFx0dGhpcy56b29tMCA9IHRoaXMub2JqZWN0Lnpvb207XHJcblxyXG4gIFx0Ly9cclxuICBcdC8vIHB1YmxpYyBtZXRob2RzXHJcbiAgXHQvL1xyXG4gIFx0dGhpcy5nZXRQb2xhckFuZ2xlID0gZnVuY3Rpb24gKCkge1xyXG4gIFx0XHRyZXR1cm4gc3BoZXJpY2FsLnBoaTtcclxuICBcdH07XHJcblxyXG4gIFx0dGhpcy5nZXRBemltdXRoYWxBbmdsZSA9IGZ1bmN0aW9uICgpIHtcclxuICBcdFx0cmV0dXJuIHNwaGVyaWNhbC50aGV0YTtcclxuICBcdH07XHJcblxyXG4gIFx0dGhpcy5yZXNldCA9IGZ1bmN0aW9uICgpIHtcclxuICBcdFx0c2NvcGUudGFyZ2V0LmNvcHkoc2NvcGUudGFyZ2V0MCk7XHJcbiAgXHRcdHNjb3BlLm9iamVjdC5wb3NpdGlvbi5jb3B5KHNjb3BlLnBvc2l0aW9uMCk7XHJcbiAgXHRcdHNjb3BlLm9iamVjdC56b29tID0gc2NvcGUuem9vbTA7XHJcblxyXG4gIFx0XHRzY29wZS5vYmplY3QudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xyXG4gIFx0XHRzY29wZS5kaXNwYXRjaEV2ZW50KGNoYW5nZUV2ZW50KTtcclxuXHJcbiAgXHRcdHNjb3BlLnVwZGF0ZSgpO1xyXG4gIFx0fTtcclxuXHJcbiAgICB0aGlzLnpvb21PdXQgPSBmdW5jdGlvbihzcGVlZD10aGlzLnpvb21TcGVlZCkge1xyXG4gICAgICBjb25zdCBfc3BlZWQgPSB0aGlzLnpvb21TcGVlZDtcclxuICAgICAgdGhpcy56b29tU3BlZWQgPSBzcGVlZDtcclxuICAgICAgZG9sbHlJbihnZXRab29tU2NhbGUoKSk7XHJcbiAgICAgIHRoaXMuem9vbVNwZWVkID0gX3NwZWVkO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLnpvb21JbiA9IGZ1bmN0aW9uKHNwZWVkPXRoaXMuem9vbVNwZWVkKSB7XHJcbiAgICAgIGNvbnN0IF9zcGVlZCA9IHRoaXMuem9vbVNwZWVkO1xyXG4gICAgICB0aGlzLnpvb21TcGVlZCA9IHNwZWVkO1xyXG4gICAgICBkb2xseU91dChnZXRab29tU2NhbGUoKSk7XHJcbiAgICAgIHRoaXMuem9vbVNwZWVkID0gX3NwZWVkO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLmdldFNjYWxlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHJldHVybiBzY2FsZTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnNldFNjYWxlID0gZnVuY3Rpb24obmV3U2NhbGUpIHtcclxuICAgICAgc2NhbGUgPSBuZXdTY2FsZTtcclxuICAgIH1cclxuXHJcbiAgXHQvLyB0aGlzIG1ldGhvZCBpcyBleHBvc2VkLCBidXQgcGVyaGFwcyBpdCB3b3VsZCBiZSBiZXR0ZXIgaWYgd2UgY2FuIG1ha2UgaXQgcHJpdmF0ZS4uLlxyXG4gIFx0dGhpcy51cGRhdGUgPSBmdW5jdGlvbigpIHtcclxuICBcdFx0dmFyIG9mZnNldCA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7XHJcbiAgXHRcdC8vIHNvIGNhbWVyYS51cCBpcyB0aGUgb3JiaXQgYXhpc1xyXG4gIFx0XHR2YXIgcXVhdCA9IG5ldyBUSFJFRS5RdWF0ZXJuaW9uKCkuc2V0RnJvbVVuaXRWZWN0b3JzKG9iamVjdC51cCwgbmV3IFRIUkVFLlZlY3RvcjMoMCwgMSwgMCkpO1xyXG4gIFx0XHR2YXIgcXVhdEludmVyc2UgPSBxdWF0LmNsb25lKCkuaW52ZXJzZSgpO1xyXG4gIFx0XHR2YXIgbGFzdFBvc2l0aW9uID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcclxuICBcdFx0dmFyIGxhc3RRdWF0ZXJuaW9uID0gbmV3IFRIUkVFLlF1YXRlcm5pb24oKTtcclxuXHJcbiAgXHRcdHJldHVybiBmdW5jdGlvbiB1cGRhdGUgKCkge1xyXG4gIFx0XHRcdHZhciBwb3NpdGlvbiA9IHNjb3BlLm9iamVjdC5wb3NpdGlvbjtcclxuICBcdFx0XHRvZmZzZXQuY29weShwb3NpdGlvbikuc3ViKHNjb3BlLnRhcmdldCk7XHJcbiAgXHRcdFx0Ly8gcm90YXRlIG9mZnNldCB0byBcInktYXhpcy1pcy11cFwiIHNwYWNlXHJcbiAgXHRcdFx0b2Zmc2V0LmFwcGx5UXVhdGVybmlvbihxdWF0KTtcclxuICBcdFx0XHQvLyBhbmdsZSBmcm9tIHotYXhpcyBhcm91bmQgeS1heGlzXHJcbiAgXHRcdFx0c3BoZXJpY2FsLnNldEZyb21WZWN0b3IzKG9mZnNldCk7XHJcbiAgXHRcdFx0aWYoc2NvcGUuYXV0b1JvdGF0ZSkge1xyXG4gIFx0XHRcdFx0cm90YXRlTGVmdChnZXRBdXRvUm90YXRpb25BbmdsZSgpKTtcclxuICBcdFx0XHR9XHJcbiAgXHRcdFx0c3BoZXJpY2FsLnRoZXRhICs9IHNwaGVyaWNhbERlbHRhLnRoZXRhO1xyXG4gIFx0XHRcdHNwaGVyaWNhbC5waGkgKz0gc3BoZXJpY2FsRGVsdGEucGhpO1xyXG4gIFx0XHRcdC8vIHJlc3RyaWN0IHRoZXRhIHRvIGJlIGJldHdlZW4gZGVzaXJlZCBsaW1pdHNcclxuICBcdFx0XHRzcGhlcmljYWwudGhldGEgPSBNYXRoLm1heChzY29wZS5taW5BemltdXRoQW5nbGUsIE1hdGgubWluKHNjb3BlLm1heEF6aW11dGhBbmdsZSwgc3BoZXJpY2FsLnRoZXRhKSk7XHJcbiAgXHRcdFx0Ly8gcmVzdHJpY3QgcGhpIHRvIGJlIGJldHdlZW4gZGVzaXJlZCBsaW1pdHNcclxuICBcdFx0XHRzcGhlcmljYWwucGhpID0gTWF0aC5tYXgoc2NvcGUubWluUG9sYXJBbmdsZSwgTWF0aC5taW4oc2NvcGUubWF4UG9sYXJBbmdsZSwgc3BoZXJpY2FsLnBoaSkpO1xyXG4gIFx0XHRcdHNwaGVyaWNhbC5tYWtlU2FmZSgpO1xyXG4gIFx0XHRcdHNwaGVyaWNhbC5yYWRpdXMgKj0gc2NhbGU7XHJcbiAgXHRcdFx0Ly8gcmVzdHJpY3QgcmFkaXVzIHRvIGJlIGJldHdlZW4gZGVzaXJlZCBsaW1pdHNcclxuICBcdFx0XHRzcGhlcmljYWwucmFkaXVzID0gTWF0aC5tYXgoc2NvcGUubWluRGlzdGFuY2UsIE1hdGgubWluKHNjb3BlLm1heERpc3RhbmNlLCBzcGhlcmljYWwucmFkaXVzKSk7XHJcbiAgXHRcdFx0Ly8gbW92ZSB0YXJnZXQgdG8gcGFubmVkIGxvY2F0aW9uXHJcbiAgXHRcdFx0c2NvcGUudGFyZ2V0LmFkZChwYW5PZmZzZXQpO1xyXG4gIFx0XHRcdG9mZnNldC5zZXRGcm9tU3BoZXJpY2FsKHNwaGVyaWNhbCk7XHJcbiAgXHRcdFx0Ly8gcm90YXRlIG9mZnNldCBiYWNrIHRvIFwiY2FtZXJhLXVwLXZlY3Rvci1pcy11cFwiIHNwYWNlXHJcbiAgXHRcdFx0b2Zmc2V0LmFwcGx5UXVhdGVybmlvbihxdWF0SW52ZXJzZSk7XHJcbiAgXHRcdFx0cG9zaXRpb24uY29weShzY29wZS50YXJnZXQpLmFkZChvZmZzZXQpO1xyXG4gIFx0XHRcdHNjb3BlLm9iamVjdC5sb29rQXQoc2NvcGUudGFyZ2V0KTtcclxuXHJcbiAgXHRcdFx0aWYoc2NvcGUuZW5hYmxlRGFtcGluZz09PXRydWUpIHtcclxuICBcdFx0XHRcdHNwaGVyaWNhbERlbHRhLnRoZXRhICo9KDEtc2NvcGUuZGFtcGluZ0ZhY3Rvcik7XHJcbiAgXHRcdFx0XHRzcGhlcmljYWxEZWx0YS5waGkgKj0oMS1zY29wZS5kYW1waW5nRmFjdG9yKTtcclxuICBcdFx0XHR9IGVsc2Uge1xyXG4gIFx0XHRcdFx0c3BoZXJpY2FsRGVsdGEuc2V0KDAsIDAsIDApO1xyXG4gIFx0XHRcdH1cclxuXHJcbiAgXHRcdFx0c2NhbGUgPSAxO1xyXG4gIFx0XHRcdHBhbk9mZnNldC5zZXQoMCwgMCwgMCk7XHJcblxyXG4gIFx0XHRcdC8vIHVwZGF0ZSBjb25kaXRpb24gaXM6XHJcbiAgXHRcdFx0Ly8gbWluKGNhbWVyYSBkaXNwbGFjZW1lbnQsIGNhbWVyYSByb3RhdGlvbiBpbiByYWRpYW5zKV4yID4gRVBTXHJcbiAgXHRcdFx0Ly8gdXNpbmcgc21hbGwtYW5nbGUgYXBwcm94aW1hdGlvbiBjb3MoeC8yKSA9IDEteF4yIC8gOFxyXG5cclxuICBcdFx0XHRpZih6b29tQ2hhbmdlZCB8fFxyXG4gIFx0XHRcdFx0bGFzdFBvc2l0aW9uLmRpc3RhbmNlVG9TcXVhcmVkKHNjb3BlLm9iamVjdC5wb3NpdGlvbikgPiBFUFMgfHxcclxuICBcdFx0XHRcdDggKigxLWxhc3RRdWF0ZXJuaW9uLmRvdChzY29wZS5vYmplY3QucXVhdGVybmlvbikpID4gRVBTKSB7XHJcblxyXG4gIFx0XHRcdFx0c2NvcGUuZGlzcGF0Y2hFdmVudChjaGFuZ2VFdmVudCk7XHJcblxyXG4gIFx0XHRcdFx0bGFzdFBvc2l0aW9uLmNvcHkoc2NvcGUub2JqZWN0LnBvc2l0aW9uKTtcclxuICBcdFx0XHRcdGxhc3RRdWF0ZXJuaW9uLmNvcHkoc2NvcGUub2JqZWN0LnF1YXRlcm5pb24pO1xyXG4gIFx0XHRcdFx0em9vbUNoYW5nZWQgPSBmYWxzZTtcclxuXHJcbiAgXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcclxuICBcdFx0XHR9XHJcbiAgXHRcdFx0cmV0dXJuIGZhbHNlO1xyXG4gIFx0XHR9O1xyXG4gIFx0fSgpO1xyXG5cclxuICAgIHRoaXMuZGlzcG9zZSA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgIH07XHJcblxyXG4gIFx0Ly9cclxuICBcdC8vIGludGVybmFsc1xyXG4gIFx0Ly9cclxuICBcdHZhciBzY29wZSA9IHRoaXM7XHJcbiAgXHR2YXIgY2hhbmdlRXZlbnQgPSB7IHR5cGU6ICdjaGFuZ2UnIH07XHJcbiAgXHR2YXIgRVBTID0gMWUtNjtcclxuICBcdC8vIGN1cnJlbnQgcG9zaXRpb24gaW4gc3BoZXJpY2FsIGNvb3JkaW5hdGVzXHJcbiAgXHR2YXIgc3BoZXJpY2FsID0gbmV3IFRIUkVFLlNwaGVyaWNhbCgpO1xyXG4gIFx0dmFyIHNwaGVyaWNhbERlbHRhID0gbmV3IFRIUkVFLlNwaGVyaWNhbCgpO1xyXG5cclxuICBcdHZhciBzY2FsZSA9IDE7XHJcbiAgXHR2YXIgcGFuT2Zmc2V0ID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcclxuICBcdHZhciB6b29tQ2hhbmdlZCA9IGZhbHNlO1xyXG5cclxuICBcdGZ1bmN0aW9uIGdldEF1dG9Sb3RhdGlvbkFuZ2xlKCkge1xyXG4gIFx0XHRyZXR1cm4gMiAqIE1hdGguUEkgLyA2MCAvIDYwICogc2NvcGUuYXV0b1JvdGF0ZVNwZWVkO1xyXG4gIFx0fVxyXG5cclxuICBcdGZ1bmN0aW9uIGdldFpvb21TY2FsZSgpIHtcclxuICBcdFx0cmV0dXJuIE1hdGgucG93KDAuOTUsIHNjb3BlLnpvb21TcGVlZCk7XHJcbiAgXHR9XHJcblxyXG4gIFx0ZnVuY3Rpb24gcm90YXRlTGVmdChhbmdsZSkge1xyXG4gIFx0XHRzcGhlcmljYWxEZWx0YS50aGV0YSAtPSBhbmdsZTtcclxuICBcdH1cclxuXHJcbiAgXHRmdW5jdGlvbiByb3RhdGVVcChhbmdsZSkge1xyXG4gIFx0XHRzcGhlcmljYWxEZWx0YS5waGkgLT0gYW5nbGU7XHJcbiAgXHR9XHJcblxyXG4gIFx0dmFyIHBhbkxlZnQgPSBmdW5jdGlvbigpIHtcclxuICBcdFx0dmFyIHYgPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xyXG4gIFx0XHRyZXR1cm4gZnVuY3Rpb24gcGFuTGVmdChkaXN0YW5jZSwgb2JqZWN0TWF0cml4KSB7XHJcbiAgXHRcdFx0di5zZXRGcm9tTWF0cml4Q29sdW1uKG9iamVjdE1hdHJpeCwgMCk7IC8vIGdldCBYIGNvbHVtbiBvZiBvYmplY3RNYXRyaXhcclxuICBcdFx0XHR2Lm11bHRpcGx5U2NhbGFyKC0gZGlzdGFuY2UpO1xyXG4gIFx0XHRcdHBhbk9mZnNldC5hZGQodik7XHJcbiAgXHRcdH07XHJcbiAgXHR9KCk7XHJcblxyXG4gIFx0dmFyIHBhblVwID0gZnVuY3Rpb24oKSB7XHJcbiAgXHRcdHZhciB2ID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcclxuICBcdFx0cmV0dXJuIGZ1bmN0aW9uIHBhblVwKGRpc3RhbmNlLCBvYmplY3RNYXRyaXgpIHtcclxuICBcdFx0XHR2LnNldEZyb21NYXRyaXhDb2x1bW4ob2JqZWN0TWF0cml4LCAxKTsgLy8gZ2V0IFkgY29sdW1uIG9mIG9iamVjdE1hdHJpeFxyXG4gIFx0XHRcdHYubXVsdGlwbHlTY2FsYXIoZGlzdGFuY2UpO1xyXG4gIFx0XHRcdHBhbk9mZnNldC5hZGQodik7XHJcbiAgXHRcdH07XHJcbiAgXHR9KCk7XHJcblxyXG4gIFx0Ly8gZGVsdGFYIGFuZCBkZWx0YVkgYXJlIGluIHBpeGVsczsgcmlnaHQgYW5kIGRvd24gYXJlIHBvc2l0aXZlXHJcbiAgXHRzY29wZS5wYW4gPSBmdW5jdGlvbigpIHtcclxuICBcdFx0dmFyIG9mZnNldCA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7XHJcbiAgXHRcdHJldHVybiBmdW5jdGlvbiBwYW4oZGVsdGFYLCBkZWx0YVkpIHtcclxuICBcdFx0XHR2YXIgZWxlbWVudCA9IHNjb3BlLmRvbUVsZW1lbnQ7XHJcbiAgXHRcdFx0aWYoc2NvcGUub2JqZWN0IGluc3RhbmNlb2YgVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEpIHtcclxuICBcdFx0XHRcdC8vIHBlcnNwZWN0aXZlXHJcbiAgXHRcdFx0XHR2YXIgcG9zaXRpb24gPSBzY29wZS5vYmplY3QucG9zaXRpb247XHJcbiAgXHRcdFx0XHRvZmZzZXQuY29weShwb3NpdGlvbikuc3ViKHNjb3BlLnRhcmdldCk7XHJcbiAgXHRcdFx0XHR2YXIgdGFyZ2V0RGlzdGFuY2UgPSBvZmZzZXQubGVuZ3RoKCk7XHJcbiAgXHRcdFx0XHQvLyBoYWxmIG9mIHRoZSBmb3YgaXMgY2VudGVyIHRvIHRvcCBvZiBzY3JlZW5cclxuICBcdFx0XHRcdHRhcmdldERpc3RhbmNlICo9IE1hdGgudGFuKChzY29wZS5vYmplY3QuZm92IC8gMikgKiBNYXRoLlBJIC8gMTgwLjApO1xyXG4gIFx0XHRcdFx0Ly8gd2UgYWN0dWFsbHkgZG9uJ3QgdXNlIHNjcmVlbldpZHRoLCBzaW5jZSBwZXJzcGVjdGl2ZSBjYW1lcmEgaXMgZml4ZWQgdG8gc2NyZWVuIGhlaWdodFxyXG4gIFx0XHRcdFx0cGFuTGVmdCgyICogZGVsdGFYICogdGFyZ2V0RGlzdGFuY2UgLyBlbGVtZW50LmNsaWVudEhlaWdodCwgc2NvcGUub2JqZWN0Lm1hdHJpeCk7XHJcbiAgXHRcdFx0XHRwYW5VcCgyICogZGVsdGFZICogdGFyZ2V0RGlzdGFuY2UgLyBlbGVtZW50LmNsaWVudEhlaWdodCwgc2NvcGUub2JqZWN0Lm1hdHJpeCk7XHJcbiAgXHRcdFx0fSBlbHNlIGlmKHNjb3BlLm9iamVjdCBpbnN0YW5jZW9mIFRIUkVFLk9ydGhvZ3JhcGhpY0NhbWVyYSkge1xyXG4gIFx0XHRcdFx0Ly8gb3J0aG9ncmFwaGljXHJcbiAgXHRcdFx0XHRwYW5MZWZ0KGRlbHRhWCAqKHNjb3BlLm9iamVjdC5yaWdodC1zY29wZS5vYmplY3QubGVmdCkgLyBzY29wZS5vYmplY3Quem9vbSAvIGVsZW1lbnQuY2xpZW50V2lkdGgsIHNjb3BlLm9iamVjdC5tYXRyaXgpO1xyXG4gIFx0XHRcdFx0cGFuVXAoZGVsdGFZICooc2NvcGUub2JqZWN0LnRvcC1zY29wZS5vYmplY3QuYm90dG9tKSAvIHNjb3BlLm9iamVjdC56b29tIC8gZWxlbWVudC5jbGllbnRIZWlnaHQsIHNjb3BlLm9iamVjdC5tYXRyaXgpO1xyXG4gIFx0XHRcdH0gZWxzZSB7XHJcbiAgXHRcdFx0XHQvLyBjYW1lcmEgbmVpdGhlciBvcnRob2dyYXBoaWMgbm9yIHBlcnNwZWN0aXZlXHJcbiAgXHRcdFx0XHRjb25zb2xlLndhcm4oJ1dBUk5JTkc6IE9yYml0Q29udHJvbHMuanMgZW5jb3VudGVyZWQgYW4gdW5rbm93biBjYW1lcmEgdHlwZS1wYW4gZGlzYWJsZWQuJyk7XHJcbiAgXHRcdFx0XHRzY29wZS5lbmFibGVQYW4gPSBmYWxzZTtcclxuICBcdFx0XHR9XHJcbiAgXHRcdH07XHJcbiAgXHR9KCk7XHJcblxyXG4gIFx0ZnVuY3Rpb24gZG9sbHlJbihkb2xseVNjYWxlKSB7XHJcbiAgICAgIGlmKHNjb3BlLm9iamVjdCBpbnN0YW5jZW9mIFRIUkVFLlBlcnNwZWN0aXZlQ2FtZXJhKSB7XHJcbiAgXHRcdFx0c2NhbGUgLz0gZG9sbHlTY2FsZTtcclxuICBcdFx0fSBlbHNlIGlmKHNjb3BlLm9iamVjdCBpbnN0YW5jZW9mIFRIUkVFLk9ydGhvZ3JhcGhpY0NhbWVyYSkge1xyXG4gIFx0XHRcdHNjb3BlLm9iamVjdC56b29tID0gTWF0aC5tYXgoc2NvcGUubWluWm9vbSwgTWF0aC5taW4oc2NvcGUubWF4Wm9vbSwgc2NvcGUub2JqZWN0Lnpvb20gKiBkb2xseVNjYWxlKSk7XHJcbiAgXHRcdFx0c2NvcGUub2JqZWN0LnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcclxuICBcdFx0XHR6b29tQ2hhbmdlZCA9IHRydWU7XHJcbiAgXHRcdH0gZWxzZSB7XHJcbiAgXHRcdFx0Y29uc29sZS53YXJuKCdXQVJOSU5HOiBPcmJpdENvbnRyb2xzLmpzIGVuY291bnRlcmVkIGFuIHVua25vd24gY2FtZXJhIHR5cGUtZG9sbHkvem9vbSBkaXNhYmxlZC4nKTtcclxuICBcdFx0XHRzY29wZS5lbmFibGVab29tID0gZmFsc2U7XHJcbiAgXHRcdH1cclxuICBcdH1cclxuXHJcbiAgXHRmdW5jdGlvbiBkb2xseU91dChkb2xseVNjYWxlKSB7XHJcbiAgICAgIGlmKHNjb3BlLm9iamVjdCBpbnN0YW5jZW9mIFRIUkVFLlBlcnNwZWN0aXZlQ2FtZXJhKSB7XHJcbiAgXHRcdFx0c2NhbGUgKj0gZG9sbHlTY2FsZTtcclxuICBcdFx0fSBlbHNlIGlmKHNjb3BlLm9iamVjdCBpbnN0YW5jZW9mIFRIUkVFLk9ydGhvZ3JhcGhpY0NhbWVyYSkge1xyXG4gIFx0XHRcdHNjb3BlLm9iamVjdC56b29tID0gTWF0aC5tYXgoc2NvcGUubWluWm9vbSwgTWF0aC5taW4oc2NvcGUubWF4Wm9vbSwgc2NvcGUub2JqZWN0Lnpvb20gLyBkb2xseVNjYWxlKSk7XHJcbiAgXHRcdFx0c2NvcGUub2JqZWN0LnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcclxuICBcdFx0XHR6b29tQ2hhbmdlZCA9IHRydWU7XHJcbiAgXHRcdH0gZWxzZSB7XHJcbiAgXHRcdFx0Y29uc29sZS53YXJuKCdXQVJOSU5HOiBPcmJpdENvbnRyb2xzLmpzIGVuY291bnRlcmVkIGFuIHVua25vd24gY2FtZXJhIHR5cGUtZG9sbHkvem9vbSBkaXNhYmxlZC4nKTtcclxuICBcdFx0XHRzY29wZS5lbmFibGVab29tID0gZmFsc2U7XHJcbiAgXHRcdH1cclxuICBcdH1cclxuXHJcbiAgICAvKiBBY3Rpb25zICovXHJcblxyXG4gICAgZnVuY3Rpb24gcm90YXRlKGV2ZW50LCBkYXRhKSB7XHJcbiAgICAgIGlmKHNjb3BlLmVuYWJsZWQgJiYgc2NvcGUuZW5hYmxlUm90YXRlICYmIGRhdGEuc3RhdGU9PT0nbW92ZScpIHtcclxuICAgICAgICB2YXIgZWxlbWVudCA9IHNjb3BlLmRvbUVsZW1lbnQ7XHJcbiAgICAgICAgLy8gcm90YXRpbmcgYWNyb3NzIHdob2xlIHNjcmVlbiBnb2VzIDM2MCBkZWdyZWVzIGFyb3VuZFxyXG4gICAgICAgIHJvdGF0ZUxlZnQoMiAqIE1hdGguUEkgKiBkYXRhLmR4IC8gZWxlbWVudC5jbGllbnRXaWR0aCAqIHNjb3BlLnJvdGF0ZVNwZWVkKTtcclxuICAgICAgICAvLyByb3RhdGluZyB1cCBhbmQgZG93biBhbG9uZyB3aG9sZSBzY3JlZW4gYXR0ZW1wdHMgdG8gZ28gMzYwLCBidXQgbGltaXRlZCB0byAxODBcclxuICAgICAgICByb3RhdGVVcCgyICogTWF0aC5QSSAqIGRhdGEuZHkgLyBlbGVtZW50LmNsaWVudEhlaWdodCAqIHNjb3BlLnJvdGF0ZVNwZWVkKTtcclxuICAgICAgICBzY29wZS51cGRhdGUoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHBhbihldmVudCwgZGF0YSkge1xyXG4gICAgICBpZihzY29wZS5lbmFibGVkICYmIHNjb3BlLmVuYWJsZVBhbiAmJiBkYXRhLnN0YXRlPT09J21vdmUnKSB7XHJcbiAgICAgICAgc2NvcGUucGFuKGRhdGEuZHgsIGRhdGEuZHkpO1xyXG4gICAgICAgIHNjb3BlLnVwZGF0ZSgpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gb2Zmc2V0RG9sbHkoZXZlbnQsIGRhdGEpIHtcclxuICAgICAgaWYoc2NvcGUuZW5hYmxlZCAmJiBzY29wZS5lbmFibGVab29tICYmIGRhdGEuc3RhdGU9PT0nbW92ZScpIHtcclxuICAgICAgICBpZihkYXRhLmR5PjApIHtcclxuICAgICAgICAgIGRvbGx5SW4oZ2V0Wm9vbVNjYWxlKCkpO1xyXG4gICAgICAgIH0gZWxzZSBpZihkYXRhLmR5PDApIHtcclxuICAgICAgICAgIGRvbGx5T3V0KGdldFpvb21TY2FsZSgpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc2NvcGUudXBkYXRlKCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiB3aGVlbERvbGx5KGV2ZW50KSB7XHJcbiAgICAgIGlmKHNjb3BlLmVuYWJsZWQgJiYgc2NvcGUuZW5hYmxlWm9vbSkge1xyXG4gICAgICAgIGlmKGV2ZW50LmRlbHRhWT4wKSB7XHJcbiAgICAgICAgICBkb2xseU91dChnZXRab29tU2NhbGUoKSk7XHJcbiAgICAgICAgfSBlbHNlIGlmKGV2ZW50LmRlbHRhWTwwKSB7XHJcbiAgICAgICAgICBkb2xseUluKGdldFpvb21TY2FsZSgpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc2NvcGUudXBkYXRlKCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmFjdGlvbnMgPSB7XHJcbiAgICAgIHJvdGF0ZSxcclxuICAgICAgcGFuLFxyXG4gICAgICBvZmZzZXREb2xseSxcclxuICAgICAgd2hlZWxEb2xseVxyXG4gICAgfVxyXG5cclxuICBcdC8vIGZvcmNlIGFuIHVwZGF0ZSBhdCBzdGFydFxyXG4gIFx0dGhpcy51cGRhdGUoKTtcclxuICB9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL09yYml0LmpzIiwiaW1wb3J0IHskLFBERkpTfSBmcm9tICcuLi9saWJzJztcclxuaW1wb3J0IEltYWdlQmFzZSBmcm9tICcuL0ltYWdlQmFzZSc7XHJcbmltcG9ydCBQZGYgZnJvbSAnLi9QZGYnO1xyXG5pbXBvcnQgQmFzZU1hdGhVdGlscyBmcm9tICcuL0Jhc2VNYXRoVXRpbHMnO1xyXG5pbXBvcnQgQ3VzdG9tRXZlbnRDb252ZXJ0ZXIgZnJvbSAnLi9DdXN0b21FdmVudENvbnZlcnRlcic7XHJcbmltcG9ydCBQb2x5VGFyZ2V0IGZyb20gJy4vdGFyZ2V0cy9Qb2x5VGFyZ2V0JztcclxuXHJcbmltcG9ydCBGaW5kZXIgZnJvbSAnLi9GaW5kZXInO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGRmSW1hZ2UgZXh0ZW5kcyBJbWFnZUJhc2Uge1xyXG5cclxuICBjb25zdHJ1Y3Rvcihjb250ZXh0LCB3aWR0aCwgaGVpZ2h0LCBjb2xvciwgcGRmLCBuKSB7XHJcbiAgICBzdXBlcihjb250ZXh0LCB3aWR0aCwgaGVpZ2h0LCBjb2xvcik7XHJcblxyXG4gICAgdGhpcy5xdWVyeSA9ICcnO1xyXG4gICAgdGhpcy5uID0gbjtcclxuICAgIHRoaXMucGRmID0gcGRmO1xyXG4gICAgdGhpcy52ID0ge3g6IDAsIHk6IDAsIHo6IDAsIHNldDogZnVuY3Rpb24oeCx5LHopIHtcclxuICAgICAgdGhpcy54PXg7IHRoaXMueT15OyB0aGlzLno9ejtcclxuICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9LCB0cmFuc2Zvcm06IGZ1bmN0aW9uKG0pIHtcclxuICAgICAgY29uc3QgeD1tLm1bMF1bMF0qdGhpcy54K20ubVsxXVswXSp0aGlzLnkrbS5tWzJdWzBdKnRoaXMueixcclxuICAgICAgICAgICAgeT1tLm1bMF1bMV0qdGhpcy54K20ubVsxXVsxXSp0aGlzLnkrbS5tWzJdWzFdKnRoaXMueixcclxuICAgICAgICAgICAgej1tLm1bMF1bMl0qdGhpcy54K20ubVswXVsyXSp0aGlzLnkrbS5tWzJdWzBdKnRoaXMuejtcclxuICAgICAgdGhpcy54PXg7XHJcbiAgICAgIHRoaXMueT15O1xyXG4gICAgICB0aGlzLno9ejtcclxuICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9fTtcclxuICAgIHRoaXMubSA9IHttOiBbWzEsMCwwXSxbMCwxLDBdLFswLDAsMV1dLCBzZXQ6IGZ1bmN0aW9uKG0wMCxtMDEsbTAyLG0xMCxtMTEsbTEyLG0yMCxtMjEsbTIyKSB7XHJcbiAgICAgIHRoaXMubT1bW20wMCxtMDEsbTAyXSxbbTEwLG0xMSxtMTJdLFttMjAsbTIxLG0yMl1dO1xyXG4gICAgICByZXR1cm4gdGhpcztcclxuICAgIH19O1xyXG5cclxuICAgIHRoaXMuc3RhcnRSZW5kZXIgPSAoKT0+IHtcclxuICAgICAgdGhpcy5wZGYuZ2V0SGFuZGxlcih0aGlzLnJlbmRlci5iaW5kKHRoaXMpKTtcclxuICAgIH07XHJcbiAgICBQcm9taXNlLnJlc29sdmUoKS5cclxuICAgICAgdGhlbigoKT0+IHRoaXMucGRmLmdldEhhbmRsZXIodGhpcy5pbml0LmJpbmQodGhpcykpKTtcclxuICB9XHJcblxyXG4gIHNldFF1ZXJ5KHF1ZXJ5KSB7XHJcbiAgICB0aGlzLnF1ZXJ5ID0gcXVlcnkudHJpbSgpO1xyXG4gICAgaWYodGhpcy50ZXh0Q29udGVudCkge1xyXG4gICAgICB0aGlzLnNldEhpdHModGhpcy50ZXh0Q29udGVudCk7XHJcbiAgICAgIC8vIHRoaXMuZmluaXNoTG9hZCgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmVjdFNpemUocikge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgd2lkdGg6IHJbMl0tclswXSxcclxuICAgICAgaGVpZ2h0OiByWzNdLXJbMV1cclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBjcmVhdGVQb2x5KG0sIHAsIHMpIHtcclxuICAgIGNvbnN0IHBvbHkgPSBbXSwgdiA9IHRoaXMudjtcclxuICAgIHYuc2V0KHAueCwgcC55LCAxKS50cmFuc2Zvcm0obSk7XHJcbiAgICBwb2x5LnB1c2goe3g6IHYueCwgeTogdi55fSk7XHJcbiAgICB2LnNldChwLngsIHAueStzLmhlaWdodCwgMSkudHJhbnNmb3JtKG0pO1xyXG4gICAgcG9seS5wdXNoKHt4OiB2LngsIHk6IHYueX0pO1xyXG4gICAgdi5zZXQocC54K3Mud2lkdGgsIHAueStzLmhlaWdodCwgMSkudHJhbnNmb3JtKG0pO1xyXG4gICAgcG9seS5wdXNoKHt4OiB2LngsIHk6IHYueX0pO1xyXG4gICAgdi5zZXQocC54K3Mud2lkdGgsIHAueSwgMSkudHJhbnNmb3JtKG0pO1xyXG4gICAgcG9seS5wdXNoKHt4OiB2LngsIHk6IHYueX0pO1xyXG4gICAgcmV0dXJuIHBvbHk7XHJcbiAgfVxyXG5cclxuICBnZXRTaW11bGF0ZWREb2MoKSB7XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIHNpbXVsYXRlKGUsIGRvYywgeCwgeSkge1xyXG4gICAgaWYodGhpcy5ldmVudENvbnZlcnRlcikge1xyXG4gICAgICB0aGlzLmV2ZW50Q29udmVydGVyLmNvbnZlcnQoZSwge2RvYywgeCwgeX0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc2V0QW5ub3RhdGlvbnMoYW5ub3MpIHtcclxuICAgIGNvbnN0IHQgPSB0aGlzLnZpZXdwb3J0LnRyYW5zZm9ybSxcclxuICAgICAgdGFyZ2V0cyA9IFtdO1xyXG4gICAgdGhpcy5tLnNldChcclxuICAgICAgdFswXSx0WzFdLDAsXHJcbiAgICAgIHRbMl0sdFszXSwwLFxyXG4gICAgICB0WzRdLHRbNV0sMSk7XHJcblxyXG4gICAgZm9yKGxldCBhbm5vIG9mIGFubm9zKSB7XHJcbiAgICAgIGlmIChhbm5vLnN1YnR5cGU9PT0nTGluaycpIHtcclxuICAgICAgICBjb25zdCByZWN0ID0gYW5uby5yZWN0LFxyXG4gICAgICAgICAgYVBvcyA9IHtcclxuICAgICAgICAgICAgeDogcmVjdFswXSxcclxuICAgICAgICAgICAgeTogcmVjdFsxXVxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIGFTeiA9IHRoaXMucmVjdFNpemUocmVjdCk7XHJcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gbmV3IFBvbHlUYXJnZXQodGhpcy5jcmVhdGVQb2x5KHRoaXMubSwgYVBvcywgYVN6KS5tYXAoKHApPT4gKHt4OiBwLngvdGhpcy52aWV3cG9ydC53aWR0aCwgeTogMS1wLnkvdGhpcy52aWV3cG9ydC5oZWlnaHR9KSkpO1xyXG4gICAgICAgIHRhcmdldC5hbm5vID0gYW5ubztcclxuICAgICAgICB0YXJnZXQuY2FsbGJhY2sgPSB0aGlzLmFubm9DbGIuYmluZCh0aGlzKTtcclxuICAgICAgICB0YXJnZXRzLnB1c2godGFyZ2V0KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYodGFyZ2V0cy5sZW5ndGgpIHtcclxuICAgICAgdGhpcy5ldmVudENvbnZlcnRlciA9IG5ldyBDdXN0b21FdmVudENvbnZlcnRlcih0aGlzLnduZCwgdGhpcy5kb2MsIFBvbHlUYXJnZXQudGVzdCwgdGhpcy5nZXRTaW11bGF0ZWREb2MoKSk7XHJcbiAgICAgIGZvcihsZXQgdGFyZ2V0IG9mIHRhcmdldHMpIHtcclxuICAgICAgICB0aGlzLmV2ZW50Q29udmVydGVyLmFkZEN1c3RvbSh0YXJnZXQpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzZXRIaXRzKHRleHRDb250ZW50KSB7XHJcbiAgICB0aGlzLnRleHRDb250ZW50ID0gdGV4dENvbnRlbnQ7XHJcbiAgICBpZih0aGlzLnF1ZXJ5IT09JycpIHtcclxuICAgICAgdGhpcy5maW5kZXIgPSBuZXcgRmluZGVyKHRleHRDb250ZW50Lml0ZW1zLm1hcCgoaXRlbSk9PiBpdGVtLnN0ciksIHRoaXMucXVlcnksIHtjb250ZXh0czogZmFsc2V9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJlbmRlckhpdHMoKSB7XHJcbiAgICBpZih0aGlzLmZpbmRlcikge1xyXG4gICAgICBjb25zdCB2aWV3ID0gdGhpcy5wYWdlLnZpZXcsXHJcbiAgICAgICAgdGVzdFN6ID0gJCgnPGRpdiBzdHlsZT1cInBvc2l0aW9uOiBhYnNvbHV0ZTsgdmlzaWJpbGl0eTogaGlkZGVuO1wiPjwvZGl2PicpLmFwcGVuZFRvKCdib2R5JyksIHRleHREaXYgPSB0ZXN0U3pbMF0sXHJcbiAgICAgICAgYmFzZU9mZnNldCA9IHRlc3RTei5vZmZzZXQoKS5sZWZ0O1xyXG4gICAgICBmb3IobGV0IGhpdCBvZiB0aGlzLmZpbmRlci5nZXRIaXRzKCkpIHtcclxuICAgICAgICAgIGNvbnN0IGl0ZW0gPSB0aGlzLnRleHRDb250ZW50Lml0ZW1zW2hpdC5pbmRleF0sXHJcbiAgICAgICAgICAgICAgICB0ID0gUERGSlMuVXRpbC50cmFuc2Zvcm0odGhpcy52aWV3cG9ydC50cmFuc2Zvcm0sIGl0ZW0udHJhbnNmb3JtKSxcclxuICAgICAgICAgICAgICAgIHN0eWxlID0gdGhpcy50ZXh0Q29udGVudC5zdHlsZXNbaXRlbS5mb250TmFtZV0sXHJcbiAgICAgICAgICAgICAgICBhbmdsZSA9IE1hdGguYXRhbjIodFsxXSwgdFswXSkrKHN0eWxlLnZlcnRpY2FsPyBNYXRoLlBJIC8gMjogMCksXHJcbiAgICAgICAgICAgICAgICBmb250SGVpZ2h0ID0gTWF0aC5zcXJ0KCh0WzJdICogdFsyXSkgKyAodFszXSAqIHRbM10pKSxcclxuICAgICAgICAgICAgICAgIGZvbnRBc2NlbnQgPSBzdHlsZS5hc2NlbnQ/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlLmFzY2VudCAqIGZvbnRIZWlnaHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChzdHlsZS5kZXNjZW50PyAoMSArIHN0eWxlLmRlc2NlbnQpICogZm9udEhlaWdodDogZm9udEhlaWdodCk7XHJcbiAgICAgICAgICB0ZXN0U3ouaHRtbChpdGVtLnN0ci5zdWJzdHIoMCwgaGl0Lm9mZnNldCkrJzxzcGFuPicraXRlbS5zdHIuc3Vic3RyKGhpdC5vZmZzZXQsIGhpdC5sZW5ndGgpKyc8L3NwYW4+JytpdGVtLnN0ci5zdWJzdHIoaGl0Lm9mZnNldCtoaXQubGVuZ3RoKSk7XHJcblxyXG4gICAgICAgICAgdGV4dERpdi5zdHlsZS5mb250U2l6ZSA9IGZvbnRIZWlnaHQrJ3B4JztcclxuICAgICAgICAgIHRleHREaXYuc3R5bGUuZm9udEZhbWlseSA9IHN0eWxlLmZvbnRGYW1pbHk7XHJcblxyXG4gICAgICAgICAgY29uc3QgdGVzdFNwYW4gPSB0ZXN0U3ouZmluZCgnc3BhbicpLFxyXG4gICAgICAgICAgICAgIGl3aWR0aCA9IHN0eWxlLnZlcnRpY2FsPyBpdGVtLmhlaWdodCp0aGlzLnZpZXdwb3J0LnNjYWxlOiBpdGVtLndpZHRoKnRoaXMudmlld3BvcnQuc2NhbGUsXHJcbiAgICAgICAgICAgICAgd2lkdGggPSB0ZXN0U3oud2lkdGgoKSxcclxuICAgICAgICAgICAgICByZWxhdGl2ZU9mZnNldCA9ICh0ZXN0U3Bhbi5vZmZzZXQoKS5sZWZ0LWJhc2VPZmZzZXQpL3dpZHRoO1xyXG4gICAgICAgICAgdGhpcy5tLnNldChcclxuICAgICAgICAgICAgMSwwLDAsXHJcbiAgICAgICAgICAgIDAsMSwwLFxyXG4gICAgICAgICAgICB0WzRdK2ZvbnRBc2NlbnQqTWF0aC5zaW4oYW5nbGUpLHRbNV0tZm9udEFzY2VudCpNYXRoLmNvcyhhbmdsZSksMSk7XHJcbiAgICAgICAgICBsZXQgcG9seSA9IHRoaXMuY3JlYXRlUG9seSh0aGlzLm0sIHt4OiByZWxhdGl2ZU9mZnNldCppd2lkdGgsIHk6IDB9LCB7d2lkdGg6IGl3aWR0aCp0ZXN0U3Bhbi53aWR0aCgpL3dpZHRoLCBoZWlnaHQ6IHRlc3RTcGFuLmhlaWdodCgpfSk7XHJcbiAgICAgICAgICBwb2x5ID0gcG9seS5tYXAoKHApPT4gKHt4OiBwLngvdGhpcy52aWV3cG9ydC53aWR0aCwgeTogMS1wLnkvdGhpcy52aWV3cG9ydC5oZWlnaHR9KSk7XHJcbiAgICAgICAgICB0aGlzLnJlbmRlckhpdChwb2x5KTtcclxuICAgICAgfVxyXG4gICAgICB0ZXN0U3oucmVtb3ZlKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBhbm5vQ2xiKGUsIGRhdGEpIHtcclxuICAgIGlmKHRoaXMuY29udGV4dC5kaXNwYXRjaEV2ZW50KSB7XHJcbiAgICAgIHRoaXMuY29udGV4dC5kaXNwYXRjaEV2ZW50KHtcclxuICAgICAgICB0eXBlOiAncGRmQW5ub3RhdGlvbicsXHJcbiAgICAgICAgZXZlbnQ6IGUsXHJcbiAgICAgICAgYW5ub3RhdGlvbjogZGF0YS50YXJnZXQuYW5ub1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNhbGNWaWV3cG9ydCgpIHtcclxuICAgIGNvbnN0IHNjYWxlID0gQmFzZU1hdGhVdGlscy5jYWxjU2NhbGUodGhpcy5zaXplLndpZHRoLCB0aGlzLnNpemUuaGVpZ2h0LCB0aGlzLnJlc1csIHRoaXMucmVzSCk7XHJcbiAgICBpZighdGhpcy52aWV3cG9ydCB8fCBNYXRoLmFicyh0aGlzLnZpZXdwb3J0LnNjYWxlLXNjYWxlKT4xZS00KSB7XHJcbiAgICAgIHRoaXMudmlld3BvcnQgPSB0aGlzLnBhZ2UuZ2V0Vmlld3BvcnQoe3NjYWxlfSk7XHJcbiAgICAgIGlmKHRoaXMudHlwZSE9PSdmdWxsJykge1xyXG4gICAgICAgIGlmKHRoaXMudHlwZT09PSdyaWdodCcpIHtcclxuICAgICAgICAgIHRoaXMudmlld3BvcnQub2Zmc2V0WCArPSAwLjUqdGhpcy52aWV3cG9ydC53aWR0aDtcclxuICAgICAgICAgIHRoaXMudmlld3BvcnQudHJhbnNmb3JtWzRdIC09IDAuNSp0aGlzLnZpZXdwb3J0LndpZHRoO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnZpZXdwb3J0LndpZHRoIC89IDI7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5yZXNXID0gdGhpcy53aWR0aCA9IHRoaXMudmlld3BvcnQud2lkdGg7XHJcbiAgICAgIHRoaXMucmVzSCA9IHRoaXMuaGVpZ2h0ID0gdGhpcy52aWV3cG9ydC5oZWlnaHQ7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBpbml0KCkge1xyXG4gICAgdGhpcy50eXBlID0gdGhpcy5wZGYuZ2V0UGFnZVR5cGUodGhpcy5uKTtcclxuICAgIHRoaXMucGRmLmdldFBhZ2UodGhpcy5uKS5cclxuICAgICAgdGhlbigocGFnZSk9PiB7XHJcbiAgICAgICAgdGhpcy5wYWdlID0gcGFnZTtcclxuICAgICAgICB0aGlzLnNpemUgPSBQZGYuZ2V0UGFnZVNpemUocGFnZSk7XHJcbiAgICAgICAgaWYodGhpcy50eXBlIT09J2Z1bGwnKSB7XHJcbiAgICAgICAgICB0aGlzLnNpemUud2lkdGggLz0gMjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcGFnZS5nZXRBbm5vdGF0aW9ucygpLlxyXG4gICAgICAgICAgdGhlbih0aGlzLnNldEFubm90YXRpb25zLmJpbmQodGhpcykpO1xyXG4gICAgICAgIHBhZ2UuZ2V0VGV4dENvbnRlbnQoKS5cclxuICAgICAgICAgIHRoZW4odGhpcy5zZXRIaXRzLmJpbmQodGhpcykpO1xyXG4gICAgICAgIHRoaXMuY2FsY1ZpZXdwb3J0KCk7XHJcbiAgICAgICAgdGhpcy5maW5pc2hMb2FkKCk7XHJcbiAgICAgIH0pLlxyXG4gICAgICBjYXRjaCgoZSk9PiB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignQ2Fubm90IGxvYWQgUERGIHBhZ2U6ICcrKHRoaXMubisxKSk7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihlKTtcclxuICAgICAgICB0aGlzLmZpbmlzaExvYWQoKTtcclxuICAgICAgfSk7XHJcbiAgfVxyXG5cclxuICBzZXRSZXNvbHV0aW9uKHJlcykge1xyXG4gICAgc3VwZXIuc2V0UmVzb2x1dGlvbihyZXMpO1xyXG4gICAgaWYodGhpcy5wYWdlKSB7XHJcbiAgICAgIHRoaXMuY2FsY1ZpZXdwb3J0KCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZW5kZXIoaGFuZGxlcikge1xyXG4gICAgaWYodGhpcy5wYWdlKSB7XHJcbiAgICAgIHRoaXMucGFnZS5yZW5kZXIoe1xyXG4gICAgICAgIGNhbnZhc0NvbnRleHQ6IHRoaXMucHVzaEN0eCgpLFxyXG4gICAgICAgIHZpZXdwb3J0OiB0aGlzLnZpZXdwb3J0XHJcbiAgICAgIH0pLnByb21pc2UuXHJcbiAgICAgIHRoZW4oKCk9PiB7XHJcbiAgICAgICAgdGhpcy5yZW5kZXJIaXRzKCk7XHJcbiAgICAgICAgdGhpcy5wb3BDdHgoKTtcclxuICAgICAgICB0aGlzLmZpbmlzaFJlbmRlcigpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICB0aGlzLnJlbmRlckJsYW5rUGFnZSgpO1xyXG4gICAgICB0aGlzLmZpbmlzaFJlbmRlcigpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvUGRmSW1hZ2UuanMiLCJpbXBvcnQgeyR9IGZyb20gJy4uL2xpYnMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VhcmNoIHtcclxuXHJcbiAgY29uc3RydWN0b3IoY29udGFpbmVyLCBwYWdlcykge1xyXG4gICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XHJcbiAgICB0aGlzLnBhZ2VzID0gcGFnZXM7XHJcbiAgICB0aGlzLnByZXZSZXN1bHRzID0gW107XHJcbiAgICBjb250YWluZXIuaHRtbChgXHJcbiAgICAgIDxkaXYgY2xhc3M9XCJzZWFyY2hcIj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwicXVlcnlcIj5cclxuICAgICAgICAgIDxpbnB1dCBjbGFzcz1cImlucFF1ZXJ5XCIgdHlwZT1cInRleHRcIiBtYXhsZW5ndGg9XCIzMFwiIHZhbHVlPVwiXCIgLz5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwicmVzdWx0c1wiPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJzdGF0dXNcIj5cclxuXHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgYC5mYjNkUUZpbHRlcigpKTtcclxuICAgIHRoaXMucXVlcnkgPSBjb250YWluZXIuZmluZCgnLnF1ZXJ5IGlucHV0Jyk7XHJcbiAgICB0aGlzLnJlc3VsdHMgPSBjb250YWluZXIuZmluZCgnLnJlc3VsdHMnKTtcclxuICAgIHRoaXMuc3RhdHVzID0gY29udGFpbmVyLmZpbmQoJy5zdGF0dXMnKTtcclxuXHJcbiAgICB0aGlzLmJpbmRzID0ge1xyXG4gICAgICBuYXZpZ2F0ZTogdGhpcy5uYXZpZ2F0ZS5iaW5kKHRoaXMpLFxyXG4gICAgICBkb1F1ZXJ5OiB0aGlzLmRvUXVlcnkuYmluZCh0aGlzKVxyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLnF1ZXJ5Lm9uKCdrZXlkb3duJywgdGhpcy5iaW5kcy5kb1F1ZXJ5KTtcclxuICAgIHRoaXMucmVzdWx0cy5vbignY2xpY2snLCB0aGlzLmJpbmRzLm5hdmlnYXRlKTtcclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICB0aGlzLnJlc3VsdHMub2ZmKCdjbGljaycsIHRoaXMuYmluZHMubmF2aWdhdGUpO1xyXG4gICAgdGhpcy5xdWVyeS5vZmYoJ2tleWRvd24nLCB0aGlzLmJpbmRzLmRvUXVlcnkpO1xyXG4gIH1cclxuXHJcbiAgbmF2aWdhdGUoZSkge1xyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgaWYodGhpcy5vbk5hdmlnYXRlIT09dW5kZWZpbmVkKSB7XHJcbiAgICAgIGxldCB0YXJnZXQgPSAkKGUudGFyZ2V0KTtcclxuICAgICAgaWYoIXRhcmdldC5oYXNDbGFzcygncmVzdWx0JykpIHtcclxuICAgICAgICBjb25zdCB0ID0gdGFyZ2V0LmZpbmQoJy5yZXN1bHQnKTtcclxuICAgICAgICBpZih0Lmxlbmd0aCkge1xyXG4gICAgICAgICAgdGFyZ2V0ID0gdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICB3aGlsZSh0YXJnZXQubGVuZ3RoICYmICF0YXJnZXQuaGFzQ2xhc3MoJ3Jlc3VsdCcpKSB7XHJcbiAgICAgICAgICAgIHRhcmdldCA9ICQodGFyZ2V0WzBdLnBhcmVudE5vZGUpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBjb25zdCBwYWdlID0gdGFyZ2V0LmF0dHIoJ2RhdGEnKTtcclxuICAgICAgaWYocGFnZSE9PXVuZGVmaW5lZCkge1xyXG4gICAgICAgIHRoaXMub25OYXZpZ2F0ZShwYXJzZUludChwYWdlKSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIGRvUXVlcnkoKSB7XHJcbiAgICBpZih0aGlzLm9uUXVlcnkpIHtcclxuICAgICAgY29uc3QgcXVlcnlTdGFtcCA9IHRoaXMucXVlcnlTdGFtcCA9IERhdGUubm93KCk7XHJcbiAgICAgIHNldFRpbWVvdXQoKCk9PiB7XHJcbiAgICAgICAgaWYocXVlcnlTdGFtcCA9PT0gdGhpcy5xdWVyeVN0YW1wKSB7XHJcbiAgICAgICAgICB0aGlzLm9uUXVlcnkodGhpcy5xdWVyeVswXS52YWx1ZS50cmltKCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSwgMTAwMCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzZXRSZXN1bHRzKHJlc3VsdHMsIGxhc3RQYWdlKSB7XHJcbiAgICBpZih0aGlzLnByZXZSZXN1bHRzLmxlbmd0aCAmJiByZXN1bHRzWzBdIT09dGhpcy5wcmV2UmVzdWx0c1swXSkge1xyXG4gICAgICB0aGlzLnByZXZSZXN1bHRzID0gW107XHJcbiAgICAgIHRoaXMucmVzdWx0cy5odG1sKCcnKTtcclxuICAgIH1cclxuICAgIGNvbnN0IGh0bWxzID0gW107XHJcbiAgICBmb3IobGV0IGk9dGhpcy5wcmV2UmVzdWx0cy5sZW5ndGg7IGk8cmVzdWx0cy5sZW5ndGg7ICsraSkge1xyXG4gICAgICBjb25zdCByZXN1bHQgPSByZXN1bHRzW2ldO1xyXG4gICAgICBodG1scy5wdXNoKCc8ZGl2IGNsYXNzPVwicmVzdWx0XCIgZGF0YT1cIicrcmVzdWx0LnBhZ2UrJ1wiPicpO1xyXG4gICAgICAgIGh0bWxzLnB1c2goJzxhIGhyZWY9XCIjXCI+Jyk7XHJcbiAgICAgICAgICBodG1scy5wdXNoKCc8ZGl2PicrcmVzdWx0LmNvbnRleHRzLmpvaW4oJzwvZGl2PjxkaXY+JykrJzwvZGl2PicpO1xyXG4gICAgICAgIGh0bWxzLnB1c2goJzwvYT4nKTtcclxuICAgICAgaHRtbHMucHVzaCgnPC9kaXY+Jyk7XHJcbiAgICB9XHJcbiAgICAkKGh0bWxzLmpvaW4oJycpKS5hcHBlbmRUbyh0aGlzLnJlc3VsdHMpO1xyXG4gICAgdGhpcy5wcmV2UmVzdWx0cyA9IFsuLi5yZXN1bHRzXTtcclxuICAgIGlmKGxhc3RQYWdlPT09dW5kZWZpbmVkKSB7XHJcbiAgICAgIHRoaXMuc3RhdHVzLmh0bWwoJycpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHRoaXMuc3RhdHVzLmh0bWwobGFzdFBhZ2UrJyBvZiAnK3RoaXMucGFnZXMpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvU2VhcmNoLmpzIiwiaW1wb3J0IHskfSBmcm9tICcuLi9saWJzJztcclxuaW1wb3J0IEltYWdlQmFzZSBmcm9tICcuL0ltYWdlQmFzZSc7XHJcbmltcG9ydCBVdGlscyBmcm9tICcuL1V0aWxzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFN0YXRpY0ltYWdlIGV4dGVuZHMgSW1hZ2VCYXNlIHtcclxuXHJcbiAgY29uc3RydWN0b3IoY29udGV4dCwgd2lkdGgsIGhlaWdodCwgY29sb3IsIHNyYykge1xyXG4gICAgc3VwZXIoY29udGV4dCwgd2lkdGgsIGhlaWdodCwgY29sb3IpO1xyXG5cclxuICAgIHRoaXMuYmluZHMgPSB7fVxyXG4gICAgdGhpcy5pbWFnZSA9IG5ldyBJbWFnZSgpO1xyXG4gICAgdGhpcy5pbWFnZS5jcm9zc09yaWdpbiA9ICdBbm9ueW1vdXMnO1xyXG4gICAgdGhpcy5iaW5kcy5pbWFnZUxvYWQgPSAoKT0+IHtcclxuICAgICAgdGhpcy53aWR0aCA9IHRoaXMuaW1hZ2Uud2lkdGg7XHJcbiAgICAgIHRoaXMuaGVpZ2h0ID0gdGhpcy5pbWFnZS5oZWlnaHQ7XHJcbiAgICAgIHRoaXMucmVzSCA9IHRoaXMuaGVpZ2h0L3RoaXMud2lkdGgqdGhpcy5yZXNXO1xyXG4gICAgICB0aGlzLnN0YXJ0UmVuZGVyID0gKCk9PiB7XHJcbiAgICAgICAgdGhpcy5yZW5kZXJJbWFnZSh0aGlzLmltYWdlKTtcclxuICAgICAgICB0aGlzLmZpbmlzaFJlbmRlcigpO1xyXG4gICAgICB9O1xyXG4gICAgICB0aGlzLmZpbmlzaExvYWQoKTtcclxuICAgIH07XHJcbiAgICB0aGlzLmJpbmRzLmltYWdlRXJyb3IgPSAoKT0+IHtcclxuICAgICAgdGhpcy5zdGFydFJlbmRlciA9ICgpPT4ge1xyXG4gICAgICAgIHRoaXMucmVuZGVyTm90Rm91bmRQYWdlKCk7XHJcbiAgICAgICAgdGhpcy5maW5pc2hSZW5kZXIoKTtcclxuICAgICAgfTtcclxuICAgICAgdGhpcy5maW5pc2hMb2FkKCk7XHJcbiAgICB9O1xyXG4gICAgJCh0aGlzLmltYWdlKS5vbignbG9hZCcsIHRoaXMuYmluZHMuaW1hZ2VMb2FkKS5vbignZXJyb3InLCB0aGlzLmJpbmRzLmltYWdlRXJyb3IpO1xyXG4gICAgdGhpcy5pbWFnZS5zcmMgPSBVdGlscy5ub3JtYWxpemVVcmwoc3JjKTtcclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICAkKHRoaXMuaW1hZ2UpLm9mZignbG9hZCcsIHRoaXMuYmluZHMuaW1hZ2VMb2FkKS5vZmYoJ2Vycm9yJywgdGhpcy5iaW5kcy5pbWFnZUVycm9yKTtcclxuICAgIHRoaXMuaW1hZ2Uuc3JjID0gJyc7XHJcbiAgICBkZWxldGUgdGhpcy5pbWFnZTtcclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICB9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL1N0YXRpY0ltYWdlLmpzIiwiaW1wb3J0IHtUSFJFRX0gZnJvbSAnLi4vbGlicydcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRleHR1cmVBbmltYXRvciB7XHJcbiAgY29uc3RydWN0b3IoaW1nLCB0aWxlc0hvcml6LCB0aWxlc1ZlcnQsIG51bVRpbGVzLCB0aWxlRGlzcER1cmF0aW9uKSB7XHJcblxyXG4gICAgY29uc3QgdGV4dHVyZSA9IG5ldyBUSFJFRS5UZXh0dXJlKCk7XHJcbiAgICB0ZXh0dXJlLm1pbkZpbHRlciA9IFRIUkVFLkxpbmVhckZpbHRlcjtcclxuICAgIHRleHR1cmUuaW1hZ2UgPSBpbWc7XHJcbiAgICB0ZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcclxuXHJcbiAgXHQvLyBub3RlOiB0ZXh0dXJlIHBhc3NlZCBieSByZWZlcmVuY2UsIHdpbGwgYmUgdXBkYXRlZCBieSB0aGUgdXBkYXRlIGZ1bmN0aW9uLlxyXG4gICAgdGhpcy50ZXh0dXJlID0gdGV4dHVyZTtcclxuICBcdHRoaXMudGlsZXNIb3Jpem9udGFsID0gdGlsZXNIb3JpejtcclxuICBcdHRoaXMudGlsZXNWZXJ0aWNhbCA9IHRpbGVzVmVydDtcclxuICBcdC8vIGhvdyBtYW55IGltYWdlcyBkb2VzIHRoaXMgc3ByaXRlc2hlZXQgY29udGFpbj9cclxuICBcdC8vICB1c3VhbGx5IGVxdWFscyB0aWxlc0hvcml6ICogdGlsZXNWZXJ0LCBidXQgbm90IG5lY2Vzc2FyaWx5LFxyXG4gIFx0Ly8gIGlmIHRoZXJlIGF0IGJsYW5rIHRpbGVzIGF0IHRoZSBib3R0b20gb2YgdGhlIHNwcml0ZXNoZWV0LlxyXG4gIFx0dGhpcy5udW1iZXJPZlRpbGVzID0gbnVtVGlsZXM7XHJcbiAgXHR0ZXh0dXJlLnJlcGVhdC5zZXQoMS90aGlzLnRpbGVzSG9yaXpvbnRhbCwgMS90aGlzLnRpbGVzVmVydGljYWwpO1xyXG5cclxuICBcdC8vIGhvdyBsb25nIHNob3VsZCBlYWNoIGltYWdlIGJlIGRpc3BsYXllZD9cclxuICBcdHRoaXMudGlsZURpc3BsYXlEdXJhdGlvbiA9IHRpbGVEaXNwRHVyYXRpb247XHJcblxyXG4gIFx0Ly8gaG93IGxvbmcgaGFzIHRoZSBjdXJyZW50IGltYWdlIGJlZW4gZGlzcGxheWVkP1xyXG4gIFx0dGhpcy5jdXJyZW50RGlzcGxheVRpbWUgPSAwO1xyXG5cclxuICBcdC8vIHdoaWNoIGltYWdlIGlzIGN1cnJlbnRseSBiZWluZyBkaXNwbGF5ZWQ/XHJcbiAgXHR0aGlzLmN1cnJlbnRUaWxlID0gMDtcclxuICB9XHJcblxyXG4gIHVwZGF0ZShtaWxsaVNlYykge1xyXG4gICAgdGhpcy5jdXJyZW50RGlzcGxheVRpbWUgKz0gbWlsbGlTZWM7XHJcbiAgICB3aGlsZSh0aGlzLmN1cnJlbnREaXNwbGF5VGltZSA+IHRoaXMudGlsZURpc3BsYXlEdXJhdGlvbikge1xyXG4gICAgICB0aGlzLmN1cnJlbnREaXNwbGF5VGltZSAtPSB0aGlzLnRpbGVEaXNwbGF5RHVyYXRpb247XHJcbiAgICAgICsrdGhpcy5jdXJyZW50VGlsZTtcclxuICAgICAgaWYodGhpcy5jdXJyZW50VGlsZSA9PSB0aGlzLm51bWJlck9mVGlsZXMpXHJcbiAgICAgICAgdGhpcy5jdXJyZW50VGlsZSA9IDA7XHJcbiAgICAgIHZhciBjdXJyZW50Q29sdW1uID0gdGhpcy5jdXJyZW50VGlsZSV0aGlzLnRpbGVzSG9yaXpvbnRhbDtcclxuICAgICAgdGhpcy50ZXh0dXJlLm9mZnNldC54ID0gY3VycmVudENvbHVtbi90aGlzLnRpbGVzSG9yaXpvbnRhbDtcclxuICAgICAgdmFyIGN1cnJlbnRSb3cgPSBNYXRoLmZsb29yKHRoaXMuY3VycmVudFRpbGUvdGhpcy50aWxlc0hvcml6b250YWwpO1xyXG4gICAgICB0aGlzLnRleHR1cmUub2Zmc2V0LnkgPSBjdXJyZW50Um93L3RoaXMudGlsZXNWZXJ0aWNhbDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICBjb25zdCBpbWcgPSB0aGlzLnRleHR1cmUuaW1hZ2U7XHJcbiAgICBpbWcuaGVpZ2h0ID0gaW1nLndpZHRoID0gMDtcclxuICAgIHRoaXMudGV4dHVyZS5kaXNwb3NlKCk7XHJcbiAgfVxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL1RleHR1cmVBbmltYXRvci5qcyIsImltcG9ydCB7VEhSRUUsICR9IGZyb20gJy4uL2xpYnMnO1xyXG5pbXBvcnQgVXRpbHMgZnJvbSAnLi9VdGlscyc7XHJcbmltcG9ydCBNb3VzZUV2ZW50Q29udmVydGVyIGZyb20gJy4vTW91c2VFdmVudENvbnZlcnRlcic7XHJcbmltcG9ydCBUaHJlZUV2ZW50Q29udmVydGVyIGZyb20gJy4vVGhyZWVFdmVudENvbnZlcnRlcic7XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGhyZWVNb3VzZUV2ZW50Q29udmVydGVyIGV4dGVuZHMgTW91c2VFdmVudENvbnZlcnRlciB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHduZCwgZG9jLCB2aXN1YWxXb3JsZCwgdGVzdCkge1xyXG4gICAgc3VwZXIod25kLCBkb2MsIHZpc3VhbFdvcmxkLmVsZW1lbnQpO1xyXG4gICAgVXRpbHMuZXh0ZW5kcyh0aGlzLCBuZXcgVGhyZWVFdmVudENvbnZlcnRlcih2aXN1YWxXb3JsZCwgdGVzdCkpO1xyXG4gIH1cclxuXHJcbiAgZ2V0Q2FsbGJhY2sob2JqZWN0KSB7XHJcbiAgICByZXR1cm4gb2JqZWN0Lm9iamVjdC51c2VyRGF0YS5tb3VzZUNhbGxiYWNrO1xyXG4gIH1cclxuXHJcbiAgc2V0Q29vcmRzRnJvbUV2ZW50KGUpIHtcclxuICAgIGNvbnN0IGpFbGVtZW50ID0gJCh0aGlzLmVsZW1lbnQpO1xyXG4gICAgY29uc3Qgb2Zmc2V0ID0gakVsZW1lbnQub2Zmc2V0KCk7XHJcbiAgICB0aGlzLmNvb3Jkcy54ID0gKChlLnBhZ2VYLW9mZnNldC5sZWZ0KS9qRWxlbWVudC53aWR0aCgpKSoyLTE7XHJcbiAgICB0aGlzLmNvb3Jkcy55ID0gLSgoZS5wYWdlWS1vZmZzZXQudG9wKS9qRWxlbWVudC5oZWlnaHQoKSkqMisxO1xyXG4gICAgcmV0dXJuIHRoaXMuY29vcmRzO1xyXG4gIH1cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9jb21tb24vY2xhc3Nlcy9UaHJlZU1vdXNlRXZlbnRDb252ZXJ0ZXIuanMiLCJpbXBvcnQge1RIUkVFLCAkfSBmcm9tICcuLi9saWJzJztcclxuaW1wb3J0IFV0aWxzIGZyb20gJy4vVXRpbHMnO1xyXG5pbXBvcnQgVG91Y2hFdmVudENvbnZlcnRlciBmcm9tICcuL1RvdWNoRXZlbnRDb252ZXJ0ZXInO1xyXG5pbXBvcnQgVGhyZWVFdmVudENvbnZlcnRlciBmcm9tICcuL1RocmVlRXZlbnRDb252ZXJ0ZXInO1xyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRocmVlVG91Y2hFdmVudENvbnZlcnRlciBleHRlbmRzIFRvdWNoRXZlbnRDb252ZXJ0ZXIge1xyXG5cclxuICBjb25zdHJ1Y3Rvcih3bmQsIGRvYywgdmlzdWFsV29ybGQsIHRlc3QpIHtcclxuICAgIHN1cGVyKHduZCwgZG9jLCB2aXN1YWxXb3JsZC5lbGVtZW50KTtcclxuICAgIFV0aWxzLmV4dGVuZHModGhpcywgbmV3IFRocmVlRXZlbnRDb252ZXJ0ZXIodmlzdWFsV29ybGQsIHRlc3QpKTtcclxuICB9XHJcblxyXG4gIGdldENhbGxiYWNrKG9iamVjdCkge1xyXG4gICAgcmV0dXJuIG9iamVjdC5vYmplY3QudXNlckRhdGEudG91Y2hDYWxsYmFjaztcclxuICB9XHJcblxyXG4gIHNldENvb3Jkc0Zyb21FdmVudChlKSB7XHJcbiAgICBjb25zdCBqRWxlbWVudCA9ICQodGhpcy5lbGVtZW50KSwgb2Zmc2V0ID0gakVsZW1lbnQub2Zmc2V0KCksXHJcbiAgICAgIHRvdWNoZXMgPSBlLnRvdWNoZXMgfHwgZS5vcmlnaW5hbEV2ZW50LnRvdWNoZXMsIHRvdWNoID0gdG91Y2hlcy5sZW5ndGg/IHRvdWNoZXNbMF06ICh0aGlzLmxhc3RUb3VjaGVzIHx8IFt7cGFnZVg6IDAsIHBhZ2VZOiAwfV0pWzBdLFxyXG4gICAgICBwYWdlWCA9IHRvdWNoLnBhZ2VYLCBwYWdlWSA9IHRvdWNoLnBhZ2VZO1xyXG4gICAgdGhpcy5sYXN0VG91Y2hlcyA9IHRvdWNoZXMubGVuZ3RoPyB0b3VjaGVzOiB0aGlzLmxhc3RUb3VjaGVzO1xyXG4gICAgdGhpcy5jb29yZHMueCA9ICgocGFnZVgtb2Zmc2V0LmxlZnQpL2pFbGVtZW50LndpZHRoKCkpKjItMTtcclxuICAgIHRoaXMuY29vcmRzLnkgPSAtKChwYWdlWS1vZmZzZXQudG9wKS9qRWxlbWVudC5oZWlnaHQoKSkqMisxO1xyXG4gICAgcmV0dXJuIHRoaXMuY29vcmRzO1xyXG4gIH1cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9jb21tb24vY2xhc3Nlcy9UaHJlZVRvdWNoRXZlbnRDb252ZXJ0ZXIuanMiLCJpbXBvcnQgeyR9IGZyb20gJy4uL2xpYnMnO1xyXG5pbXBvcnQgSW1hZ2VGYWN0b3J5IGZyb20gJy4vSW1hZ2VGYWN0b3J5JztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRodW1ibmFpbHMge1xyXG5cclxuICBjb25zdHJ1Y3Rvcihjb250ZXh0LCBjb250YWluZXIsIHRodW1ibmFpbHNDbGIsIHNpemUsIHByb3BzPXtrV3RvSDogMjEwLzI5N30pIHtcclxuICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xyXG4gICAgdGhpcy5wID0gcHJvcHM7XHJcbiAgICB0aGlzLnRodW1ibmFpbHNDbGIgPSB0aHVtYm5haWxzQ2xiO1xyXG4gICAgdGhpcy5zaXplID0gc2l6ZTtcclxuICAgIHRoaXMuY2FudmFzID0gJCgnPGNhbnZhcz4nKVswXTtcclxuICAgIHRoaXMuaW1hZ2VGYWN0b3J5ID0gbmV3IEltYWdlRmFjdG9yeSh7XHJcbiAgICAgIC4uLmNvbnRleHQsXHJcbiAgICAgIHJlbmRlckNhbnZhczogdGhpcy5jYW52YXMsXHJcbiAgICAgIHJlbmRlckNhbnZhc0N0eDogdGhpcy5jYW52YXMuZ2V0Q29udGV4dCgnMmQnKVxyXG4gICAgfSk7XHJcbiAgICB0aGlzLnRodW1ibmFpbHMgPSBbXTtcclxuICAgIGZvcihsZXQgaT0wOyBpPHNpemU7ICsraSkge1xyXG4gICAgICBjb25zdCBpbmZvID0gdGhpcy50aHVtYm5haWxzQ2xiKGkpO1xyXG4gICAgICB0aGlzLnRodW1ibmFpbHMucHVzaCh7XHJcbiAgICAgICAgLi4uaW5mbyxcclxuICAgICAgICBpbmRleDogaSxcclxuICAgICAgICBsb2FkZWQ6IGluZm8udHlwZT09PSd0aHVtYm5haWwtaW1hZ2UnLFxyXG4gICAgICAgIGhlYWRpbmc6IG51bGwsXHJcbiAgICAgICAgdGh1bWJuYWlsOiBudWxsLFxyXG4gICAgICAgIHRpdGxlOiBpbmZvLnRpdGxlIHx8IGlcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5iaW5kcyA9IHtcclxuICAgICAgdXBkYXRlOiB0aGlzLnVwZGF0ZS5iaW5kKHRoaXMpLFxyXG4gICAgICBuYXZpZ2F0ZTogKGUpPT4ge1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBpZih0aGlzLm9uTmF2aWdhdGUpIHtcclxuICAgICAgICAgIGxldCBub2RlID0gZS50YXJnZXQ7XHJcbiAgICAgICAgICB3aGlsZShub2RlICYmICFub2RlLmRhdGFUaHVtYm5haWwpIHtcclxuICAgICAgICAgICAgbm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHRoaXMub25OYXZpZ2F0ZShub2RlLmRhdGFUaHVtYm5haWwuaW5kZXgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgIHRoaXMuY29udGFpbmVyLm9uKCdzY3JvbGwnLCB0aGlzLmJpbmRzLnVwZGF0ZSk7XHJcbiAgfVxyXG5cclxuICBnZXRTaXplKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuc2l6ZTtcclxuICB9XHJcblxyXG4gIHNldEVuYWJsZShlbmFibGUpIHtcclxuICAgIHRoaXMuZW5hYmxlID0gZW5hYmxlO1xyXG4gICAgdGhpcy51cGRhdGUoKTtcclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICB0aGlzLmNvbnRhaW5lci5maW5kKCdhJykub2ZmKCdjbGljaycsIHRoaXMuYmluZHMubmF2aWdhdGUpO1xyXG4gICAgdGhpcy5jb250YWluZXIub2ZmKCdzY3JvbGwnLCB0aGlzLmJpbmRzLnVwZGF0ZSk7XHJcbiAgICB0aGlzLmNvbnRhaW5lci5odG1sKCcnKTtcclxuICAgIHRoaXMuY2FudmFzLmhlaWdodCA9IHRoaXMuY2FudmFzLndpZHRoID0gMDtcclxuICAgIGRlbGV0ZSB0aGlzLmNhbnZhcztcclxuICB9XHJcblxyXG4gIGxvYWQodGh1bWJuYWlsKSB7XHJcbiAgICB0aGlzLmxvYWRpbmcgPSB0cnVlO1xyXG4gICAgY29uc3Qgd3JhcHBlciA9IHRoaXMuaW1hZ2VGYWN0b3J5LmJ1aWxkKHRodW1ibmFpbCwgdGh1bWJuYWlsLm51bWJlcj09PXVuZGVmaW5lZD8gdGh1bWJuYWlsLmluZGV4OiB0aHVtYm5haWwubnVtYmVyLCB0aGlzLnAua1d0b0gqMzAwLCAzMDApO1xyXG4gICAgd3JhcHBlci5vbkNoYW5nZSA9IChjYW52YXMpPT4ge1xyXG4gICAgICB0aGlzLnNldEltYWdlKHRodW1ibmFpbCwgY2FudmFzLnRvRGF0YVVSTCgnaW1hZ2UvcG5nJykpO1xyXG4gICAgICB0aHVtYm5haWwubG9hZGVkID0gdHJ1ZTtcclxuICAgICAgd3JhcHBlci5kaXNwb3NlKCk7XHJcbiAgICAgIHRoaXMubG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpPT4gdGhpcy51cGRhdGUoKSk7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgZ2V0QWN0aXZlKCkge1xyXG4gICAgY29uc3QgZmlyc3QgPSB0aGlzLmNvbnRhaW5lci5zY3JvbGxUb3AoKSwgbGFzdCA9IGZpcnN0ICsgdGhpcy5jb250YWluZXIuaGVpZ2h0KCksIHJlcyA9IFtdO1xyXG4gICAgZm9yKGxldCB0aHVtYm5haWwgb2YgdGhpcy50aHVtYm5haWxzKSB7XHJcbiAgICAgIGlmKE1hdGgubWF4KHRodW1ibmFpbC5maXJzdCwgZmlyc3QpPE1hdGgubWluKHRodW1ibmFpbC5sYXN0LCBsYXN0KSkge1xyXG4gICAgICAgIHJlcy5wdXNoKHRodW1ibmFpbCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiByZXM7XHJcbiAgfVxyXG5cclxuICB1cGRhdGUoKSB7XHJcbiAgICBpZighdGhpcy5sb2FkaW5nICYmIHRoaXMuY2FudmFzICYmIHRoaXMuZW5hYmxlKSB7XHJcbiAgICAgIGlmKCF0aGlzLmJ1aWx0KSB7XHJcbiAgICAgICAgdGhpcy5yZW5kZXIoKTtcclxuICAgICAgfVxyXG4gICAgICBjb25zdCBhY3RpdmUgPSB0aGlzLmdldEFjdGl2ZSgpO1xyXG4gICAgICBmb3IobGV0IHRodW1ibmFpbCBvZiBhY3RpdmUpIHtcclxuICAgICAgICBpZighdGh1bWJuYWlsLmxvYWRlZCkge1xyXG4gICAgICAgICAgdGhpcy5sb2FkKHRodW1ibmFpbCk7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHNldEltYWdlKHRodW1ibmFpbCwgaW1nKSB7XHJcbiAgICB0aHVtYm5haWwuaW1nID0gaW1nO1xyXG4gICAgdGh1bWJuYWlsLnRodW1ibmFpbC5jc3MoJ2JhY2tncm91bmQtaW1hZ2UnLCBbJ3VybChcXCcnLCBpbWcsJ1xcJyknXS5qb2luKCcnKSk7XHJcbiAgICB0aHVtYm5haWwudGh1bWJuYWlsLnJlbW92ZUNsYXNzKCdsb2FkaW5nJyk7XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICBjb25zdCBlbGVtZW50cyA9IFsnPGRpdiBjbGFzcz1cInRodW1ibmFpbHNcIj4nXVxyXG4gICAgZm9yKGxldCBpPTA7IGk8dGhpcy5zaXplOyArK2kpIHtcclxuICAgICAgZWxlbWVudHMucHVzaChbJzxkaXYgY2xhc3M9XCJpdGVtXCI+PGEgaHJlZj1cIiNcIj48ZGl2IGNsYXNzPVwidGh1bWJuYWlsIGxvYWRpbmdcIj48L2Rpdj48L2E+PGRpdiBjbGFzcz1cImhlYWRpbmdcIj48YSBocmVmPVwiI1wiIHRpdGxlPVwiJywgaSsxLCdcIj4nLCBpKzEsICc8L2E+PC9kaXY+PC9kaXY+J10uam9pbignJykpO1xyXG4gICAgfVxyXG4gICAgZWxlbWVudHMucHVzaCgnPC9kaXY+Jyk7XHJcbiAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmQoZWxlbWVudHMuam9pbignJykpO1xyXG4gICAgY29uc3QgaXRlbXMgPSB0aGlzLmNvbnRhaW5lci5maW5kKCcuaXRlbScpLCBiYXNlID0gdGhpcy5jb250YWluZXIuZmluZCgnLnRodW1ibmFpbHMnKS5vZmZzZXQoKS50b3A7XHJcbiAgICBmb3IobGV0IGk9MDsgaTxpdGVtcy5sZW5ndGg7ICsraSkge1xyXG4gICAgICBjb25zdCBpdGVtID0gJChpdGVtc1tpXSk7XHJcbiAgICAgIHRoaXMudGh1bWJuYWlsc1tpXS5oZWFkaW5nID0gaXRlbS5maW5kKCcuaGVhZGluZycpO1xyXG4gICAgICB0aGlzLnRodW1ibmFpbHNbaV0udGh1bWJuYWlsID0gaXRlbS5maW5kKCcudGh1bWJuYWlsJyk7XHJcbiAgICAgIHRoaXMudGh1bWJuYWlsc1tpXS5maXJzdCA9IGl0ZW0ub2Zmc2V0KCkudG9wLWJhc2U7XHJcbiAgICAgIHRoaXMudGh1bWJuYWlsc1tpXS5sYXN0ID0gdGhpcy50aHVtYm5haWxzW2ldLmZpcnN0K2l0ZW0uaGVpZ2h0KCk7XHJcbiAgICAgIGlmKHRoaXMudGh1bWJuYWlsc1tpXS5sb2FkZWQpIHtcclxuICAgICAgICB0aGlzLnNldEltYWdlKHRoaXMudGh1bWJuYWlsc1tpXSwgdGhpcy50aHVtYm5haWxzW2ldLnNyYyk7XHJcbiAgICAgIH1cclxuICAgICAgY29uc3QgYXMgPSBpdGVtLmZpbmQoJ2EnKTtcclxuICAgICAgZm9yKGxldCBqPTA7IGo8YXMubGVuZ3RoOyArK2opIHtcclxuICAgICAgICBjb25zdCBhID0gYXNbal07XHJcbiAgICAgICAgYS5kYXRhVGh1bWJuYWlsID0gdGhpcy50aHVtYm5haWxzW2ldO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICB0aGlzLmNvbnRhaW5lci5maW5kKCdhJykub24oJ2NsaWNrJywgdGhpcy5iaW5kcy5uYXZpZ2F0ZSk7XHJcbiAgICB0aGlzLmJ1aWx0ID0gdHJ1ZTtcclxuICB9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL1RodW1ibmFpbHMuanMiLCJpbXBvcnQgeyR9IGZyb20gJy4uL2xpYnMnO1xyXG5pbXBvcnQgRXZlbnRDb252ZXJ0ZXIgZnJvbSAnLi9FdmVudENvbnZlcnRlcic7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUb3VjaENvbnZlcnRlciBleHRlbmRzIEV2ZW50Q29udmVydGVyIHtcclxuXHJcbiAgY29uc3RydWN0b3Iod25kLCBkb2MsIGVsZW1lbnQpIHtcclxuICAgIHN1cGVyKHduZCwgZG9jKTtcclxuXHJcbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xyXG4gICAgdGhpcy5iaW5kcyA9IHtcclxuICAgICAgY29udmVydDogdGhpcy5jb252ZXJ0LmJpbmQodGhpcylcclxuICAgIH07XHJcbiAgICAkKHRoaXMuZWxlbWVudCkub24oJ3RvdWNoc3RhcnQgdG91Y2htb3ZlJywgdGhpcy5iaW5kcy5jb252ZXJ0KTtcclxuICAgICQodGhpcy5kb2MpLm9uKCd0b3VjaGVuZCcsIHRoaXMuYmluZHMuY29udmVydCk7XHJcbiAgfVxyXG5cclxuICBkaXNwb3NlKCkge1xyXG4gICAgJCh0aGlzLmVsZW1lbnQpLm9mZigndG91Y2hzdGFydCB0b3VjaG1vdmUnLCB0aGlzLmJpbmRzLmNvbnZlcnQpO1xyXG4gICAgJCh0aGlzLmRvYykub2ZmKCd0b3VjaGVuZCcsIHRoaXMuYmluZHMuY29udmVydCk7XHJcbiAgfVxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL1RvdWNoRXZlbnRDb252ZXJ0ZXIuanMiLCJpbXBvcnQgeyQsIHRyfSBmcm9tICcuLi9saWJzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFZpZXcge1xyXG5cclxuICBzdGF0aWMgbGlua1N0YXRlSGFuZGxlcnMgPSB7XHJcbiAgICB2aXNpYmxlOiAoY3RybCwgdmFsdWUpPT4gVmlldy5jbGFzc1Byb3BlcnR5KGN0cmwsICdoaWRkZW4nLCAhdmFsdWUpLFxyXG4gICAgYWN0aXZlOiAoY3RybCwgdmFsdWUpPT4gVmlldy5jbGFzc1Byb3BlcnR5KGN0cmwsICdhY3RpdmUnLCB2YWx1ZSksXHJcbiAgICBlbmFibGU6IChjdHJsLCB2YWx1ZSk9PiBWaWV3LmNsYXNzUHJvcGVydHkoY3RybCwgJ2Rpc2FibGVkJywgIXZhbHVlKVxyXG4gIH07XHJcblxyXG4gIHN0YXRpYyB3aWRnZXRTdGF0ZUhhbmRsZXJzID0ge1xyXG4gICAgdmlzaWJsZTogKGN0cmwsIHZhbHVlKT0+IFZpZXcuY2xhc3NQcm9wZXJ0eShjdHJsLCAnaGlkZGVuJywgIXZhbHVlKSxcclxuICAgIGFjdGl2ZTogKGN0cmwsIHZhbHVlKT0+IFZpZXcuY2xhc3NQcm9wZXJ0eShjdHJsLCAnYWN0aXZlJywgdmFsdWUpLFxyXG4gICAgZW5hYmxlOiAoY3RybCwgdmFsdWUpPT4gVmlldy5jbGFzc1Byb3BlcnR5KGN0cmwsICdkaXNhYmxlZCcsICF2YWx1ZSlcclxuICB9O1xyXG5cclxuICBzdGF0aWMgaW5wdXRTdGF0ZUhhbmRsZXJzID0ge1xyXG4gICAgdmlzaWJsZTogKGN0cmwsIHZhbHVlKT0+IFZpZXcuY2xhc3NQcm9wZXJ0eShjdHJsLCAnaGlkZGVuJywgIXZhbHVlKSxcclxuICAgIHZhbHVlOiAoY3RybCwgdmFsdWUpPT4gY3RybFswXS52YWx1ZSA9IHZhbHVlLFxyXG4gICAgZW5hYmxlOiAoY3RybCwgdmFsdWUpPT4gVmlldy5hdHRyaWJ1dGVQcm9wZXJ0eShjdHJsLCAnZGlzYWJsZWQnLCAhdmFsdWUpXHJcbiAgfTtcclxuXHJcbiAgc3RhdGljIHRleHRTdGF0ZUhhbmRsZXJzID0ge1xyXG4gICAgdmlzaWJsZTogKGN0cmwsIHZhbHVlKT0+IFZpZXcuY2xhc3NQcm9wZXJ0eShjdHJsLCAnaGlkZGVuJywgIXZhbHVlKSxcclxuICAgIHZhbHVlOiAoY3RybCwgdmFsdWUpPT4gY3RybC50ZXh0KHZhbHVlKVxyXG4gIH07XHJcblxyXG4gIHN0YXRpYyBjbGFzc1Byb3BlcnR5KGN0cmwsIGNsYXNzTmFtZSwgdmFsdWUpIHtcclxuICAgIGlmKHZhbHVlKSB7XHJcbiAgICAgIGN0cmwuYWRkQ2xhc3MoY2xhc3NOYW1lKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBjdHJsLnJlbW92ZUNsYXNzKGNsYXNzTmFtZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgYXR0cmlidXRlUHJvcGVydHkoY3RybCwgYXR0cmlidXRlTmFtZSwgdmFsdWUpIHtcclxuICAgIGlmKHZhbHVlKSB7XHJcbiAgICAgIGN0cmwuYXR0cihhdHRyaWJ1dGVOYW1lLCB2YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgY3RybC5yZW1vdmVBdHRyKGF0dHJpYnV0ZU5hbWUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc3RhdGljIGNhbGxIYW5kbGVycyhoYW5kbGVycywgaWQsIGUsIGRhdGEpIHtcclxuICAgIGZvcihsZXQgaGFuZGxlciBvZiBoYW5kbGVycykge1xyXG4gICAgICBpZihoYW5kbGVyW2lkXSkge1xyXG4gICAgICAgIGhhbmRsZXJbaWRdKGUsIGRhdGEpO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2UgaWYoaGFuZGxlci5oYW5kbGVEZWZhdWx0KSB7XHJcbiAgICAgICAgaGFuZGxlci5oYW5kbGVEZWZhdWx0KGlkLCBlLCBkYXRhKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc3RhdGljIGhhbmRsZUV2ZW50KGlkLCBnZXRIYW5kbGVycywgZSwgZGF0YSkge1xyXG4gICAgVmlldy5jYWxsSGFuZGxlcnMoZ2V0SGFuZGxlcnMoaWQpLCBpZCwgZSwgZGF0YSk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgaGFuZGxlTGlua0V2ZW50KGUpIHtcclxuICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgIGlmKCF0aGlzLmN0cmwuaGFzQ2xhc3MoJ2Rpc2FibGVkJykpIHtcclxuICAgICAgVmlldy5oYW5kbGVFdmVudCh0aGlzLmlkLCB0aGlzLmdldEhhbmRsZXJzLCBlKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHN0YXRpYyBoYW5kbGVJbnB1dEV2ZW50KGUpIHtcclxuICAgIFZpZXcuaGFuZGxlRXZlbnQodGhpcy5pZCwgdGhpcy5nZXRIYW5kbGVycywgZSwgZS50YXJnZXQudmFsdWUpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGhhbmRsZUZvcm1FdmVudChlKSB7XHJcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICBWaWV3LmhhbmRsZUV2ZW50KHRoaXMuaWQsIHRoaXMuZ2V0SGFuZGxlcnMsIGUpO1xyXG4gIH1cclxuXHJcbiAgLy8gdmlydHVhbCBmdW5jdGlvbnMge1xyXG4gIGdldExpbmtzKCkge1xyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG5cclxuICBnZXRXaWRnZXRzKCkge1xyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG5cclxuICBnZXRJbnB1dHMoKSB7XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcblxyXG4gIGdldFRleHRzKCkge1xyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG5cclxuICBnZXRUZW1wbGF0ZSgpIHtcclxuICAgIHJldHVybiB7fTtcclxuICB9XHJcblxyXG4gIGdldEhhbmRsZXJzKGlkKSB7XHJcbiAgICByZXR1cm4gdGhpcy5oYW5kbGVycztcclxuICB9XHJcbiAgLy8gfVxyXG5cclxuICBjYWxsTGF0ZXIoaGFuZGxlcnMsIGlkLCBlLCBkYXRhLCBtcykge1xyXG4gICAgdGhpcy5wZW5kaW5nc1tpZF0gPSB7XHJcbiAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS5nZXRUaW1lKClcclxuICAgIH07XHJcbiAgICBzZXRUaW1lb3V0KCgpPT4ge1xyXG4gICAgICBjb25zdCB0aW1lc3RhbXAgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSwgcGVuZGluZyA9IHRoaXMucGVuZGluZ3NbaWRdO1xyXG4gICAgICBpZihwZW5kaW5nICYmIHRpbWVzdGFtcC1wZW5kaW5nLnRpbWVzdGFtcD49bXMpIHtcclxuICAgICAgICBWaWV3LmNhbGxIYW5kbGVycyhoYW5kbGVycywgaWQsIGUsIGRhdGEpO1xyXG4gICAgICAgIGRlbGV0ZSB0aGlzLnBlbmRpbmdzW2lkXTtcclxuICAgICAgfVxyXG4gICAgfSwgbXMpO1xyXG4gIH1cclxuXHJcbiAgLy8gbG9hZEZpbGVzKHVybHMsIHJlYWR5LCBmYWlsdXJlKSB7XHJcbiAgLy8gICBsZXQgZG9uZSA9IFByb21pc2UucmVzb2x2ZSgpO1xyXG4gIC8vICAgZm9yKGxldCB1cmwgb2YgdXJscykge1xyXG4gIC8vICAgICBkb25lID0gZG9uZS50aGVuKCgpPT4ge1xyXG4gIC8vICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KT0+IHtcclxuICAvLyAgICAgICAgICQuZ2V0KHVybCwgKHJlcyk9PiB7XHJcbiAgLy8gICAgICAgICAgIHJlYWR5KHJlcywgdXJsKTtcclxuICAvLyAgICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gIC8vICAgICAgICAgfSkuZmFpbCgocmVzKT0+IHtcclxuICAvLyAgICAgICAgICAgaWYoZmFpbHVyZSAmJiBmYWlsdXJlKHJlcywgdXJsKSkge1xyXG4gIC8vICAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAvLyAgICAgICAgICAgfVxyXG4gIC8vICAgICAgICAgICBlbHNlIHtcclxuICAvLyAgICAgICAgICAgICByZWplY3QocmVzKTtcclxuICAvLyAgICAgICAgICAgfVxyXG4gIC8vICAgICAgICAgfSk7XHJcbiAgLy8gICAgICAgfSk7XHJcbiAgLy8gICAgIH0pO1xyXG4gIC8vICAgfVxyXG4gIC8vICAgcmV0dXJuIGRvbmU7XHJcbiAgLy8gfVxyXG5cclxuICBsb2FkRmlsZXModXJscywgZmlsZXMpIHtcclxuICAgIGNvbnN0IHRhc2tzID0gW107XHJcbiAgICBmb3IobGV0IG5hbWUgb2YgT2JqZWN0LmtleXModXJscykpIHtcclxuICAgICAgZmlsZXNbbmFtZV0gPSBbXTtcclxuICAgICAgZm9yKGxldCB1cmwgb2YgdXJsc1tuYW1lXSkge1xyXG4gICAgICAgIHRhc2tzLnB1c2goXHJcbiAgICAgICAgICBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KT0+IHtcclxuICAgICAgICAgICAgJC5nZXQodXJsLCAoZGF0YSk9PiB7XHJcbiAgICAgICAgICAgICAgZmlsZXNbbmFtZV0ucHVzaCh7dXJsLCBkYXRhfSk7XHJcbiAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICB9KS5mYWlsKChyZXMpPT4ge1xyXG4gICAgICAgICAgICAgIHJlamVjdChyZXMpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIFByb21pc2UuYWxsKHRhc2tzKTtcclxuICB9XHJcblxyXG4gIHVybFJlc29sdmVyKGJhc2VVcmwsIHVybCkge1xyXG4gICAgdXJsID0gdXJsLnJlcGxhY2UoL1xcXFwvZywgJy8nKTtcclxuICAgIGlmKHVybC5jaGFyQXQoMCkhPT0nLycgJiYgdXJsLnRvTG93ZXJDYXNlKCkuc2VhcmNoKCdkYXRhOicpIT09MCkge1xyXG4gICAgICBiYXNlVXJsID0gYmFzZVVybC5yZXBsYWNlKC9cXFxcL2csICcvJyk7XHJcbiAgICAgIGNvbnN0IHAgPSBiYXNlVXJsLmxhc3RJbmRleE9mKCcvJyk7XHJcbiAgICAgIHVybCA9ICh+cD8gYmFzZVVybC5zdWJzdHIoMCwgcCsxKTogJycpK3VybDtcclxuXHJcbiAgICAgIGNvbnN0IHBhcnRzID0gdXJsLnNwbGl0KCcvJyk7XHJcbiAgICAgIHVybCA9IFtdO1xyXG4gICAgICBmb3IobGV0IHBhcnQgb2YgcGFydHMpIHtcclxuICAgICAgICBpZihwYXJ0PT09Jy4nKSB7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYocGFydD09PScuLicpIHtcclxuICAgICAgICAgIGlmKHVybC5sZW5ndGggJiYgISh1cmwubGVuZ3RoPT09MSAmJiB1cmxbMF09PT0nJykpIHtcclxuICAgICAgICAgICAgdXJsLnBvcCgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgIHVybC5wdXNoKHBhcnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICB1cmwgPSB1cmwuam9pbignLycpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB1cmw7XHJcbiAgfVxyXG5cclxuICBvYmpUb0F0dHJzU3RyKG8pIHtcclxuICAgIGNvbnN0IHJlcyA9IFtdO1xyXG4gICAgZm9yKGxldCBuYW1lIG9mIE9iamVjdC5rZXlzKG8pKSB7XHJcbiAgICAgIHJlcy5wdXNoKFtuYW1lLCAnPVwiJywgb1tuYW1lXSwgJ1wiJ10uam9pbignJykpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlcy5qb2luKCcgJyk7XHJcbiAgfVxyXG5cclxuICBjaGVja0lmcmFtZVNpemUoKSB7XHJcbiAgICBpZih0aGlzLmZyYW1lKSB7XHJcbiAgICAgIGlmKE1hdGguYWJzKHRoaXMuZnJhbWUud2lkdGgtdGhpcy5wYXJlbnRDb250YWluZXIud2lkdGgoKSk+MSB8fCBNYXRoLmFicyh0aGlzLmZyYW1lLmhlaWdodC10aGlzLnBhcmVudENvbnRhaW5lci5oZWlnaHQoKSk+MSkge1xyXG4gICAgICAgIHRoaXMub25SZXNpemUoKTtcclxuICAgICAgfVxyXG4gICAgICBzZXRUaW1lb3V0KHRoaXMuY2hlY2tJZnJhbWVTaXplLmJpbmQodGhpcyksIDI1MCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBvblJlc2l6ZSgpIHtcclxuICAgIHRoaXMuZnJhbWUud2lkdGggPSB0aGlzLnBhcmVudENvbnRhaW5lci53aWR0aCgpO1xyXG4gICAgdGhpcy5mcmFtZS5oZWlnaHQgPSB0aGlzLnBhcmVudENvbnRhaW5lci5oZWlnaHQoKTtcclxuICB9XHJcblxyXG4gIHRyYW5zbGF0ZShodG1sKSB7XHJcbiAgICByZXR1cm4gaHRtbC5yZXBsYWNlKC88XFwkdHI+KC4qKTxcXC9cXCR0cj4vZ2ksIChzMCxzMSk9PiB0cihzMSkpO1xyXG4gIH1cclxuXHJcbiAgZmlyZUxpbmtzT25Mb2FkRXZlbnQoKSB7XHJcbiAgICBpZih0aGlzLnRlbXBsYXRlT2JqZWN0ICYmIHRoaXMudGVtcGxhdGVPYmplY3QubGlua0xvYWRlZCkge1xyXG4gICAgICBsZXQgbG9hZGVkID0gdHJ1ZTtcclxuICAgICAgZm9yKGxldCBqTGluayBvZiB0aGlzLmpMaW5rcykge1xyXG4gICAgICAgIGNvbnN0IGxpbmsgPSBqTGlua1swXTtcclxuICAgICAgICBjb25zdCBpbWcgPSBuZXcgSW1hZ2UoKTtcclxuICAgICAgICBpbWcub25lcnJvciA9ICgpPT4gdGhpcy50ZW1wbGF0ZU9iamVjdC5saW5rTG9hZGVkKGxpbmspO1xyXG4gICAgICAgIGltZy5zcmMgPSBsaW5rLmhyZWY7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNvbnN0cnVjdG9yKHBhcmVudENvbnRhaW5lciwgb25Mb2FkLCB0ZW1wbGF0ZT17fSkge1xyXG4gICAgdGhpcy5wZW5kaW5ncyA9IHt9O1xyXG4gICAgdGhpcy5iaW5kcyA9IHtcclxuICAgICAgb25SZXNpemU6IHRoaXMub25SZXNpemUuYmluZCh0aGlzKVxyXG4gICAgfTtcclxuICAgIHRoaXMucGFyZW50Q29udGFpbmVyID0gJChwYXJlbnRDb250YWluZXIpO1xyXG4gICAgdGhpcy5pc0lPUyA9IC9pUGFkfGlQaG9uZXxpUG9kLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpICYmICF3aW5kb3cuTVNTdHJlYW07XHJcbiAgICB0aGlzLnBhcmVudENvbnRhaW5lci5odG1sKCc8aWZyYW1lIHN0eWxlPVwiYm9yZGVyOiAwOycrKHRoaXMuaXNJT1M/ICcnOiAnIHdpZHRoOiAxMDAlOyBoZWlnaHQ6IDEwMCUnKSsnXCIgc2Nyb2xsaW5nPVwibm9cIj48L2lmcmFtZT4nKTtcclxuXHJcbiAgICB0aGlzLmZyYW1lID0gdGhpcy5wYXJlbnRDb250YWluZXIuZmluZCgnaWZyYW1lJylbMF07XHJcbiAgICBpZih0aGlzLmZyYW1lLmNvbnRlbnRXaW5kb3cuc3RvcCkge1xyXG4gICAgICB0aGlzLmZyYW1lLmNvbnRlbnRXaW5kb3cuc3RvcCgpO1xyXG4gICAgfVxyXG4gICAgaWYodGhpcy5pc0lPUykge1xyXG4gICAgICAkKHRoaXMucGFyZW50Q29udGFpbmVyWzBdLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcpLm9uKCdyZXNpemUnLCB0aGlzLmJpbmRzLm9uUmVzaXplKTtcclxuICAgICAgdGhpcy5vblJlc2l6ZSgpO1xyXG4gICAgICBzZXRUaW1lb3V0KHRoaXMuY2hlY2tJZnJhbWVTaXplLmJpbmQodGhpcyksIDI1MCk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5jb250YWluZXIgPSAkKHRoaXMuZnJhbWUuY29udGVudERvY3VtZW50LmJvZHkpO1xyXG4gICAgdGhpcy5jb250YWluZXIuY3NzKCdtYXJnaW4nLCAnMCcpO1xyXG4gICAgdGhpcy5oZWFkID0gJCh0aGlzLmZyYW1lLmNvbnRlbnREb2N1bWVudC5oZWFkKTtcclxuICAgIHRoaXMub25Mb2FkID0gb25Mb2FkO1xyXG4gICAgdGhpcy5oYW5kbGVycyA9IFtdO1xyXG5cclxuICAgIGNvbnN0IHNjcmlwdCA9IHRlbXBsYXRlLmh0bWw/IHRlbXBsYXRlLnNjcmlwdDogdGhpcy5nZXRUZW1wbGF0ZSgpLnNjcmlwdDtcclxuICAgIGxldCB1cmxzLCBmaWxlcywgbGlua3MsIHRlbXBsYXRlTmFtZTtcclxuICAgIGlmKHR5cGVvZiB0ZW1wbGF0ZT09PSdmdW5jdGlvbicpIHtcclxuICAgICAgdXJscyA9IHt9O1xyXG4gICAgICBmaWxlcyA9IHRlbXBsYXRlKCk7XHJcbiAgICAgIGxpbmtzID0gW107XHJcbiAgICAgIHRlbXBsYXRlTmFtZSA9IGZpbGVzLm5hbWU7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgbGlua3MgPSB0ZW1wbGF0ZS5saW5rcyB8fCB0aGlzLmdldFRlbXBsYXRlKCkubGlua3M7XHJcbiAgICAgIHVybHMgPSB7XHJcbiAgICAgICAgc3R5bGVzOiB0ZW1wbGF0ZS5zdHlsZXMgfHwgdGhpcy5nZXRUZW1wbGF0ZSgpLnN0eWxlcyxcclxuICAgICAgICBodG1sOiBbdGVtcGxhdGUuaHRtbCB8fCB0aGlzLmdldFRlbXBsYXRlKCkuaHRtbF0sXHJcbiAgICAgICAgc2NyaXB0OiBzY3JpcHQ/IFtzY3JpcHRdOiBbXVxyXG4gICAgICB9O1xyXG4gICAgICB0ZW1wbGF0ZU5hbWUgPSB0ZW1wbGF0ZS5uYW1lO1xyXG4gICAgICBmaWxlcyA9IHt9O1xyXG4gICAgfVxyXG4gICAgaWYodGVtcGxhdGVOYW1lKSB7XHJcbiAgICAgIHRoaXMuY29udGFpbmVyLmFkZENsYXNzKHRlbXBsYXRlTmFtZSk7XHJcbiAgICB9XHJcbiAgICB0aGlzLmxvYWRGaWxlcyh1cmxzLCBmaWxlcykudGhlbigoKT0+IHtcclxuICAgICAgZm9yKGxldCBzdHlsZSBvZiBmaWxlcy5zdHlsZXMpIHtcclxuICAgICAgICBsZXQgdGV4dENzcyA9IHN0eWxlLmRhdGEsIHVybCA9IHN0eWxlLnVybDtcclxuICAgICAgICB0ZXh0Q3NzID0gdGV4dENzcy5yZXBsYWNlKC91cmxcXChbJ1wiXSguKj8pW1wiJ11cXCkvZywgKHIsIHIxKT0+IHtcclxuICAgICAgICAgIHJldHVybiBbJ3VybChcXCcnLCB0aGlzLnVybFJlc29sdmVyKHVybCwgcjEpLCAnXFwnKSddLmpvaW4oJycpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgICQoYDxzdHlsZSB0eXBlPVwidGV4dC9jc3NcIj4ke3RleHRDc3N9PC9zdHlsZT5gKS5hcHBlbmRUbyh0aGlzLmhlYWQpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLmNvbnRhaW5lci5odG1sKHRoaXMudHJhbnNsYXRlKGZpbGVzLmh0bWxbMF0uZGF0YSkpO1xyXG5cclxuICAgICAgdGhpcy5qTGlua3MgPSBbXTtcclxuICAgICAgZm9yKGxldCBsaW5rIG9mIGxpbmtzKSB7XHJcbiAgICAgICAgdGhpcy5qTGlua3MucHVzaCgkKFsnPGxpbmsgJywgdGhpcy5vYmpUb0F0dHJzU3RyKGxpbmspLCAnPiddLmpvaW4oJycpKS5hcHBlbmRUbyh0aGlzLmhlYWQpKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYoZmlsZXMuc2NyaXB0WzBdKSB7XHJcbiAgICAgICAgY29uc3QgaW5pdCA9IGV2YWwoZmlsZXMuc2NyaXB0WzBdLmRhdGEpO1xyXG4gICAgICAgIHRoaXMudGVtcGxhdGVPYmplY3QgPSBpbml0KHRoaXMuY29udGFpbmVyKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICB0aGlzLnRlbXBsYXRlT2JqZWN0ID0ge307XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMubGlua0NvbnRyb2xzID0ge307XHJcbiAgICAgIGZvcihsZXQgaWQgb2YgdGhpcy5nZXRMaW5rcygpKSB7XHJcbiAgICAgICAgdGhpcy5saW5rQ29udHJvbHNbaWRdID0gdGhpcy5jb250YWluZXIuZmluZCgnLicraWQpO1xyXG4gICAgICAgIHRoaXMuYmluZHNbaWRdID0gVmlldy5oYW5kbGVMaW5rRXZlbnQuYmluZCh7Z2V0SGFuZGxlcnM6IHRoaXMuZ2V0SGFuZGxlcnMuYmluZCh0aGlzKSwgaWQsIGN0cmw6IHRoaXMubGlua0NvbnRyb2xzW2lkXX0pO1xyXG4gICAgICAgIHRoaXMubGlua0NvbnRyb2xzW2lkXS5vbignY2xpY2snLCB0aGlzLmJpbmRzW2lkXSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMud2lkZ2V0Q29udHJvbHMgPSB7fTtcclxuICAgICAgZm9yKGxldCBpZCBvZiB0aGlzLmdldFdpZGdldHMoKSkge1xyXG4gICAgICAgIHRoaXMud2lkZ2V0Q29udHJvbHNbaWRdID0gdGhpcy5jb250YWluZXIuZmluZCgnLicraWQpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLmlucHV0Q29udHJvbHMgPSB7fTtcclxuICAgICAgZm9yKGxldCBpZCBvZiB0aGlzLmdldElucHV0cygpKSB7XHJcbiAgICAgICAgdGhpcy5pbnB1dENvbnRyb2xzW2lkXSA9IHRoaXMuY29udGFpbmVyLmZpbmQoJy4nK2lkKTtcclxuICAgICAgICB0aGlzLmJpbmRzW2lkXSA9IFZpZXcuaGFuZGxlSW5wdXRFdmVudC5iaW5kKHtnZXRIYW5kbGVyczogdGhpcy5nZXRIYW5kbGVycy5iaW5kKHRoaXMpLCBpZCwgY3RybDogdGhpcy5pbnB1dENvbnRyb2xzW2lkXX0pO1xyXG4gICAgICAgIHRoaXMuaW5wdXRDb250cm9sc1tpZF0ub24oJ2tleXVwJywgdGhpcy5iaW5kc1tpZF0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLmZvcm1Db250cm9scyA9IHt9O1xyXG4gICAgICBmb3IobGV0IGlkIG9mIHRoaXMuZ2V0Rm9ybXMoKSkge1xyXG4gICAgICAgIHRoaXMuZm9ybUNvbnRyb2xzW2lkXSA9IHRoaXMuY29udGFpbmVyLmZpbmQoJy4nK2lkKTtcclxuICAgICAgICB0aGlzLmJpbmRzW2lkXSA9IFZpZXcuaGFuZGxlRm9ybUV2ZW50LmJpbmQoe2dldEhhbmRsZXJzOiB0aGlzLmdldEhhbmRsZXJzLmJpbmQodGhpcyksIGlkLCBjdHJsOiB0aGlzLmZvcm1Db250cm9sc1tpZF19KTtcclxuICAgICAgICB0aGlzLmZvcm1Db250cm9sc1tpZF0ub24oJ3N1Ym1pdCcsIHRoaXMuYmluZHNbaWRdKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy50ZXh0Q29udHJvbHMgPSB7fTtcclxuICAgICAgZm9yKGxldCBpZCBvZiB0aGlzLmdldFRleHRzKCkpIHtcclxuICAgICAgICB0aGlzLnRleHRDb250cm9sc1tpZF0gPSB0aGlzLmNvbnRhaW5lci5maW5kKCcuJytpZCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMuc3RhdGVTZXR0ZXJzID0gW1xyXG4gICAgICAgIHtcclxuICAgICAgICAgIG1hcDogdGhpcy5saW5rQ29udHJvbHMsXHJcbiAgICAgICAgICBzZXR0ZXI6IHRoaXMuc2V0TGlua0NvbnRyb2xTdGF0ZS5iaW5kKHRoaXMpXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICBtYXA6IHRoaXMud2lkZ2V0Q29udHJvbHMsXHJcbiAgICAgICAgICBzZXR0ZXI6IHRoaXMuc2V0V2lkZ2V0Q29udHJvbFN0YXRlLmJpbmQodGhpcylcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIG1hcDogdGhpcy5pbnB1dENvbnRyb2xzLFxyXG4gICAgICAgICAgc2V0dGVyOiB0aGlzLnNldElucHV0Q29udHJvbFN0YXRlLmJpbmQodGhpcylcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIG1hcDogdGhpcy50ZXh0Q29udHJvbHMsXHJcbiAgICAgICAgICBzZXR0ZXI6IHRoaXMuc2V0VGV4dENvbnRyb2xTdGF0ZS5iaW5kKHRoaXMpXHJcbiAgICAgICAgfVxyXG4gICAgICBdO1xyXG5cclxuICAgICAgdGhpcy5pbml0VmlldygpO1xyXG5cclxuICAgICAgaWYodGhpcy5vbkxvYWQpIHtcclxuICAgICAgICB0aGlzLm9uTG9hZCgpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLmZpcmVMaW5rc09uTG9hZEV2ZW50KCk7XHJcbiAgICB9KS5cclxuICAgIGNhdGNoKChyZXMpPT4gY29uc29sZS5lcnJvcihyZXMpKTtcclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICBkZWxldGUgdGhpcy50ZXh0Q29udHJvbHM7XHJcbiAgICBmb3IobGV0IGlkIG9mIHRoaXMuZ2V0TGlua3MoKSkge1xyXG4gICAgICB0aGlzLmxpbmtDb250cm9sc1tpZF0ub2ZmKCdjbGljaycsIHRoaXMuYmluZHNbaWRdKTtcclxuICAgIH1cclxuICAgIGRlbGV0ZSB0aGlzLmxpbmtDb250cm9scztcclxuICAgIGRlbGV0ZSB0aGlzLndpZGdldENvbnRyb2xzO1xyXG4gICAgZm9yKGxldCBpZCBvZiB0aGlzLmdldElucHV0cygpKSB7XHJcbiAgICAgIHRoaXMuaW5wdXRDb250cm9sc1tpZF0ub2ZmKCdrZXl1cCcsIHRoaXMuYmluZHNbaWRdKTtcclxuICAgIH1cclxuICAgIGRlbGV0ZSB0aGlzLmlucHV0Q29udHJvbHM7XHJcbiAgICBmb3IobGV0IGlkIG9mIHRoaXMuZ2V0Rm9ybXMoKSkge1xyXG4gICAgICB0aGlzLmZvcm1Db250cm9sc1tpZF0ub2ZmKCdzdWJtaXQnLCB0aGlzLmJpbmRzW2lkXSk7XHJcbiAgICB9XHJcbiAgICBkZWxldGUgdGhpcy5mb3JtQ29udHJvbHM7XHJcblxyXG4gICAgIXRoaXMudGVtcGxhdGVPYmplY3QuZGlzcG9zZSB8fCB0aGlzLnRlbXBsYXRlT2JqZWN0LmRpc3Bvc2UoKTtcclxuICAgIGRlbGV0ZSB0aGlzLnRlbXBsYXRlT2JqZWN0O1xyXG5cclxuICAgIGlmKHRoaXMuaXNJT1MpIHtcclxuICAgICAgJCh0aGlzLnBhcmVudENvbnRhaW5lclswXS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3KS5vZmYoJ3Jlc2l6ZScsIHRoaXMuYmluZHMub25SZXNpemUpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5wYXJlbnRDb250YWluZXIuaHRtbCgnJyk7XHJcbiAgICBkZWxldGUgdGhpcy5mcmFtZTtcclxuICB9XHJcblxyXG4gIGdldENvbnRhaW5lcigpIHtcclxuICAgIHJldHVybiB0aGlzLmNvbnRhaW5lclswXTtcclxuICB9XHJcblxyXG4gIGdldFBhcmVudENvbnRhaW5lcigpIHtcclxuICAgIHJldHVybiB0aGlzLnBhcmVudENvbnRhaW5lclswXTtcclxuICB9XHJcblxyXG4gIGFkZEhhbmRsZXIoaGFuZGxlcikge1xyXG4gICAgdGhpcy5oYW5kbGVycy5wdXNoKGhhbmRsZXIpO1xyXG4gIH1cclxuXHJcbiAgaW5pdFZpZXcoKSB7XHJcblxyXG4gIH1cclxuXHJcbiAgc3RhdGljIHNldENvbnRyb2xTdGF0ZShjdHJsLCBkZWZhdWx0cywgc3RhdGUsIHN0YXRlSGFuZGxlcnMpIHtcclxuICAgIGlmKGN0cmwgJiYgY3RybFswXSkge1xyXG4gICAgICBjb25zdCBzdCA9IHtcclxuICAgICAgICAuLi5kZWZhdWx0cyxcclxuICAgICAgICAuLi5zdGF0ZVxyXG4gICAgICB9O1xyXG4gICAgICBmb3IobGV0IG5hbWUgaW4gc3QpIHtcclxuICAgICAgICBpZihzdC5oYXNPd25Qcm9wZXJ0eShuYW1lKSAmJiBzdGF0ZUhhbmRsZXJzW25hbWVdKSB7XHJcbiAgICAgICAgICBzdGF0ZUhhbmRsZXJzW25hbWVdKGN0cmwsIHN0W25hbWVdKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHNldExpbmtDb250cm9sU3RhdGUoaWQsIHN0YXRlKSB7XHJcbiAgICBWaWV3LnNldENvbnRyb2xTdGF0ZShcclxuICAgICAgdGhpcy5saW5rQ29udHJvbHNbaWRdLFxyXG4gICAgICB7XHJcbiAgICAgICAgdmlzaWJsZTogdHJ1ZSxcclxuICAgICAgICBhY3RpdmU6IGZhbHNlLFxyXG4gICAgICAgIGVuYWJsZTogdHJ1ZVxyXG4gICAgICB9LFxyXG4gICAgICBzdGF0ZSxcclxuICAgICAgVmlldy5saW5rU3RhdGVIYW5kbGVyc1xyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHNldFdpZGdldENvbnRyb2xTdGF0ZShpZCwgc3RhdGUpIHtcclxuICAgIFZpZXcuc2V0Q29udHJvbFN0YXRlKFxyXG4gICAgICB0aGlzLndpZGdldENvbnRyb2xzW2lkXSxcclxuICAgICAge1xyXG4gICAgICAgIHZpc2libGU6IHRydWUsXHJcbiAgICAgICAgYWN0aXZlOiBmYWxzZSxcclxuICAgICAgICBlbmFibGU6IHRydWVcclxuICAgICAgfSxcclxuICAgICAgc3RhdGUsXHJcbiAgICAgIFZpZXcud2lkZ2V0U3RhdGVIYW5kbGVyc1xyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHNldElucHV0Q29udHJvbFN0YXRlKGlkLCBzdGF0ZSkge1xyXG4gICAgVmlldy5zZXRDb250cm9sU3RhdGUoXHJcbiAgICAgIHRoaXMuaW5wdXRDb250cm9sc1tpZF0sXHJcbiAgICAgIHtcclxuICAgICAgICB2aXNpYmxlOiB0cnVlLFxyXG4gICAgICAgIGVuYWJsZTogdHJ1ZSxcclxuICAgICAgICB2YWx1ZTogJydcclxuICAgICAgfSxcclxuICAgICAgc3RhdGUsXHJcbiAgICAgIFZpZXcuaW5wdXRTdGF0ZUhhbmRsZXJzXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgc2V0VGV4dENvbnRyb2xTdGF0ZShpZCwgc3RhdGUpIHtcclxuICAgIFZpZXcuc2V0Q29udHJvbFN0YXRlKFxyXG4gICAgICB0aGlzLnRleHRDb250cm9sc1tpZF0sXHJcbiAgICAgIHtcclxuICAgICAgICB2aXNpYmxlOiB0cnVlLFxyXG4gICAgICAgIHZhbHVlOiAnJ1xyXG4gICAgICB9LFxyXG4gICAgICBzdGF0ZSxcclxuICAgICAgVmlldy50ZXh0U3RhdGVIYW5kbGVyc1xyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIG9uSXRlbVN0YXRlQ2hhbmdlZCgpIHtcclxuXHJcbiAgfVxyXG5cclxuICBzZXRTdGF0ZShpZCwgc3RhdGUpIHtcclxuICAgIGZvcihsZXQgaXRlbSBvZiB0aGlzLnN0YXRlU2V0dGVycykge1xyXG4gICAgICBpZihpdGVtLm1hcFtpZF0pIHtcclxuICAgICAgICBpdGVtLnNldHRlcihpZCwgc3RhdGUpO1xyXG4gICAgICAgIHRoaXMub25JdGVtU3RhdGVDaGFuZ2VkKGlkLCBzdGF0ZSk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL1ZpZXcuanMiLCJpbXBvcnQgeyQsIFRIUkVFfSBmcm9tICcuLi9saWJzJztcclxuaW1wb3J0IE9yYml0IGZyb20gJy4vT3JiaXQnO1xyXG5pbXBvcnQgVGhyZWVNb3VzZUV2ZW50Q29udmVydGVyIGZyb20gJy4vVGhyZWVNb3VzZUV2ZW50Q29udmVydGVyJztcclxuaW1wb3J0IFRocmVlVG91Y2hFdmVudENvbnZlcnRlciBmcm9tICcuL1RocmVlVG91Y2hFdmVudENvbnZlcnRlcic7XHJcbmltcG9ydCBEcmFnIGZyb20gJy4vRHJhZyc7XHJcbmltcG9ydCBDU1MzRFJlbmRlcmVyIGZyb20gJy4vQ1NTM0RSZW5kZXJlcic7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBWaXN1YWxXb3JsZCBleHRlbmRzIFRIUkVFLkV2ZW50RGlzcGF0Y2hlciB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHduZCwgZG9jLCBjb250YWluZXIsIHVzZUhlbHBlcnM9ZmFsc2UpIHtcclxuICAgIHN1cGVyKCk7XHJcbiAgICB0aGlzLmNoZWNrVXBkYXRlRmxhZyA9IHRydWU7XHJcbiAgICB0aGlzLnduZCA9IHduZDtcclxuICAgIHRoaXMuZG9jID0gZG9jO1xyXG4gICAgdGhpcy5qQ29udGFpbmVyID0gY29udGFpbmVyO1xyXG4gICAgdGhpcy5yZW5kZXJDYWxsYmFja3MgPSBbXTtcclxuICAgIHRoaXMuZGlhZyA9IHRoaXMuZ2V0RGlhZygpO1xyXG5cclxuICAgIHRoaXMuY2xvY2sgPSBuZXcgVEhSRUUuQ2xvY2soKTtcclxuXHJcbiAgICB0aGlzLnJheWNhc3RlciA9IG5ldyBUSFJFRS5SYXljYXN0ZXIoKTtcclxuXHJcbiAgICB0aGlzLnNjZW5lID0gbmV3IFRIUkVFLlNjZW5lKCk7XHJcbiAgICB0aGlzLmNzc1NjZW5lID0gbmV3IFRIUkVFLlNjZW5lKCk7XHJcblxyXG4gICAgdGhpcy5jYW1lcmEgPSBuZXcgVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEoMzAsIHRoaXMud2lkdGgoKS90aGlzLmhlaWdodCgpLCAwLjIsIDIwMDApO1xyXG4gICAgY29uc3Qgc2NhbGUgPSAxO1xyXG5cclxuICAgIHRoaXMuY2FtZXJhLnBvc2l0aW9uLnggPSAwO1xyXG4gICAgdGhpcy5jYW1lcmEucG9zaXRpb24ueSA9IDUuNSpzY2FsZTtcclxuICAgIHRoaXMuY2FtZXJhLnBvc2l0aW9uLnogPSAwO1xyXG5cclxuICAgIHRoaXMucmVuZGVyZXIgPSBuZXcgVEhSRUUuV2ViR0xSZW5kZXJlcih7YWxwaGE6IHRydWUsIHByZWNpc2lvbjogVmlzdWFsV29ybGQuZ2V0UHJlY2lzaW9uKCksIGFudGlhbGlhczogdHJ1ZX0pO1xyXG4gICAgdGhpcy5yZW5kZXJlci5zZXRDbGVhckNvbG9yKDB4MDAwMDAwLCAwKTtcclxuICAgIHRoaXMucmVuZGVyZXIuc2V0UGl4ZWxSYXRpbyh0aGlzLnduZC5kZXZpY2VQaXhlbFJhdGlvKTtcclxuICAgIHRoaXMucmVuZGVyZXIuc2V0U2l6ZSh0aGlzLndpZHRoKCksIHRoaXMuaGVpZ2h0KCkpO1xyXG5cclxuICAgIHRoaXMuakNvbnRhaW5lci5hcHBlbmQodGhpcy5yZW5kZXJlci5kb21FbGVtZW50KTtcclxuXHJcbiAgICB0aGlzLmNzc1JlbmRlcmVyXHQ9IG5ldyBDU1MzRFJlbmRlcmVyKCk7XHJcbiAgICB0aGlzLmNzc1JlbmRlcmVyLnNldFNpemUodGhpcy53aWR0aCgpLCB0aGlzLmhlaWdodCgpKTtcclxuICAgICQodGhpcy5jc3NSZW5kZXJlci5kb21FbGVtZW50KS5jc3Moe1xyXG4gIFx0XHRwb3NpdGlvbjogJ2Fic29sdXRlJyxcclxuICBcdFx0dG9wOiAwLFxyXG4gIFx0XHRtYXJnaW46IDAsXHJcbiAgXHRcdHBhZGRpbmc6IDBcclxuXHQgIH0pO1xyXG4gICAgdGhpcy5qQ29udGFpbmVyLmFwcGVuZCh0aGlzLmNzc1JlbmRlcmVyLmRvbUVsZW1lbnQpO1xyXG5cclxuICAgIHRoaXMuZWxlbWVudCA9IHRoaXMuY3NzUmVuZGVyZXIuZG9tRWxlbWVudDtcclxuXHJcbiAgICB0aGlzLnRleHR1cmVMb2FkZXIgPSBuZXcgVEhSRUUuVGV4dHVyZUxvYWRlcigpO1xyXG5cclxuICAgIHRoaXMuc2NlbmUuYWRkKG5ldyBUSFJFRS5BbWJpZW50TGlnaHQoMHhEMEQwRDApKTsvLzB4QzBDMEMwXHJcblxyXG4gICAgdGhpcy5saWdodCA9IG5ldyBUSFJFRS5EaXJlY3Rpb25hbExpZ2h0KDB4NDA0MDQwLCAxKTtcclxuICAgIHRoaXMubGlnaHQucG9zaXRpb24uc2V0KDAsIDYqc2NhbGUsIDApO1xyXG4gICAgdGhpcy5saWdodC5jYXN0U2hhZG93ID0gZmFsc2U7XHJcbiAgICAvLyBjb25zdCBkID0gMjAqc2NhbGU7XHJcbiAgICAvLyB0aGlzLmxpZ2h0LnNoYWRvdy5jYW1lcmEubGVmdCA9IC1kO1xyXG4gICAgLy8gdGhpcy5saWdodC5zaGFkb3cuY2FtZXJhLnJpZ2h0ID0gZDtcclxuICAgIC8vIHRoaXMubGlnaHQuc2hhZG93LmNhbWVyYS50b3AgPSBkO1xyXG4gICAgLy8gdGhpcy5saWdodC5zaGFkb3cuY2FtZXJhLmJvdHRvbSA9IC1kO1xyXG4gICAgLy8gdGhpcy5saWdodC5zaGFkb3cuY2FtZXJhLm5lYXIgPSAxKnNjYWxlO1xyXG4gICAgLy8gdGhpcy5saWdodC5zaGFkb3cuY2FtZXJhLmZhciA9IDI1KnNjYWxlO1xyXG4gICAgLy8gdGhpcy5saWdodC5zaGFkb3cubWFwU2l6ZS54ID0gMTAyNDtcclxuICAgIC8vIHRoaXMubGlnaHQuc2hhZG93Lm1hcFNpemUueSA9IDEwMjQ7XHJcbiAgICB0aGlzLnNjZW5lLmFkZCh0aGlzLmxpZ2h0KTtcclxuXHJcbiAgICB0aGlzLmNvbnRyb2xzID0gbmV3IE9yYml0KHRoaXMuY2FtZXJhLCB0aGlzLmVsZW1lbnQpO1xyXG4gICAgdGhpcy5jb250cm9scy50YXJnZXQueSA9IDAuNTtcclxuXHJcbiAgICBjb25zdCBjc3NTY2VuZSA9ICQodGhpcy5jc3NSZW5kZXJlci5kb21FbGVtZW50KS5maW5kKCdkaXYnKSwgdG1wVmVjdG9yID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcclxuICAgIHRoaXMuY29udHJvbHMuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKCk9PiB7XHJcbiAgICAgIHRoaXMuY2FtZXJhLmdldFdvcmxkRGlyZWN0aW9uKHRtcFZlY3Rvcik7XHJcbiAgICAgIGNzc1NjZW5lLmNzcygnZGlzcGxheScsIHRtcFZlY3Rvci55LXRoaXMuY2FtZXJhLnBvc2l0aW9uLnk+MD8gJ25vbmUnOiAnYmxvY2snKTtcclxuICAgICAgdGhpcy51cGRhdGVUaHJlZSgpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaWYodXNlSGVscGVycykge1xyXG4gICAgICB0aGlzLnNjZW5lLmFkZChuZXcgVEhSRUUuQXhpc0hlbHBlcig1KSk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5iaW5kcyA9IHtcclxuICAgICAgb25XaW5kb3dSZXNpemU6IHRoaXMub25XaW5kb3dSZXNpemUuYmluZCh0aGlzKSxcclxuICAgICAgYW5pbWF0ZTogdGhpcy5hbmltYXRlLmJpbmQodGhpcylcclxuICAgIH07XHJcblxyXG4gICAgJCh0aGlzLnduZCkub24oJ3Jlc2l6ZScsIHRoaXMuYmluZHMub25XaW5kb3dSZXNpemUpO1xyXG5cclxuICAgIHRoaXMubW91c2VFdmVudHMgPSBuZXcgVGhyZWVNb3VzZUV2ZW50Q29udmVydGVyKHRoaXMud25kLCB0aGlzLmRvYywgdGhpcyk7XHJcbiAgICB0aGlzLnRvdWNoRXZlbnRzID0gbmV3IFRocmVlVG91Y2hFdmVudENvbnZlcnRlcih0aGlzLnduZCwgdGhpcy5kb2MsIHRoaXMpO1xyXG4gICAgY29uc3QgZmlsdGVyRGF0YSA9IHt0eXBlOiAnbW91c2Vtb3ZlJ307XHJcbiAgICB0aGlzLm1vdXNlRXZlbnRzLmZpbHRlciA9IChlbGVtZW50LCBlKT0+IHtcclxuICAgICAgY29uc3QgdHlwZXMgPSBbJ21vdXNlZW50ZXInLCAnbW91c2VvdmVyJywgJ21vdXNlbGVhdmUnLCAnbW91c2VvdXQnXSwgY29udGFpbnMgPSAocCwgYyk9PiBwPT09YyB8fCAkLmNvbnRhaW5zKHAsIGMpO1xyXG4gICAgICBpZihlLnR5cGU9PT0nbW91c2Vtb3ZlJykge1xyXG4gICAgICAgIGZpbHRlckRhdGEucGFnZVggPSBlLnBhZ2VYO1xyXG4gICAgICAgIGZpbHRlckRhdGEucGFnZVkgPSBlLnBhZ2VZO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBlLnJlbGF0ZWRUYXJnZXQgJiYgfnR5cGVzLmluZGV4T2YoZS50eXBlKSAmJiBjb250YWlucyhlbGVtZW50LCBlLnRhcmdldCkgJiYgY29udGFpbnMoZWxlbWVudCwgZS5yZWxhdGVkVGFyZ2V0KT8gey4uLmUsIC4uLmZpbHRlckRhdGF9OiBlO1xyXG4gICAgfTtcclxuICAgIHRoaXMuZHJhZyA9IG5ldyBEcmFnKHRoaXMud25kLCB0aGlzLmRvYywgdGhpcyk7XHJcblxyXG4gICAgdGhpcy5vbldpbmRvd1Jlc2l6ZSgpO1xyXG4gICAgdGhpcy5hbmltYXRlKCk7XHJcbiAgfVxyXG5cclxuICBnZXREaWFnKCkge1xyXG4gICAgY29uc3QgdGVzdCA9ICQoJzxkaXYgc3R5bGU9XCJoZWlnaHQ6IDFpbjsgd2lkdGg6IDFpbjsgZGlzcGxheTogbm9uZTtcIj48L2Rpdj4nKS5hcHBlbmRUbyh0aGlzLmpDb250YWluZXIpLFxyXG4gICAgciA9IG5ldyBUSFJFRS5WZWN0b3IyKHNjcmVlbi53aWR0aC90ZXN0LndpZHRoKCksIHNjcmVlbi5oZWlnaHQvdGVzdC5oZWlnaHQoKSk7XHJcbiAgICB0ZXN0LnJlbW92ZSgpO1xyXG4gICAgcmV0dXJuIHIubGVuZ3RoKCk7XHJcbiAgfVxyXG5cclxuICB1cGRhdGVUaHJlZSgpIHtcclxuICAgIHRoaXMubGlnaHQudXNlckRhdGEubmVlZHNVcGRhdGUgPSB0cnVlO1xyXG4gIH1cclxuXHJcbiAgZGlzcG9zZSgpIHtcclxuICAgIGRlbGV0ZSB0aGlzLmJpbmRzLmFuaW1hdGU7XHJcbiAgICAkKHRoaXMud25kKS5vZmYoJ3Jlc2l6ZScsIHRoaXMuYmluZHMub25XaW5kb3dSZXNpemUpO1xyXG4gICAgdGhpcy5tb3VzZUV2ZW50cy5kaXNwb3NlKCk7XHJcbiAgICB0aGlzLnRvdWNoRXZlbnRzLmRpc3Bvc2UoKTtcclxuICAgIHRoaXMuZHJhZy5kaXNwb3NlKCk7XHJcbiAgICB0aGlzLmNvbnRyb2xzLmRpc3Bvc2UoKTtcclxuICB9XHJcblxyXG4gIHdpZHRoKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuakNvbnRhaW5lci53aWR0aCgpO1xyXG4gIH1cclxuXHJcbiAgaGVpZ2h0KCkge1xyXG4gICAgcmV0dXJuIHRoaXMuakNvbnRhaW5lci5oZWlnaHQoKTtcclxuICB9XHJcblxyXG4gIHNldEV4dHJhTGlnaHRpbmcodikge1xyXG4gICAgdGhpcy5saWdodC5pbnRlbnNpdHkgPSB2O1xyXG4gIH1cclxuXHJcbiAgaXNNb2JpbGUoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5kaWFnPDExO1xyXG4gIH1cclxuXHJcbiAgZ2V0T3JiaXQoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5jb250cm9scztcclxuICB9XHJcblxyXG4gIHNldENvbnRyb2xzU3RhdGUoc3RhdGUpIHtcclxuICAgIHRoaXMuY29udHJvbHMuZW5hYmxlZCA9IHN0YXRlO1xyXG4gIH1cclxuXHJcbiAgZ2V0Q29udHJvbHNTdGF0ZSgpIHtcclxuICAgIHJldHVybiB0aGlzLmNvbnRyb2xzLmVuYWJsZWQ7XHJcbiAgfVxyXG5cclxuICBvbldpbmRvd1Jlc2l6ZSgpIHtcclxuICAgIGlmKHRoaXMud2lkdGgoKT4xICYmIHRoaXMuaGVpZ2h0KCk+MSkge1xyXG4gICAgICBjb25zdCB1cGRhdGVDYW1lcmEgPSAoY2FtZXJhKT0+IHtcclxuICAgICAgICBjYW1lcmEuYXNwZWN0ID0gdGhpcy53aWR0aCgpL3RoaXMuaGVpZ2h0KCk7XHJcbiAgICAgICAgY2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcclxuICAgICAgfSxcclxuICAgICAgdXBkYXRlUmVuZGVyZXIgPSAocmVuZGVyZXIpPT4ge1xyXG4gICAgICAgIHJlbmRlcmVyLnNldFNpemUodGhpcy53aWR0aCgpLCB0aGlzLmhlaWdodCgpKTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHVwZGF0ZUNhbWVyYSh0aGlzLmNhbWVyYSk7XHJcbiAgICAgIHVwZGF0ZVJlbmRlcmVyKHRoaXMucmVuZGVyZXIpO1xyXG4gICAgICB1cGRhdGVSZW5kZXJlcih0aGlzLmNzc1JlbmRlcmVyKTtcclxuICAgICAgdGhpcy51cGRhdGVUaHJlZSgpO1xyXG5cclxuICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KHt0eXBlOiAncmVzaXplJ30pO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHNldFRpbWVvdXQoKCk9PiB7XHJcbiAgICAgICAgdGhpcy5vbldpbmRvd1Jlc2l6ZSgpO1xyXG4gICAgICB9LCAyNTApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgYWRkT2JqZWN0KG9iamVjdCkge1xyXG4gICAgdGhpcy5zY2VuZS5hZGQob2JqZWN0KTtcclxuICB9XHJcblxyXG4gIGFkZENzc09iamVjdChvYmplY3QpIHtcclxuICAgIHRoaXMuY3NzU2NlbmUuYWRkKG9iamVjdCk7XHJcbiAgfVxyXG5cclxuICByZW1vdmVDc3NPYmplY3Qob2JqZWN0KSB7XHJcbiAgICB0aGlzLmNzc1NjZW5lLnJlbW92ZShvYmplY3QpO1xyXG4gIH1cclxuXHJcbiAgcmVtb3ZlT2JqZWN0KG9iamVjdCkge1xyXG4gICAgdGhpcy5zY2VuZS5yZW1vdmUob2JqZWN0KTtcclxuICB9XHJcblxyXG4gIGFuaW1hdGUoKSB7XHJcbiAgICBpZih0aGlzLmJpbmRzLmFuaW1hdGUpIHtcclxuICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMuYmluZHMuYW5pbWF0ZSk7XHJcbiAgICB9XHJcbiAgICB0aGlzLnJlbmRlcigpO1xyXG4gIH1cclxuXHJcbiAgYWRkUmVuZGVyQ2FsbGJhY2soY2xiKSB7XHJcbiAgICB0aGlzLnJlbmRlckNhbGxiYWNrcy5wdXNoKGNsYik7XHJcbiAgfVxyXG5cclxuICByZW1vdmVSZW5kZXJDYWxsYmFjayhjbGIpIHtcclxuICAgIGNvbnN0IGkgPSB0aGlzLnJlbmRlckNhbGxiYWNrcy5pbmRleE9mKGNsYik7XHJcbiAgICBpZih+aSkge1xyXG4gICAgICB0aGlzLnJlbmRlckNhbGxiYWNrcy5zcGxpY2UoaSwgMSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICBjb25zdCBkZWx0YVRpbWUgPSB0aGlzLmNsb2NrLmdldERlbHRhKCk7XHJcbiAgICB0aGlzLmNvbnRyb2xzLnVwZGF0ZShkZWx0YVRpbWUpO1xyXG4gICAgZm9yKGxldCBjbGIgb2YgdGhpcy5yZW5kZXJDYWxsYmFja3MpIHtcclxuICAgICAgY2xiKGRlbHRhVGltZSk7XHJcbiAgICB9XHJcbiAgICB0aGlzLmNzc1JlbmRlcmVyLnJlbmRlcih0aGlzLmNzc1NjZW5lLCB0aGlzLmNhbWVyYSk7XHJcbiAgICBsZXQgcmVuZGVyID0gdHJ1ZTtcclxuICAgIGlmKHRoaXMuY2hlY2tVcGRhdGVGbGFnKSB7XHJcbiAgICAgIHJlbmRlciA9IGZhbHNlO1xyXG4gICAgICBmb3IobGV0IG8gb2YgdGhpcy5zY2VuZS5jaGlsZHJlbikge1xyXG4gICAgICAgIHJlbmRlciA9IHJlbmRlciB8fCBvLnVzZXJEYXRhLm5lZWRzVXBkYXRlO1xyXG4gICAgICAgIG8udXNlckRhdGEubmVlZHNVcGRhdGUgPSBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYocmVuZGVyKSB7XHJcbiAgICAgIHRoaXMucmVuZGVyZXIucmVuZGVyKHRoaXMuc2NlbmUsIHRoaXMuY2FtZXJhKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHN0YXRpYyBnZXRQcmVjaXNpb24oKSB7XHJcbiAgICBjb25zdCBzY2VuZSA9IG5ldyBUSFJFRS5TY2VuZSgpO1xyXG4gICAgc2NlbmUuYWRkKG5ldyBUSFJFRS5BbWJpZW50TGlnaHQoMHhmZmZmZmYpKTtcclxuXHJcbiAgICBjb25zdCBjYW1lcmEgPSBuZXcgVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEoMzAsIDEsIDEsIDEwMCk7XHJcbiAgICBjYW1lcmEucG9zaXRpb24uc2V0KDAsIDAsIDEpO1xyXG4gICAgY2FtZXJhLmxvb2tBdCgwLCAwLCAwKTtcclxuXHJcbiAgICBjb25zdCByZW5kZXJlciA9IG5ldyBUSFJFRS5XZWJHTFJlbmRlcmVyKCk7XHJcbiAgICByZW5kZXJlci5zZXRDbGVhckNvbG9yKDB4ZmZmZmZmKTtcclxuICAgIHJlbmRlcmVyLnNldFNpemUoMSwgMSk7XHJcblxyXG4gICAgY29uc3QgYyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpLCBjdHggPSBjLmdldENvbnRleHQoJzJkJyk7XHJcbiAgICBjLndpZHRoID0gYy5oZWlnaHQgPSAxO1xyXG4gICAgY3R4LmZpbGxTdHlsZSA9ICcjZmYwMDAwJztcclxuICAgIGN0eC5maWxsUmVjdCgwLCAwLCBjLndpZHRoLCBjLmhlaWdodCk7XHJcbiAgICBjb25zdCB0ID0gbmV3IFRIUkVFLlRleHR1cmUoYyk7XHJcbiAgICB0Lm5lZWRzVXBkYXRlID0gdHJ1ZTtcclxuXHJcbiAgICBzY2VuZS5hZGQobmV3IFRIUkVFLk1lc2goXHJcbiAgICAgIG5ldyBUSFJFRS5QbGFuZUdlb21ldHJ5KDEsIDEsIDEsIDEpLFxyXG4gICAgICBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwoe21hcDogdH0pXHJcbiAgICApKTtcclxuXHJcbiAgICByZW5kZXJlci5yZW5kZXIoc2NlbmUsIGNhbWVyYSk7XHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0UGl4ZWwoYywgeCwgeSkge1xyXG4gICAgICBjb25zdCBwcyA9IG5ldyBVaW50OEFycmF5KDQpO1xyXG4gICAgICBjLnJlYWRQaXhlbHMoeCwgeSwgMSwgMSwgYy5SR0JBLCBjLlVOU0lHTkVEX0JZVEUsIHBzKTtcclxuICAgICAgcmV0dXJuIHBzO1xyXG4gICAgfVxyXG4gICAgY29uc3QgcCA9IGdldFBpeGVsKHJlbmRlcmVyLmRvbUVsZW1lbnQuZ2V0Q29udGV4dCgnd2ViZ2wnKSB8fCByZW5kZXJlci5kb21FbGVtZW50LmdldENvbnRleHQoJ2V4cGVyaW1lbnRhbC13ZWJnbCcpLCAwLCAwKTtcclxuICAgIHJldHVybiBwWzBdPT09MjU1JiZwWzFdPT09MCYmcFsyXT09PTA/ICdoaWdocCc6ICdtZWRpdW1wJztcclxuICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvVmlzdWFsV29ybGQuanMiLCJpbXBvcnQgQ29udHJvbGxlciBmcm9tICcuL0NvbnRyb2xsZXInO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgV2lkZ2V0Q29udHJvbGxlciBleHRlbmRzIENvbnRyb2xsZXIge1xyXG5cclxuICBjb25zdHJ1Y3Rvcih2aWV3KSB7XHJcbiAgICBzdXBlcigpO1xyXG4gICAgdGhpcy52aWV3ID0gdmlldztcclxuICAgIHRoaXMudmlzaWJsZSA9IGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgdG9nbGUoKSB7XHJcbiAgICB0aGlzLnZpc2libGUgPSAhdGhpcy52aXNpYmxlO1xyXG4gICAgdGhpcy5maXJlQ2hhbmdlKCk7XHJcbiAgfVxyXG5cclxuICBoaWRlKCkge1xyXG4gICAgdGhpcy52aXNpYmxlID0gZmFsc2U7XHJcbiAgICB0aGlzLmZpcmVDaGFuZ2UoKTtcclxuICB9XHJcblxyXG4gIGZpcmVDaGFuZ2UoKSB7XHJcbiAgICBpZih0aGlzLm9uQ2hhbmdlKSB7XHJcbiAgICAgIHRoaXMub25DaGFuZ2UoKTtcclxuICAgIH1cclxuICAgIHRoaXMudXBkYXRlVmlldygpO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlVmlldygpIHtcclxuICAgIGlmKHRoaXMudmlldykge1xyXG4gICAgICB0aGlzLnZpZXcuc2V0U3RhdGUoJ3dpZEZsb2F0V25kJywge1xyXG4gICAgICAgIGVuYWJsZTogdHJ1ZSxcclxuICAgICAgICB2aXNpYmxlOiB0aGlzLnZpc2libGUsXHJcbiAgICAgICAgYWN0aXZlOiBmYWxzZVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL1dpZGdldENvbnRyb2xsZXIuanMiLCJcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgWW91VHViZUFwaSB7XHJcbiAgc3RhdGljIGluaXQoKSB7XHJcbiAgICBpZighWW91VHViZUFwaS50YXNrKSB7XHJcbiAgICAgIFlvdVR1YmVBcGkudGFzayA9IG5ldyBQcm9taXNlKChyZXNvbHZlKT0+IHtcclxuICAgICAgICBpZighd2luZG93WydZVCddKSB7XHJcbiAgICAgICAgICB3aW5kb3dbJ1lUJ10gPSB7XHJcbiAgICAgICAgICAgIGxvYWRpbmc6IDAsXHJcbiAgICAgICAgICAgIGxvYWRlZDogMFxyXG4gICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYoIXdpbmRvd1snWVRDb25maWcnXSkge1xyXG4gICAgICAgICAgd2luZG93WydZVENvbmZpZyddID0ge1xyXG4gICAgICAgICAgICAnaG9zdCc6ICdodHRwOi8vd3d3LnlvdXR1YmUuY29tJ1xyXG4gICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYoIVlULmxvYWRpbmcpIHtcclxuICAgICAgICAgIFlULmxvYWRpbmcgPSAxO1xyXG4gICAgICAgICAgKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB2YXIgbCA9IFtdO1xyXG4gICAgICAgICAgICBZVC5yZWFkeSA9IGZ1bmN0aW9uKGYpIHtcclxuICAgICAgICAgICAgICBpZihZVC5sb2FkZWQpIHtcclxuICAgICAgICAgICAgICAgIGYoKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBsLnB1c2goZik7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB3aW5kb3cub25ZVFJlYWR5ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgWVQubG9hZGVkID0gMTtcclxuICAgICAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgbC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgbFtpXSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHt9XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgWVQuc2V0Q29uZmlnID0gZnVuY3Rpb24oYykge1xyXG4gICAgICAgICAgICAgIGZvcih2YXIgayBpbiBjKSB7XHJcbiAgICAgICAgICAgICAgICBpZihjLmhhc093blByb3BlcnR5KGspKSB7XHJcbiAgICAgICAgICAgICAgICAgIFlUQ29uZmlnW2tdID0gY1trXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHZhciBhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XHJcbiAgICAgICAgICAgIGEudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnO1xyXG4gICAgICAgICAgICBhLmlkID0gJ3d3dy13aWRnZXRhcGktc2NyaXB0JztcclxuICAgICAgICAgICAgYS5zcmMgPSAnaHR0cHM6Ly9zLnl0aW1nLmNvbS95dHMvanNiaW4vd3d3LXdpZGdldGFwaS12ZmxkbjFqUk0vd3d3LXdpZGdldGFwaS5qcyc7XHJcbiAgICAgICAgICAgIGEuYXN5bmMgPSBmYWxzZTtcclxuICAgICAgICAgICAgdmFyIGMgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0O1xyXG4gICAgICAgICAgICBpZihjKSB7XHJcbiAgICAgICAgICAgICAgdmFyIG4gPSBjLm5vbmNlIHx8IGMuZ2V0QXR0cmlidXRlKCdub25jZScpO1xyXG4gICAgICAgICAgICAgIGlmKG4pIHtcclxuICAgICAgICAgICAgICAgIGEuc2V0QXR0cmlidXRlKCdub25jZScsIG4pO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgYiA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKVswXTtcclxuICAgICAgICAgICAgYi5wYXJlbnROb2RlLmluc2VydEJlZm9yZShhLCBiKTtcclxuICAgICAgICAgIH0pKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiBZb3VUdWJlQXBpLnRhc2s7XHJcbiAgfVxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL1lvdVR1YmVBcGkuanMiLCJpbXBvcnQgVGFyZ2V0IGZyb20gJy4vVGFyZ2V0JztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENpcmNsZVRhcmdldCBleHRlbmRzIFRhcmdldCB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHgsIHksIHIpIHtcclxuICAgIHN1cGVyKCk7XHJcbiAgICB0aGlzLnAgPSB7XHJcbiAgICAgIHgsXHJcbiAgICAgIHksXHJcbiAgICAgIHJcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICB0ZXN0SW50ZXJzZWN0aW9uKGUsIGRhdGEpIHtcclxuICAgIGxldCByZXM7XHJcbiAgICBjb25zdCB7eCwgeX0gPSBkYXRhLCBwID0gdGhpcy5wO1xyXG4gICAgaWYoKHgtcC54KSooeC1wLngpKyh5LXAueSkqKHktcC55KTw9cC5yKnAucikge1xyXG4gICAgICByZXMgPSB7XHJcbiAgICAgICAgdGFyZ2V0OiB0aGlzLFxyXG4gICAgICAgIGRhdGFcclxuICAgICAgfTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXM7XHJcbiAgfVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9jb21tb24vY2xhc3Nlcy90YXJnZXRzL0NpcmNsZVRhcmdldC5qcyIsImltcG9ydCBUYXJnZXQgZnJvbSAnLi9UYXJnZXQnO1xyXG5pbXBvcnQgQmFzZU1hdGhVdGlscyBmcm9tICcuLi9CYXNlTWF0aFV0aWxzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvbHlUYXJnZXQgZXh0ZW5kcyBUYXJnZXQge1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwb2x5KSB7XHJcbiAgICBzdXBlcigpO1xyXG4gICAgdGhpcy5wb2x5ID0gcG9seTtcclxuICB9XHJcblxyXG4gIHRlc3RJbnRlcnNlY3Rpb24oZSwgcCkge1xyXG4gICAgcmV0dXJuIEJhc2VNYXRoVXRpbHMuaXNJbnNpZGVQb2x5KHRoaXMucG9seSwgcCk/IHtcclxuICAgICAgdGFyZ2V0OiB0aGlzLFxyXG4gICAgICBkYXRhOiBwXHJcbiAgICB9OiB1bmRlZmluZWQ7XHJcbiAgfVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9jb21tb24vY2xhc3Nlcy90YXJnZXRzL1BvbHlUYXJnZXQuanMiLCIvKioqIElNUE9SVFMgRlJPTSBpbXBvcnRzLWxvYWRlciAqKiovXG52YXIgZGVmaW5lID0gZmFsc2U7XG5cbi8qIVxuICogalF1ZXJ5IE1vdXNld2hlZWwgMy4xLjEzXG4gKlxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZVxuICovXG5cbihmdW5jdGlvbiAoZmFjdG9yeSkge1xuICAgIGlmICggdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xuICAgICAgICAvLyBBTUQuIFJlZ2lzdGVyIGFzIGFuIGFub255bW91cyBtb2R1bGUuXG4gICAgICAgIGRlZmluZShbJ2pxdWVyeSddLCBmYWN0b3J5KTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jykge1xuICAgICAgICAvLyBOb2RlL0NvbW1vbkpTIHN0eWxlIGZvciBCcm93c2VyaWZ5XG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBCcm93c2VyIGdsb2JhbHNcbiAgICAgICAgZmFjdG9yeShqUXVlcnkpO1xuICAgIH1cbn0oZnVuY3Rpb24gKCQpIHtcblxuICAgIHZhciB0b0ZpeCAgPSBbJ3doZWVsJywgJ21vdXNld2hlZWwnLCAnRE9NTW91c2VTY3JvbGwnLCAnTW96TW91c2VQaXhlbFNjcm9sbCddLFxuICAgICAgICB0b0JpbmQgPSAoICdvbndoZWVsJyBpbiBkb2N1bWVudCB8fCBkb2N1bWVudC5kb2N1bWVudE1vZGUgPj0gOSApID9cbiAgICAgICAgICAgICAgICAgICAgWyd3aGVlbCddIDogWydtb3VzZXdoZWVsJywgJ0RvbU1vdXNlU2Nyb2xsJywgJ01vek1vdXNlUGl4ZWxTY3JvbGwnXSxcbiAgICAgICAgc2xpY2UgID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLFxuICAgICAgICBudWxsTG93ZXN0RGVsdGFUaW1lb3V0LCBsb3dlc3REZWx0YTtcblxuICAgIGlmICggJC5ldmVudC5maXhIb29rcyApIHtcbiAgICAgICAgZm9yICggdmFyIGkgPSB0b0ZpeC5sZW5ndGg7IGk7ICkge1xuICAgICAgICAgICAgJC5ldmVudC5maXhIb29rc1sgdG9GaXhbLS1pXSBdID0gJC5ldmVudC5tb3VzZUhvb2tzO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHNwZWNpYWwgPSAkLmV2ZW50LnNwZWNpYWwubW91c2V3aGVlbCA9IHtcbiAgICAgICAgdmVyc2lvbjogJzMuMS4xMicsXG5cbiAgICAgICAgc2V0dXA6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKCB0aGlzLmFkZEV2ZW50TGlzdGVuZXIgKSB7XG4gICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSB0b0JpbmQubGVuZ3RoOyBpOyApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCB0b0JpbmRbLS1pXSwgaGFuZGxlciwgZmFsc2UgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMub25tb3VzZXdoZWVsID0gaGFuZGxlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFN0b3JlIHRoZSBsaW5lIGhlaWdodCBhbmQgcGFnZSBoZWlnaHQgZm9yIHRoaXMgcGFydGljdWxhciBlbGVtZW50XG4gICAgICAgICAgICAkLmRhdGEodGhpcywgJ21vdXNld2hlZWwtbGluZS1oZWlnaHQnLCBzcGVjaWFsLmdldExpbmVIZWlnaHQodGhpcykpO1xuICAgICAgICAgICAgJC5kYXRhKHRoaXMsICdtb3VzZXdoZWVsLXBhZ2UtaGVpZ2h0Jywgc3BlY2lhbC5nZXRQYWdlSGVpZ2h0KHRoaXMpKTtcbiAgICAgICAgfSxcblxuICAgICAgICB0ZWFyZG93bjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lciApIHtcbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IHRvQmluZC5sZW5ndGg7IGk7ICkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoIHRvQmluZFstLWldLCBoYW5kbGVyLCBmYWxzZSApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vbm1vdXNld2hlZWwgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gQ2xlYW4gdXAgdGhlIGRhdGEgd2UgYWRkZWQgdG8gdGhlIGVsZW1lbnRcbiAgICAgICAgICAgICQucmVtb3ZlRGF0YSh0aGlzLCAnbW91c2V3aGVlbC1saW5lLWhlaWdodCcpO1xuICAgICAgICAgICAgJC5yZW1vdmVEYXRhKHRoaXMsICdtb3VzZXdoZWVsLXBhZ2UtaGVpZ2h0Jyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0TGluZUhlaWdodDogZnVuY3Rpb24oZWxlbSkge1xuICAgICAgICAgICAgdmFyICRlbGVtID0gJChlbGVtKSxcbiAgICAgICAgICAgICAgICAkcGFyZW50ID0gJGVsZW1bJ29mZnNldFBhcmVudCcgaW4gJC5mbiA/ICdvZmZzZXRQYXJlbnQnIDogJ3BhcmVudCddKCk7XG4gICAgICAgICAgICBpZiAoISRwYXJlbnQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgJHBhcmVudCA9ICQoJ2JvZHknKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBwYXJzZUludCgkcGFyZW50LmNzcygnZm9udFNpemUnKSwgMTApIHx8IHBhcnNlSW50KCRlbGVtLmNzcygnZm9udFNpemUnKSwgMTApIHx8IDE2O1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldFBhZ2VIZWlnaHQ6IGZ1bmN0aW9uKGVsZW0pIHtcbiAgICAgICAgICAgIHJldHVybiAkKGVsZW0pLmhlaWdodCgpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHNldHRpbmdzOiB7XG4gICAgICAgICAgICBhZGp1c3RPbGREZWx0YXM6IHRydWUsIC8vIHNlZSBzaG91bGRBZGp1c3RPbGREZWx0YXMoKSBiZWxvd1xuICAgICAgICAgICAgbm9ybWFsaXplT2Zmc2V0OiB0cnVlICAvLyBjYWxscyBnZXRCb3VuZGluZ0NsaWVudFJlY3QgZm9yIGVhY2ggZXZlbnRcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAkLmZuLmV4dGVuZCh7XG4gICAgICAgIG1vdXNld2hlZWw6IGZ1bmN0aW9uKGZuKSB7XG4gICAgICAgICAgICByZXR1cm4gZm4gPyB0aGlzLmJpbmQoJ21vdXNld2hlZWwnLCBmbikgOiB0aGlzLnRyaWdnZXIoJ21vdXNld2hlZWwnKTtcbiAgICAgICAgfSxcblxuICAgICAgICB1bm1vdXNld2hlZWw6IGZ1bmN0aW9uKGZuKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy51bmJpbmQoJ21vdXNld2hlZWwnLCBmbik7XG4gICAgICAgIH1cbiAgICB9KTtcblxuXG4gICAgZnVuY3Rpb24gaGFuZGxlcihldmVudCkge1xuICAgICAgICB2YXIgb3JnRXZlbnQgICA9IGV2ZW50IHx8IHdpbmRvdy5ldmVudCxcbiAgICAgICAgICAgIGFyZ3MgICAgICAgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSksXG4gICAgICAgICAgICBkZWx0YSAgICAgID0gMCxcbiAgICAgICAgICAgIGRlbHRhWCAgICAgPSAwLFxuICAgICAgICAgICAgZGVsdGFZICAgICA9IDAsXG4gICAgICAgICAgICBhYnNEZWx0YSAgID0gMCxcbiAgICAgICAgICAgIG9mZnNldFggICAgPSAwLFxuICAgICAgICAgICAgb2Zmc2V0WSAgICA9IDA7XG4gICAgICAgIGV2ZW50ID0gJC5ldmVudC5maXgob3JnRXZlbnQpO1xuICAgICAgICBldmVudC50eXBlID0gJ21vdXNld2hlZWwnO1xuXG4gICAgICAgIC8vIE9sZCBzY2hvb2wgc2Nyb2xsd2hlZWwgZGVsdGFcbiAgICAgICAgaWYgKCAnZGV0YWlsJyAgICAgIGluIG9yZ0V2ZW50ICkgeyBkZWx0YVkgPSBvcmdFdmVudC5kZXRhaWwgKiAtMTsgICAgICB9XG4gICAgICAgIGlmICggJ3doZWVsRGVsdGEnICBpbiBvcmdFdmVudCApIHsgZGVsdGFZID0gb3JnRXZlbnQud2hlZWxEZWx0YTsgICAgICAgfVxuICAgICAgICBpZiAoICd3aGVlbERlbHRhWScgaW4gb3JnRXZlbnQgKSB7IGRlbHRhWSA9IG9yZ0V2ZW50LndoZWVsRGVsdGFZOyAgICAgIH1cbiAgICAgICAgaWYgKCAnd2hlZWxEZWx0YVgnIGluIG9yZ0V2ZW50ICkgeyBkZWx0YVggPSBvcmdFdmVudC53aGVlbERlbHRhWCAqIC0xOyB9XG5cbiAgICAgICAgLy8gRmlyZWZveCA8IDE3IGhvcml6b250YWwgc2Nyb2xsaW5nIHJlbGF0ZWQgdG8gRE9NTW91c2VTY3JvbGwgZXZlbnRcbiAgICAgICAgaWYgKCAnYXhpcycgaW4gb3JnRXZlbnQgJiYgb3JnRXZlbnQuYXhpcyA9PT0gb3JnRXZlbnQuSE9SSVpPTlRBTF9BWElTICkge1xuICAgICAgICAgICAgZGVsdGFYID0gZGVsdGFZICogLTE7XG4gICAgICAgICAgICBkZWx0YVkgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2V0IGRlbHRhIHRvIGJlIGRlbHRhWSBvciBkZWx0YVggaWYgZGVsdGFZIGlzIDAgZm9yIGJhY2t3YXJkcyBjb21wYXRhYmlsaXRpeVxuICAgICAgICBkZWx0YSA9IGRlbHRhWSA9PT0gMCA/IGRlbHRhWCA6IGRlbHRhWTtcblxuICAgICAgICAvLyBOZXcgc2Nob29sIHdoZWVsIGRlbHRhICh3aGVlbCBldmVudClcbiAgICAgICAgaWYgKCAnZGVsdGFZJyBpbiBvcmdFdmVudCApIHtcbiAgICAgICAgICAgIGRlbHRhWSA9IG9yZ0V2ZW50LmRlbHRhWSAqIC0xO1xuICAgICAgICAgICAgZGVsdGEgID0gZGVsdGFZO1xuICAgICAgICB9XG4gICAgICAgIGlmICggJ2RlbHRhWCcgaW4gb3JnRXZlbnQgKSB7XG4gICAgICAgICAgICBkZWx0YVggPSBvcmdFdmVudC5kZWx0YVg7XG4gICAgICAgICAgICBpZiAoIGRlbHRhWSA9PT0gMCApIHsgZGVsdGEgID0gZGVsdGFYICogLTE7IH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIE5vIGNoYW5nZSBhY3R1YWxseSBoYXBwZW5lZCwgbm8gcmVhc29uIHRvIGdvIGFueSBmdXJ0aGVyXG4gICAgICAgIGlmICggZGVsdGFZID09PSAwICYmIGRlbHRhWCA9PT0gMCApIHsgcmV0dXJuOyB9XG5cbiAgICAgICAgLy8gTmVlZCB0byBjb252ZXJ0IGxpbmVzIGFuZCBwYWdlcyB0byBwaXhlbHMgaWYgd2UgYXJlbid0IGFscmVhZHkgaW4gcGl4ZWxzXG4gICAgICAgIC8vIFRoZXJlIGFyZSB0aHJlZSBkZWx0YSBtb2RlczpcbiAgICAgICAgLy8gICAqIGRlbHRhTW9kZSAwIGlzIGJ5IHBpeGVscywgbm90aGluZyB0byBkb1xuICAgICAgICAvLyAgICogZGVsdGFNb2RlIDEgaXMgYnkgbGluZXNcbiAgICAgICAgLy8gICAqIGRlbHRhTW9kZSAyIGlzIGJ5IHBhZ2VzXG4gICAgICAgIGlmICggb3JnRXZlbnQuZGVsdGFNb2RlID09PSAxICkge1xuICAgICAgICAgICAgdmFyIGxpbmVIZWlnaHQgPSAkLmRhdGEodGhpcywgJ21vdXNld2hlZWwtbGluZS1oZWlnaHQnKTtcbiAgICAgICAgICAgIGRlbHRhICAqPSBsaW5lSGVpZ2h0O1xuICAgICAgICAgICAgZGVsdGFZICo9IGxpbmVIZWlnaHQ7XG4gICAgICAgICAgICBkZWx0YVggKj0gbGluZUhlaWdodDtcbiAgICAgICAgfSBlbHNlIGlmICggb3JnRXZlbnQuZGVsdGFNb2RlID09PSAyICkge1xuICAgICAgICAgICAgdmFyIHBhZ2VIZWlnaHQgPSAkLmRhdGEodGhpcywgJ21vdXNld2hlZWwtcGFnZS1oZWlnaHQnKTtcbiAgICAgICAgICAgIGRlbHRhICAqPSBwYWdlSGVpZ2h0O1xuICAgICAgICAgICAgZGVsdGFZICo9IHBhZ2VIZWlnaHQ7XG4gICAgICAgICAgICBkZWx0YVggKj0gcGFnZUhlaWdodDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFN0b3JlIGxvd2VzdCBhYnNvbHV0ZSBkZWx0YSB0byBub3JtYWxpemUgdGhlIGRlbHRhIHZhbHVlc1xuICAgICAgICBhYnNEZWx0YSA9IE1hdGgubWF4KCBNYXRoLmFicyhkZWx0YVkpLCBNYXRoLmFicyhkZWx0YVgpICk7XG5cbiAgICAgICAgaWYgKCAhbG93ZXN0RGVsdGEgfHwgYWJzRGVsdGEgPCBsb3dlc3REZWx0YSApIHtcbiAgICAgICAgICAgIGxvd2VzdERlbHRhID0gYWJzRGVsdGE7XG5cbiAgICAgICAgICAgIC8vIEFkanVzdCBvbGRlciBkZWx0YXMgaWYgbmVjZXNzYXJ5XG4gICAgICAgICAgICBpZiAoIHNob3VsZEFkanVzdE9sZERlbHRhcyhvcmdFdmVudCwgYWJzRGVsdGEpICkge1xuICAgICAgICAgICAgICAgIGxvd2VzdERlbHRhIC89IDQwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gQWRqdXN0IG9sZGVyIGRlbHRhcyBpZiBuZWNlc3NhcnlcbiAgICAgICAgaWYgKCBzaG91bGRBZGp1c3RPbGREZWx0YXMob3JnRXZlbnQsIGFic0RlbHRhKSApIHtcbiAgICAgICAgICAgIC8vIERpdmlkZSBhbGwgdGhlIHRoaW5ncyBieSA0MCFcbiAgICAgICAgICAgIGRlbHRhICAvPSA0MDtcbiAgICAgICAgICAgIGRlbHRhWCAvPSA0MDtcbiAgICAgICAgICAgIGRlbHRhWSAvPSA0MDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEdldCBhIHdob2xlLCBub3JtYWxpemVkIHZhbHVlIGZvciB0aGUgZGVsdGFzXG4gICAgICAgIGRlbHRhICA9IE1hdGhbIGRlbHRhICA+PSAxID8gJ2Zsb29yJyA6ICdjZWlsJyBdKGRlbHRhICAvIGxvd2VzdERlbHRhKTtcbiAgICAgICAgZGVsdGFYID0gTWF0aFsgZGVsdGFYID49IDEgPyAnZmxvb3InIDogJ2NlaWwnIF0oZGVsdGFYIC8gbG93ZXN0RGVsdGEpO1xuICAgICAgICBkZWx0YVkgPSBNYXRoWyBkZWx0YVkgPj0gMSA/ICdmbG9vcicgOiAnY2VpbCcgXShkZWx0YVkgLyBsb3dlc3REZWx0YSk7XG5cbiAgICAgICAgLy8gTm9ybWFsaXNlIG9mZnNldFggYW5kIG9mZnNldFkgcHJvcGVydGllc1xuICAgICAgICBpZiAoIHNwZWNpYWwuc2V0dGluZ3Mubm9ybWFsaXplT2Zmc2V0ICYmIHRoaXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0ICkge1xuICAgICAgICAgICAgdmFyIGJvdW5kaW5nUmVjdCA9IHRoaXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICBvZmZzZXRYID0gZXZlbnQuY2xpZW50WCAtIGJvdW5kaW5nUmVjdC5sZWZ0O1xuICAgICAgICAgICAgb2Zmc2V0WSA9IGV2ZW50LmNsaWVudFkgLSBib3VuZGluZ1JlY3QudG9wO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQWRkIGluZm9ybWF0aW9uIHRvIHRoZSBldmVudCBvYmplY3RcbiAgICAgICAgZXZlbnQuZGVsdGFYID0gZGVsdGFYO1xuICAgICAgICBldmVudC5kZWx0YVkgPSBkZWx0YVk7XG4gICAgICAgIGV2ZW50LmRlbHRhRmFjdG9yID0gbG93ZXN0RGVsdGE7XG4gICAgICAgIGV2ZW50Lm9mZnNldFggPSBvZmZzZXRYO1xuICAgICAgICBldmVudC5vZmZzZXRZID0gb2Zmc2V0WTtcbiAgICAgICAgLy8gR28gYWhlYWQgYW5kIHNldCBkZWx0YU1vZGUgdG8gMCBzaW5jZSB3ZSBjb252ZXJ0ZWQgdG8gcGl4ZWxzXG4gICAgICAgIC8vIEFsdGhvdWdoIHRoaXMgaXMgYSBsaXR0bGUgb2RkIHNpbmNlIHdlIG92ZXJ3cml0ZSB0aGUgZGVsdGFYL1lcbiAgICAgICAgLy8gcHJvcGVydGllcyB3aXRoIG5vcm1hbGl6ZWQgZGVsdGFzLlxuICAgICAgICBldmVudC5kZWx0YU1vZGUgPSAwO1xuXG4gICAgICAgIC8vIEFkZCBldmVudCBhbmQgZGVsdGEgdG8gdGhlIGZyb250IG9mIHRoZSBhcmd1bWVudHNcbiAgICAgICAgYXJncy51bnNoaWZ0KGV2ZW50LCBkZWx0YSwgZGVsdGFYLCBkZWx0YVkpO1xuXG4gICAgICAgIC8vIENsZWFyb3V0IGxvd2VzdERlbHRhIGFmdGVyIHNvbWV0aW1lIHRvIGJldHRlclxuICAgICAgICAvLyBoYW5kbGUgbXVsdGlwbGUgZGV2aWNlIHR5cGVzIHRoYXQgZ2l2ZSBkaWZmZXJlbnRcbiAgICAgICAgLy8gYSBkaWZmZXJlbnQgbG93ZXN0RGVsdGFcbiAgICAgICAgLy8gRXg6IHRyYWNrcGFkID0gMyBhbmQgbW91c2Ugd2hlZWwgPSAxMjBcbiAgICAgICAgaWYgKG51bGxMb3dlc3REZWx0YVRpbWVvdXQpIHsgY2xlYXJUaW1lb3V0KG51bGxMb3dlc3REZWx0YVRpbWVvdXQpOyB9XG4gICAgICAgIG51bGxMb3dlc3REZWx0YVRpbWVvdXQgPSBzZXRUaW1lb3V0KG51bGxMb3dlc3REZWx0YSwgMjAwKTtcblxuICAgICAgICByZXR1cm4gKCQuZXZlbnQuZGlzcGF0Y2ggfHwgJC5ldmVudC5oYW5kbGUpLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG51bGxMb3dlc3REZWx0YSgpIHtcbiAgICAgICAgbG93ZXN0RGVsdGEgPSBudWxsO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNob3VsZEFkanVzdE9sZERlbHRhcyhvcmdFdmVudCwgYWJzRGVsdGEpIHtcbiAgICAgICAgLy8gSWYgdGhpcyBpcyBhbiBvbGRlciBldmVudCBhbmQgdGhlIGRlbHRhIGlzIGRpdmlzYWJsZSBieSAxMjAsXG4gICAgICAgIC8vIHRoZW4gd2UgYXJlIGFzc3VtaW5nIHRoYXQgdGhlIGJyb3dzZXIgaXMgdHJlYXRpbmcgdGhpcyBhcyBhblxuICAgICAgICAvLyBvbGRlciBtb3VzZSB3aGVlbCBldmVudCBhbmQgdGhhdCB3ZSBzaG91bGQgZGl2aWRlIHRoZSBkZWx0YXNcbiAgICAgICAgLy8gYnkgNDAgdG8gdHJ5IGFuZCBnZXQgYSBtb3JlIHVzYWJsZSBkZWx0YUZhY3Rvci5cbiAgICAgICAgLy8gU2lkZSBub3RlLCB0aGlzIGFjdHVhbGx5IGltcGFjdHMgdGhlIHJlcG9ydGVkIHNjcm9sbCBkaXN0YW5jZVxuICAgICAgICAvLyBpbiBvbGRlciBicm93c2VycyBhbmQgY2FuIGNhdXNlIHNjcm9sbGluZyB0byBiZSBzbG93ZXIgdGhhbiBuYXRpdmUuXG4gICAgICAgIC8vIFR1cm4gdGhpcyBvZmYgYnkgc2V0dGluZyAkLmV2ZW50LnNwZWNpYWwubW91c2V3aGVlbC5zZXR0aW5ncy5hZGp1c3RPbGREZWx0YXMgdG8gZmFsc2UuXG4gICAgICAgIHJldHVybiBzcGVjaWFsLnNldHRpbmdzLmFkanVzdE9sZERlbHRhcyAmJiBvcmdFdmVudC50eXBlID09PSAnbW91c2V3aGVlbCcgJiYgYWJzRGVsdGEgJSAxMjAgPT09IDA7XG4gICAgfVxuXG59KSk7XG5cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4uL34vaW1wb3J0cy1sb2FkZXI/ZGVmaW5lPT5mYWxzZSEuLi9+L2pxdWVyeS1tb3VzZXdoZWVsL2pxdWVyeS5tb3VzZXdoZWVsLmpzXG4vLyBtb2R1bGUgaWQgPSA3MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBzdGF0cy5qcyAtIGh0dHA6Ly9naXRodWIuY29tL21yZG9vYi9zdGF0cy5qc1xuKGZ1bmN0aW9uKGYsZSl7XCJvYmplY3RcIj09PXR5cGVvZiBleHBvcnRzJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz1lKCk6XCJmdW5jdGlvblwiPT09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoZSk6Zi5TdGF0cz1lKCl9KSh0aGlzLGZ1bmN0aW9uKCl7dmFyIGY9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGEpe2MuYXBwZW5kQ2hpbGQoYS5kb20pO3JldHVybiBhfWZ1bmN0aW9uIHUoYSl7Zm9yKHZhciBkPTA7ZDxjLmNoaWxkcmVuLmxlbmd0aDtkKyspYy5jaGlsZHJlbltkXS5zdHlsZS5kaXNwbGF5PWQ9PT1hP1wiYmxvY2tcIjpcIm5vbmVcIjtsPWF9dmFyIGw9MCxjPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7Yy5zdHlsZS5jc3NUZXh0PVwicG9zaXRpb246Zml4ZWQ7dG9wOjA7bGVmdDowO2N1cnNvcjpwb2ludGVyO29wYWNpdHk6MC45O3otaW5kZXg6MTAwMDBcIjtjLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLGZ1bmN0aW9uKGEpe2EucHJldmVudERlZmF1bHQoKTtcbnUoKytsJWMuY2hpbGRyZW4ubGVuZ3RoKX0sITEpO3ZhciBrPShwZXJmb3JtYW5jZXx8RGF0ZSkubm93KCksZz1rLGE9MCxyPWUobmV3IGYuUGFuZWwoXCJGUFNcIixcIiMwZmZcIixcIiMwMDJcIikpLGg9ZShuZXcgZi5QYW5lbChcIk1TXCIsXCIjMGYwXCIsXCIjMDIwXCIpKTtpZihzZWxmLnBlcmZvcm1hbmNlJiZzZWxmLnBlcmZvcm1hbmNlLm1lbW9yeSl2YXIgdD1lKG5ldyBmLlBhbmVsKFwiTUJcIixcIiNmMDhcIixcIiMyMDFcIikpO3UoMCk7cmV0dXJue1JFVklTSU9OOjE2LGRvbTpjLGFkZFBhbmVsOmUsc2hvd1BhbmVsOnUsYmVnaW46ZnVuY3Rpb24oKXtrPShwZXJmb3JtYW5jZXx8RGF0ZSkubm93KCl9LGVuZDpmdW5jdGlvbigpe2ErKzt2YXIgYz0ocGVyZm9ybWFuY2V8fERhdGUpLm5vdygpO2gudXBkYXRlKGMtaywyMDApO2lmKGM+ZysxRTMmJihyLnVwZGF0ZSgxRTMqYS8oYy1nKSwxMDApLGc9YyxhPTAsdCkpe3ZhciBkPXBlcmZvcm1hbmNlLm1lbW9yeTt0LnVwZGF0ZShkLnVzZWRKU0hlYXBTaXplL1xuMTA0ODU3NixkLmpzSGVhcFNpemVMaW1pdC8xMDQ4NTc2KX1yZXR1cm4gY30sdXBkYXRlOmZ1bmN0aW9uKCl7az10aGlzLmVuZCgpfSxkb21FbGVtZW50OmMsc2V0TW9kZTp1fX07Zi5QYW5lbD1mdW5jdGlvbihlLGYsbCl7dmFyIGM9SW5maW5pdHksaz0wLGc9TWF0aC5yb3VuZCxhPWcod2luZG93LmRldmljZVBpeGVsUmF0aW98fDEpLHI9ODAqYSxoPTQ4KmEsdD0zKmEsdj0yKmEsZD0zKmEsbT0xNSphLG49NzQqYSxwPTMwKmEscT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO3Eud2lkdGg9cjtxLmhlaWdodD1oO3Euc3R5bGUuY3NzVGV4dD1cIndpZHRoOjgwcHg7aGVpZ2h0OjQ4cHhcIjt2YXIgYj1xLmdldENvbnRleHQoXCIyZFwiKTtiLmZvbnQ9XCJib2xkIFwiKzkqYStcInB4IEhlbHZldGljYSxBcmlhbCxzYW5zLXNlcmlmXCI7Yi50ZXh0QmFzZWxpbmU9XCJ0b3BcIjtiLmZpbGxTdHlsZT1sO2IuZmlsbFJlY3QoMCwwLHIsaCk7Yi5maWxsU3R5bGU9ZjtiLmZpbGxUZXh0KGUsdCx2KTtcbmIuZmlsbFJlY3QoZCxtLG4scCk7Yi5maWxsU3R5bGU9bDtiLmdsb2JhbEFscGhhPS45O2IuZmlsbFJlY3QoZCxtLG4scCk7cmV0dXJue2RvbTpxLHVwZGF0ZTpmdW5jdGlvbihoLHcpe2M9TWF0aC5taW4oYyxoKTtrPU1hdGgubWF4KGssaCk7Yi5maWxsU3R5bGU9bDtiLmdsb2JhbEFscGhhPTE7Yi5maWxsUmVjdCgwLDAscixtKTtiLmZpbGxTdHlsZT1mO2IuZmlsbFRleHQoZyhoKStcIiBcIitlK1wiIChcIitnKGMpK1wiLVwiK2coaykrXCIpXCIsdCx2KTtiLmRyYXdJbWFnZShxLGQrYSxtLG4tYSxwLGQsbSxuLWEscCk7Yi5maWxsUmVjdChkK24tYSxtLGEscCk7Yi5maWxsU3R5bGU9bDtiLmdsb2JhbEFscGhhPS45O2IuZmlsbFJlY3QoZCtuLWEsbSxhLGcoKDEtaC93KSpwKSl9fX07cmV0dXJuIGZ9KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4uL34vc3RhdHMuanMvYnVpbGQvc3RhdHMubWluLmpzXG4vLyBtb2R1bGUgaWQgPSA3M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9